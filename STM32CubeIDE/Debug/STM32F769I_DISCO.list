
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020424  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bd4  08020624  08020624  00030624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000020  080241f8  080241f8  000341f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08024218  08024218  000d4b74  2**0
                  CONTENTS
  5 .ARM          00000008  08024218  08024218  00034218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08024220  08024220  000d4b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08024220  08024220  00034220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802423c  0802423c  0003423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  08024244  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  08024394  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001b468  20009750  0802d994  00049750  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20024bb8  0802d994  00054bb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000d4b74  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00073740  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00011314  90073740  90073740  000c3740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000120  90084a54  90084a54  000d4a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  000e0000  2**2
                  ALLOC
 18 .debug_line   000598c2  00000000  00000000  000d4ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000ba610  00000000  00000000  0012e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014d62  00000000  00000000  001e8a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000030f8  00000000  00000000  001fd7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00151d47  00000000  00000000  002008d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00005998  00000000  00000000  00352618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003d4a3  00000000  00000000  00357fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  00395453  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00009304  00000000  00000000  00395524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    000378e2  00000000  00000000  0039e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	0802060c 	.word	0x0802060c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	0802060c 	.word	0x0802060c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr  r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800060e:	f005 fd9f 	bl	8006150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f01e ff81 	bl	801f518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f002 fcd7 	bl	8002fc8 <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800061c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000620:	08024244 	.word	0x08024244
  ldr  r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000628:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 800062c:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 8000630:	20024bb8 	.word	0x20024bb8

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>

08000636 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000636:	4770      	bx	lr

08000638 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000638:	f001 bc7e 	b.w	8001f38 <touchgfx_init>

0800063c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800063c:	f001 bcec 	b.w	8002018 <touchgfx_taskEntry>

08000640 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <BSP_PB_Init+0x60>)
 8000642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000644:	f042 0201 	orr.w	r2, r2, #1
    {
 8000648:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
    {
 800064c:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000658:	b959      	cbnz	r1, 8000672 <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 800065a:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 800065c:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000660:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000664:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000666:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000668:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800066a:	f006 fd5f 	bl	800712c <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 800066e:	b006      	add	sp, #24
 8000670:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 8000672:	2901      	cmp	r1, #1
 8000674:	d1fb      	bne.n	800066e <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000676:	2400      	movs	r4, #0
 8000678:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 800067a:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800067c:	a901      	add	r1, sp, #4
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000680:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000684:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000688:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800068a:	f006 fd4f 	bl	800712c <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800068e:	4622      	mov	r2, r4
 8000690:	210f      	movs	r1, #15
 8000692:	2006      	movs	r0, #6
 8000694:	f005 fdca 	bl	800622c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000698:	2006      	movs	r0, #6
 800069a:	f005 fdf9 	bl	8006290 <HAL_NVIC_EnableIRQ>
    }
 800069e:	e7e6      	b.n	800066e <BSP_PB_Init+0x2e>
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80006a8:	2100      	movs	r1, #0
{
 80006aa:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80006ac:	4608      	mov	r0, r1
 80006ae:	f7ff ffc7 	bl	8000640 <BSP_PB_Init>
}
 80006b2:	bd08      	pop	{r3, pc}

080006b4 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80006b4:	2101      	movs	r1, #1
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <BSP_PB_GetState+0xc>)
    {
 80006b8:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80006ba:	f006 febd 	bl	8007438 <HAL_GPIO_ReadPin>
    }
 80006be:	bd08      	pop	{r3, pc}
 80006c0:	40020000 	.word	0x40020000

080006c4 <_ZN8touchgfx7Buttons6sampleEv>:
{
 80006c4:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fff4 	bl	80006b4 <BSP_PB_GetState>
}
 80006cc:	bd08      	pop	{r3, pc}

080006ce <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80006ce:	6840      	ldr	r0, [r0, #4]
    }
 80006d0:	4770      	bx	lr

080006d2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80006d2:	6041      	str	r1, [r0, #4]
    }
 80006d4:	4770      	bx	lr
	...

080006d8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80006d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80006dc:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80006e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e4:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 80006ec:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80006f0:	430a      	orrs	r2, r1
 80006f2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	f042 0201 	orr.w	r2, r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	4770      	bx	lr
 8000700:	e0001000 	.word	0xe0001000
 8000704:	c5acce55 	.word	0xc5acce55

08000708 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000708:	1a51      	subs	r1, r2, r1
 800070a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 800070e:	fbb1 f0f3 	udiv	r0, r1, r3
 8000712:	4770      	bx	lr

08000714 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000716:	6858      	ldr	r0, [r3, #4]
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e0001000 	.word	0xe0001000

08000720 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000720:	4770      	bx	lr

08000722 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	210c      	movs	r1, #12
 8000728:	f01e fe7d 	bl	801f426 <_ZdlPvj>
 800072c:	4620      	mov	r0, r4
 800072e:	bd10      	pop	{r4, pc}

08000730 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000730:	6803      	ldr	r3, [r0, #0]
{
 8000732:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000734:	691b      	ldr	r3, [r3, #16]
{
 8000736:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000738:	b131      	cbz	r1, 8000748 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800073a:	4798      	blx	r3
 800073c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800073e:	6863      	ldr	r3, [r4, #4]
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	4418      	add	r0, r3
 8000744:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000746:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000748:	4798      	blx	r3
 800074a:	60a0      	str	r0, [r4, #8]
}
 800074c:	e7fb      	b.n	8000746 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

0800074e <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 800074e:	4770      	bx	lr

08000750 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000750:	4770      	bx	lr
	...

08000754 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000754:	b508      	push	{r3, lr}
    Buttons::init();
 8000756:	f7ff ffa7 	bl	80006a8 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 800075a:	4b02      	ldr	r3, [pc, #8]	; (8000764 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bd08      	pop	{r3, pc}
 8000762:	bf00      	nop
 8000764:	2000976c 	.word	0x2000976c

08000768 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 800076c:	f7ff ffaa 	bl	80006c4 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000772:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000774:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000776:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000778:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 800077a:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 800077e:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000780:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000782:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000784:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000786:	d00a      	beq.n	800079e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000788:	f016 0001 	ands.w	r0, r6, #1
 800078c:	d007      	beq.n	800079e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 800078e:	f011 0001 	ands.w	r0, r1, #1
 8000792:	d004      	beq.n	800079e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000794:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000796:	bf56      	itet	pl
 8000798:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 800079a:	2000      	movmi	r0, #0
        key = 1;
 800079c:	7028      	strbpl	r0, [r5, #0]
}
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	2000976c 	.word	0x2000976c

080007a4 <_ZN8touchgfx10KeySamplerD0Ev>:
 80007a4:	b510      	push	{r4, lr}
 80007a6:	4604      	mov	r4, r0
 80007a8:	2104      	movs	r1, #4
 80007aa:	f01e fe3c 	bl	801f426 <_ZdlPvj>
 80007ae:	4620      	mov	r0, r4
 80007b0:	bd10      	pop	{r4, pc}

080007b2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80007b2:	4770      	bx	lr

080007b4 <_ZN20STM32TouchControllerD0Ev>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	2104      	movs	r1, #4
 80007ba:	f01e fe34 	bl	801f426 <_ZdlPvj>
 80007be:	4620      	mov	r0, r4
 80007c0:	bd10      	pop	{r4, pc}

080007c2 <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 80007c2:	4770      	bx	lr

080007c4 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 80007c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80007c6:	2301      	movs	r3, #1
    {
 80007c8:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80007cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80007d4:	f10d 0217 	add.w	r2, sp, #23
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	460a      	mov	r2, r1
 80007dc:	4601      	mov	r1, r0
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <TS_IO_Write+0x34>)
 80007e0:	f007 f839 	bl	8007856 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 80007e4:	b120      	cbz	r0, 80007f0 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <TS_IO_Write+0x34>)
 80007e8:	f007 f81c 	bl	8007824 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80007ec:	f002 fbca 	bl	8002f84 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 80007f0:	b007      	add	sp, #28
 80007f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80007f6:	bf00      	nop
 80007f8:	2000eff4 	.word	0x2000eff4

080007fc <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 80007fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 80007fe:	2300      	movs	r3, #0
    {
 8000800:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000802:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000806:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800080a:	2301      	movs	r3, #1
 800080c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000810:	f10d 0117 	add.w	r1, sp, #23
 8000814:	9100      	str	r1, [sp, #0]
 8000816:	4601      	mov	r1, r0
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <TS_IO_Read+0x38>)
 800081a:	f007 f8d3 	bl	80079c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 800081e:	b120      	cbz	r0, 800082a <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <TS_IO_Read+0x38>)
 8000822:	f006 ffff 	bl	8007824 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000826:	f002 fbad 	bl	8002f84 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 800082a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800082e:	b007      	add	sp, #28
 8000830:	f85d fb04 	ldr.w	pc, [sp], #4
 8000834:	2000eff4 	.word	0x2000eff4

08000838 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800083a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800083e:	9200      	str	r2, [sp, #0]
 8000840:	460a      	mov	r2, r1
 8000842:	4601      	mov	r1, r0
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <TS_IO_ReadMultiple+0x2c>)
 8000846:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800084a:	2301      	movs	r3, #1
 800084c:	f007 f8ba 	bl	80079c4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000850:	4604      	mov	r4, r0
 8000852:	b120      	cbz	r0, 800085e <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <TS_IO_ReadMultiple+0x2c>)
 8000856:	f006 ffe5 	bl	8007824 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 800085a:	f002 fb93 	bl	8002f84 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 800085e:	b2a0      	uxth	r0, r4
 8000860:	b004      	add	sp, #16
 8000862:	bd10      	pop	{r4, pc}
 8000864:	2000eff4 	.word	0x2000eff4

08000868 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 800086a:	4d13      	ldr	r5, [pc, #76]	; (80008b8 <BSP_TS_Init+0x50>)
    {
 800086c:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 800086e:	4c13      	ldr	r4, [pc, #76]	; (80008bc <BSP_TS_Init+0x54>)
    {
 8000870:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	7820      	ldrb	r0, [r4, #0]
 8000876:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000878:	686b      	ldr	r3, [r5, #4]
 800087a:	2054      	movs	r0, #84	; 0x54
 800087c:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 800087e:	b2c0      	uxtb	r0, r0
 8000880:	2811      	cmp	r0, #17
 8000882:	d009      	beq.n	8000898 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000884:	686b      	ldr	r3, [r5, #4]
 8000886:	2070      	movs	r0, #112	; 0x70
 8000888:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 800088a:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800088c:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 800088e:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000890:	2811      	cmp	r0, #17
 8000892:	d003      	beq.n	800089c <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000894:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000898:	2354      	movs	r3, #84	; 0x54
 800089a:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 800089e:	42be      	cmp	r6, r7
 80008a0:	bf34      	ite	cc
 80008a2:	2601      	movcc	r6, #1
 80008a4:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 80008a6:	7820      	ldrb	r0, [r4, #0]
 80008a8:	701e      	strb	r6, [r3, #0]
 80008aa:	68ab      	ldr	r3, [r5, #8]
 80008ac:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 80008ae:	7820      	ldrb	r0, [r4, #0]
 80008b0:	68eb      	ldr	r3, [r5, #12]
 80008b2:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 80008b4:	2000      	movs	r0, #0
 80008b6:	e7ee      	b.n	8000896 <BSP_TS_Init+0x2e>
 80008b8:	20000038 	.word	0x20000038
 80008bc:	20009770 	.word	0x20009770
 80008c0:	20009771 	.word	0x20009771

080008c4 <_ZN20STM32TouchController4initEv>:
{
 80008c4:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 80008c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80008ca:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008ce:	f7ff ffcb 	bl	8000868 <BSP_TS_Init>
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_ZN20STM32TouchController4initEv+0x2c>)
 80008d4:	b910      	cbnz	r0, 80008dc <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1fb      	bne.n	80008da <_ZN20STM32TouchController4initEv+0x16>
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <_ZN20STM32TouchController4initEv+0x30>)
 80008e4:	216a      	movs	r1, #106	; 0x6a
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <_ZN20STM32TouchController4initEv+0x34>)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <_ZN20STM32TouchController4initEv+0x38>)
 80008ea:	f01e fdcb 	bl	801f484 <__assert_func>
 80008ee:	bf00      	nop
 80008f0:	20009772 	.word	0x20009772
 80008f4:	080206a8 	.word	0x080206a8
 80008f8:	080206bb 	.word	0x080206bb
 80008fc:	080206e5 	.word	0x080206e5

08000900 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000904:	4a35      	ldr	r2, [pc, #212]	; (80009dc <BSP_TS_GetState+0xdc>)
{
 8000906:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000908:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80009ec <BSP_TS_GetState+0xec>
{
 800090c:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 800090e:	7810      	ldrb	r0, [r2, #0]
 8000910:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000914:	4798      	blx	r3
 8000916:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 8000918:	2800      	cmp	r0, #0
 800091a:	d05a      	beq.n	80009d2 <BSP_TS_GetState+0xd2>
 800091c:	4e30      	ldr	r6, [pc, #192]	; (80009e0 <BSP_TS_GetState+0xe0>)
 800091e:	f107 0902 	add.w	r9, r7, #2
 8000922:	4d30      	ldr	r5, [pc, #192]	; (80009e4 <BSP_TS_GetState+0xe4>)
 8000924:	f10d 0b0c 	add.w	fp, sp, #12
 8000928:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 800092a:	f04f 0800 	mov.w	r8, #0
 800092e:	783b      	ldrb	r3, [r7, #0]
 8000930:	4543      	cmp	r3, r8
 8000932:	d94e      	bls.n	80009d2 <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000934:	4829      	ldr	r0, [pc, #164]	; (80009dc <BSP_TS_GetState+0xdc>)
 8000936:	465a      	mov	r2, fp
 8000938:	4621      	mov	r1, r4
 800093a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800093e:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000940:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000944:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <BSP_TS_GetState+0xe8>)
 8000948:	46b4      	mov	ip, r6
 800094a:	46ae      	mov	lr, r5
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3604      	adds	r6, #4
 8000950:	3504      	adds	r5, #4
 8000952:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000954:	bf41      	itttt	mi
 8000956:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000958:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 800095c:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000960:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 8000962:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000964:	bf41      	itttt	mi
 8000966:	8822      	ldrhmi	r2, [r4, #0]
 8000968:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 800096c:	3203      	addmi	r2, #3
 800096e:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 8000970:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000972:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000976:	bf48      	it	mi
 8000978:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800097c:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000980:	bf42      	ittt	mi
 8000982:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000986:	3301      	addmi	r3, #1
 8000988:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800098c:	b293      	uxth	r3, r2
 800098e:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000990:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000994:	bf8c      	ite	hi
 8000996:	1ac3      	subhi	r3, r0, r3
 8000998:	1a1b      	subls	r3, r3, r0
 800099a:	b29b      	uxth	r3, r3
 800099c:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800099e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 80009a6:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 80009a8:	bf8c      	ite	hi
 80009aa:	1a8a      	subhi	r2, r1, r2
 80009ac:	1a52      	subls	r2, r2, r1
 80009ae:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 80009b0:	441a      	add	r2, r3
 80009b2:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 80009b4:	bfc8      	it	gt
 80009b6:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 80009ba:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 80009be:	bfc8      	it	gt
 80009c0:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 80009c4:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 80009c8:	f8de 3000 	ldr.w	r3, [lr]
 80009cc:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009d0:	e7ad      	b.n	800092e <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 80009d2:	2000      	movs	r0, #0
 80009d4:	b005      	add	sp, #20
 80009d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009da:	bf00      	nop
 80009dc:	20009770 	.word	0x20009770
 80009e0:	20009774 	.word	0x20009774
 80009e4:	2000977c 	.word	0x2000977c
 80009e8:	20009771 	.word	0x20009771
 80009ec:	20000038 	.word	0x20000038

080009f0 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 80009f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 80009f4:	460e      	mov	r6, r1
 80009f6:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 80009f8:	781c      	ldrb	r4, [r3, #0]
 80009fa:	b15c      	cbz	r4, 8000a14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 80009fc:	a801      	add	r0, sp, #4
 80009fe:	f7ff ff7f 	bl	8000900 <BSP_TS_GetState>
        if (state.touchDetected)
 8000a02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a06:	b143      	cbz	r3, 8000a1a <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000a08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a0c:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000a0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000a12:	602b      	str	r3, [r5, #0]
}
 8000a14:	4620      	mov	r0, r4
 8000a16:	b004      	add	sp, #16
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	e7fa      	b.n	8000a14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000a1e:	bf00      	nop
 8000a20:	20009772 	.word	0x20009772

08000a24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000a24:	2803      	cmp	r0, #3
 8000a26:	d823      	bhi.n	8000a70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000a28:	e8df f000 	tbb	[pc, r0]
 8000a2c:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000a3e:	f006 bd01 	b.w	8007444 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	0952      	lsrs	r2, r2, #5
 8000a4e:	e7f5      	b.n	8000a3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a52:	2102      	movs	r1, #2
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	0952      	lsrs	r2, r2, #5
 8000a5e:	e7ee      	b.n	8000a3e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	0952      	lsrs	r2, r2, #5
 8000a6e:	e7e6      	b.n	8000a3e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20009784 	.word	0x20009784
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40022400 	.word	0x40022400
 8000a80:	40021400 	.word	0x40021400

08000a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000a84:	2803      	cmp	r0, #3
 8000a86:	d823      	bhi.n	8000ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000a88:	e8df f000 	tbb	[pc, r0]
 8000a8c:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	3a00      	subs	r2, #0
 8000a98:	bf18      	it	ne
 8000a9a:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000a9c:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000a9e:	f006 bcd1 	b.w	8007444 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	3a00      	subs	r2, #0
 8000aaa:	bf18      	it	ne
 8000aac:	2201      	movne	r2, #1
 8000aae:	e7f5      	b.n	8000a9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	3a00      	subs	r2, #0
 8000aba:	bf18      	it	ne
 8000abc:	2201      	movne	r2, #1
 8000abe:	e7ee      	b.n	8000a9e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	3a00      	subs	r2, #0
 8000aca:	bf18      	it	ne
 8000acc:	2201      	movne	r2, #1
 8000ace:	e7e6      	b.n	8000a9e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20009784 	.word	0x20009784
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40022400 	.word	0x40022400
 8000ae0:	40021400 	.word	0x40021400

08000ae4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000ae4:	2803      	cmp	r0, #3
 8000ae6:	d80f      	bhi.n	8000b08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000ae8:	e8df f000 	tbb	[pc, r0]
 8000aec:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000af0:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000af4:	f006 bcab 	b.w	800744e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	e7fa      	b.n	8000af2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000afc:	2102      	movs	r1, #2
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000b00:	e7f8      	b.n	8000af4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000b06:	e7f5      	b.n	8000af4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40022400 	.word	0x40022400
 8000b14:	40021400 	.word	0x40021400

08000b18 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000b18:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000b1a:	2803      	cmp	r0, #3
 8000b1c:	d813      	bhi.n	8000b46 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000b1e:	e8df f000 	tbb	[pc, r0]
 8000b22:	0a02      	.short	0x0a02
 8000b24:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b26:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b2a:	f006 fc85 	bl	8007438 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000b2e:	1e43      	subs	r3, r0, #1
 8000b30:	4258      	negs	r0, r3
 8000b32:	4158      	adcs	r0, r3
 8000b34:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	e7f6      	b.n	8000b28 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000b3e:	e7f4      	b.n	8000b2a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000b44:	e7f1      	b.n	8000b2a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000b46:	2000      	movs	r0, #0
 8000b48:	e7f1      	b.n	8000b2e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000b4a:	bf00      	nop
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40022400 	.word	0x40022400
 8000b54:	40021400 	.word	0x40021400

08000b58 <_ZN8touchgfx4GPIO4initEv>:
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4d08      	ldr	r5, [pc, #32]	; (8000b7c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000b5c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000b5e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000b60:	b2e0      	uxtb	r0, r4
 8000b62:	f7ff ffd9 	bl	8000b18 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000b66:	b118      	cbz	r0, 8000b70 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000b6c:	bf18      	it	ne
 8000b6e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000b70:	3401      	adds	r4, #1
 8000b72:	3504      	adds	r5, #4
 8000b74:	2c05      	cmp	r4, #5
 8000b76:	d1f3      	bne.n	8000b60 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20009784 	.word	0x20009784

08000b80 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000b80:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000b82:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000b86:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000b8a:	4770      	bx	lr

08000b8c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000b90:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000b92:	3900      	subs	r1, #0
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000b96:	bf18      	it	ne
 8000b98:	2101      	movne	r1, #1
 8000b9a:	7019      	strb	r1, [r3, #0]
    }
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20024913 	.word	0x20024913

08000ba4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000ba8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000baa:	b10b      	cbz	r3, 8000bb0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000bac:	4608      	mov	r0, r1
 8000bae:	4718      	bx	r3
        }
    }
 8000bb0:	4770      	bx	lr

08000bb2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000bb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bb6:	4770      	bx	lr

08000bb8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000bb8:	6840      	ldr	r0, [r0, #4]
 8000bba:	6803      	ldr	r3, [r0, #0]
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4718      	bx	r3

08000bc0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20009794 	.word	0x20009794

08000bcc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000bd0:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	4c10      	ldr	r4, [pc, #64]	; (8000c18 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000bd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bde:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000be2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000be6:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bea:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bee:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bf0:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bf4:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bf6:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bfa:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bfc:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000c00:	d2f9      	bcs.n	8000bf6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000c02:	3b20      	subs	r3, #32
 8000c04:	f113 0f20 	cmn.w	r3, #32
 8000c08:	d1f2      	bne.n	8000bf0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c0e:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000c12:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000c14:	f001 baa2 	b.w	800215c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000c1c:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000c1e:	f001 fa57 	bl	80020d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000c28:	bd08      	pop	{r3, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000c34:	f001 fba6 	bl	8002384 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000c38:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000c3c:	b113      	cbz	r3, 8000c44 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000c3e:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
    }
}
 8000c44:	bd10      	pop	{r4, pc}
 8000c46:	bf00      	nop
 8000c48:	20000014 	.word	0x20000014

08000c4c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000c4c:	f001 ba49 	b.w	80020e2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000c50 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000c50:	b510      	push	{r4, lr}
 8000c52:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000c54:	f00d fa3a 	bl	800e0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000c64:	4718      	bx	r3

08000c66 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000c66:	f00c bc99 	b.w	800d59c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000c6a <_ZN11TouchGFXHALD0Ev>:
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	217c      	movs	r1, #124	; 0x7c
 8000c70:	f01e fbd9 	bl	801f426 <_ZdlPvj>
 8000c74:	4620      	mov	r0, r4
 8000c76:	bd10      	pop	{r4, pc}

08000c78 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000c7e:	f00c bcc9 	b.w	800d614 <_ZN8touchgfx3HAL10beginFrameEv>
 8000c82:	bf00      	nop
 8000c84:	20000014 	.word	0x20000014

08000c88 <_ZN11TouchGFXHAL10initializeEv>:
{
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4604      	mov	r4, r0
    GPIO::init();
 8000c8c:	f7ff ff64 	bl	8000b58 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000c90:	4d08      	ldr	r5, [pc, #32]	; (8000cb4 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000c92:	4620      	mov	r0, r4
 8000c94:	f001 fa3c 	bl	8002110 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000c98:	2300      	movs	r3, #0
    instrumentation.init();
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000ca0:	f7ff fd1a 	bl	80006d8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000ca4:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000ca6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000ca8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000cae:	6163      	str	r3, [r4, #20]
}
 8000cb0:	bd38      	pop	{r3, r4, r5, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000979c 	.word	0x2000979c
 8000cb8:	200097a8 	.word	0x200097a8

08000cbc <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000cbc:	6803      	ldr	r3, [r0, #0]
{
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cc6:	4798      	blx	r3
    enableInterrupts();
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	4620      	mov	r0, r4
 8000ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cce:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000cd0:	f000 fefa 	bl	8001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cda:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2329      	movs	r3, #41	; 0x29
 8000ce0:	2215      	movs	r2, #21
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000ce4:	9100      	str	r1, [sp, #0]
 8000ce6:	f006 f99a 	bl	800701e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000cea:	f000 feed 	bl	8001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf4:	4798      	blx	r3
    for (;;)
 8000cf6:	e7f8      	b.n	8000cea <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000cf8:	2000efd8 	.word	0x2000efd8

08000cfc <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000cfc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000cfe:	f001 f9df 	bl	80020c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2107      	movs	r1, #7
 8000d06:	205a      	movs	r0, #90	; 0x5a
 8000d08:	f005 fa90 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2107      	movs	r1, #7
 8000d10:	2062      	movs	r0, #98	; 0x62
}
 8000d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000d16:	f005 ba89 	b.w	800622c <HAL_NVIC_SetPriority>

08000d1a <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8000d1a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8000d1e:	b11b      	cbz	r3, 8000d28 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8000d20:	6840      	ldr	r0, [r0, #4]
 8000d22:	6803      	ldr	r3, [r0, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4718      	bx	r3
    }
 8000d28:	4618      	mov	r0, r3
 8000d2a:	4770      	bx	lr

08000d2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000d2c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000d32:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000d34:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000d38:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000d3a:	428c      	cmp	r4, r1
 8000d3c:	d009      	beq.n	8000d52 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000d3e:	b93a      	cbnz	r2, 8000d50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000d40:	490a      	ldr	r1, [pc, #40]	; (8000d6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000d44:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d46:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000d48:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000d4a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d4c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000d4e:	701a      	strb	r2, [r3, #0]
        }
    }
 8000d50:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d0fc      	beq.n	8000d50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000d58:	4904      	ldr	r1, [pc, #16]	; (8000d6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d5a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000d5c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d5e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000d60:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000d62:	2200      	movs	r2, #0
 8000d64:	e7f3      	b.n	8000d4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000d66:	bf00      	nop
 8000d68:	2002490c 	.word	0x2002490c
 8000d6c:	2002490a 	.word	0x2002490a
 8000d70:	20024908 	.word	0x20024908

08000d74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000d74:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d803      	bhi.n	8000d86 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d905      	bls.n	8000d92 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000d88:	219e      	movs	r1, #158	; 0x9e
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000d8e:	f01e fb79 	bl	801f484 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000d94:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000d98:	801a      	strh	r2, [r3, #0]
    }
 8000d9a:	bd08      	pop	{r3, pc}
 8000d9c:	20024908 	.word	0x20024908
 8000da0:	2002490a 	.word	0x2002490a
 8000da4:	0802074c 	.word	0x0802074c
 8000da8:	080207af 	.word	0x080207af
 8000dac:	080207f2 	.word	0x080207f2
 8000db0:	2002490e 	.word	0x2002490e
 8000db4:	20024910 	.word	0x20024910

08000db8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000db8:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000dba:	f001 fb15 	bl	80023e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bd08      	pop	{r3, pc}
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	460d      	mov	r5, r1
 8000dd8:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000ddc:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000dde:	b935      	cbnz	r5, 8000dee <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000de2:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000dea:	f01e fb4b 	bl	801f484 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000dee:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000df2:	3a00      	subs	r2, #0
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000df6:	bf18      	it	ne
 8000df8:	2201      	movne	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000dfc:	6803      	ldr	r3, [r0, #0]
}
 8000dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e06:	4718      	bx	r3
 8000e08:	20009794 	.word	0x20009794
 8000e0c:	08020837 	.word	0x08020837
 8000e10:	0802086f 	.word	0x0802086f
 8000e14:	080207f2 	.word	0x080207f2
 8000e18:	20024912 	.word	0x20024912

08000e1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8000e1c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000e20:	60c3      	str	r3, [r0, #12]
 8000e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e26:	2300      	movs	r3, #0
 8000e28:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8000e2e:	8503      	strh	r3, [r0, #40]	; 0x28
 8000e30:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000e34:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000e36:	8603      	strh	r3, [r0, #48]	; 0x30
 8000e38:	6603      	str	r3, [r0, #96]	; 0x60
 8000e3a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8000e3e:	6703      	str	r3, [r0, #112]	; 0x70
 8000e40:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8000e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	6742      	str	r2, [r0, #116]	; 0x74
 8000e4c:	2201      	movs	r2, #1
                           height)
 8000e4e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000e52:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000e56:	3520      	adds	r5, #32
 8000e58:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 8000e5c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000e60:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8000e64:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8000e68:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000e6c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8000e70:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8000e74:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8000e78:	b2ad      	uxth	r5, r5
        instance = this;
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e7c:	42b5      	cmp	r5, r6
        instance = this;
 8000e7e:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000e82:	8015      	strh	r5, [r2, #0]
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000e86:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e88:	bf28      	it	cs
 8000e8a:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e8e:	bf38      	it	cc
 8000e90:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e92:	8016      	strh	r6, [r2, #0]
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e96:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e9a:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000e9e:	7013      	strb	r3, [r2, #0]
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000ea2:	6003      	str	r3, [r0, #0]
}
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	bf00      	nop
 8000ea8:	01000001 	.word	0x01000001
 8000eac:	20024914 	.word	0x20024914
 8000eb0:	20024908 	.word	0x20024908
 8000eb4:	2002490e 	.word	0x2002490e
 8000eb8:	2002490a 	.word	0x2002490a
 8000ebc:	20024910 	.word	0x20024910
 8000ec0:	2002490c 	.word	0x2002490c
 8000ec4:	080208c8 	.word	0x080208c8

08000ec8 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000ec8:	f005 b98c 	b.w	80061e4 <HAL_Delay>

08000ecc <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000ecc:	2801      	cmp	r0, #1
    {
 8000ece:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000ed0:	d80a      	bhi.n	8000ee8 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000ed2:	784b      	ldrb	r3, [r1, #1]
 8000ed4:	2215      	movs	r2, #21
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <DSI_IO_WriteCmd+0x30>)
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	780b      	ldrb	r3, [r1, #0]
 8000edc:	2100      	movs	r1, #0
 8000ede:	f006 f89e 	bl	800701e <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000ee2:	b003      	add	sp, #12
 8000ee4:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000ee8:	9101      	str	r1, [sp, #4]
 8000eea:	2239      	movs	r2, #57	; 0x39
 8000eec:	5c0b      	ldrb	r3, [r1, r0]
 8000eee:	2100      	movs	r1, #0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <DSI_IO_WriteCmd+0x30>)
 8000ef6:	f006 f8a3 	bl	8007040 <HAL_DSI_LongWrite>
    }
 8000efa:	e7f2      	b.n	8000ee2 <DSI_IO_WriteCmd+0x16>
 8000efc:	2000efd8 	.word	0x2000efd8

08000f00 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000f02:	2302      	movs	r3, #2
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000f06:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000f0a:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f0c:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000f0e:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f10:	4620      	mov	r0, r4
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	2244      	movs	r2, #68	; 0x44
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	2239      	movs	r2, #57	; 0x39
 8000f1a:	f006 f891 	bl	8007040 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2335      	movs	r3, #53	; 0x35
 8000f22:	462a      	mov	r2, r5
 8000f24:	4620      	mov	r0, r4
 8000f26:	9100      	str	r1, [sp, #0]
 8000f28:	f006 f879 	bl	800701e <HAL_DSI_ShortWrite>
    }
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd30      	pop	{r4, r5, pc}
 8000f30:	200097ac 	.word	0x200097ac
 8000f34:	2000efd8 	.word	0x2000efd8

08000f38 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000f38:	b507      	push	{r0, r1, r2, lr}
 8000f3a:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8000f3c:	f7ff ffe0 	bl	8000f00 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000f42:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f44:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000f52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8000f5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f62:	f042 0202 	orr.w	r2, r2, #2
 8000f66:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000f70:	f043 0303 	orr.w	r3, r3, #3
 8000f74:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000f76:	b003      	add	sp, #12
 8000f78:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f7c:	f001 b8b0 	b.w	80020e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 8000f80:	2000efd8 	.word	0x2000efd8
 8000f84:	2000f098 	.word	0x2000f098

08000f88 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <LCD_SetUpdateRegion+0x20>)
    {
 8000f8a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8000f8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f90:	232a      	movs	r3, #42	; 0x2a
 8000f92:	2239      	movs	r2, #57	; 0x39
 8000f94:	2100      	movs	r1, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	9001      	str	r0, [sp, #4]
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <LCD_SetUpdateRegion+0x24>)
 8000f9e:	f006 f84f 	bl	8007040 <HAL_DSI_LongWrite>
    }
 8000fa2:	b003      	add	sp, #12
 8000fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	2000efd8 	.word	0x2000efd8

08000fb0 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8000fb0:	b570      	push	{r4, r5, r6, lr}
        return instance;
 8000fb2:	4d15      	ldr	r5, [pc, #84]	; (8001008 <HAL_DSI_TearingEffectCallback+0x58>)
 8000fb4:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fd34 	bl	8000a24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8000fbc:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8000fbe:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8000fc8:	f000 fd72 	bl	8001ab0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8000fce:	6828      	ldr	r0, [r5, #0]
 8000fd0:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8000fd4:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8000fd8:	b123      	cbz	r3, 8000fe4 <HAL_DSI_TearingEffectCallback+0x34>
 8000fda:	4d0d      	ldr	r5, [pc, #52]	; (8001010 <HAL_DSI_TearingEffectCallback+0x60>)
 8000fdc:	782b      	ldrb	r3, [r5, #0]
 8000fde:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8000fe2:	b123      	cbz	r3, 8000fee <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000fe4:	2000      	movs	r0, #0
        }
    }
 8000fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000fea:	f7ff bd4b 	b.w	8000a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8000fee:	f00d f86d 	bl	800e0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 8000ff4:	4630      	mov	r0, r6
            updateRegion = 0;
 8000ff6:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8000ff8:	f7ff ffc6 	bl	8000f88 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f005 fffe 	bl	8006ffe <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001002:	2301      	movs	r3, #1
 8001004:	702b      	strb	r3, [r5, #0]
    }
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	20024914 	.word	0x20024914
 800100c:	20000014 	.word	0x20000014
 8001010:	200097ae 	.word	0x200097ae
 8001014:	20009798 	.word	0x20009798

08001018 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	3201      	adds	r2, #1
    {
 800101e:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 8001020:	2a03      	cmp	r2, #3
        updateRegion++;
 8001022:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001024:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 8001026:	4605      	mov	r5, r0
 8001028:	4c31      	ldr	r4, [pc, #196]	; (80010f0 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 800102e:	dc2e      	bgt.n	800108e <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001030:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001034:	f020 0008 	bic.w	r0, r0, #8
 8001038:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 800103c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001040:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 8001044:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001046:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 800104a:	bf0c      	ite	eq
 800104c:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 800104e:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 8001050:	4928      	ldr	r1, [pc, #160]	; (80010f4 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 8001052:	3302      	adds	r3, #2
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 800105a:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 800105e:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001060:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800106a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800106e:	2301      	movs	r3, #1
 8001070:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 8001072:	f7ff ff89 	bl	8000f88 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 8001078:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 800107a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800107e:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 8001082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 8001086:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 800108a:	f005 bfb8 	b.w	8006ffe <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800108e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 8001092:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001094:	f022 0208 	bic.w	r2, r2, #8
 8001098:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800109c:	4a18      	ldr	r2, [pc, #96]	; (8001100 <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 800109e:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80010a2:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80010a4:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80010a8:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_DSI_EndOfRefreshCallback+0xec>)
 80010ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80010b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80010b6:	2201      	movs	r2, #1
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 80010ba:	f7ff ff65 	bl	8000f88 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 80010be:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80010c2:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80010cc:	f7ff fcda 	bl	8000a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
        return instance;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_DSI_EndOfRefreshCallback+0xf4>)
 80010d8:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 80010da:	b120      	cbz	r0, 80010e6 <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 80010dc:	6803      	ldr	r3, [r0, #0]
    }
 80010de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4718      	bx	r3
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	20009798 	.word	0x20009798
 80010ec:	20009794 	.word	0x20009794
 80010f0:	40016c00 	.word	0x40016c00
 80010f4:	40016800 	.word	0x40016800
 80010f8:	00ca01e3 	.word	0x00ca01e3
 80010fc:	06800193 	.word	0x06800193
 8001100:	00ca01e2 	.word	0x00ca01e2
 8001104:	00ca0003 	.word	0x00ca0003
 8001108:	200097ae 	.word	0x200097ae
 800110c:	20024914 	.word	0x20024914

08001110 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001110:	4601      	mov	r1, r0
 8001112:	b508      	push	{r3, lr}
        return instance;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <IdleTaskHook+0x14>)
 8001116:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001118:	b101      	cbz	r1, 800111c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800111a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800111c:	f00c fff0 	bl	800e100 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001120:	2001      	movs	r0, #1
 8001122:	bd08      	pop	{r3, pc}
 8001124:	20024914 	.word	0x20024914

08001128 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <_GLOBAL__sub_I_displayRefreshing+0x18>)
 800112a:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <_GLOBAL__sub_I_displayRefreshing+0x24>)
 8001138:	6003      	str	r3, [r0, #0]
        init();
 800113a:	f7ff bb0b 	b.w	8000754 <_ZN8touchgfx10KeySampler4initEv>
 800113e:	bf00      	nop
 8001140:	2000979c 	.word	0x2000979c
 8001144:	200097a8 	.word	0x200097a8
 8001148:	0802066c 	.word	0x0802066c
 800114c:	08020694 	.word	0x08020694

08001150 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8001150:	6940      	ldr	r0, [r0, #20]
 8001152:	4770      	bx	lr

08001154 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001154:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001158:	4770      	bx	lr

0800115a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800115a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800115c:	b923      	cbnz	r3, 8001168 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800115e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001160:	3800      	subs	r0, #0
 8001162:	bf18      	it	ne
 8001164:	2001      	movne	r0, #1
 8001166:	4770      	bx	lr
 8001168:	2001      	movs	r0, #1
}
 800116a:	4770      	bx	lr

0800116c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800116c:	6880      	ldr	r0, [r0, #8]
 800116e:	4770      	bx	lr

08001170 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8001170:	4770      	bx	lr

08001172 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8001172:	3004      	adds	r0, #4
{
 8001174:	b510      	push	{r4, lr}
 8001176:	460c      	mov	r4, r1
    *data = videoInfo;
 8001178:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800117a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800117e:	bd10      	pop	{r4, pc}

08001180 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8001180:	4770      	bx	lr
	...

08001184 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001184:	b508      	push	{r3, lr}
    assert(0);
 8001186:	4a03      	ldr	r2, [pc, #12]	; (8001194 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001188:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001190:	f01e f978 	bl	801f484 <__assert_func>
 8001194:	08020998 	.word	0x08020998
 8001198:	080230ff 	.word	0x080230ff
 800119c:	080209f3 	.word	0x080209f3

080011a0 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	4604      	mov	r4, r0
 80011a4:	2144      	movs	r1, #68	; 0x44
 80011a6:	f01e f93e 	bl	801f426 <_ZdlPvj>
 80011aa:	4620      	mov	r0, r4
 80011ac:	bd10      	pop	{r4, pc}
	...

080011b0 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80011b0:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80011b2:	2500      	movs	r5, #0
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80011b6:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80011b8:	6003      	str	r3, [r0, #0]
 80011ba:	63c5      	str	r5, [r0, #60]	; 0x3c
 80011bc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 80011c0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80011c4:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80011c8:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 80011cc:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 80011d0:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 80011d4:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 80011d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 80011dc:	f001 fcfc 	bl	8002bd8 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 80011e0:	462a      	mov	r2, r5
 80011e2:	4629      	mov	r1, r5
 80011e4:	2001      	movs	r0, #1
 80011e6:	f009 fa0d 	bl	800a604 <osSemaphoreNew>
 80011ea:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 80011ec:	6018      	str	r0, [r3, #0]
}
 80011ee:	4620      	mov	r0, r4
 80011f0:	bd38      	pop	{r3, r4, r5, pc}
 80011f2:	bf00      	nop
 80011f4:	08020c7c 	.word	0x08020c7c
 80011f8:	200097f4 	.word	0x200097f4

080011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80011fc:	b420      	push	{r5}
 80011fe:	460d      	mov	r5, r1
 8001200:	4611      	mov	r1, r2
 8001202:	461a      	mov	r2, r3
    if (reader != 0)
 8001204:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001206:	b13b      	cbz	r3, 8001218 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001208:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800120a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800120c:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 800120e:	4428      	add	r0, r5
}
 8001210:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8001214:	f01e bdf0 	b.w	801fdf8 <strncmp>
        src = (const char*)movieData + offset;
 8001218:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800121a:	e7f8      	b.n	800120e <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

0800121c <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800121c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800121e:	b510      	push	{r4, lr}
    if (reader != 0)
 8001220:	b173      	cbz	r3, 8001240 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8001222:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001224:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8001226:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001228:	1853      	adds	r3, r2, r1
 800122a:	5c52      	ldrb	r2, [r2, r1]
 800122c:	7898      	ldrb	r0, [r3, #2]
 800122e:	785c      	ldrb	r4, [r3, #1]
 8001230:	0400      	lsls	r0, r0, #16
 8001232:	78db      	ldrb	r3, [r3, #3]
 8001234:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8001238:	4310      	orrs	r0, r2
 800123a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800123e:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8001240:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001242:	5858      	ldr	r0, [r3, r1]
 8001244:	e7fb      	b.n	800123e <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

08001246 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8001246:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001248:	b143      	cbz	r3, 800125c <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800124a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800124c:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800124e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001250:	185a      	adds	r2, r3, r1
 8001252:	5c58      	ldrb	r0, [r3, r1]
 8001254:	7852      	ldrb	r2, [r2, #1]
 8001256:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800125a:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 800125c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800125e:	5a58      	ldrh	r0, [r3, r1]
}
 8001260:	4770      	bx	lr
	...

08001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	4604      	mov	r4, r0
    if (reader != 0)
 8001268:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 800126a:	460d      	mov	r5, r1
 800126c:	4616      	mov	r6, r2
    if (reader != 0)
 800126e:	b1d8      	cbz	r0, 80012a8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8001270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001272:	4293      	cmp	r3, r2
 8001274:	d208      	bcs.n	8001288 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001276:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800127a:	21ae      	movs	r1, #174	; 0xae
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800127e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001284:	f01e f8fe 	bl	801f484 <__assert_func>
        reader->seek(offset);
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800128e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001290:	4632      	mov	r2, r6
 8001292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4798      	blx	r3
 800129a:	b910      	cbnz	r0, 80012a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 800129c:	230d      	movs	r3, #13
 800129e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 80012a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 80012a4:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80012a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80012aa:	4408      	add	r0, r1
 80012ac:	e7fb      	b.n	80012a6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80012ae:	bf00      	nop
 80012b0:	08020a5e 	.word	0x08020a5e
 80012b4:	080209f3 	.word	0x080209f3
 80012b8:	08020a4b 	.word	0x08020a4b

080012bc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80012bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012c0:	6943      	ldr	r3, [r0, #20]
{
 80012c2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012c4:	b92b      	cbnz	r3, 80012d2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80012c8:	21f4      	movs	r1, #244	; 0xf4
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80012cc:	4822      	ldr	r0, [pc, #136]	; (8001358 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80012ce:	f01e f8d9 	bl	801f484 <__assert_func>
    readData(currentMovieOffset, 8);
 80012d2:	2208      	movs	r2, #8
 80012d4:	6981      	ldr	r1, [r0, #24]
 80012d6:	f7ff ffc5 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012da:	69a1      	ldr	r1, [r4, #24]
 80012dc:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80012de:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012e2:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80012e4:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012e8:	f7ff ff98 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80012ec:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80012ee:	69a1      	ldr	r1, [r4, #24]
 80012f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012f2:	440d      	add	r5, r1
 80012f4:	f105 0208 	add.w	r2, r5, #8
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d222      	bcs.n	8001342 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 80012fc:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80012fe:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8001300:	2208      	movs	r2, #8
 8001302:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001304:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8001308:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800130a:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 800130c:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 800130e:	f7ff ffa9 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8001312:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8001316:	4620      	mov	r0, r4
 8001318:	4641      	mov	r1, r8
 800131a:	f7ff ff94 	bl	8001246 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800131e:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8001320:	f108 0104 	add.w	r1, r8, #4
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ff79 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800132a:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 800132c:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800132e:	d1de      	bne.n	80012ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001330:	f108 0102 	add.w	r1, r8, #2
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff ff86 	bl	8001246 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800133a:	42b0      	cmp	r0, r6
 800133c:	d1d7      	bne.n	80012ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800133e:	2001      	movs	r0, #1
 8001340:	e004      	b.n	800134c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 8001342:	2301      	movs	r3, #1
    return false;
 8001344:	2000      	movs	r0, #0
    frameNumber = 1;
 8001346:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001348:	6a23      	ldr	r3, [r4, #32]
 800134a:	61a3      	str	r3, [r4, #24]
}
 800134c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001350:	08020aa0 	.word	0x08020aa0
 8001354:	08020ae9 	.word	0x08020ae9
 8001358:	080209f3 	.word	0x080209f3

0800135c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800135c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800135e:	6803      	ldr	r3, [r0, #0]
 8001360:	bf38      	it	cc
 8001362:	2101      	movcc	r1, #1
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8001366:	b570      	push	{r4, r5, r6, lr}
 8001368:	460d      	mov	r5, r1
 800136a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800136c:	4798      	blx	r3
 800136e:	42a8      	cmp	r0, r5
 8001370:	d204      	bcs.n	800137c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	4620      	mov	r0, r4
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	4798      	blx	r3
 800137a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800137c:	1e6b      	subs	r3, r5, #1
 800137e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8001380:	2210      	movs	r2, #16
 8001382:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001384:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001388:	f106 0108 	add.w	r1, r6, #8
 800138c:	f7ff ff6a 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001390:	f106 0110 	add.w	r1, r6, #16
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff41 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800139a:	6a23      	ldr	r3, [r4, #32]
 800139c:	3b04      	subs	r3, #4
 800139e:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80013a0:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080013a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 80013a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 80013ac:	2100      	movs	r1, #0
{
 80013ae:	4604      	mov	r4, r0
    readData(0, 72);
 80013b0:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 80013b2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80013b4:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 80013b8:	f7ff ff54 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80013bc:	69a7      	ldr	r7, [r4, #24]
 80013be:	2304      	movs	r3, #4
 80013c0:	4a64      	ldr	r2, [pc, #400]	; (8001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80013c2:	4639      	mov	r1, r7
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff ff19 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80013ca:	b148      	cbz	r0, 80013e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80013cc:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80013ce:	4a62      	ldr	r2, [pc, #392]	; (8001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80013d0:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_NOT_RIFF;
 80013d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 80013d8:	4b60      	ldr	r3, [pc, #384]	; (800155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 80013da:	4861      	ldr	r0, [pc, #388]	; (8001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80013dc:	f01e f852 	bl	801f484 <__assert_func>
    currentMovieOffset += 8;
 80013e0:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80013e4:	2304      	movs	r3, #4
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80013e8:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80013ea:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80013ec:	f7ff ff06 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80013f0:	b138      	cbz	r0, 8001402 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80013f2:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80013f6:	f44f 71a2 	mov.w	r1, #324	; 0x144
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80013fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 80013fe:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8001400:	e7eb      	b.n	80013da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8001402:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8001406:	2304      	movs	r3, #4
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 800140a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800140c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800140e:	f7ff fef5 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001412:	4606      	mov	r6, r0
 8001414:	b138      	cbz	r0, 8001426 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001416:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800141a:	f240 114b 	movw	r1, #331	; 0x14b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800141e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8001424:	e7d9      	b.n	80013da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001426:	f107 0110 	add.w	r1, r7, #16
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fef6 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8001430:	4605      	mov	r5, r0
 8001432:	b920      	cbnz	r0, 800143e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8001436:	f240 1151 	movw	r1, #337	; 0x151
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800143c:	e7cd      	b.n	80013da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800143e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8001442:	2304      	movs	r3, #4
 8001444:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8001446:	4620      	mov	r0, r4
 8001448:	4641      	mov	r1, r8
 800144a:	f7ff fed7 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800144e:	2800      	cmp	r0, #0
 8001450:	d04b      	beq.n	80014ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8001452:	2306      	movs	r3, #6
 8001454:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 8001458:	2304      	movs	r3, #4
 800145a:	4a48      	ldr	r2, [pc, #288]	; (800157c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 800145c:	f107 0118 	add.w	r1, r7, #24
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fecb 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001466:	2800      	cmp	r0, #0
 8001468:	d041      	beq.n	80014ee <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800146a:	2307      	movs	r3, #7
 800146c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001470:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001472:	4f43      	ldr	r7, [pc, #268]	; (8001580 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 8001474:	220c      	movs	r2, #12
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff fef3 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800147e:	f105 0608 	add.w	r6, r5, #8
 8001482:	2304      	movs	r3, #4
 8001484:	463a      	mov	r2, r7
 8001486:	4620      	mov	r0, r4
 8001488:	4631      	mov	r1, r6
 800148a:	f7ff feb7 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800148e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001492:	2800      	cmp	r0, #0
 8001494:	d04a      	beq.n	800152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d14a      	bne.n	8001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 800149a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800149c:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d84a      	bhi.n	8001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80014a2:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014a6:	1d29      	adds	r1, r5, #4
 80014a8:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80014aa:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014ac:	9101      	str	r1, [sp, #4]
 80014ae:	f7ff feb5 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014b2:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80014b4:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014b6:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff feaf 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80014be:	4406      	add	r6, r0
    readData(listOffset, 4);
 80014c0:	2204      	movs	r2, #4
 80014c2:	4620      	mov	r0, r4
 80014c4:	4631      	mov	r1, r6
 80014c6:	f7ff fecd 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80014ca:	2304      	movs	r3, #4
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 80014ce:	4631      	mov	r1, r6
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff fe93 	bl	80011fc <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d139      	bne.n	800154e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 80014da:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80014dc:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80014de:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80014e0:	69a3      	ldr	r3, [r4, #24]
 80014e2:	6223      	str	r3, [r4, #32]
}
 80014e4:	b002      	add	sp, #8
 80014e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80014ea:	2601      	movs	r6, #1
 80014ec:	e7b4      	b.n	8001458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80014ee:	2e00      	cmp	r6, #0
 80014f0:	d0be      	beq.n	8001470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80014f2:	f107 0120 	add.w	r1, r7, #32
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fe90 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8001500:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001504:	fbb0 f0f3 	udiv	r0, r0, r3
 8001508:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff fe86 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8001510:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8001514:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fe80 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800151c:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8001520:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fe7a 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001528:	6120      	str	r0, [r4, #16]
 800152a:	e7a1      	b.n	8001470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0b8      	beq.n	80014a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8001530:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8001532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 8001536:	e7d5      	b.n	80014e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fe6f 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800153e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8001540:	220c      	movs	r2, #12
        listOffset += listSize;
 8001542:	4405      	add	r5, r0
        readData(listOffset, 12);
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff fe8c 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800154c:	e797      	b.n	800147e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800154e:	230b      	movs	r3, #11
 8001550:	e7ef      	b.n	8001532 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 8001552:	bf00      	nop
 8001554:	08020b1c 	.word	0x08020b1c
 8001558:	08020b3a 	.word	0x08020b3a
 800155c:	08020b21 	.word	0x08020b21
 8001560:	080209f3 	.word	0x080209f3
 8001564:	08020b67 	.word	0x08020b67
 8001568:	08020b6c 	.word	0x08020b6c
 800156c:	08020b84 	.word	0x08020b84
 8001570:	08020b89 	.word	0x08020b89
 8001574:	08020b9f 	.word	0x08020b9f
 8001578:	08020bab 	.word	0x08020bab
 800157c:	08020bb0 	.word	0x08020bb0
 8001580:	08020bb5 	.word	0x08020bb5
 8001584:	08020bba 	.word	0x08020bba

08001588 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001588:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800158c:	2200      	movs	r2, #0
 800158e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8001590:	f7ff bf0a 	b.w	80013a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08001594 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8001594:	b510      	push	{r4, lr}
    movieData = 0;
 8001596:	2300      	movs	r3, #0
{
 8001598:	4604      	mov	r4, r0
 800159a:	4608      	mov	r0, r1
    movieData = 0;
 800159c:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800159e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80015a0:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4798      	blx	r3
 80015a6:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 80015a8:	4620      	mov	r0, r4
}
 80015aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80015ae:	f7ff befb 	b.w	80013a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080015b4 <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80015b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80015b6:	4c12      	ldr	r4, [pc, #72]	; (8001600 <JPEG_Decode_DMA+0x4c>)
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015b8:	f44f 75c0 	mov.w	r5, #384	; 0x180
        FrameBufferAddress = output;
 80015bc:	6023      	str	r3, [r4, #0]
        Output_Is_Paused = 0;
 80015be:	2400      	movs	r4, #0
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <JPEG_Decode_DMA+0x50>)
 80015c2:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <JPEG_Decode_DMA+0x54>)
 80015c6:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <JPEG_Decode_DMA+0x58>)
 80015ca:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <JPEG_Decode_DMA+0x5c>)
 80015ce:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <JPEG_Decode_DMA+0x60>)
 80015d2:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <JPEG_Decode_DMA+0x64>)
 80015d6:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015d8:	4a10      	ldr	r2, [pc, #64]	; (800161c <JPEG_Decode_DMA+0x68>)
        MCU_BlockIndex = 0;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <JPEG_Decode_DMA+0x6c>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015dc:	68d2      	ldr	r2, [r2, #12]
        MCU_BlockIndex = 0;
 80015de:	601c      	str	r4, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015e0:	436a      	muls	r2, r5
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <JPEG_Decode_DMA+0x70>)
 80015e4:	701c      	strb	r4, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80015e6:	609c      	str	r4, [r3, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80015e8:	731c      	strb	r4, [r3, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80015ea:	615c      	str	r4, [r3, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f006 fe36 	bl	8008264 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80015f8:	4620      	mov	r0, r4
 80015fa:	b003      	add	sp, #12
 80015fc:	bd30      	pop	{r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	200097b0 	.word	0x200097b0
 8001604:	200097d8 	.word	0x200097d8
 8001608:	200097c0 	.word	0x200097c0
 800160c:	200097c4 	.word	0x200097c4
 8001610:	200097b8 	.word	0x200097b8
 8001614:	200097b4 	.word	0x200097b4
 8001618:	200097bc 	.word	0x200097bc
 800161c:	200097dc 	.word	0x200097dc
 8001620:	200097d0 	.word	0x200097d0
 8001624:	20000018 	.word	0x20000018

08001628 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001628:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800162a:	684b      	ldr	r3, [r1, #4]
    {
 800162c:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800162e:	2b01      	cmp	r3, #1
 8001630:	d119      	bne.n	8001666 <HAL_JPEG_InfoReadyCallback+0x3e>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001632:	68cb      	ldr	r3, [r1, #12]
 8001634:	071a      	lsls	r2, r3, #28
            if ((pInfo->ImageHeight % 16) != 0)
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_JPEG_InfoReadyCallback+0x88>)
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001638:	bf1e      	ittt	ne
 800163a:	f023 030f 	bicne.w	r3, r3, #15
 800163e:	3310      	addne	r3, #16
 8001640:	60cb      	strne	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
 8001642:	688b      	ldr	r3, [r1, #8]
 8001644:	0719      	lsls	r1, r3, #28
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001646:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_JPEG_InfoReadyCallback+0x8c>)
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001648:	bf1e      	ittt	ne
 800164a:	f023 030f 	bicne.w	r3, r3, #15
 800164e:	3310      	addne	r3, #16
 8001650:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001652:	f001 fa5d 	bl	8002b10 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 8001656:	b348      	cbz	r0, 80016ac <HAL_JPEG_InfoReadyCallback+0x84>
            {
                assert(status == HAL_OK);
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_JPEG_InfoReadyCallback+0x90>)
 800165a:	f240 2132 	movw	r1, #562	; 0x232
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_JPEG_InfoReadyCallback+0x94>)
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
            if (status != HAL_OK)
            {
                assert(status == HAL_OK);
 8001660:	4817      	ldr	r0, [pc, #92]	; (80016c0 <HAL_JPEG_InfoReadyCallback+0x98>)
 8001662:	f01d ff0f 	bl	801f484 <__assert_func>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001666:	2b02      	cmp	r3, #2
 8001668:	d117      	bne.n	800169a <HAL_JPEG_InfoReadyCallback+0x72>
                if ((pInfo->ImageWidth % 16) != 0)
 800166a:	68cb      	ldr	r3, [r1, #12]
 800166c:	071a      	lsls	r2, r3, #28
 800166e:	d003      	beq.n	8001678 <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001670:	f023 030f 	bic.w	r3, r3, #15
 8001674:	3310      	adds	r3, #16
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001676:	60c3      	str	r3, [r0, #12]
                if ((pInfo->ImageHeight % 8) != 0)
 8001678:	6883      	ldr	r3, [r0, #8]
 800167a:	075a      	lsls	r2, r3, #29
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800167c:	bf1e      	ittt	ne
 800167e:	f023 0307 	bicne.w	r3, r3, #7
 8001682:	3308      	addne	r3, #8
 8001684:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_JPEG_InfoReadyCallback+0x88>)
 8001688:	490a      	ldr	r1, [pc, #40]	; (80016b4 <HAL_JPEG_InfoReadyCallback+0x8c>)
 800168a:	f00b fc4f 	bl	800cf2c <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 800168e:	b168      	cbz	r0, 80016ac <HAL_JPEG_InfoReadyCallback+0x84>
                assert(status == HAL_OK);
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001692:	f44f 7115 	mov.w	r1, #596	; 0x254
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_JPEG_InfoReadyCallback+0x94>)
 8001698:	e7e2      	b.n	8001660 <HAL_JPEG_InfoReadyCallback+0x38>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f3      	bne.n	8001686 <HAL_JPEG_InfoReadyCallback+0x5e>
                if ((pInfo->ImageWidth % 8) != 0)
 800169e:	68cb      	ldr	r3, [r1, #12]
 80016a0:	0759      	lsls	r1, r3, #29
 80016a2:	d0e9      	beq.n	8001678 <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80016a4:	f023 0307 	bic.w	r3, r3, #7
 80016a8:	3308      	adds	r3, #8
 80016aa:	e7e4      	b.n	8001676 <HAL_JPEG_InfoReadyCallback+0x4e>
            }
        }
    }
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	200097d4 	.word	0x200097d4
 80016b4:	200097f0 	.word	0x200097f0
 80016b8:	08020bbf 	.word	0x08020bbf
 80016bc:	08020bd0 	.word	0x08020bd0
 80016c0:	080209f3 	.word	0x080209f3

080016c4 <HAL_JPEG_GetDataCallback>:
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_JPEG_GetDataCallback+0x30>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	440a      	add	r2, r1
    {
 80016ca:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80016cc:	601a      	str	r2, [r3, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_JPEG_GetDataCallback+0x34>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d20c      	bcs.n	80016f0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016d6:	4c09      	ldr	r4, [pc, #36]	; (80016fc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80016d8:	1a9a      	subs	r2, r3, r2
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016da:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016e0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016e2:	bf28      	it	cs
 80016e4:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016e8:	6021      	str	r1, [r4, #0]
        }
    }
 80016ea:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016ec:	f006 be21 	b.w	8008332 <HAL_JPEG_ConfigInputBuffer>
    }
 80016f0:	bc30      	pop	{r4, r5}
 80016f2:	4770      	bx	lr
 80016f4:	200097b8 	.word	0x200097b8
 80016f8:	200097bc 	.word	0x200097bc
 80016fc:	200097b4 	.word	0x200097b4

08001700 <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001702:	4d17      	ldr	r5, [pc, #92]	; (8001760 <HAL_JPEG_DataReadyCallback+0x60>)
 8001704:	2701      	movs	r7, #1
 8001706:	210c      	movs	r1, #12
 8001708:	4c16      	ldr	r4, [pc, #88]	; (8001764 <HAL_JPEG_DataReadyCallback+0x64>)
 800170a:	682b      	ldr	r3, [r5, #0]
    {
 800170c:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800170e:	4359      	muls	r1, r3
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

        JPEG_OUT_Write_BufferIndex++;
 8001710:	443b      	add	r3, r7
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001712:	42bb      	cmp	r3, r7
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001714:	eb04 0001 	add.w	r0, r4, r1
 8001718:	5467      	strb	r7, [r4, r1]
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800171a:	bf88      	it	hi
 800171c:	2300      	movhi	r3, #0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800171e:	6082      	str	r2, [r0, #8]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001720:	220c      	movs	r2, #12
            JPEG_OUT_Write_BufferIndex = 0;
 8001722:	602b      	str	r3, [r5, #0]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	4353      	muls	r3, r2
 8001728:	5ce3      	ldrb	r3, [r4, r3]
 800172a:	b133      	cbz	r3, 800173a <HAL_JPEG_DataReadyCallback+0x3a>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800172c:	2102      	movs	r1, #2
 800172e:	4630      	mov	r0, r6
 8001730:	f006 fdcc 	bl	80082cc <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_JPEG_DataReadyCallback+0x68>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800173a:	682a      	ldr	r2, [r5, #0]
 800173c:	210c      	movs	r1, #12
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_JPEG_DataReadyCallback+0x6c>)
 8001740:	4630      	mov	r0, r6
 8001742:	fb01 4402 	mla	r4, r1, r2, r4
 8001746:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	6861      	ldr	r1, [r4, #4]
 800174e:	435a      	muls	r2, r3
 8001750:	f006 fdf2 	bl	8008338 <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_JPEG_DataReadyCallback+0x70>)
 8001756:	6818      	ldr	r0, [r3, #0]
    }
 8001758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        SEM_POST(semDecodingDone);
 800175c:	f008 bfe2 	b.w	800a724 <osSemaphoreRelease>
 8001760:	200097c4 	.word	0x200097c4
 8001764:	20000018 	.word	0x20000018
 8001768:	200097d8 	.word	0x200097d8
 800176c:	200097dc 	.word	0x200097dc
 8001770:	200097f4 	.word	0x200097f4

08001774 <HAL_JPEG_ErrorCallback>:
      * @brief  JPEG Error callback
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
 8001774:	b510      	push	{r4, lr}
 8001776:	4604      	mov	r4, r0
        HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8001778:	f007 f96f 	bl	8008a5a <HAL_JPEG_GetState>
        uint32_t error = HAL_JPEG_GetError(hjpeg);
 800177c:	4620      	mov	r0, r4
 800177e:	f007 f96f 	bl	8008a60 <HAL_JPEG_GetError>
        while (1) {}
 8001782:	e7fe      	b.n	8001782 <HAL_JPEG_ErrorCallback+0xe>

08001784 <HAL_JPEG_DecodeCpltCallback>:
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8001784:	4b01      	ldr	r3, [pc, #4]	; (800178c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    }
 800178a:	4770      	bx	lr
 800178c:	200097cc 	.word	0x200097cc

08001790 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8001790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t ConvertedDataCount;

    if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001794:	4d38      	ldr	r5, [pc, #224]	; (8001878 <JPEG_OutputHandler+0xe8>)
 8001796:	260c      	movs	r6, #12
 8001798:	4c38      	ldr	r4, [pc, #224]	; (800187c <JPEG_OutputHandler+0xec>)
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	4373      	muls	r3, r6
 800179e:	5ce3      	ldrb	r3, [r4, r3]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d149      	bne.n	8001838 <JPEG_OutputHandler+0xa8>
    {
        /* Invalidate DCache prior to YCbCr/RGB software conversion. */
        if (SCB->CCR & SCB_CCR_DC_Msk)
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <JPEG_OutputHandler+0xf0>)
 80017a6:	6953      	ldr	r3, [r2, #20]
 80017a8:	03db      	lsls	r3, r3, #15
 80017aa:	d51e      	bpl.n	80017ea <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80017b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017ba:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80017c6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017c8:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017cc:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017ce:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 80017d2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017d4:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80017d8:	d2f9      	bcs.n	80017ce <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 80017da:	3b20      	subs	r3, #32
 80017dc:	f113 0f20 	cmn.w	r3, #32
 80017e0:	d1f2      	bne.n	80017c8 <JPEG_OutputHandler+0x38>
 80017e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017e6:	f3bf 8f6f 	isb	sy
        {
            SCB_CleanInvalidateDCache();
        }

        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80017ea:	260c      	movs	r6, #12
 80017ec:	4f25      	ldr	r7, [pc, #148]	; (8001884 <JPEG_OutputHandler+0xf4>)
 80017ee:	6828      	ldr	r0, [r5, #0]
 80017f0:	eb0d 0306 	add.w	r3, sp, r6
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	fb06 4000 	mla	r0, r6, r0, r4
 80017fa:	4923      	ldr	r1, [pc, #140]	; (8001888 <JPEG_OutputHandler+0xf8>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <JPEG_OutputHandler+0xfc>)
 8001800:	6809      	ldr	r1, [r1, #0]
 8001802:	f8d3 8000 	ldr.w	r8, [r3]
 8001806:	6883      	ldr	r3, [r0, #8]
 8001808:	6840      	ldr	r0, [r0, #4]
 800180a:	47c0      	blx	r8

        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800180c:	682a      	ldr	r2, [r5, #0]
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800180e:	683b      	ldr	r3, [r7, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001810:	4356      	muls	r6, r2
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

        JPEG_OUT_Read_BufferIndex++;
 8001812:	3201      	adds	r2, #1
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001814:	4418      	add	r0, r3
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001816:	2300      	movs	r3, #0
        JPEG_OUT_Read_BufferIndex++;
 8001818:	2a01      	cmp	r2, #1
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800181a:	eb04 0106 	add.w	r1, r4, r6
 800181e:	55a3      	strb	r3, [r4, r6]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001820:	608b      	str	r3, [r1, #8]
        JPEG_OUT_Read_BufferIndex++;
 8001822:	bf98      	it	ls
 8001824:	4613      	movls	r3, r2
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001826:	6038      	str	r0, [r7, #0]
        JPEG_OUT_Read_BufferIndex++;
 8001828:	602b      	str	r3, [r5, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
        {
            JPEG_OUT_Read_BufferIndex = 0;
        }

        if (MCU_BlockIndex == MCU_TotalNb)
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <JPEG_OutputHandler+0x100>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d10f      	bne.n	8001854 <JPEG_OutputHandler+0xc4>
        {
            return 1;
 8001834:	2001      	movs	r0, #1
 8001836:	e018      	b.n	800186a <JPEG_OutputHandler+0xda>
        }
    }
    else if ((Output_Is_Paused == 1) && \
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <JPEG_OutputHandler+0x104>)
 800183a:	680a      	ldr	r2, [r1, #0]
             (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 800183c:	2a01      	cmp	r2, #1
 800183e:	d117      	bne.n	8001870 <JPEG_OutputHandler+0xe0>
 8001840:	4a15      	ldr	r2, [pc, #84]	; (8001898 <JPEG_OutputHandler+0x108>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4372      	muls	r2, r6
    else if ((Output_Is_Paused == 1) && \
 8001846:	5ca2      	ldrb	r2, [r4, r2]
 8001848:	4313      	orrs	r3, r2
 800184a:	d111      	bne.n	8001870 <JPEG_OutputHandler+0xe0>
             (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
    {
        Output_Is_Paused = 0;
 800184c:	600b      	str	r3, [r1, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800184e:	2102      	movs	r1, #2
 8001850:	f006 ffa8 	bl	80087a4 <HAL_JPEG_Resume>
    else
    {
        return 2;
    }

    if ((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd)) // decode completed
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <JPEG_OutputHandler+0xf4>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <JPEG_OutputHandler+0x100>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d109      	bne.n	8001874 <JPEG_OutputHandler+0xe4>
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <JPEG_OutputHandler+0x10c>)
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	3800      	subs	r0, #0
 8001866:	bf18      	it	ne
 8001868:	2001      	movne	r0, #1
    {
        return 1;
    }

    return 0;
}
 800186a:	b004      	add	sp, #16
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8001870:	2002      	movs	r0, #2
 8001872:	e7fa      	b.n	800186a <JPEG_OutputHandler+0xda>
    return 0;
 8001874:	2000      	movs	r0, #0
 8001876:	e7f8      	b.n	800186a <JPEG_OutputHandler+0xda>
 8001878:	200097c0 	.word	0x200097c0
 800187c:	20000018 	.word	0x20000018
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	200097d0 	.word	0x200097d0
 8001888:	200097b0 	.word	0x200097b0
 800188c:	200097f0 	.word	0x200097f0
 8001890:	200097d4 	.word	0x200097d4
 8001894:	200097d8 	.word	0x200097d8
 8001898:	200097c4 	.word	0x200097c4
 800189c:	200097cc 	.word	0x200097cc

080018a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80018a0:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 80018a2:	b36a      	cbz	r2, 8001900 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
    if (outputBuffer) //only decode if buffers are assigned.
 80018a4:	b363      	cbz	r3, 8001900 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 80018a6:	4c17      	ldr	r4, [pc, #92]	; (8001904 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 80018a8:	2502      	movs	r5, #2
 80018aa:	6125      	str	r5, [r4, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018ac:	68c5      	ldr	r5, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018ae:	6900      	ldr	r0, [r0, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018b0:	f015 0f0f 	tst.w	r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018b4:	f000 000f 	and.w	r0, r0, #15
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018b8:	bf18      	it	ne
 80018ba:	f025 050f 	bicne.w	r5, r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018be:	f1c0 0010 	rsb	r0, r0, #16
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018c2:	bf18      	it	ne
 80018c4:	3510      	addne	r5, #16
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018c6:	60a0      	str	r0, [r4, #8]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018c8:	6025      	str	r5, [r4, #0]
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80018ca:	f44f 65c8 	mov.w	r5, #1600	; 0x640
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80018d0:	6065      	str	r5, [r4, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 80018d2:	6825      	ldr	r5, [r4, #0]
 80018d4:	092d      	lsrs	r5, r5, #4
 80018d6:	60e5      	str	r5, [r4, #12]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80018d8:	f7ff fe6c 	bl	80015b4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80018dc:	4d0a      	ldr	r5, [pc, #40]	; (8001908 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 80018de:	4c0b      	ldr	r4, [pc, #44]	; (800190c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 80018e0:	4628      	mov	r0, r5
 80018e2:	f7ff ff55 	bl	8001790 <JPEG_OutputHandler>
 80018e6:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d105      	bne.n	80018fa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5a>
                SEM_WAIT(semDecodingDone);
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f008 fedb 	bl	800a6b0 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d1ef      	bne.n	80018e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x40>
}
 8001900:	bd38      	pop	{r3, r4, r5, pc}
 8001902:	bf00      	nop
 8001904:	200097dc 	.word	0x200097dc
 8001908:	2000f040 	.word	0x2000f040
 800190c:	200097c8 	.word	0x200097c8
 8001910:	200097f4 	.word	0x200097f4

08001914 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8001914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001918:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800191a:	6943      	ldr	r3, [r0, #20]
{
 800191c:	4604      	mov	r4, r0
 800191e:	460f      	mov	r7, r1
 8001920:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001922:	b92b      	cbnz	r3, 8001930 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8001926:	21c0      	movs	r1, #192	; 0xc0
 8001928:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 800192c:	f01d fdaa 	bl	801f484 <__assert_func>
    readData(currentMovieOffset, 8);
 8001930:	2208      	movs	r2, #8
 8001932:	6981      	ldr	r1, [r0, #24]
 8001934:	f7ff fc96 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001938:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800193a:	4620      	mov	r0, r4
 800193c:	f106 0a08 	add.w	sl, r6, #8
 8001940:	1d31      	adds	r1, r6, #4
 8001942:	f7ff fc6b 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001948:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800194c:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800194e:	429a      	cmp	r2, r3
 8001950:	d231      	bcs.n	80019b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001952:	4631      	mov	r1, r6
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fc76 	bl	8001246 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800195a:	f243 0330 	movw	r3, #12336	; 0x3030
 800195e:	4298      	cmp	r0, r3
 8001960:	d11d      	bne.n	800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001962:	1cb1      	adds	r1, r6, #2
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fc6e 	bl	8001246 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800196a:	f246 3364 	movw	r3, #25444	; 0x6364
 800196e:	4298      	cmp	r0, r3
 8001970:	d115      	bne.n	800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001972:	b1a5      	cbz	r5, 800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001974:	462a      	mov	r2, r5
 8001976:	4651      	mov	r1, sl
 8001978:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 800197a:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800197e:	f7ff fc71 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001984:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001986:	462a      	mov	r2, r5
 8001988:	4620      	mov	r0, r4
 800198a:	f8cd 8000 	str.w	r8, [sp]
 800198e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001992:	463b      	mov	r3, r7
 8001994:	f7ff ff84 	bl	80018a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001998:	6963      	ldr	r3, [r4, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800199e:	69a3      	ldr	r3, [r4, #24]
 80019a0:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80019a2:	b18d      	cbz	r5, 80019c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80019a4:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019a6:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80019a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019aa:	3301      	adds	r3, #1
 80019ac:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80019b0:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019b2:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80019b4:	d10a      	bne.n	80019cc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80019b6:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80019b8:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80019ba:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80019bc:	61a3      	str	r3, [r4, #24]
}
 80019be:	f080 0001 	eor.w	r0, r0, #1
 80019c2:	b004      	add	sp, #16
 80019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 80019c8:	3308      	adds	r3, #8
 80019ca:	e7eb      	b.n	80019a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80019cc:	2000      	movs	r0, #0
 80019ce:	e7f6      	b.n	80019be <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80019d0:	08020aa0 	.word	0x08020aa0
 80019d4:	08020c18 	.word	0x08020c18
 80019d8:	080209f3 	.word	0x080209f3

080019dc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80019dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019de:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 80019e0:	6981      	ldr	r1, [r0, #24]
{
 80019e2:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 80019e4:	2208      	movs	r2, #8
 80019e6:	f7ff fc3d 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019ea:	69a6      	ldr	r6, [r4, #24]
 80019ec:	4620      	mov	r0, r4
 80019ee:	1d31      	adds	r1, r6, #4
 80019f0:	f7ff fc14 	bl	800121c <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019f4:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019f8:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019fa:	9001      	str	r0, [sp, #4]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fc31 	bl	8001264 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001a02:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001a04:	b16d      	cbz	r5, 8001a22 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a06:	462b      	mov	r3, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a08:	4c07      	ldr	r4, [pc, #28]	; (8001a28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001a0a:	4d08      	ldr	r5, [pc, #32]	; (8001a2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a0c:	9a01      	ldr	r2, [sp, #4]
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001a10:	f7ff fdd0 	bl	80015b4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7ff febb 	bl	8001790 <JPEG_OutputHandler>
 8001a1a:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f8      	beq.n	8001a14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001a22:	2001      	movs	r0, #1
 8001a24:	b002      	add	sp, #8
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	200097c8 	.word	0x200097c8
 8001a2c:	2000f040 	.word	0x2000f040

08001a30 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a30:	2101      	movs	r1, #1
 8001a32:	2200      	movs	r2, #0
{
 8001a34:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a36:	4608      	mov	r0, r1
 8001a38:	f008 fde4 	bl	800a604 <osSemaphoreNew>
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001a3e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001a40:	b928      	cbnz	r0, 8001a4e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001a44:	2128      	movs	r1, #40	; 0x28
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001a4a:	f01d fd1b 	bl	801f484 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2104      	movs	r1, #4
 8001a52:	2001      	movs	r0, #1
 8001a54:	f008 fe9c 	bl	800a790 <osMessageQueueNew>
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001a5a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a5c:	b918      	cbnz	r0, 8001a66 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001a64:	e7f0      	b.n	8001a48 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001a66:	bd08      	pop	{r3, pc}
 8001a68:	200097fc 	.word	0x200097fc
 8001a6c:	08020cb8 	.word	0x08020cb8
 8001a70:	08020d01 	.word	0x08020d01
 8001a74:	08020d30 	.word	0x08020d30
 8001a78:	200097f8 	.word	0x200097f8
 8001a7c:	08020d7e 	.word	0x08020d7e

08001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001a82:	f04f 31ff 	mov.w	r1, #4294967295
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f008 be12 	b.w	800a6b0 <osSemaphoreAcquire>
 8001a8c:	200097fc 	.word	0x200097fc

08001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f008 be46 	b.w	800a724 <osSemaphoreRelease>
 8001a98:	200097fc 	.word	0x200097fc

08001a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f008 be05 	b.w	800a6b0 <osSemaphoreAcquire>
 8001aa6:	bf00      	nop
 8001aa8:	200097fc 	.word	0x200097fc

08001aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001aac:	f7ff bff0 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ab0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6800      	ldr	r0, [r0, #0]
 8001aba:	f008 beaf 	b.w	800a81c <osMessageQueuePut>
 8001abe:	bf00      	nop
 8001ac0:	200097f8 	.word	0x200097f8
 8001ac4:	20000030 	.word	0x20000030

08001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ac8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	4c07      	ldr	r4, [pc, #28]	; (8001aec <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ace:	a901      	add	r1, sp, #4
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6820      	ldr	r0, [r4, #0]
 8001ad4:	f008 fee4 	bl	800a8a0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	2200      	movs	r2, #0
 8001ade:	a901      	add	r1, sp, #4
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f008 fedd 	bl	800a8a0 <osMessageQueueGet>
}
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	200097f8 	.word	0x200097f8

08001af0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4718      	bx	r3

08001af6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001af6:	2001      	movs	r0, #1
 8001af8:	4770      	bx	lr

08001afa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	4718      	bx	r3

08001b00 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001b02:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b06:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001b12:	9201      	str	r2, [sp, #4]
 8001b14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b1c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001b24:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_ZN8STM32DMA10initializeEv+0x40>)
 8001b2a:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <_ZN8STM32DMA10initializeEv+0x44>)
 8001b32:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001b34:	b002      	add	sp, #8
 8001b36:	4770      	bx	lr
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	2000eec0 	.word	0x2000eec0
 8001b40:	08001b89 	.word	0x08001b89
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001b48:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001b4c:	4770      	bx	lr
	...

08001b50 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b56:	6003      	str	r3, [r0, #0]
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <_ZN8STM32DMAD1Ev+0x1c>)
 8001b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy
}
 8001b66:	4770      	bx	lr
 8001b68:	08020f1c 	.word	0x08020f1c
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
}
 8001b74:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001b78:	f7ff ffea 	bl	8001b50 <_ZN8STM32DMAD1Ev>
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f01d fc52 	bl	801f426 <_ZdlPvj>
 8001b82:	4620      	mov	r0, r4
 8001b84:	bd10      	pop	{r4, pc}
	...

08001b88 <DMA2D_XferCpltCallback>:
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <DMA2D_XferCpltCallback+0xc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001b8e:	6803      	ldr	r3, [r0, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4718      	bx	r3
 8001b94:	20024914 	.word	0x20024914

08001b98 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <_ZN8STM32DMAC1Ev+0x30>)
 8001b9e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4625      	mov	r5, r4
 8001ba4:	2260      	movs	r2, #96	; 0x60
 8001ba6:	6060      	str	r0, [r4, #4]
 8001ba8:	7226      	strb	r6, [r4, #8]
 8001baa:	7266      	strb	r6, [r4, #9]
 8001bac:	f845 3b20 	str.w	r3, [r5], #32
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f00c fbe1 	bl	800e378 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001bb6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001bba:	60ee      	str	r6, [r5, #12]
 8001bbc:	3524      	adds	r5, #36	; 0x24
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	d1fb      	bne.n	8001bba <_ZN8STM32DMAC1Ev+0x22>
}
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08020f1c 	.word	0x08020f1c

08001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001bcc:	b508      	push	{r3, lr}
    switch (format)
 8001bce:	290b      	cmp	r1, #11
 8001bd0:	d80b      	bhi.n	8001bea <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001bd2:	e8df f001 	tbb	[pc, r1]
 8001bd6:	0612      	.short	0x0612
 8001bd8:	0a0a0a10 	.word	0x0a0a0a10
 8001bdc:	0808080a 	.word	0x0808080a
 8001be0:	0808      	.short	0x0808
 8001be2:	2001      	movs	r0, #1
}
 8001be4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001be6:	2005      	movs	r0, #5
        break;
 8001be8:	e7fc      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001bec:	2166      	movs	r1, #102	; 0x66
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001bf2:	f01d fc47 	bl	801f484 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7f4      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001bfa:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001bfc:	e7f2      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001bfe:	bf00      	nop
 8001c00:	08020dc0 	.word	0x08020dc0
 8001c04:	08020ddb 	.word	0x08020ddb
 8001c08:	08020e25 	.word	0x08020e25

08001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c0c:	b508      	push	{r3, lr}
    switch (format)
 8001c0e:	290a      	cmp	r1, #10
 8001c10:	d809      	bhi.n	8001c26 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001c12:	e8df f001 	tbb	[pc, r1]
 8001c16:	0610      	.short	0x0610
 8001c18:	0808080e 	.word	0x0808080e
 8001c1c:	06060608 	.word	0x06060608
 8001c20:	06          	.byte	0x06
 8001c21:	00          	.byte	0x00
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001c28:	2187      	movs	r1, #135	; 0x87
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c2e:	f01d fc29 	bl	801f484 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c32:	2000      	movs	r0, #0
 8001c34:	e7f6      	b.n	8001c24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001c36:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c38:	e7f4      	b.n	8001c24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c3a:	bf00      	nop
 8001c3c:	08020dc0 	.word	0x08020dc0
 8001c40:	08020e71 	.word	0x08020e71
 8001c44:	08020e25 	.word	0x08020e25

08001c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c4c:	7f4f      	ldrb	r7, [r1, #29]
{
 8001c4e:	460c      	mov	r4, r1
 8001c50:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c52:	4639      	mov	r1, r7
 8001c54:	f7ff ffba 	bl	8001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c58:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c5c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c5e:	4648      	mov	r0, r9
 8001c60:	4641      	mov	r1, r8
 8001c62:	f7ff ffb3 	bl	8001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c66:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c68:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c6a:	4648      	mov	r0, r9
 8001c6c:	f7ff ffce 	bl	8001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c70:	8aa1      	ldrh	r1, [r4, #20]
 8001c72:	8b62      	ldrh	r2, [r4, #26]
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001c76:	1a52      	subs	r2, r2, r1
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c7a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c7c:	8b22      	ldrh	r2, [r4, #24]
 8001c7e:	1a52      	subs	r2, r2, r1
 8001c80:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c82:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c84:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c8a:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c8e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c90:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c92:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001c94:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c96:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001c9a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c9c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001ca0:	d026      	beq.n	8001cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001ca2:	d810      	bhi.n	8001cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001ca4:	2920      	cmp	r1, #32
 8001ca6:	ea45 0402 	orr.w	r4, r5, r2
 8001caa:	d062      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cac:	2940      	cmp	r1, #64	; 0x40
 8001cae:	d060      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cb0:	2904      	cmp	r1, #4
 8001cb2:	d05e      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cb4:	432a      	orrs	r2, r5
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001cb8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cbe:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001cc0:	d05b      	beq.n	8001d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001cc2:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001cc4:	e040      	b.n	8001d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001cc6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001cca:	d007      	beq.n	8001cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001ccc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001cd0:	d1f0      	bne.n	8001cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cd6:	f042 0209 	orr.w	r2, r2, #9
 8001cda:	e003      	b.n	8001ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cdc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ce0:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ce4:	61da      	str	r2, [r3, #28]
        return color;
 8001ce6:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001ce8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cea:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cec:	6158      	str	r0, [r3, #20]
 8001cee:	e02a      	b.n	8001d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001cf0:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cf2:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cf4:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cf6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cfa:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cfc:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001cfe:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d00:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d02:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001d04:	b142      	cbz	r2, 8001d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001d06:	2a01      	cmp	r2, #1
 8001d08:	d021      	beq.n	8001d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001d0c:	f240 1111 	movw	r1, #273	; 0x111
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d12:	481f      	ldr	r0, [pc, #124]	; (8001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001d14:	f01d fbb6 	bl	801f484 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d18:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001d1a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d1c:	8861      	ldrh	r1, [r4, #2]
 8001d1e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d22:	3901      	subs	r1, #1
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d2c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	0692      	lsls	r2, r2, #26
 8001d3c:	d4fc      	bmi.n	8001d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001d3e:	2210      	movs	r2, #16
 8001d40:	609a      	str	r2, [r3, #8]
            if (blend)
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d0bd      	beq.n	8001cc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d48:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d4e:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8001d50:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d54:	69d9      	ldr	r1, [r3, #28]
 8001d56:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8001d5a:	bf18      	it	ne
 8001d5c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d5e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	61da      	str	r2, [r3, #28]
                break;
 8001d70:	e7dd      	b.n	8001d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001d76:	61dc      	str	r4, [r3, #28]
 8001d78:	e7b7      	b.n	8001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d7a:	f240 2201 	movw	r2, #513	; 0x201
 8001d7e:	e7e3      	b.n	8001d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001d80:	4002b000 	.word	0x4002b000
 8001d84:	00010201 	.word	0x00010201
 8001d88:	08020ebc 	.word	0x08020ebc
 8001d8c:	08020ed6 	.word	0x08020ed6
 8001d90:	08020e25 	.word	0x08020e25
 8001d94:	00020201 	.word	0x00020201

08001d98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d9c:	7f89      	ldrb	r1, [r1, #30]
 8001d9e:	f7ff ff35 	bl	8001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001da4:	8aa6      	ldrh	r6, [r4, #20]
 8001da6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001da8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001daa:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dae:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001db0:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001db2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001db4:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001db6:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001dba:	6826      	ldr	r6, [r4, #0]
 8001dbc:	68e1      	ldr	r1, [r4, #12]
 8001dbe:	2e08      	cmp	r6, #8
 8001dc0:	d10d      	bne.n	8001dde <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001dc2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001dc4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001dc6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001dca:	7f20      	ldrb	r0, [r4, #28]
 8001dcc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001dd0:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001dd4:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dd6:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dd8:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001dda:	601a      	str	r2, [r3, #0]
    }
}
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001dde:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001de0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001de2:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8001de4:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001de6:	0a0a      	lsrs	r2, r1, #8
 8001de8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8001dec:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001df0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8001df4:	4302      	orrs	r2, r0
 8001df6:	430a      	orrs	r2, r1
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001dfc:	e7ed      	b.n	8001dda <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001dfe:	bf00      	nop
 8001e00:	4002b000 	.word	0x4002b000
 8001e04:	00010009 	.word	0x00010009
 8001e08:	00020201 	.word	0x00020201
 8001e0c:	00030201 	.word	0x00030201

08001e10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001e10:	2001      	movs	r0, #1
 8001e12:	4770      	bx	lr

08001e14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001e14:	200c      	movs	r0, #12
 8001e16:	4770      	bx	lr

08001e18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001e18:	230c      	movs	r3, #12
 8001e1a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e1e:	3008      	adds	r0, #8
 8001e20:	4770      	bx	lr

08001e22 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001e22:	230c      	movs	r3, #12
 8001e24:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e28:	3008      	adds	r0, #8
 8001e2a:	4770      	bx	lr

08001e2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	4770      	bx	lr

08001e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e30:	f240 5084 	movw	r0, #1412	; 0x584
 8001e34:	4770      	bx	lr

08001e36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e36:	f240 5384 	movw	r3, #1412	; 0x584
 8001e3a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e3e:	3008      	adds	r0, #8
 8001e40:	4770      	bx	lr

08001e42 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e42:	f240 5384 	movw	r3, #1412	; 0x584
 8001e46:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e4a:	3008      	adds	r0, #8
 8001e4c:	4770      	bx	lr

08001e4e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e4e:	2001      	movs	r0, #1
 8001e50:	4770      	bx	lr

08001e52 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e52:	2010      	movs	r0, #16
 8001e54:	4770      	bx	lr

08001e56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e56:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e5a:	3008      	adds	r0, #8
 8001e5c:	4770      	bx	lr

08001e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e5e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e62:	3008      	adds	r0, #8
 8001e64:	4770      	bx	lr

08001e66 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenNoTransition();
 8001e66:	4608      	mov	r0, r1
 8001e68:	f002 bb24 	b.w	80044b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>

08001e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	4604      	mov	r4, r0
 8001e72:	6003      	str	r3, [r0, #0]
 8001e74:	f00b f8e1 	bl	800d03a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	bd10      	pop	{r4, pc}
 8001e7c:	08020fd4 	.word	0x08020fd4

08001e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001e80:	b510      	push	{r4, lr}
 8001e82:	4604      	mov	r4, r0
 8001e84:	f7ff fff2 	bl	8001e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001e88:	2114      	movs	r1, #20
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f01d facb 	bl	801f426 <_ZdlPvj>
 8001e90:	4620      	mov	r0, r4
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001e96:	b510      	push	{r4, lr}
 8001e98:	4604      	mov	r4, r0
 8001e9a:	6003      	str	r3, [r0, #0]
 8001e9c:	f00b f8cd 	bl	800d03a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	bd10      	pop	{r4, pc}
 8001ea4:	08020fa0 	.word	0x08020fa0

08001ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f7ff fff2 	bl	8001e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001eb0:	f240 518c 	movw	r1, #1420	; 0x58c
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f01d fab6 	bl	801f426 <_ZdlPvj>
 8001eba:	4620      	mov	r0, r4
 8001ebc:	bd10      	pop	{r4, pc}
	...

08001ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001ec2:	b510      	push	{r4, lr}
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	6003      	str	r3, [r0, #0]
 8001ec8:	f00b f8b7 	bl	800d03a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001ecc:	4620      	mov	r0, r4
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	08020f6c 	.word	0x08020f6c

08001ed4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	f7ff fff2 	bl	8001ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001edc:	2118      	movs	r1, #24
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f01d faa1 	bl	801f426 <_ZdlPvj>
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	bd10      	pop	{r4, pc}

08001ee8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <_ZN12FrontendHeapD1Ev+0x24>)
 8001eea:	b510      	push	{r4, lr}
 8001eec:	4604      	mov	r4, r0
 8001eee:	6003      	str	r3, [r0, #0]
 8001ef0:	f500 60b7 	add.w	r0, r0, #1464	; 0x5b8
 8001ef4:	f7ff ffba 	bl	8001e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ef8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001efc:	f7ff ffca 	bl	8001e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f00:	f104 0014 	add.w	r0, r4, #20
 8001f04:	f7ff ffdc 	bl	8001ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f08:	4620      	mov	r0, r4
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	08021008 	.word	0x08021008

08001f10 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001f10:	b508      	push	{r3, lr}
 8001f12:	4802      	ldr	r0, [pc, #8]	; (8001f1c <__tcf_0+0xc>)
 8001f14:	f7ff ffe8 	bl	8001ee8 <_ZN12FrontendHeapD1Ev>
 8001f18:	bd08      	pop	{r3, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20009804 	.word	0x20009804

08001f20 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	f7ff ffe0 	bl	8001ee8 <_ZN12FrontendHeapD1Ev>
 8001f28:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f01d fa7a 	bl	801f426 <_ZdlPvj>
 8001f32:	4620      	mov	r0, r4
 8001f34:	bd10      	pop	{r4, pc}
	...

08001f38 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8001f38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001f3c:	f002 f944 	bl	80041c8 <_ZN14BitmapDatabase11getInstanceEv>
 8001f40:	2400      	movs	r4, #0
 8001f42:	4605      	mov	r5, r0
 8001f44:	f002 f944 	bl	80041d0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001f48:	4623      	mov	r3, r4
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	4628      	mov	r0, r5
 8001f50:	9400      	str	r4, [sp, #0]
 8001f52:	f011 fc71 	bl	8013838 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <touchgfx_init+0xb4>)
 8001f58:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001f5a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001f5c:	4d25      	ldr	r5, [pc, #148]	; (8001ff4 <touchgfx_init+0xbc>)
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f003 fc5c 	bl	800581c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <touchgfx_init+0xc0>)
 8001f66:	f011 fbcf 	bl	8013708 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001f6a:	782b      	ldrb	r3, [r5, #0]
 8001f6c:	f3bf 8f5b 	dmb	ish
 8001f70:	07db      	lsls	r3, r3, #31
 8001f72:	d435      	bmi.n	8001fe0 <touchgfx_init+0xa8>
 8001f74:	4628      	mov	r0, r5
 8001f76:	f01d fa58 	bl	801f42a <__cxa_guard_acquire>
 8001f7a:	b388      	cbz	r0, 8001fe0 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001f7c:	4c1f      	ldr	r4, [pc, #124]	; (8001ffc <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <touchgfx_init+0xc8>)
 8001f80:	f504 66ba 	add.w	r6, r4, #1488	; 0x5d0
 8001f84:	f104 0014 	add.w	r0, r4, #20
 8001f88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001f8c:	f504 67b7 	add.w	r7, r4, #1464	; 0x5b8
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	6060      	str	r0, [r4, #4]
 8001f94:	f8c4 8008 	str.w	r8, [r4, #8]
 8001f98:	60e7      	str	r7, [r4, #12]
 8001f9a:	6126      	str	r6, [r4, #16]
 8001f9c:	f00b f84e 	bl	800d03c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <touchgfx_init+0xcc>)
 8001fa2:	4640      	mov	r0, r8
 8001fa4:	6163      	str	r3, [r4, #20]
 8001fa6:	f00b f849 	bl	800d03c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <touchgfx_init+0xd0>)
 8001fac:	4638      	mov	r0, r7
 8001fae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fb0:	f00b f844 	bl	800d03c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <touchgfx_init+0xd4>)
 8001fb6:	f204 50cc 	addw	r0, r4, #1484	; 0x5cc
 8001fba:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
 8001fbe:	f003 fdf5 	bl	8005bac <_ZN5ModelC1Ev>
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	f204 51cc 	addw	r1, r4, #1484	; 0x5cc
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f003 fc9d 	bl	8005908 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001fce:	4630      	mov	r0, r6
 8001fd0:	f002 fa70 	bl	80044b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        static FrontendHeap instance;
 8001fd4:	480e      	ldr	r0, [pc, #56]	; (8002010 <touchgfx_init+0xd8>)
 8001fd6:	f01d fa73 	bl	801f4c0 <atexit>
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f01d fa31 	bl	801f442 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <touchgfx_init+0xdc>)
}
 8001fe2:	b002      	add	sp, #8
 8001fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001fe8:	f7fe be4e 	b.w	8000c88 <_ZN11TouchGFXHAL10initializeEv>
 8001fec:	20024970 	.word	0x20024970
 8001ff0:	2000ad4c 	.word	0x2000ad4c
 8001ff4:	20009800 	.word	0x20009800
 8001ff8:	20000034 	.word	0x20000034
 8001ffc:	20009804 	.word	0x20009804
 8002000:	08021008 	.word	0x08021008
 8002004:	08020f6c 	.word	0x08020f6c
 8002008:	08020fa0 	.word	0x08020fa0
 800200c:	08020fd4 	.word	0x08020fd4
 8002010:	08001f11 	.word	0x08001f11
 8002014:	2000acd0 	.word	0x2000acd0

08002018 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002018:	4801      	ldr	r0, [pc, #4]	; (8002020 <touchgfx_taskEntry+0x8>)
 800201a:	f7fe be4f 	b.w	8000cbc <_ZN11TouchGFXHAL9taskEntryEv>
 800201e:	bf00      	nop
 8002020:	2000acd0 	.word	0x2000acd0

08002024 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002024:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 8002026:	490c      	ldr	r1, [pc, #48]	; (8002058 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <_GLOBAL__sub_I_touchgfx_init+0x38>)
 800202a:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 800202c:	4608      	mov	r0, r1
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	f7ff fdb2 	bl	8001b98 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002036:	4610      	mov	r0, r2
 8002038:	f014 fd0a 	bl	8016a50 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800203c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002040:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002048:	e9cd 3200 	strd	r3, r2, [sp]
 800204c:	4623      	mov	r3, r4
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002050:	f7fe fee4 	bl	8000e1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8002054:	b002      	add	sp, #8
 8002056:	bd10      	pop	{r4, pc}
 8002058:	20009f30 	.word	0x20009f30
 800205c:	0802073c 	.word	0x0802073c
 8002060:	20009f2c 	.word	0x20009f2c
 8002064:	2000ad50 	.word	0x2000ad50
 8002068:	2000acd0 	.word	0x2000acd0

0800206c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800206c:	4801      	ldr	r0, [pc, #4]	; (8002074 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800206e:	f7ff bd6f 	b.w	8001b50 <_ZN8STM32DMAD1Ev>
 8002072:	bf00      	nop
 8002074:	20009f30 	.word	0x20009f30

08002078 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002078:	4910      	ldr	r1, [pc, #64]	; (80020bc <SCB_CleanInvalidateDCache+0x44>)
 800207a:	2300      	movs	r3, #0
{
 800207c:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800207e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002082:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002086:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800208a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800208e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002092:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002096:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002098:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800209c:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800209e:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 80020a2:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80020a4:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80020a8:	d2f9      	bcs.n	800209e <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 80020aa:	3b20      	subs	r3, #32
 80020ac:	f113 0f20 	cmn.w	r3, #32
 80020b0:	d1f2      	bne.n	8002098 <SCB_CleanInvalidateDCache+0x20>
 80020b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020b6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80020c2:	2290      	movs	r2, #144	; 0x90
 80020c4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80020d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020d6:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80020e0:	4770      	bx	lr

080020e2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80020e2:	4770      	bx	lr

080020e4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	03db      	lsls	r3, r3, #15
 80020ea:	d501      	bpl.n	80020f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 80020ec:	f7ff bfc4 	b.w	8002078 <SCB_CleanInvalidateDCache>
    }
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80020f8:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80020fa:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 80020fe:	4770      	bx	lr

08002100 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002100:	4770      	bx	lr

08002102 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8002102:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002106:	4611      	mov	r1, r2
 8002108:	6840      	ldr	r0, [r0, #4]
 800210a:	6803      	ldr	r3, [r0, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4718      	bx	r3

08002110 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4604      	mov	r4, r0
    HAL::initialize();
 8002114:	f00b fa97 	bl	800d646 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800211c:	f00e fbd8 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 8002120:	4601      	mov	r1, r0
 8002122:	4620      	mov	r0, r4
 8002124:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 800212a:	4620      	mov	r0, r4
 800212c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002130:	2300      	movs	r3, #0
 8002132:	461a      	mov	r2, r3
 8002134:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800213a:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 800213c:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	c00bb800 	.word	0xc00bb800
 800214c:	2000ae0c 	.word	0x2000ae0c
 8002150:	2000adc8 	.word	0x2000adc8
 8002154:	c0000000 	.word	0xc0000000
 8002158:	000bb800 	.word	0x000bb800

0800215c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 800215c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 800215e:	f00b fa23 	bl	800d5a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	03db      	lsls	r3, r3, #15
 8002168:	d503      	bpl.n	8002172 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 800216a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 800216e:	f7ff bf83 	b.w	8002078 <SCB_CleanInvalidateDCache>
}
 8002172:	bd08      	pop	{r3, pc}
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002178:	f00b bb71 	b.w	800d85e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800217c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8002182:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	f008 f9e2 	bl	800a550 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 800218c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800218e:	f008 fa0f 	bl	800a5b0 <osMutexRelease>
        streams[handle].isActive = false;
 8002192:	2124      	movs	r1, #36	; 0x24
 8002194:	2300      	movs	r3, #0
 8002196:	fb01 4505 	mla	r5, r1, r5, r4
 800219a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 800219e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80021a2:	b90b      	cbnz	r3, 80021a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80021a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021a6:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 80021a8:	bd38      	pop	{r3, r4, r5, pc}

080021aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80021aa:	b510      	push	{r4, lr}
 80021ac:	4604      	mov	r4, r0
 80021ae:	2148      	movs	r1, #72	; 0x48
 80021b0:	f01d f939 	bl	801f426 <_ZdlPvj>
 80021b4:	4620      	mov	r0, r4
 80021b6:	bd10      	pop	{r4, pc}

080021b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80021b8:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80021ba:	b131      	cbz	r1, 80021ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 80021be:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 80021c6:	f01d f95d 	bl	801f484 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 80021ca:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80021ce:	bd08      	pop	{r3, pc}
 80021d0:	08021014 	.word	0x08021014
 80021d4:	08021028 	.word	0x08021028
 80021d8:	080211b2 	.word	0x080211b2

080021dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80021dc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80021de:	b131      	cbz	r1, 80021ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80021e2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80021ea:	f01d f94b 	bl	801f484 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80021ee:	6840      	ldr	r0, [r0, #4]
 80021f0:	4611      	mov	r1, r2
 80021f2:	6803      	ldr	r3, [r0, #0]
    }
 80021f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4718      	bx	r3
 80021fc:	08021014 	.word	0x08021014
 8002200:	080211f5 	.word	0x080211f5
 8002204:	080211b2 	.word	0x080211b2

08002208 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002208:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800220a:	b129      	cbz	r1, 8002218 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800220e:	2179      	movs	r1, #121	; 0x79
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002212:	4804      	ldr	r0, [pc, #16]	; (8002224 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002214:	f01d f936 	bl	801f484 <__assert_func>
    }
 8002218:	68c0      	ldr	r0, [r0, #12]
 800221a:	bd08      	pop	{r3, pc}
 800221c:	08021014 	.word	0x08021014
 8002220:	080213a3 	.word	0x080213a3
 8002224:	080211b2 	.word	0x080211b2

08002228 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002228:	b510      	push	{r4, lr}
 800222a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800222c:	b129      	cbz	r1, 800223a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002230:	21a2      	movs	r1, #162	; 0xa2
 8002232:	4a19      	ldr	r2, [pc, #100]	; (8002298 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002234:	4819      	ldr	r0, [pc, #100]	; (800229c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8002236:	f01d f925 	bl	801f484 <__assert_func>
        switch (cmd)
 800223a:	2a05      	cmp	r2, #5
 800223c:	d815      	bhi.n	800226a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800223e:	e8df f002 	tbb	[pc, r2]
 8002242:	1103      	.short	0x1103
 8002244:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8002248:	6840      	ldr	r0, [r0, #4]
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	4798      	blx	r3
 8002250:	b158      	cbz	r0, 800226a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002252:	2301      	movs	r3, #1
 8002254:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002258:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 800225c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800225e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002262:	e002      	b.n	800226a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002264:	2300      	movs	r3, #0
 8002266:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 800226a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800226c:	6203      	str	r3, [r0, #32]
 800226e:	e7f5      	b.n	800225c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8002270:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8002272:	2301      	movs	r3, #1
 8002274:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002278:	e7f0      	b.n	800225c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800227a:	2300      	movs	r3, #0
 800227c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	6203      	str	r3, [r0, #32]
            break;
 8002284:	e7f1      	b.n	800226a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002286:	3b00      	subs	r3, #0
 8002288:	bf18      	it	ne
 800228a:	2301      	movne	r3, #1
 800228c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 8002290:	e7eb      	b.n	800226a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002292:	bf00      	nop
 8002294:	08021014 	.word	0x08021014
 8002298:	08021558 	.word	0x08021558
 800229c:	080211b2 	.word	0x080211b2

080022a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80022a0:	b510      	push	{r4, lr}
 80022a2:	460c      	mov	r4, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80022a8:	b12c      	cbz	r4, 80022b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 80022ac:	2190      	movs	r1, #144	; 0x90
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 80022b2:	f01d f8e7 	bl	801f484 <__assert_func>
        stream.frameNumber = 0;
 80022b6:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80022b8:	6840      	ldr	r0, [r0, #4]
 80022ba:	6803      	ldr	r3, [r0, #0]
    }
 80022bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4718      	bx	r3
 80022c4:	08021014 	.word	0x08021014
 80022c8:	0802172c 	.word	0x0802172c
 80022cc:	080211b2 	.word	0x080211b2

080022d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80022d0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80022d2:	b129      	cbz	r1, 80022e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 80022d6:	2182      	movs	r1, #130	; 0x82
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 80022dc:	f01d f8d2 	bl	801f484 <__assert_func>
        stream.tickCount = 0;
 80022e0:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80022e4:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80022e8:	bd08      	pop	{r3, pc}
 80022ea:	bf00      	nop
 80022ec:	08021014 	.word	0x08021014
 80022f0:	08021907 	.word	0x08021907
 80022f4:	080211b2 	.word	0x080211b2

080022f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80022f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002300:	b153      	cbz	r3, 8002318 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002302:	f04f 31ff 	mov.w	r1, #4294967295
 8002306:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002308:	f008 f922 	bl	800a550 <osMutexAcquire>
            firstDrawThisFrame = false;
 800230c:	2300      	movs	r3, #0
 800230e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 8002312:	2301      	movs	r3, #1
 8002314:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 8002318:	bd10      	pop	{r4, pc}
	...

0800231c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
 8002320:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002322:	b129      	cbz	r1, 8002330 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002326:	21d0      	movs	r1, #208	; 0xd0
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800232a:	4814      	ldr	r0, [pc, #80]	; (800237c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800232c:	f01d f8aa 	bl	801f484 <__assert_func>
        if (stream.isPlaying)
 8002330:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002334:	b133      	cbz	r3, 8002344 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800233e:	6963      	ldr	r3, [r4, #20]
 8002340:	440b      	add	r3, r1
 8002342:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002344:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002348:	b90b      	cbnz	r3, 800234e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800234a:	2001      	movs	r0, #1
    }
 800234c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800234e:	68a3      	ldr	r3, [r4, #8]
 8002350:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002358:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800235a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 800235e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8002362:	2800      	cmp	r0, #0
 8002364:	d1f1      	bne.n	800234a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8002366:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ee      	bne.n	800234c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800236e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8002372:	e7eb      	b.n	800234c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002374:	08021014 	.word	0x08021014
 8002378:	08021ac3 	.word	0x08021ac3
 800237c:	080211b2 	.word	0x080211b2
 8002380:	20024914 	.word	0x20024914

08002384 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002384:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002386:	4c17      	ldr	r4, [pc, #92]	; (80023e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 8002388:	f00b f950 	bl	800d62c <_ZN8touchgfx3HAL8endFrameEv>
 800238c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002390:	b913      	cbnz	r3, 8002398 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 8002392:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002396:	b1ab      	cbz	r3, 80023c4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002398:	69e1      	ldr	r1, [r4, #28]
 800239a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800239e:	4353      	muls	r3, r2
 80023a0:	6922      	ldr	r2, [r4, #16]
 80023a2:	434a      	muls	r2, r1
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d30d      	bcc.n	80023c4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 80023a8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80023ac:	b138      	cbz	r0, 80023be <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80023b4:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80023b6:	bf98      	it	ls
 80023b8:	f102 32ff 	addls.w	r2, r2, #4294967295
 80023bc:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 80023be:	2301      	movs	r3, #1
 80023c0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 80023c4:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80023c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 80023c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 80023cc:	f008 f9aa 	bl	800a724 <osSemaphoreRelease>
        if (uiHasMutex)
 80023d0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80023d4:	b12b      	cbz	r3, 80023e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 80023d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023d8:	f008 f8ea 	bl	800a5b0 <osMutexRelease>
            uiHasMutex = false;
 80023dc:	2300      	movs	r3, #0
 80023de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	2000ae0c 	.word	0x2000ae0c

080023e8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80023ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80023f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023f6:	f3bf 8f6f 	isb	sy
}
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100

08002400 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002400:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002404:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002406:	b9db      	cbnz	r3, 8002440 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 8002408:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800240a:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 800240c:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 800240e:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 8002410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002414:	6103      	str	r3, [r0, #16]
 8002416:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002418:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 800241c:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800241e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 8002422:	6183      	str	r3, [r0, #24]
 8002424:	61c3      	str	r3, [r0, #28]
 8002426:	6203      	str	r3, [r0, #32]
 8002428:	6243      	str	r3, [r0, #36]	; 0x24
 800242a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800242e:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 8002432:	4434      	add	r4, r6
 8002434:	42a2      	cmp	r2, r4
 8002436:	d90a      	bls.n	800244e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 800243a:	2152      	movs	r1, #82	; 0x52
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800243e:	e003      	b.n	8002448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002442:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800244a:	f01d f81b 	bl	801f484 <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 800244e:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002450:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002454:	6085      	str	r5, [r0, #8]
    }
 8002456:	4618      	mov	r0, r3
 8002458:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800245a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 800245e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 8002462:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8002464:	630b      	str	r3, [r1, #48]	; 0x30
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	08021e1b 	.word	0x08021e1b
 800246c:	08021e56 	.word	0x08021e56
 8002470:	08021c64 	.word	0x08021c64
 8002474:	08021c94 	.word	0x08021c94
 8002478:	080211b2 	.word	0x080211b2

0800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800247c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002480:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002482:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002484:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800248e:	f008 f90f 	bl	800a6b0 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002492:	f04f 31ff 	mov.w	r1, #4294967295
 8002496:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002498:	f008 f85a 	bl	800a550 <osMutexAcquire>
                if (stream.doDecode)
 800249c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80024a0:	b343      	cbz	r3, 80024f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80024a2:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 80024a4:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 80024a8:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 80024aa:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 80024ae:	f1b8 0f00 	cmp.w	r8, #0
 80024b2:	d023      	beq.n	80024fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	4641      	mov	r1, r8
 80024b8:	4628      	mov	r0, r5
 80024ba:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024c6:	9700      	str	r7, [sp, #0]
 80024c8:	4628      	mov	r0, r5
 80024ca:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80024ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80024d2:	68a1      	ldr	r1, [r4, #8]
 80024d4:	47c0      	blx	r8
                    stream.frameCount++;
 80024d6:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80024d8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 80024dc:	3301      	adds	r3, #1
 80024de:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80024e0:	b1f0      	cbz	r0, 8002520 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	4628      	mov	r0, r5
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	4798      	blx	r3
 80024ea:	3801      	subs	r0, #1
 80024ec:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80024f4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80024f6:	f008 f85b 	bl	800a5b0 <osMutexRelease>
        while (1)
 80024fa:	e7c5      	b.n	8002488 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80024fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d0de      	beq.n	80024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002502:	4628      	mov	r0, r5
 8002504:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 8002508:	4798      	blx	r3
 800250a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800250c:	4401      	add	r1, r0
 800250e:	4628      	mov	r0, r5
 8002510:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 8002516:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 800251a:	4413      	add	r3, r2
 800251c:	6123      	str	r3, [r4, #16]
 800251e:	e7cf      	b.n	80024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                        stream.frameNumber = 1;
 8002520:	60e6      	str	r6, [r4, #12]
 8002522:	e7e4      	b.n	80024ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>

08002524 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <videoTaskFunc+0x8>)
{
 8002526:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002528:	f7ff ffa8 	bl	800247c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 800252c:	2000ae0c 	.word	0x2000ae0c

08002530 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8002530:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002534:	2500      	movs	r5, #0
 8002536:	f7fe fe3b 	bl	80011b0 <_ZN20HardwareMJPEGDecoderC1Ev>
 800253a:	4c13      	ldr	r4, [pc, #76]	; (8002588 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 800253e:	462a      	mov	r2, r5
 8002540:	4629      	mov	r1, r5
 8002542:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	63a5      	str	r5, [r4, #56]	; 0x38
 800254c:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800254e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002550:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002554:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002558:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800255c:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 8002560:	e9c4 5501 	strd	r5, r5, [r4, #4]
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002564:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002568:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800256c:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002570:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8002574:	f008 f846 	bl	800a604 <osSemaphoreNew>
 8002578:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 800257a:	4628      	mov	r0, r5
 800257c:	f007 ffa6 	bl	800a4cc <osMutexNew>
 8002580:	6460      	str	r0, [r4, #68]	; 0x44
}
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	2000adc8 	.word	0x2000adc8
 8002588:	2000ae0c 	.word	0x2000ae0c
 800258c:	08022004 	.word	0x08022004

08002590 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002594:	b08d      	sub	sp, #52	; 0x34
 8002596:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002598:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800259c:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 80025a0:	9001      	str	r0, [sp, #4]
 80025a2:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80025a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a8:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 80025ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 80025b2:	2200      	movs	r2, #0
 80025b4:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80025b8:	4401      	add	r1, r0
 80025ba:	4541      	cmp	r1, r8
 80025bc:	d806      	bhi.n	80025cc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
 80025be:	b10a      	cbz	r2, 80025c4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x34>
 80025c0:	4a66      	ldr	r2, [pc, #408]	; (800275c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 80025c2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 80025c4:	9806      	ldr	r0, [sp, #24]
 80025c6:	b00d      	add	sp, #52	; 0x34
 80025c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80025cc:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80025d0:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80025d2:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 80025d4:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 80025d8:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80025dc:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80025e0:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80025e4:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fb01 3302 	mla	r3, r1, r2, r3
 80025ee:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 80025f6:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 80025f8:	9b02      	ldr	r3, [sp, #8]
 80025fa:	4a59      	ldr	r2, [pc, #356]	; (8002760 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f200 8099 	bhi.w	8002734 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a4>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002602:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 8002606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002608:	f8cd 900c 	str.w	r9, [sp, #12]
 800260c:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 800260e:	f10c 0308 	add.w	r3, ip, #8
 8002612:	9309      	str	r3, [sp, #36]	; 0x24
          for(j=0; j < 8; j+=2)
 8002614:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002618:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 800261a:	2600      	movs	r6, #0
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 8002622:	9308      	str	r3, [sp, #32]
 8002624:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002626:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002628:	484e      	ldr	r0, [pc, #312]	; (8002764 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 800262a:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 800262c:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 8002630:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002632:	9b04      	ldr	r3, [sp, #16]
 8002634:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002638:	9304      	str	r3, [sp, #16]
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 800263c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002640:	9b04      	ldr	r3, [sp, #16]
 8002642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002646:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800264a:	4848      	ldr	r0, [pc, #288]	; (800276c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 800264c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002650:	4847      	ldr	r0, [pc, #284]	; (8002770 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002652:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002656:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002658:	4a46      	ldr	r2, [pc, #280]	; (8002774 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 800265a:	4414      	add	r4, r2
 800265c:	4610      	mov	r0, r2
 800265e:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002662:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002666:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 8002668:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800266a:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800266e:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002672:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002676:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002678:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800267c:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002680:	0892      	lsrs	r2, r2, #2
 8002682:	0152      	lsls	r2, r2, #5
 8002684:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002688:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 800268c:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800268e:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002692:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002694:	eb04 020e 	add.w	r2, r4, lr
 8002698:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800269c:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026a0:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026a2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026a6:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026aa:	0892      	lsrs	r2, r2, #2
 80026ac:	0152      	lsls	r2, r2, #5
 80026ae:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80026b2:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 80026b6:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80026ba:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 80026bc:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026c0:	eb04 020e 	add.w	r2, r4, lr
 80026c4:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026c8:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026cc:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026ce:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026d2:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026d6:	0892      	lsrs	r2, r2, #2
 80026d8:	0152      	lsls	r2, r2, #5
 80026da:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80026de:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 80026e2:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 80026e6:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80026e8:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026ea:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026ec:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026ee:	440a      	add	r2, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026f0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026f4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026f8:	089b      	lsrs	r3, r3, #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026fa:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002702:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002706:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 8002708:	3604      	adds	r6, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800270a:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
          for(j=0; j < 8; j+=2)
 800270e:	2e10      	cmp	r6, #16
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002710:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 8002712:	d187      	bne.n	8002624 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 8002714:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 8002716:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800271a:	3510      	adds	r5, #16
          pLum += 64;
 800271c:	3340      	adds	r3, #64	; 0x40
 800271e:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 8002720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002722:	4563      	cmp	r3, ip
 8002724:	f47f af76 	bne.w	8002614 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x84>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002728:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800272a:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 800272e:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002732:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 8002734:	f10b 0b02 	add.w	fp, fp, #2
 8002738:	f1bb 0f10 	cmp.w	fp, #16
 800273c:	d107      	bne.n	800274e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1be>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800273e:	9b01      	ldr	r3, [sp, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002746:	9301      	str	r3, [sp, #4]
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 8002748:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800274c:	e732      	b.n	80025b4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
      if(i == 8)
 800274e:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 8002752:	bf04      	itt	eq
 8002754:	9b01      	ldreq	r3, [sp, #4]
 8002756:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 800275a:	e74d      	b.n	80025f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 800275c:	2000dad4 	.word	0x2000dad4
 8002760:	000bb7ff 	.word	0x000bb7ff
 8002764:	2000c654 	.word	0x2000c654
 8002768:	2000ba54 	.word	0x2000ba54
 800276c:	2000c254 	.word	0x2000c254
 8002770:	2000be54 	.word	0x2000be54
 8002774:	0802203c 	.word	0x0802203c

08002778 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800277c:	0a1b      	lsrs	r3, r3, #8
{
 800277e:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002780:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002782:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002784:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002788:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800278c:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800278e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002790:	691b      	ldr	r3, [r3, #16]
{
 8002792:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002794:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002796:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8002798:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800279c:	4413      	add	r3, r2
 800279e:	4573      	cmp	r3, lr
 80027a0:	d803      	bhi.n	80027aa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 80027a2:	9805      	ldr	r0, [sp, #20]
 80027a4:	b00d      	add	sp, #52	; 0x34
 80027a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027aa:	ea4f 120e 	mov.w	r2, lr, lsl #4
 80027ae:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 80027b0:	f10e 0e01 	add.w	lr, lr, #1
 80027b4:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 80027b8:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027ba:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80027be:	9b03      	ldr	r3, [sp, #12]
 80027c0:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80027c4:	9b02      	ldr	r3, [sp, #8]
 80027c6:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80027d0:	9300      	str	r3, [sp, #0]
    currentMCU++;
 80027d2:	2308      	movs	r3, #8
 80027d4:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80027d6:	9b07      	ldr	r3, [sp, #28]
 80027d8:	9a00      	ldr	r2, [sp, #0]
 80027da:	4293      	cmp	r3, r2
 80027dc:	d969      	bls.n	80028b2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 80027de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027e0:	46d0      	mov	r8, sl
 80027e2:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 80027ec:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 80027ee:	2400      	movs	r4, #0
 80027f0:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 80027f2:	f108 0301 	add.w	r3, r8, #1
 80027f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80027f8:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 80027fc:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002800:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800280c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002816:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002818:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800281e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002828:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800282c:	4613      	mov	r3, r2
 800282e:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002830:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002834:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002838:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800283a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800283c:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002840:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002844:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002846:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800284a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800284e:	0892      	lsrs	r2, r2, #2
 8002850:	0152      	lsls	r2, r2, #5
 8002852:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002856:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800285a:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 800285e:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002862:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8002866:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002868:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800286a:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800286c:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800286e:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 8002870:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002872:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002876:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800287a:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800287e:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002882:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002886:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800288a:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800288e:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002892:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8002894:	d1b0      	bne.n	80027f8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 8002896:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8002898:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800289a:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 800289e:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 80028a2:	42bb      	cmp	r3, r7
 80028a4:	d1a2      	bne.n	80027ec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 80028a6:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 80028a8:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 80028ac:	9b03      	ldr	r3, [sp, #12]
 80028ae:	441a      	add	r2, r3
 80028b0:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 80028b2:	9b04      	ldr	r3, [sp, #16]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	9304      	str	r3, [sp, #16]
 80028b8:	d18d      	bne.n	80027d6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80028ba:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80028be:	e76b      	b.n	8002798 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 80028c0:	2000dad4 	.word	0x2000dad4
 80028c4:	2000ba54 	.word	0x2000ba54
 80028c8:	2000c654 	.word	0x2000c654
 80028cc:	2000c254 	.word	0x2000c254
 80028d0:	2000be54 	.word	0x2000be54
 80028d4:	0802203c 	.word	0x0802203c

080028d8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028dc:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80028de:	22c0      	movs	r2, #192	; 0xc0
{
 80028e0:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 80028e2:	4654      	mov	r4, sl
{
 80028e4:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80028e6:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80028ea:	4a35      	ldr	r2, [pc, #212]	; (80029c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80028ec:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80028ee:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80028f0:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80028f2:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80028f4:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80028f6:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80028f8:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 80028fa:	9b04      	ldr	r3, [sp, #16]
 80028fc:	eb03 020a 	add.w	r2, r3, sl
 8002900:	42a2      	cmp	r2, r4
 8002902:	d803      	bhi.n	800290c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002904:	4618      	mov	r0, r3
 8002906:	b009      	add	sp, #36	; 0x24
 8002908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800290c:	00e1      	lsls	r1, r4, #3
 800290e:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002910:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002912:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002914:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002918:	9a01      	ldr	r2, [sp, #4]
 800291a:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800291e:	9a00      	ldr	r2, [sp, #0]
 8002920:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;
 8002924:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002926:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002928:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800292a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800292e:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002932:	9905      	ldr	r1, [sp, #20]
 8002934:	4291      	cmp	r1, r2
 8002936:	d93d      	bls.n	80029b4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 8002938:	9907      	ldr	r1, [sp, #28]
 800293a:	f106 3eff 	add.w	lr, r6, #4294967295
 800293e:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002940:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002944:	9102      	str	r1, [sp, #8]
 8002946:	f105 0110 	add.w	r1, r5, #16
 800294a:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800294c:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800294e:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002952:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002956:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800295c:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800295e:	4f1a      	ldr	r7, [pc, #104]	; (80029c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 8002960:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002964:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002968:	440f      	add	r7, r1
 800296a:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800296e:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002974:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002978:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800297a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002980:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002984:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002988:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800298a:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800298c:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800298e:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002992:	eb01 4828 	add.w	r8, r1, r8, asr #16
 8002996:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800299a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800299e:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr =
 80029a2:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 80029a6:	429d      	cmp	r5, r3
 80029a8:	d1d0      	bne.n	800294c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 80029aa:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 80029ac:	3608      	adds	r6, #8
          pLum += 8;
 80029ae:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 80029b2:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 80029b4:	9b03      	ldr	r3, [sp, #12]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	d1ba      	bne.n	8002932 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80029bc:	30c0      	adds	r0, #192	; 0xc0
 80029be:	e79c      	b.n	80028fa <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 80029c0:	2000dad4 	.word	0x2000dad4
 80029c4:	0802203c 	.word	0x0802203c
 80029c8:	2000c654 	.word	0x2000c654
 80029cc:	2000ba54 	.word	0x2000ba54
 80029d0:	2000c254 	.word	0x2000c254
 80029d4:	2000be54 	.word	0x2000be54

080029d8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	b085      	sub	sp, #20
 80029de:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80029e0:	0998      	lsrs	r0, r3, #6
{
 80029e2:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 80029e4:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80029e8:	491a      	ldr	r1, [pc, #104]	; (8002a54 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 80029ea:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80029ec:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80029f0:	6909      	ldr	r1, [r1, #16]
 80029f2:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 80029f4:	9b03      	ldr	r3, [sp, #12]
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d802      	bhi.n	8002a00 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 80029fa:	b005      	add	sp, #20
 80029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a00:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 8002a02:	46a4      	mov	ip, r4
    currentMCU++;
 8002a04:	3201      	adds	r2, #1
 8002a06:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a08:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a0c:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002a10:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a1a:	9901      	ldr	r1, [sp, #4]
 8002a1c:	4299      	cmp	r1, r3
 8002a1e:	d914      	bls.n	8002a4a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002a20:	9902      	ldr	r1, [sp, #8]
 8002a22:	46e2      	mov	sl, ip
 8002a24:	4419      	add	r1, r3
 8002a26:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002a2a:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002a2e:	08f5      	lsrs	r5, r6, #3
 8002a30:	08b6      	lsrs	r6, r6, #2
 8002a32:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002a36:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002a3a:	432e      	orrs	r6, r5
 8002a3c:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002a40:	4559      	cmp	r1, fp
 8002a42:	d1f2      	bne.n	8002a2a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002a44:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002a48:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002a4a:	3f01      	subs	r7, #1
 8002a4c:	d1e5      	bne.n	8002a1a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002a4e:	3440      	adds	r4, #64	; 0x40
 8002a50:	e7d0      	b.n	80029f4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002a52:	bf00      	nop
 8002a54:	2000dad4 	.word	0x2000dad4

08002a58 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002a60:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002a62:	0a18      	lsrs	r0, r3, #8
{
 8002a64:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a6a:	4928      	ldr	r1, [pc, #160]	; (8002b0c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002a6c:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a6e:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a72:	6909      	ldr	r1, [r1, #16]
 8002a74:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d802      	bhi.n	8002a82 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002a7c:	b005      	add	sp, #20
 8002a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a82:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 8002a84:	46ae      	mov	lr, r5
    currentMCU++;
 8002a86:	3201      	adds	r2, #1
 8002a88:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a8c:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a90:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002a94:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a9e:	9b00      	ldr	r3, [sp, #0]
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d92c      	bls.n	8002afe <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;
 8002aa4:	9b02      	ldr	r3, [sp, #8]
 8002aa6:	4674      	mov	r4, lr
 8002aa8:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002aaa:	f106 0310 	add.w	r3, r6, #16
 8002aae:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002ab0:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002ab4:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002ab6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002aba:	fb13 f308 	smulbb	r3, r3, r8
 8002abe:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002ac2:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002ac6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002aca:	fb13 f308 	smulbb	r3, r3, r8
 8002ace:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002ad2:	109b      	asrs	r3, r3, #2
 8002ad4:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002ad6:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002ada:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002ade:	fb1b fb08 	smulbb	fp, fp, r8
 8002ae2:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002ae6:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 8002aea:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002aec:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr =
 8002af0:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 8002af4:	429e      	cmp	r6, r3
 8002af6:	d1db      	bne.n	8002ab0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002af8:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002afc:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002afe:	f1bc 0c01 	subs.w	ip, ip, #1
 8002b02:	d1cc      	bne.n	8002a9e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002b04:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002b08:	e7b5      	b.n	8002a76 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002b0a:	bf00      	nop
 8002b0c:	2000dad4 	.word	0x2000dad4

08002b10 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002b12:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002b14:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b16:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b18:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002b1e:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002b20:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b22:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b26:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002b28:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002b2a:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b2c:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002b2e:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002b30:	d13c      	bne.n	8002bac <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002b32:	2801      	cmp	r0, #1
 8002b34:	d122      	bne.n	8002b7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002b36:	4823      	ldr	r0, [pc, #140]	; (8002bc4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002b38:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002b3a:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002b3e:	bf18      	it	ne
 8002b40:	f1c1 0110 	rsbne	r1, r1, #16
 8002b44:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002b46:	2110      	movs	r1, #16
 8002b48:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002b4a:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002b4c:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002b4e:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002b50:	4421      	add	r1, r4
 8002b52:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002b54:	0061      	lsls	r1, r4, #1
 8002b56:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002b58:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002b5c:	fb00 4411 	mls	r4, r0, r1, r4
 8002b60:	b104      	cbz	r4, 8002b64 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002b62:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002b64:	6a1c      	ldr	r4, [r3, #32]
 8002b66:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002b6a:	fb04 5510 	mls	r5, r4, r0, r5
 8002b6e:	b105      	cbz	r5, 8002b72 <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002b70:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002b72:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002b74:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002b76:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002b78:	6011      	str	r1, [r2, #0]
}
 8002b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002b7c:	2802      	cmp	r0, #2
 8002b7e:	d10b      	bne.n	8002b98 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002b80:	4811      	ldr	r0, [pc, #68]	; (8002bc8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002b82:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002b84:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002b88:	bf18      	it	ne
 8002b8a:	f1c1 0110 	rsbne	r1, r1, #16
 8002b8e:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002b90:	2110      	movs	r1, #16
 8002b92:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002b94:	2108      	movs	r1, #8
 8002b96:	e7d8      	b.n	8002b4a <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002b9a:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002b9c:	f014 0107 	ands.w	r1, r4, #7
 8002ba0:	d001      	beq.n	8002ba6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002ba2:	f1c1 0108 	rsb	r1, r1, #8
 8002ba6:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002ba8:	2108      	movs	r1, #8
 8002baa:	e7cd      	b.n	8002b48 <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002bac:	b90e      	cbnz	r6, 8002bb2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002bae:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002bb0:	e7f3      	b.n	8002b9a <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002bb2:	2e30      	cmp	r6, #48	; 0x30
 8002bb4:	d101      	bne.n	8002bba <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002bb6:	4807      	ldr	r0, [pc, #28]	; (8002bd4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002bb8:	e7ef      	b.n	8002b9a <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002bba:	2001      	movs	r0, #1
 8002bbc:	e7dd      	b.n	8002b7a <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002bbe:	bf00      	nop
 8002bc0:	2000dad4 	.word	0x2000dad4
 8002bc4:	08002591 	.word	0x08002591
 8002bc8:	08002779 	.word	0x08002779
 8002bcc:	080028d9 	.word	0x080028d9
 8002bd0:	080029d9 	.word	0x080029d9
 8002bd4:	08002a59 	.word	0x08002a59

08002bd8 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	f8df c250 	ldr.w	ip, [pc, #592]	; 8002e30 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8002e34 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002be6:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002bea:	4f7e      	ldr	r7, [pc, #504]	; (8002de4 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002bec:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002bf0:	4e7d      	ldr	r6, [pc, #500]	; (8002de8 <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002bf2:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002bf6:	4d7d      	ldr	r5, [pc, #500]	; (8002dec <TGFX_JPEG_InitColorTables+0x214>)
 8002bf8:	4c7d      	ldr	r4, [pc, #500]	; (8002df0 <TGFX_JPEG_InitColorTables+0x218>)
 8002bfa:	487e      	ldr	r0, [pc, #504]	; (8002df4 <TGFX_JPEG_InitColorTables+0x21c>)
 8002bfc:	497e      	ldr	r1, [pc, #504]	; (8002df8 <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002bfe:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c02:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c06:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c0a:	1412      	asrs	r2, r2, #16
 8002c0c:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c10:	fb0a f203 	mul.w	r2, sl, r3
 8002c14:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c18:	1412      	asrs	r2, r2, #16
 8002c1a:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c1e:	fb09 f203 	mul.w	r2, r9, r3
 8002c22:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c26:	1412      	asrs	r2, r2, #16
 8002c28:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c2c:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <TGFX_JPEG_InitColorTables+0x224>)
 8002c2e:	435a      	muls	r2, r3
 8002c30:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c34:	1412      	asrs	r2, r2, #16
 8002c36:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <TGFX_JPEG_InitColorTables+0x228>)
 8002c3c:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c3e:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c40:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c48:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002c4c:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c50:	f343 024f 	sbfx	r2, r3, #1, #16
 8002c54:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <TGFX_JPEG_InitColorTables+0x22c>)
 8002c5a:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c5e:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c62:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002c66:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <TGFX_JPEG_InitColorTables+0x230>)
 8002c6c:	fb02 e203 	mla	r2, r2, r3, lr
 8002c70:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002c74:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002c78:	d1c1      	bne.n	8002bfe <TGFX_JPEG_InitColorTables+0x26>
 8002c7a:	4c64      	ldr	r4, [pc, #400]	; (8002e0c <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002c7c:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002c7e:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002c80:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002c82:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002c84:	2907      	cmp	r1, #7
 8002c86:	f240 80a6 	bls.w	8002dd6 <TGFX_JPEG_InitColorTables+0x1fe>
 8002c8a:	2a07      	cmp	r2, #7
 8002c8c:	bf8c      	ite	hi
 8002c8e:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002c92:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8002c96:	3101      	adds	r1, #1
 8002c98:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002c9a:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002c9e:	2910      	cmp	r1, #16
 8002ca0:	d1f0      	bne.n	8002c84 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002ca2:	3201      	adds	r2, #1
 8002ca4:	3420      	adds	r4, #32
 8002ca6:	2a10      	cmp	r2, #16
 8002ca8:	d1e9      	bne.n	8002c7e <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002caa:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002cac:	f8df e188 	ldr.w	lr, [pc, #392]	; 8002e38 <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002cb0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8002e3c <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002cb4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002e40 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cb8:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002e44 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cbc:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cc2:	00e4      	lsls	r4, r4, #3
 8002cc4:	fa1f fc83 	uxth.w	ip, r3
 8002cc8:	b2a4      	uxth	r4, r4
 8002cca:	0142      	lsls	r2, r0, #5
 8002ccc:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002cd0:	4f4f      	ldr	r7, [pc, #316]	; (8002e10 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002cd2:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cd4:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002cd6:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002cd8:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cda:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002cdc:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cde:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002ce2:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002ce6:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cea:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002cec:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cf0:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002cf2:	4f48      	ldr	r7, [pc, #288]	; (8002e14 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cf4:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002cf8:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002cfc:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002d00:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002d04:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002d08:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 8002d0c:	f102 0202 	add.w	r2, r2, #2
 8002d10:	d1dc      	bne.n	8002ccc <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002d12:	3001      	adds	r0, #1
 8002d14:	2810      	cmp	r0, #16
 8002d16:	d1d1      	bne.n	8002cbc <TGFX_JPEG_InitColorTables+0xe4>
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002e48 <TGFX_JPEG_InitColorTables+0x270>
 8002d1e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002e4c <TGFX_JPEG_InitColorTables+0x274>
 8002d22:	4608      	mov	r0, r1
 8002d24:	f8df e128 	ldr.w	lr, [pc, #296]	; 8002e50 <TGFX_JPEG_InitColorTables+0x278>
 8002d28:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002e54 <TGFX_JPEG_InitColorTables+0x27c>
 8002d2c:	b283      	uxth	r3, r0
 8002d2e:	eb09 0701 	add.w	r7, r9, r1
 8002d32:	eb08 0601 	add.w	r6, r8, r1
 8002d36:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	eb0c 0401 	add.w	r4, ip, r1
 8002d42:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002d44:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002d48:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002d4c:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002d50:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8002d54:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002d58:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for(j = 0; j < 8; j++)
 8002d5c:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002d5e:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d1ed      	bne.n	8002d44 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8002d68:	3008      	adds	r0, #8
 8002d6a:	3110      	adds	r1, #16
 8002d6c:	2840      	cmp	r0, #64	; 0x40
 8002d6e:	d1dd      	bne.n	8002d2c <TGFX_JPEG_InitColorTables+0x154>
 8002d70:	4d29      	ldr	r5, [pc, #164]	; (8002e18 <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	4c29      	ldr	r4, [pc, #164]	; (8002e1c <TGFX_JPEG_InitColorTables+0x244>)
 8002d76:	482a      	ldr	r0, [pc, #168]	; (8002e20 <TGFX_JPEG_InitColorTables+0x248>)
 8002d78:	492a      	ldr	r1, [pc, #168]	; (8002e24 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002d7a:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002e58 <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002d7e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002e5c <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002d82:	4f29      	ldr	r7, [pc, #164]	; (8002e28 <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002d84:	4e29      	ldr	r6, [pc, #164]	; (8002e2c <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002d86:	fb0e f203 	mul.w	r2, lr, r3
 8002d8a:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 8002d8e:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8002d92:	1412      	asrs	r2, r2, #16
 8002d94:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002d98:	fb0c f203 	mul.w	r2, ip, r3
 8002d9c:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8002da0:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8002da4:	1412      	asrs	r2, r2, #16
 8002da6:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002daa:	fb07 f203 	mul.w	r2, r7, r3
 8002dae:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8002db2:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 8002db6:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002dba:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 8002dbe:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002dc0:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002dc8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002dcc:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002dd0:	d1d9      	bne.n	8002d86 <TGFX_JPEG_InitColorTables+0x1ae>
}
 8002dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 8002dd6:	2a07      	cmp	r2, #7
 8002dd8:	bf8c      	ite	hi
 8002dda:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 8002dde:	4618      	movls	r0, r3
 8002de0:	e759      	b.n	8002c96 <TGFX_JPEG_InitColorTables+0xbe>
 8002de2:	bf00      	nop
 8002de4:	2000b654 	.word	0x2000b654
 8002de8:	2000e694 	.word	0x2000e694
 8002dec:	2000ca54 	.word	0x2000ca54
 8002df0:	2000ae54 	.word	0x2000ae54
 8002df4:	2000ce54 	.word	0x2000ce54
 8002df8:	2000b254 	.word	0x2000b254
 8002dfc:	ffffd4d1 	.word	0xffffd4d1
 8002e00:	ffffab30 	.word	0xffffab30
 8002e04:	ffff94d1 	.word	0xffff94d1
 8002e08:	ffffeb30 	.word	0xffffeb30
 8002e0c:	2000e494 	.word	0x2000e494
 8002e10:	2000d654 	.word	0x2000d654
 8002e14:	2000d854 	.word	0x2000d854
 8002e18:	2000c654 	.word	0x2000c654
 8002e1c:	2000ba54 	.word	0x2000ba54
 8002e20:	2000c254 	.word	0x2000c254
 8002e24:	2000be54 	.word	0x2000be54
 8002e28:	ffff4930 	.word	0xffff4930
 8002e2c:	ffffa7e8 	.word	0xffffa7e8
 8002e30:	2000d254 	.word	0x2000d254
 8002e34:	2000ea94 	.word	0x2000ea94
 8002e38:	2000db14 	.word	0x2000db14
 8002e3c:	2000dd14 	.word	0x2000dd14
 8002e40:	2000df94 	.word	0x2000df94
 8002e44:	2000e194 	.word	0x2000e194
 8002e48:	2000e414 	.word	0x2000e414
 8002e4c:	2000da54 	.word	0x2000da54
 8002e50:	2000df14 	.word	0x2000df14
 8002e54:	2000e394 	.word	0x2000e394
 8002e58:	000166e8 	.word	0x000166e8
 8002e5c:	0001c5a0 	.word	0x0001c5a0

08002e60 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8002e60:	4901      	ldr	r1, [pc, #4]	; (8002e68 <vApplicationIdleHook+0x8>)
 8002e62:	2000      	movs	r0, #0
 8002e64:	f009 b918 	b.w	800c098 <vTaskSetApplicationTaskTag>
 8002e68:	08001111 	.word	0x08001111

08002e6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 8002e6e:	2064      	movs	r0, #100	; 0x64
 8002e70:	f007 fb12 	bl	800a498 <osDelay>
  for(;;)
 8002e74:	e7fb      	b.n	8002e6e <StartDefaultTask+0x2>
	...

08002e78 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002e78:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e7a:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002e7e:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e86:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002e88:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e8a:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002e8c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e8e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e90:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e94:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8002e96:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e98:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e9a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e9e:	f006 f901 	bl	80090a4 <HAL_QSPI_Command>
 8002ea2:	b9e0      	cbnz	r0, 8002ede <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8002ea4:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8002ea6:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002eac:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8002eb0:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002eba:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ebc:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002ebe:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8002ec2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec6:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8002ec8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eca:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ece:	f006 f9e4 	bl	800929a <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8002ed2:	3800      	subs	r0, #0
 8002ed4:	bf18      	it	ne
 8002ed6:	2001      	movne	r0, #1
}
 8002ed8:	b015      	add	sp, #84	; 0x54
 8002eda:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8002ede:	2001      	movs	r0, #1
 8002ee0:	e7fa      	b.n	8002ed8 <QSPI_WriteEnable.constprop.0+0x60>
 8002ee2:	bf00      	nop
 8002ee4:	2000f140 	.word	0x2000f140

08002ee8 <SystemClock_Config>:
{
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eec:	2210      	movs	r2, #16
 8002eee:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef0:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef2:	a809      	add	r0, sp, #36	; 0x24
 8002ef4:	f01c fb56 	bl	801f5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef8:	2214      	movs	r2, #20
 8002efa:	2100      	movs	r1, #0
 8002efc:	a802      	add	r0, sp, #8
 8002efe:	f01c fb51 	bl	801f5a4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f04:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f06:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <SystemClock_Config+0x98>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f24:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f34:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f3c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f40:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f44:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002f48:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f4a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002f4e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f50:	f006 fa34 	bl	80093bc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f54:	f005 ff42 	bl	8008ddc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f58:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f5a:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f5c:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f66:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f6e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f70:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f72:	f006 fc17 	bl	80097a4 <HAL_RCC_ClockConfig>
}
 8002f76:	b014      	add	sp, #80	; 0x50
 8002f78:	bd10      	pop	{r4, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000

08002f84 <MX_I2C4_Init>:
{
 8002f84:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002f86:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f88:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002f8e:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f90:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002f92:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f96:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8002f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f9c:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa0:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002fa4:	f004 fbed 	bl	8007782 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4620      	mov	r0, r4
 8002fac:	f004 fdcd 	bl	8007b4a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4620      	mov	r0, r4
}
 8002fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002fb8:	f004 bded 	b.w	8007b96 <HAL_I2CEx_ConfigDigitalFilter>
 8002fbc:	40006000 	.word	0x40006000
 8002fc0:	2000eff4 	.word	0x2000eff4
 8002fc4:	00c0eaff 	.word	0x00c0eaff

08002fc8 <main>:
{
 8002fc8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002fcc:	b0bb      	sub	sp, #236	; 0xec

/* MPU Configuration */

void MPU_Config(void)
{
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002fce:	2210      	movs	r2, #16
 8002fd0:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002fd2:	2401      	movs	r4, #1
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002fd4:	a82c      	add	r0, sp, #176	; 0xb0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8002fd6:	261c      	movs	r6, #28
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002fd8:	f01c fae4 	bl	801f5a4 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002fdc:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8002fde:	f003 f979 	bl	80062d4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002fe2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002fe6:	4bcd      	ldr	r3, [pc, #820]	; (800331c <main+0x354>)
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002fe8:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002fec:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002ff0:	e9cd 032d 	strd	r0, r3, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ff4:	4bca      	ldr	r3, [pc, #808]	; (8003320 <main+0x358>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ff6:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ff8:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ffa:	f003 f989 	bl	8006310 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8002ffe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003002:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003006:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003008:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.BaseAddress = 0x90000000;
 800300a:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800300c:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003010:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003014:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003018:	f003 f97a 	bl	8006310 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800301c:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800301e:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003020:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003024:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003028:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800302a:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800302e:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003032:	f003 f96d 	bl	8006310 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003036:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800303a:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800303c:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003040:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003042:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003044:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003048:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800304c:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003050:	f003 f95e 	bl	8006310 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003054:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003056:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003058:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800305c:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003060:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003064:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003068:	f003 f952 	bl	8006310 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800306c:	4630      	mov	r0, r6
 800306e:	f003 f93f 	bl	80062f0 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003072:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003076:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800307a:	4aaa      	ldr	r2, [pc, #680]	; (8003324 <main+0x35c>)
 800307c:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003084:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003088:	6953      	ldr	r3, [r2, #20]
 800308a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003094:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003098:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800309c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80030a0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030a4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030a8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80030ac:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80030b0:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030b2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030b6:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030b8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80030bc:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030be:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80030c2:	d2f9      	bcs.n	80030b8 <main+0xf0>
    } while(sets-- != 0U);
 80030c4:	3b20      	subs	r3, #32
 80030c6:	f113 0f20 	cmn.w	r3, #32
 80030ca:	d1f2      	bne.n	80030b2 <main+0xea>
 80030cc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80030d0:	6953      	ldr	r3, [r2, #20]
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6153      	str	r3, [r2, #20]
 80030d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030dc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80030e0:	f003 f85c 	bl	800619c <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2501      	movs	r5, #1
  SystemClock_Config();
 80030e6:	f7ff feff 	bl	8002ee8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ea:	2214      	movs	r2, #20
 80030ec:	2100      	movs	r1, #0
 80030ee:	a82c      	add	r0, sp, #176	; 0xb0
 80030f0:	f01c fa58 	bl	801f5a4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f4:	4b8c      	ldr	r3, [pc, #560]	; (8003328 <main+0x360>)
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80030f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030fa:	488c      	ldr	r0, [pc, #560]	; (800332c <main+0x364>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2400      	movs	r4, #0
 8003104:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003108:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 800310c:	f04f 0802 	mov.w	r8, #2
  hdsi.Instance = DSI;
 8003110:	4f87      	ldr	r7, [pc, #540]	; (8003330 <main+0x368>)
  hdsi.Init.TXEscapeCkdiv = 4;
 8003112:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003118:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800311c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311e:	f002 0210 	and.w	r2, r2, #16
 8003122:	9203      	str	r2, [sp, #12]
 8003124:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003128:	f042 0202 	orr.w	r2, r2, #2
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
 800312e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003130:	f002 0202 	and.w	r2, r2, #2
 8003134:	9204      	str	r2, [sp, #16]
 8003136:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003146:	9205      	str	r2, [sp, #20]
 8003148:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800314a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314c:	f042 0208 	orr.w	r2, r2, #8
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	f002 0208 	and.w	r2, r2, #8
 8003158:	9206      	str	r2, [sp, #24]
 800315a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315e:	f042 0204 	orr.w	r2, r2, #4
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	f002 0204 	and.w	r2, r2, #4
 800316a:	9207      	str	r2, [sp, #28]
 800316c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800316e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
 8003176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003178:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800317c:	9208      	str	r2, [sp, #32]
 800317e:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
 8003188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318a:	f002 0220 	and.w	r2, r2, #32
 800318e:	9209      	str	r2, [sp, #36]	; 0x24
 8003190:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
 800319a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031a0:	920a      	str	r2, [sp, #40]	; 0x28
 80031a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80031ac:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80031b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80031b8:	f004 f944 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80031bc:	2200      	movs	r2, #0
 80031be:	21c0      	movs	r1, #192	; 0xc0
 80031c0:	485c      	ldr	r0, [pc, #368]	; (8003334 <main+0x36c>)
 80031c2:	f004 f93f 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	485b      	ldr	r0, [pc, #364]	; (8003338 <main+0x370>)
 80031cc:	f004 f93a 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2102      	movs	r1, #2
 80031d4:	4855      	ldr	r0, [pc, #340]	; (800332c <main+0x364>)
 80031d6:	f004 f935 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80031da:	a92c      	add	r1, sp, #176	; 0xb0
 80031dc:	4853      	ldr	r0, [pc, #332]	; (800332c <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031de:	e9cd 652c 	strd	r6, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031e2:	e9cd 552e 	strd	r5, r5, [sp, #184]	; 0xb8
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f003 ffa1 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 80031ea:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ec:	a92c      	add	r1, sp, #176	; 0xb0
 80031ee:	4851      	ldr	r0, [pc, #324]	; (8003334 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f0:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f8:	f003 ff98 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80031fc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80031fe:	a92c      	add	r1, sp, #176	; 0xb0
 8003200:	484d      	ldr	r0, [pc, #308]	; (8003338 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003202:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800320a:	f003 ff8f 	bl	800712c <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800320e:	a92c      	add	r1, sp, #176	; 0xb0
 8003210:	4846      	ldr	r0, [pc, #280]	; (800332c <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003212:	e9cd 852c 	strd	r8, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800321a:	f003 ff87 	bl	800712c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800321e:	4847      	ldr	r0, [pc, #284]	; (800333c <main+0x374>)
 8003220:	4b47      	ldr	r3, [pc, #284]	; (8003340 <main+0x378>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003222:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8003224:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003226:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003228:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800322c:	f003 f89c 	bl	8006368 <HAL_CRC_Init>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8003230:	4631      	mov	r1, r6
 8003232:	4622      	mov	r2, r4
 8003234:	483d      	ldr	r0, [pc, #244]	; (800332c <main+0x364>)
 8003236:	f004 f905 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 800323a:	2014      	movs	r0, #20
 800323c:	f002 ffd2 	bl	80061e4 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003240:	4631      	mov	r1, r6
 8003242:	462a      	mov	r2, r5
 8003244:	4839      	ldr	r0, [pc, #228]	; (800332c <main+0x364>)
 8003246:	f004 f8fd 	bl	8007444 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800324a:	200a      	movs	r0, #10
 800324c:	f002 ffca 	bl	80061e4 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8003250:	2224      	movs	r2, #36	; 0x24
 8003252:	4621      	mov	r1, r4
 8003254:	a815      	add	r0, sp, #84	; 0x54
  DSI_PLLInitTypeDef PLLInit = {0};
 8003256:	940e      	str	r4, [sp, #56]	; 0x38
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8003258:	f01c f9a4 	bl	801f5a4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800325c:	2218      	movs	r2, #24
 800325e:	4621      	mov	r1, r4
 8003260:	a80f      	add	r0, sp, #60	; 0x3c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003262:	f44f 7680 	mov.w	r6, #256	; 0x100
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8003266:	f01c f99d 	bl	801f5a4 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800326a:	2234      	movs	r2, #52	; 0x34
 800326c:	4621      	mov	r1, r4
 800326e:	a82c      	add	r0, sp, #176	; 0xb0
 8003270:	f01c f998 	bl	801f5a4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8003274:	222c      	movs	r2, #44	; 0x2c
 8003276:	4621      	mov	r1, r4
 8003278:	a81e      	add	r0, sp, #120	; 0x78
 800327a:	f01c f993 	bl	801f5a4 <memset>
  hdsi.Instance = DSI;
 800327e:	4b31      	ldr	r3, [pc, #196]	; (8003344 <main+0x37c>)
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003280:	2264      	movs	r2, #100	; 0x64
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003282:	a90c      	add	r1, sp, #48	; 0x30
 8003284:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8003286:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800328a:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800328c:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003290:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003294:	f003 fc00 	bl	8006a98 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8003298:	a915      	add	r1, sp, #84	; 0x54
 800329a:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 800329c:	941d      	str	r4, [sp, #116]	; 0x74
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800329e:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
  HostTimeouts.HighSpeedReadTimeout = 0;
 80032a2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80032a6:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.LowPowerWriteTimeout = 0;
 80032aa:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80032ae:	f003 fe1d 	bl	8006eec <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80032b2:	211c      	movs	r1, #28
 80032b4:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 80032b6:	200f      	movs	r0, #15
  PhyTimings.ClockLaneLP2HSTime = 33;
 80032b8:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 80032bc:	2319      	movs	r3, #25
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80032be:	a90f      	add	r1, sp, #60	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 80032c0:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80032c4:	4638      	mov	r0, r7
  PhyTimings.StopWaitTime = 0;
 80032c6:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80032ca:	f003 fdd2 	bl	8006e72 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80032ce:	4651      	mov	r1, sl
 80032d0:	4638      	mov	r0, r7
 80032d2:	f003 fdbd 	bl	8006e50 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80032d6:	f242 7110 	movw	r1, #10000	; 0x2710
 80032da:	4638      	mov	r0, r7
 80032dc:	f003 ff10 	bl	8007100 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80032e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e4:	4638      	mov	r0, r7
 80032e6:	f003 fb75 	bl	80069d4 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80032ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80032ee:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80032f2:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80032f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80032fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80032fe:	4638      	mov	r0, r7
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8003300:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003304:	e9cd 632c 	strd	r6, r3, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003308:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hltdc.Instance = LTDC;
 800330c:	4e0e      	ldr	r6, [pc, #56]	; (8003348 <main+0x380>)
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800330e:	e9cd c32e 	strd	ip, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8003312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003316:	e9cd e330 	strd	lr, r3, [sp, #192]	; 0xc0
 800331a:	e017      	b.n	800334c <main+0x384>
 800331c:	03000012 	.word	0x03000012
 8003320:	01010001 	.word	0x01010001
 8003324:	e000ed00 	.word	0xe000ed00
 8003328:	40023800 	.word	0x40023800
 800332c:	40022400 	.word	0x40022400
 8003330:	2000efd8 	.word	0x2000efd8
 8003334:	40020800 	.word	0x40020800
 8003338:	40021400 	.word	0x40021400
 800333c:	2000ee9c 	.word	0x2000ee9c
 8003340:	40023000 	.word	0x40023000
 8003344:	40016c00 	.word	0x40016c00
 8003348:	2000f098 	.word	0x2000f098
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800334c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003350:	e9cd 9332 	strd	r9, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003354:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003358:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800335c:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	e9cd 1336 	strd	r1, r3, [sp, #216]	; 0xd8
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003368:	a92c      	add	r1, sp, #176	; 0xb0
 800336a:	f003 fd3d 	bl	8006de8 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800336e:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003370:	a91e      	add	r1, sp, #120	; 0x78
 8003372:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8003374:	9528      	str	r5, [sp, #160]	; 0xa0
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003376:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  CmdCfg.ColorCoding = DSI_RGB565;
 800337a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800337e:	e9cd 4a22 	strd	r4, sl, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003382:	e9cd 8424 	strd	r8, r4, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8003386:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800338a:	f003 fcbb 	bl	8006d04 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800338e:	4621      	mov	r1, r4
 8003390:	4638      	mov	r0, r7
 8003392:	f003 fca6 	bl	8006ce2 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003396:	4621      	mov	r1, r4
 8003398:	2234      	movs	r2, #52	; 0x34
 800339a:	a81e      	add	r0, sp, #120	; 0x78
 800339c:	f01c f902 	bl	801f5a4 <memset>
  hltdc.Instance = LTDC;
 80033a0:	4acb      	ldr	r2, [pc, #812]	; (80036d0 <main+0x708>)
  hltdc.Init.AccumulatedActiveH = 482;
 80033a2:	20ca      	movs	r0, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 80033a4:	f04f 0ccb 	mov.w	ip, #203	; 0xcb
  hltdc.Init.Backcolor.Blue = 0;
 80033a8:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80033aa:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 80033ae:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80033b2:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 80033b6:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80033ba:	e9c6 0209 	strd	r0, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 80033be:	f240 12e3 	movw	r2, #483	; 0x1e3
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80033c2:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 483;
 80033c4:	e9c6 c20b 	strd	ip, r2, [r6, #44]	; 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80033c8:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.HorizontalSync = 1;
 80033cc:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 80033d0:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80033d4:	f005 fbcc 	bl	8008b70 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80033d8:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80033da:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 80033de:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 80033e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80033e4:	4630      	mov	r0, r6
  pLayerCfg.WindowX0 = 0;
 80033e6:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg.ImageHeight = 480;
 80033e8:	9229      	str	r2, [sp, #164]	; 0xa4
  pLayerCfg.Backcolor.Blue = 0;
 80033ea:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
  pLayerCfg.Backcolor.Red = 0;
 80033ee:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
  pLayerCfg.Alpha0 = 0;
 80033f2:	e9cd 1423 	strd	r1, r4, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80033f6:	2105      	movs	r1, #5
 80033f8:	e9cd e125 	strd	lr, r1, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 80033fc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003400:	e9cd 2821 	strd	r2, r8, [sp, #132]	; 0x84
  pLayerCfg.ImageWidth = 200;
 8003404:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003408:	4622      	mov	r2, r4
 800340a:	a91e      	add	r1, sp, #120	; 0x78
  pLayerCfg.WindowY0 = 0;
 800340c:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003410:	f005 fc7a 	bl	8008d08 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 8003414:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8003416:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8003418:	6993      	ldr	r3, [r2, #24]
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8003420:	f003 fdca 	bl	8006fb8 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8003424:	4629      	mov	r1, r5
 8003426:	4640      	mov	r0, r8
 8003428:	f002 fc46 	bl	8005cb8 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 800342c:	2328      	movs	r3, #40	; 0x28
 800342e:	2215      	movs	r2, #21
 8003430:	4621      	mov	r1, r4
 8003432:	4638      	mov	r0, r7
 8003434:	9400      	str	r4, [sp, #0]
 8003436:	f003 fdf2 	bl	800701e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800343a:	a92c      	add	r1, sp, #176	; 0xb0
 800343c:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800343e:	9436      	str	r4, [sp, #216]	; 0xd8
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003440:	f44f 7740 	mov.w	r7, #768	; 0x300
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8003444:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8003448:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800344c:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8003450:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8003454:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003458:	f003 fcc6 	bl	8006de8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 800345c:	4622      	mov	r2, r4
 800345e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003462:	4630      	mov	r0, r6
 8003464:	f005 fc7e 	bl	8008d64 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8003468:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800346a:	4e9a      	ldr	r6, [pc, #616]	; (80036d4 <main+0x70c>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800346c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8003470:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003472:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 8003474:	432b      	orrs	r3, r5
 8003476:	6193      	str	r3, [r2, #24]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003478:	2220      	movs	r2, #32
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800347a:	4b97      	ldr	r3, [pc, #604]	; (80036d8 <main+0x710>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800347c:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800347e:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003482:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	e9c6 2304 	strd	r2, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800348c:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003490:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003498:	e9c6 1308 	strd	r1, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800349c:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800349e:	a92c      	add	r1, sp, #176	; 0xb0
  SdramTiming.SelfRefreshTime = 4;
 80034a0:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
  SdramTiming.WriteRecoveryTime = 2;
 80034a4:	e9cd 382f 	strd	r3, r8, [sp, #188]	; 0xbc
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80034a8:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.RCDDelay = 3;
 80034ac:	e9cd 8b31 	strd	r8, fp, [sp, #196]	; 0xc4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80034b0:	f006 fcf2 	bl	8009e98 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b8:	a91e      	add	r1, sp, #120	; 0x78
 80034ba:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 80034bc:	940f      	str	r4, [sp, #60]	; 0x3c
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80034be:	e9cd 591e 	strd	r5, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80034c2:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034c6:	f006 fd07 	bl	8009ed8 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80034ca:	4628      	mov	r0, r5
 80034cc:	f002 fe8a 	bl	80061e4 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d4:	a91e      	add	r1, sp, #120	; 0x78
 80034d6:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034d8:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 80034dc:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034e0:	f006 fcfa 	bl	8009ed8 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 80034e4:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ea:	a91e      	add	r1, sp, #120	; 0x78
 80034ec:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 80034ee:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034f2:	e9cd b91e 	strd	fp, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034f6:	f006 fcef 	bl	8009ed8 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 80034fa:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80034fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003502:	a91e      	add	r1, sp, #120	; 0x78
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8003504:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003506:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 8003508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    Command->AutoRefreshNumber      = 1;
 800350a:	9520      	str	r5, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = tmpmrd;
 800350c:	9321      	str	r3, [sp, #132]	; 0x84
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800350e:	e9cd a91e 	strd	sl, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003512:	f006 fce1 	bl	8009ed8 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003516:	f240 712a 	movw	r1, #1834	; 0x72a
 800351a:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 800351c:	4e6f      	ldr	r6, [pc, #444]	; (80036dc <main+0x714>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800351e:	f006 fcfa 	bl	8009f16 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003522:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003526:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800352a:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800352c:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003532:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 8003534:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003538:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800353a:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800353e:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003542:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003546:	f005 fd59 	bl	8008ffc <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800354a:	9732      	str	r7, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 800354c:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	a92c      	add	r1, sp, #176	; 0xb0
 8003554:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003556:	972c      	str	r7, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_NONE;
 8003558:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 800355a:	9431      	str	r4, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800355c:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800355e:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003562:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003566:	f005 fd9d 	bl	80090a4 <HAL_QSPI_Command>
 800356a:	2800      	cmp	r0, #0
 800356c:	f040 80b8 	bne.w	80036e0 <main+0x718>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003570:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	a92c      	add	r1, sp, #176	; 0xb0
 8003578:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 800357a:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800357c:	f005 fd92 	bl	80090a4 <HAL_QSPI_Command>
 8003580:	2800      	cmp	r0, #0
 8003582:	f040 80ad 	bne.w	80036e0 <main+0x718>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003586:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	a92c      	add	r1, sp, #176	; 0xb0
 8003590:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003592:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003594:	972c      	str	r7, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003596:	f005 fd85 	bl	80090a4 <HAL_QSPI_Command>
 800359a:	2800      	cmp	r0, #0
 800359c:	f040 80a0 	bne.w	80036e0 <main+0x718>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	a92c      	add	r1, sp, #176	; 0xb0
 80035a6:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80035a8:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035aa:	f005 fd7b 	bl	80090a4 <HAL_QSPI_Command>
 80035ae:	4604      	mov	r4, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	f040 8095 	bne.w	80036e0 <main+0x718>
  HAL_Delay( 1000 );
 80035b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035ba:	f002 fe13 	bl	80061e4 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80035be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035c2:	aa1e      	add	r2, sp, #120	; 0x78
 80035c4:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80035c6:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80035c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035cc:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80035ce:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80035d2:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction     = READ_STATUS_REG_CMD;
 80035d4:	2305      	movs	r3, #5
 80035d6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode        = QSPI_DATA_1_LINE;
 80035d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035dc:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035de:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 80035e2:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
  s_config.StatusBytesSize = 1;
 80035e6:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ea:	f005 fe56 	bl	800929a <HAL_QSPI_AutoPolling>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d176      	bne.n	80036e0 <main+0x718>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 80035f6:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035fe:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003600:	2305      	movs	r3, #5
 8003602:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003608:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800360c:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003610:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003614:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003616:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003618:	f005 fd44 	bl	80090a4 <HAL_QSPI_Command>
 800361c:	2800      	cmp	r0, #0
 800361e:	d15f      	bne.n	80036e0 <main+0x718>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	a915      	add	r1, sp, #84	; 0x54
 8003626:	4630      	mov	r0, r6
 8003628:	f005 fdd8 	bl	80091dc <HAL_QSPI_Receive>
 800362c:	2800      	cmp	r0, #0
 800362e:	d157      	bne.n	80036e0 <main+0x718>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003630:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 8003634:	9035      	str	r0, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003636:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800363c:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800363e:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003640:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003642:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003644:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003646:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800364a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800364e:	4630      	mov	r0, r6
 8003650:	f005 fd28 	bl	80090a4 <HAL_QSPI_Command>
 8003654:	2800      	cmp	r0, #0
 8003656:	d143      	bne.n	80036e0 <main+0x718>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003658:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 800365a:	462c      	mov	r4, r5
 800365c:	9521      	str	r5, [sp, #132]	; 0x84
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800365e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003662:	9322      	str	r3, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003668:	aa1e      	add	r2, sp, #120	; 0x78
 800366a:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800366c:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800366e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003670:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8003672:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003676:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003678:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800367c:	9535      	str	r5, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WREN;
 800367e:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003682:	f005 fe0a 	bl	800929a <HAL_QSPI_AutoPolling>
 8003686:	bb58      	cbnz	r0, 80036e0 <main+0x718>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003688:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 800368c:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003694:	9332      	str	r3, [sp, #200]	; 0xc8
  reg |= MX25L512_SR_QUADEN;
 8003696:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800369a:	942c      	str	r4, [sp, #176]	; 0xb0
  reg |= MX25L512_SR_QUADEN;
 800369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80036a0:	9535      	str	r5, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036a2:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80036a6:	e9cd 4036 	strd	r4, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036aa:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ae:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 80036b0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b4:	f005 fcf6 	bl	80090a4 <HAL_QSPI_Command>
 80036b8:	b990      	cbnz	r0, 80036e0 <main+0x718>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	a915      	add	r1, sp, #84	; 0x54
 80036c0:	4630      	mov	r0, r6
 80036c2:	f005 fd32 	bl	800912a <HAL_QSPI_Transmit>
 80036c6:	b958      	cbnz	r0, 80036e0 <main+0x718>
  HAL_Delay( 40 );
 80036c8:	2028      	movs	r0, #40	; 0x28
 80036ca:	f002 fd8b 	bl	80061e4 <HAL_Delay>
 80036ce:	e007      	b.n	80036e0 <main+0x718>
 80036d0:	40016800 	.word	0x40016800
 80036d4:	2000f18c 	.word	0x2000f18c
 80036d8:	a0000140 	.word	0xa0000140
 80036dc:	2000f140 	.word	0x2000f140
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036e0:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	a92c      	add	r1, sp, #176	; 0xb0
 80036ea:	48b8      	ldr	r0, [pc, #736]	; (80039cc <main+0xa04>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036ec:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = ENTER_QUAD_CMD;
 80036ee:	2335      	movs	r3, #53	; 0x35
 80036f0:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80036f2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036f4:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DataMode          = QSPI_DATA_NONE;
 80036f8:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80036fa:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036fc:	9339      	str	r3, [sp, #228]	; 0xe4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80036fe:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003702:	f005 fccf 	bl	80090a4 <HAL_QSPI_Command>
 8003706:	b9e0      	cbnz	r0, 8003742 <main+0x77a>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003708:	2341      	movs	r3, #65	; 0x41
 800370a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  s_config.Interval        = 0x10;
 800370e:	f04f 0e01 	mov.w	lr, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003712:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003714:	aa1e      	add	r2, sp, #120	; 0x78
 8003716:	a92c      	add	r1, sp, #176	; 0xb0
 8003718:	48ac      	ldr	r0, [pc, #688]	; (80039cc <main+0xa04>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800371a:	e9cd c31e 	strd	ip, r3, [sp, #120]	; 0x78
  s_config.Interval        = 0x10;
 800371e:	2310      	movs	r3, #16
 8003720:	e9cd 3e20 	strd	r3, lr, [sp, #128]	; 0x80
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003724:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003728:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800372a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800372e:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003730:	2305      	movs	r3, #5
 8003732:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003734:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003738:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800373a:	f241 3388 	movw	r3, #5000	; 0x1388
 800373e:	f005 fdac 	bl	800929a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003742:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003744:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003748:	931e      	str	r3, [sp, #120]	; 0x78
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800374a:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800374c:	9424      	str	r4, [sp, #144]	; 0x90
  s_command.DataMode          = QSPI_DATA_NONE;
 800374e:	9327      	str	r3, [sp, #156]	; 0x9c
  s_command.DummyCycles       = 0;
 8003750:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003752:	932b      	str	r3, [sp, #172]	; 0xac
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003754:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003758:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800375c:	f7ff fb8c 	bl	8002e78 <QSPI_WriteEnable.constprop.0>
 8003760:	bb18      	cbnz	r0, 80037aa <main+0x7e2>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	a91e      	add	r1, sp, #120	; 0x78
 8003768:	4898      	ldr	r0, [pc, #608]	; (80039cc <main+0xa04>)
 800376a:	f005 fc9b 	bl	80090a4 <HAL_QSPI_Command>
 800376e:	b9e0      	cbnz	r0, 80037aa <main+0x7e2>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003770:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8003772:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003774:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003776:	aa15      	add	r2, sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003778:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800377a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 800377e:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003780:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003782:	9335      	str	r3, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WIP;
 8003784:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003786:	9432      	str	r4, [sp, #200]	; 0xc8
  s_config.Mask            = MX25L512_SR_WIP;
 8003788:	9316      	str	r3, [sp, #88]	; 0x58
  s_config.StatusBytesSize = 1;
 800378a:	e9cd 3018 	strd	r3, r0, [sp, #96]	; 0x60
  s_config.Interval        = 0x10;
 800378e:	2310      	movs	r3, #16
 8003790:	9317      	str	r3, [sp, #92]	; 0x5c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003796:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800379a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800379e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80037a4:	4889      	ldr	r0, [pc, #548]	; (80039cc <main+0xa04>)
 80037a6:	f005 fd78 	bl	800929a <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037aa:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037ac:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037b0:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80037b4:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037b6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80037b8:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	a92c      	add	r1, sp, #176	; 0xb0
 80037c0:	4882      	ldr	r0, [pc, #520]	; (80039cc <main+0xa04>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037c2:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037c4:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80037c6:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037c8:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80037cc:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037d0:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037d4:	f005 fc66 	bl	80090a4 <HAL_QSPI_Command>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d14f      	bne.n	800387c <main+0x8b4>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	a91e      	add	r1, sp, #120	; 0x78
 80037e2:	487a      	ldr	r0, [pc, #488]	; (80039cc <main+0xa04>)
 80037e4:	f005 fcfa 	bl	80091dc <HAL_QSPI_Receive>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d147      	bne.n	800387c <main+0x8b4>
  s_command.Instruction       = READ_CFG_REG_CMD;
 80037ec:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 80037ee:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037f6:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 80037f8:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037fa:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037fc:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003800:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003804:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003808:	4870      	ldr	r0, [pc, #448]	; (80039cc <main+0xa04>)
 800380a:	f005 fc4b 	bl	80090a4 <HAL_QSPI_Command>
 800380e:	bba8      	cbnz	r0, 800387c <main+0x8b4>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003818:	486c      	ldr	r0, [pc, #432]	; (80039cc <main+0xa04>)
 800381a:	f005 fcdf 	bl	80091dc <HAL_QSPI_Receive>
 800381e:	bb68      	cbnz	r0, 800387c <main+0x8b4>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003820:	f7ff fb2a 	bl	8002e78 <QSPI_WriteEnable.constprop.0>
 8003824:	bb50      	cbnz	r0, 800387c <main+0x8b4>
  s_command.NbData            = 2;
 8003826:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800382a:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800382c:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800382e:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003830:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003832:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003836:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800383a:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 800383e:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003842:	2103      	movs	r1, #3
 8003844:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003848:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800384c:	485f      	ldr	r0, [pc, #380]	; (80039cc <main+0xa04>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800384e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003856:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003858:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800385e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003862:	f005 fc1f 	bl	80090a4 <HAL_QSPI_Command>
 8003866:	b948      	cbnz	r0, 800387c <main+0x8b4>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	a91e      	add	r1, sp, #120	; 0x78
 800386e:	4857      	ldr	r0, [pc, #348]	; (80039cc <main+0xa04>)
 8003870:	f005 fc5b 	bl	800912a <HAL_QSPI_Transmit>
 8003874:	b910      	cbnz	r0, 800387c <main+0x8b4>
  HAL_Delay( 40 );
 8003876:	2028      	movs	r0, #40	; 0x28
 8003878:	f002 fcb4 	bl	80061e4 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800387c:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800387e:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003882:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003886:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003888:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800388a:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	a92c      	add	r1, sp, #176	; 0xb0
 8003892:	484e      	ldr	r0, [pc, #312]	; (80039cc <main+0xa04>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003894:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003896:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003898:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800389a:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800389e:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038a2:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038a6:	f005 fbfd 	bl	80090a4 <HAL_QSPI_Command>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d14b      	bne.n	8003946 <main+0x97e>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	a91e      	add	r1, sp, #120	; 0x78
 80038b4:	4845      	ldr	r0, [pc, #276]	; (80039cc <main+0xa04>)
 80038b6:	f005 fc91 	bl	80091dc <HAL_QSPI_Receive>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d143      	bne.n	8003946 <main+0x97e>
  s_command.Instruction       = READ_CFG_REG_CMD;
 80038be:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 80038c0:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80038c8:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 80038ca:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80038cc:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80038ce:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80038d2:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038d6:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038da:	483c      	ldr	r0, [pc, #240]	; (80039cc <main+0xa04>)
 80038dc:	f005 fbe2 	bl	80090a4 <HAL_QSPI_Command>
 80038e0:	bb88      	cbnz	r0, 8003946 <main+0x97e>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 80038ea:	4838      	ldr	r0, [pc, #224]	; (80039cc <main+0xa04>)
 80038ec:	f005 fc76 	bl	80091dc <HAL_QSPI_Receive>
 80038f0:	bb48      	cbnz	r0, 8003946 <main+0x97e>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80038f2:	f7ff fac1 	bl	8002e78 <QSPI_WriteEnable.constprop.0>
 80038f6:	bb30      	cbnz	r0, 8003946 <main+0x97e>
  s_command.NbData            = 2;
 80038f8:	2302      	movs	r3, #2
 80038fa:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80038fc:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80038fe:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003900:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003902:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003904:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003908:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800390c:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 8003910:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003914:	2106      	movs	r1, #6
 8003916:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 800391a:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800391e:	482b      	ldr	r0, [pc, #172]	; (80039cc <main+0xa04>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003920:	f023 0307 	bic.w	r3, r3, #7
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003928:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800392a:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003930:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003934:	f005 fbb6 	bl	80090a4 <HAL_QSPI_Command>
 8003938:	b928      	cbnz	r0, 8003946 <main+0x97e>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	a91e      	add	r1, sp, #120	; 0x78
 8003940:	4822      	ldr	r0, [pc, #136]	; (80039cc <main+0xa04>)
 8003942:	f005 fbf2 	bl	800912a <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003946:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800394a:	2400      	movs	r4, #0
  hdma2d.Instance = DMA2D;
 800394c:	4d20      	ldr	r5, [pc, #128]	; (80039d0 <main+0xa08>)
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800394e:	aa1e      	add	r2, sp, #120	; 0x78
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003950:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003952:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003954:	a92c      	add	r1, sp, #176	; 0xb0
 8003956:	481d      	ldr	r0, [pc, #116]	; (80039cc <main+0xa04>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8003958:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800395a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800395e:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003960:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003962:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003966:	932f      	str	r3, [sp, #188]	; 0xbc
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003968:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800396c:	e9cd 4334 	strd	r4, r3, [sp, #208]	; 0xd0
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003970:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003972:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003976:	9331      	str	r3, [sp, #196]	; 0xc4
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003978:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800397c:	f005 fcdd 	bl	800933a <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <main+0xa0c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003982:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003984:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003988:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800398c:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 8003990:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8003994:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003998:	f002 feea 	bl	8006770 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800399c:	2101      	movs	r1, #1
 800399e:	4628      	mov	r0, r5
 80039a0:	f002 ffa8 	bl	80068f4 <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 80039a4:	f7ff faee 	bl	8002f84 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 80039a8:	f7fc fe45 	bl	8000636 <MX_LIBJPEG_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <main+0xa10>)
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80039ae:	2105      	movs	r1, #5
 80039b0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80039ba:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	932c      	str	r3, [sp, #176]	; 0xb0
 80039c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80039c6:	f002 fc31 	bl	800622c <HAL_NVIC_SetPriority>
 80039ca:	e007      	b.n	80039dc <main+0xa14>
 80039cc:	2000f140 	.word	0x2000f140
 80039d0:	2000eec0 	.word	0x2000eec0
 80039d4:	4002b000 	.word	0x4002b000
 80039d8:	40023800 	.word	0x40023800
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80039dc:	2038      	movs	r0, #56	; 0x38
 80039de:	f002 fc57 	bl	8006290 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80039e2:	4622      	mov	r2, r4
 80039e4:	2105      	movs	r1, #5
 80039e6:	2039      	movs	r0, #57	; 0x39
 80039e8:	f002 fc20 	bl	800622c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80039ec:	2039      	movs	r0, #57	; 0x39
 80039ee:	f002 fc4f 	bl	8006290 <HAL_NVIC_EnableIRQ>
  hjpeg.Instance = JPEG;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <main+0xa6c>)
 80039f4:	4810      	ldr	r0, [pc, #64]	; (8003a38 <main+0xa70>)
 80039f6:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80039f8:	f004 fa82 	bl	8007f00 <HAL_JPEG_Init>
  MX_TouchGFX_Init();
 80039fc:	f7fc fe1c 	bl	8000638 <MX_TouchGFX_Init>
  osKernelInitialize();
 8003a00:	f006 fcba 	bl	800a378 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <main+0xa74>)
 8003a06:	4621      	mov	r1, r4
 8003a08:	480d      	ldr	r0, [pc, #52]	; (8003a40 <main+0xa78>)
 8003a0a:	f006 fcef 	bl	800a3ec <osThreadNew>
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <main+0xa7c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a10:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <main+0xa80>)
 8003a12:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003a14:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a16:	480d      	ldr	r0, [pc, #52]	; (8003a4c <main+0xa84>)
 8003a18:	f006 fce8 	bl	800a3ec <osThreadNew>
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <main+0xa88>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <main+0xa8c>)
 8003a20:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a22:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003a24:	480c      	ldr	r0, [pc, #48]	; (8003a58 <main+0xa90>)
 8003a26:	f006 fce1 	bl	800a3ec <osThreadNew>
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <main+0xa94>)
 8003a2c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003a2e:	f006 fcbd 	bl	800a3ac <osKernelStart>
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <main+0xa6a>
 8003a34:	50051000 	.word	0x50051000
 8003a38:	2000f040 	.word	0x2000f040
 8003a3c:	08022384 	.word	0x08022384
 8003a40:	08002e6d 	.word	0x08002e6d
 8003a44:	2000ee98 	.word	0x2000ee98
 8003a48:	08022360 	.word	0x08022360
 8003a4c:	0800063d 	.word	0x0800063d
 8003a50:	2000ee94 	.word	0x2000ee94
 8003a54:	080223a8 	.word	0x080223a8
 8003a58:	08002525 	.word	0x08002525
 8003a5c:	2000f1c0 	.word	0x2000f1c0

08003a60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a60:	6802      	ldr	r2, [r0, #0]
 8003a62:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d101      	bne.n	8003a6c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003a68:	f002 bbaa 	b.w	80061c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40001000 	.word	0x40001000

08003a74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_MspInit+0x38>)
{
 8003a7a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a7c:	210f      	movs	r1, #15
 8003a7e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
 8003a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003a90:	9200      	str	r2, [sp, #0]
 8003a92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a9c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aaa:	f002 bbbf 	b.w	800622c <HAL_NVIC_SetPriority>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003ab4:	6802      	ldr	r2, [r0, #0]
{
 8003ab6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_CRC_MspInit+0x28>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10b      	bne.n	8003ad6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003abe:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003ad6:	b002      	add	sp, #8
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40023000 	.word	0x40023000

08003ae0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_DMA2D_MspInit+0x3c>)
{
 8003ae2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8003ae4:	6802      	ldr	r2, [r0, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d115      	bne.n	8003b16 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003aea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003aee:	2105      	movs	r1, #5
 8003af0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003afa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003b06:	f002 fb91 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b0a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003b0c:	b003      	add	sp, #12
 8003b0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b12:	f002 bbbd 	b.w	8006290 <HAL_NVIC_EnableIRQ>
}
 8003b16:	b003      	add	sp, #12
 8003b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b1c:	4002b000 	.word	0x4002b000

08003b20 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003b20:	b510      	push	{r4, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b26:	2214      	movs	r2, #20
 8003b28:	2100      	movs	r1, #0
 8003b2a:	a803      	add	r0, sp, #12
 8003b2c:	f01b fd3a 	bl	801f5a4 <memset>
  if(hdsi->Instance==DSI)
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_DSI_MspInit+0x68>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d125      	bne.n	8003b84 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003b38:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b3c:	a903      	add	r1, sp, #12
 8003b3e:	4813      	ldr	r0, [pc, #76]	; (8003b8c <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8003b6c:	230d      	movs	r3, #13
 8003b6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b70:	f003 fadc 	bl	800712c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8003b74:	2062      	movs	r0, #98	; 0x62
 8003b76:	2200      	movs	r2, #0
 8003b78:	2105      	movs	r1, #5
 8003b7a:	f002 fb57 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003b7e:	2062      	movs	r0, #98	; 0x62
 8003b80:	f002 fb86 	bl	8006290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8003b84:	b008      	add	sp, #32
 8003b86:	bd10      	pop	{r4, pc}
 8003b88:	40016c00 	.word	0x40016c00
 8003b8c:	40022400 	.word	0x40022400

08003b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b0ad      	sub	sp, #180	; 0xb4
 8003b94:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b96:	2214      	movs	r2, #20
 8003b98:	2100      	movs	r1, #0
 8003b9a:	a803      	add	r0, sp, #12
 8003b9c:	f01b fd02 	bl	801f5a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ba0:	2290      	movs	r2, #144	; 0x90
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	a808      	add	r0, sp, #32
 8003ba6:	f01b fcfd 	bl	801f5a4 <memset>
  if(hi2c->Instance==I2C4)
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_I2C_MspInit+0xb4>)
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d146      	bne.n	8003c40 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003bb8:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bba:	f005 fec1 	bl	8009940 <HAL_RCCEx_PeriphCLKConfig>
 8003bbe:	b108      	cbz	r0, 8003bc4 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8003bc0:	f7ff ff58 	bl	8003a74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc4:	4c20      	ldr	r4, [pc, #128]	; (8003c48 <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc6:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc8:	2601      	movs	r6, #1
 8003bca:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bce:	a903      	add	r1, sp, #12
 8003bd0:	481e      	ldr	r0, [pc, #120]	; (8003c4c <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003be4:	f043 0308 	orr.w	r3, r3, #8
 8003be8:	6323      	str	r3, [r4, #48]	; 0x30
 8003bea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003bfa:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003c00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	f003 fa93 	bl	800712c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c0a:	a903      	add	r1, sp, #12
 8003c0c:	4810      	ldr	r0, [pc, #64]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c0e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003c12:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003c18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c1a:	f003 fa87 	bl	800712c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8003c20:	205f      	movs	r0, #95	; 0x5f
 8003c22:	2200      	movs	r2, #0
 8003c24:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	6423      	str	r3, [r4, #64]	; 0x40
 8003c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8003c36:	f002 faf9 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003c3a:	205f      	movs	r0, #95	; 0x5f
 8003c3c:	f002 fb28 	bl	8006290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003c40:	b02d      	add	sp, #180	; 0xb4
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c44:	40006000 	.word	0x40006000
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020c00 	.word	0x40020c00

08003c54 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8003c54:	6802      	ldr	r2, [r0, #0]
{
 8003c56:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_I2C_MspDeInit+0x34>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d112      	bne.n	8003c84 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	480b      	ldr	r0, [pc, #44]	; (8003c90 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003c64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003c6c:	f003 fb42 	bl	80072f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8003c70:	4808      	ldr	r0, [pc, #32]	; (8003c94 <HAL_I2C_MspDeInit+0x40>)
 8003c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c76:	f003 fb3d 	bl	80072f4 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003c7a:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8003c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003c80:	f002 bb14 	b.w	80062ac <HAL_NVIC_DisableIRQ>
}
 8003c84:	bd08      	pop	{r3, pc}
 8003c86:	bf00      	nop
 8003c88:	40006000 	.word	0x40006000
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40020c00 	.word	0x40020c00

08003c98 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8003c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_JPEG_MspInit+0xd8>)
{
 8003c9c:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8003c9e:	6802      	ldr	r2, [r0, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d162      	bne.n	8003d6a <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8003caa:	4c33      	ldr	r4, [pc, #204]	; (8003d78 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003cac:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003cb0:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8003cb4:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8003d84 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003cb8:	f042 0202 	orr.w	r2, r2, #2
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbe:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8003cca:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8003cce:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8003cdc:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cde:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8003ce6:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8003cf4:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003cf6:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8003cfa:	f002 fba9 	bl	8006450 <HAL_DMA_Init>
 8003cfe:	b108      	cbz	r0, 8003d04 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8003d00:	f7ff feb8 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8003d04:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8003d06:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8003d10:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d12:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8003d14:	4c1a      	ldr	r4, [pc, #104]	; (8003d80 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8003d1a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d22:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d24:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8003d2c:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d2e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8003d32:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8003d40:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d42:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8003d46:	f002 fb83 	bl	8006450 <HAL_DMA_Init>
 8003d4a:	b108      	cbz	r0, 8003d50 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8003d4c:	f7ff fe92 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8003d50:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2105      	movs	r1, #5
 8003d56:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8003d58:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8003d5a:	f002 fa67 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003d5e:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8003d60:	b003      	add	sp, #12
 8003d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003d66:	f002 ba93 	b.w	8006290 <HAL_NVIC_EnableIRQ>
}
 8003d6a:	b003      	add	sp, #12
 8003d6c:	bd30      	pop	{r4, r5, pc}
 8003d6e:	bf00      	nop
 8003d70:	50051000 	.word	0x50051000
 8003d74:	40023800 	.word	0x40023800
 8003d78:	2000ef18 	.word	0x2000ef18
 8003d7c:	40026428 	.word	0x40026428
 8003d80:	2000ef78 	.word	0x2000ef78
 8003d84:	40026410 	.word	0x40026410

08003d88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	b0a6      	sub	sp, #152	; 0x98
 8003d8c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d8e:	2290      	movs	r2, #144	; 0x90
 8003d90:	2100      	movs	r1, #0
 8003d92:	a802      	add	r0, sp, #8
 8003d94:	f01b fc06 	bl	801f5a4 <memset>
  if(hltdc->Instance==LTDC)
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_LTDC_MspInit+0x64>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d122      	bne.n	8003de6 <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003da0:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003da2:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003da4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003da6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003daa:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003dac:	2302      	movs	r3, #2
 8003dae:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003db2:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003db4:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003db6:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003db8:	f005 fdc2 	bl	8009940 <HAL_RCCEx_PeriphCLKConfig>
 8003dbc:	b108      	cbz	r0, 8003dc2 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8003dbe:	f7ff fe59 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003dc4:	2058      	movs	r0, #88	; 0x58
 8003dc6:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003dd0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003ddc:	f002 fa26 	bl	800622c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003de0:	2058      	movs	r0, #88	; 0x58
 8003de2:	f002 fa55 	bl	8006290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003de6:	b026      	add	sp, #152	; 0x98
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	40016800 	.word	0x40016800
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	2214      	movs	r2, #20
 8003df6:	2100      	movs	r1, #0
{
 8003df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfc:	b08a      	sub	sp, #40	; 0x28
 8003dfe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	eb0d 0002 	add.w	r0, sp, r2
 8003e04:	f01b fbce 	bl	801f5a4 <memset>
  if(hqspi->Instance==QUADSPI)
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_QSPI_MspInit+0x100>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d16e      	bne.n	8003eee <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e14:	2403      	movs	r4, #3
 8003e16:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e18:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e1e:	a905      	add	r1, sp, #20
 8003e20:	4836      	ldr	r0, [pc, #216]	; (8003efc <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e22:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e28:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	f022 0202 	bic.w	r2, r2, #2
 8003e30:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e34:	f042 0202 	orr.w	r2, r2, #2
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
 8003e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3c:	f002 0202 	and.w	r2, r2, #2
 8003e40:	9200      	str	r2, [sp, #0]
 8003e42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e46:	f042 0210 	orr.w	r2, r2, #16
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	f002 0210 	and.w	r2, r2, #16
 8003e52:	9201      	str	r2, [sp, #4]
 8003e54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e58:	f042 0202 	orr.w	r2, r2, #2
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e60:	f002 0202 	and.w	r2, r2, #2
 8003e64:	9202      	str	r2, [sp, #8]
 8003e66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6a:	f042 0204 	orr.w	r2, r2, #4
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	f002 0204 	and.w	r2, r2, #4
 8003e76:	9203      	str	r2, [sp, #12]
 8003e78:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	f042 0208 	orr.w	r2, r2, #8
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e90:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e94:	f003 f94a 	bl	800712c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e98:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9a:	a905      	add	r1, sp, #20
 8003e9c:	4818      	ldr	r0, [pc, #96]	; (8003f00 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea2:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea4:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	f003 f93e 	bl	800712c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003eb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	a905      	add	r1, sp, #20
 8003eb6:	4813      	ldr	r0, [pc, #76]	; (8003f04 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003eb8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebe:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec2:	f003 f933 	bl	800712c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec6:	a905      	add	r1, sp, #20
 8003ec8:	480d      	ldr	r0, [pc, #52]	; (8003f00 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003eca:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed0:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	f003 f92a 	bl	800712c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003edc:	a905      	add	r1, sp, #20
 8003ede:	480a      	ldr	r0, [pc, #40]	; (8003f08 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ee0:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eea:	f003 f91f 	bl	800712c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003eee:	b00a      	add	sp, #40	; 0x28
 8003ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef4:	a0001000 	.word	0xa0001000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40020800 	.word	0x40020800
 8003f08:	40020c00 	.word	0x40020c00

08003f0c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f0e:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003f10:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f12:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8003f14:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_SDRAM_MspInit+0xb4>)
 8003f16:	681e      	ldr	r6, [r3, #0]
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	d14f      	bne.n	8003fbc <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8003f1c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f20:	2503      	movs	r5, #3
 8003f22:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8003f24:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f26:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f2a:	4827      	ldr	r0, [pc, #156]	; (8003fc8 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3e:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f42:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f4a:	f003 f8ef 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003f4e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f52:	a901      	add	r1, sp, #4
 8003f54:	481d      	ldr	r0, [pc, #116]	; (8003fcc <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f56:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f58:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f60:	f003 f8e4 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003f64:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f68:	a901      	add	r1, sp, #4
 8003f6a:	4819      	ldr	r0, [pc, #100]	; (8003fd0 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f6c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f72:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f76:	f003 f8d9 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8003f7a:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f7e:	a901      	add	r1, sp, #4
 8003f80:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f88:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f8c:	f003 f8ce 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003f90:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f94:	a901      	add	r1, sp, #4
 8003f96:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f98:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fa2:	f003 f8c3 	bl	800712c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8003fa6:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003faa:	a901      	add	r1, sp, #4
 8003fac:	480b      	ldr	r0, [pc, #44]	; (8003fdc <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fb8:	f003 f8b8 	bl	800712c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003fbc:	b007      	add	sp, #28
 8003fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc0:	2000f1c4 	.word	0x2000f1c4
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021c00 	.word	0x40021c00

08003fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2036      	movs	r0, #54	; 0x36
 8003fea:	f002 f91f 	bl	800622c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fee:	2036      	movs	r0, #54	; 0x36
 8003ff0:	f002 f94e 	bl	8006290 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ff6:	a901      	add	r1, sp, #4
 8003ff8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ffc:	4c13      	ldr	r4, [pc, #76]	; (800404c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ffe:	f042 0210 	orr.w	r2, r2, #16
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800400e:	f005 fc79 	bl	8009904 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004012:	f005 fc67 	bl	80098e4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004018:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800401a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800401c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004020:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_InitTick+0x74>)
 8004024:	fbb0 f0f3 	udiv	r0, r0, r3
 8004028:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800402a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800402c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800402e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8004030:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004032:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004034:	f006 f8e0 	bl	800a1f8 <HAL_TIM_Base_Init>
 8004038:	b920      	cbnz	r0, 8004044 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800403a:	4620      	mov	r0, r4
 800403c:	f005 ff84 	bl	8009f48 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8004040:	b008      	add	sp, #32
 8004042:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8004044:	2001      	movs	r0, #1
 8004046:	e7fb      	b.n	8004040 <HAL_InitTick+0x60>
 8004048:	40023800 	.word	0x40023800
 800404c:	2000f1c8 	.word	0x2000f1c8
 8004050:	40001000 	.word	0x40001000
 8004054:	000f4240 	.word	0x000f4240

08004058 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004058:	4770      	bx	lr

0800405a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800405a:	e7fe      	b.n	800405a <HardFault_Handler>

0800405c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <MemManage_Handler>

0800405e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800405e:	e7fe      	b.n	800405e <BusFault_Handler>

08004060 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004060:	e7fe      	b.n	8004060 <UsageFault_Handler>

08004062 <DebugMon_Handler>:
 8004062:	4770      	bx	lr

08004064 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <TIM6_DAC_IRQHandler+0x8>)
 8004066:	f005 bfb1 	b.w	8009fcc <HAL_TIM_IRQHandler>
 800406a:	bf00      	nop
 800406c:	2000f1c8 	.word	0x2000f1c8

08004070 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <DMA2_Stream0_IRQHandler+0x8>)
 8004072:	f002 babd 	b.w	80065f0 <HAL_DMA_IRQHandler>
 8004076:	bf00      	nop
 8004078:	2000ef18 	.word	0x2000ef18

0800407c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <DMA2_Stream1_IRQHandler+0x8>)
 800407e:	f002 bab7 	b.w	80065f0 <HAL_DMA_IRQHandler>
 8004082:	bf00      	nop
 8004084:	2000ef78 	.word	0x2000ef78

08004088 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 800408a:	f002 f8a5 	bl	80061d8 <HAL_GetTick>
  diff = last - now;
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <LTDC_IRQHandler+0x1c>)
 8004090:	4905      	ldr	r1, [pc, #20]	; (80040a8 <LTDC_IRQHandler+0x20>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	1a1b      	subs	r3, r3, r0
 8004096:	600b      	str	r3, [r1, #0]
  last = now;
 8004098:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800409a:	4804      	ldr	r0, [pc, #16]	; (80040ac <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800409c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 80040a0:	f004 bdd5 	b.w	8008c4e <HAL_LTDC_IRQHandler>
 80040a4:	2000f218 	.word	0x2000f218
 80040a8:	2000f214 	.word	0x2000f214
 80040ac:	2000f098 	.word	0x2000f098

080040b0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80040b0:	4801      	ldr	r0, [pc, #4]	; (80040b8 <DMA2D_IRQHandler+0x8>)
 80040b2:	f002 bb95 	b.w	80067e0 <HAL_DMA2D_IRQHandler>
 80040b6:	bf00      	nop
 80040b8:	2000eec0 	.word	0x2000eec0

080040bc <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80040bc:	4801      	ldr	r0, [pc, #4]	; (80040c4 <I2C4_EV_IRQHandler+0x8>)
 80040be:	f003 bd3d 	b.w	8007b3c <HAL_I2C_EV_IRQHandler>
 80040c2:	bf00      	nop
 80040c4:	2000eff4 	.word	0x2000eff4

080040c8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <DSI_IRQHandler+0x8>)
 80040ca:	f002 bd98 	b.w	8006bfe <HAL_DSI_IRQHandler>
 80040ce:	bf00      	nop
 80040d0:	2000efd8 	.word	0x2000efd8

080040d4 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <JPEG_IRQHandler+0x8>)
 80040d6:	f004 bc63 	b.w	80089a0 <HAL_JPEG_IRQHandler>
 80040da:	bf00      	nop
 80040dc:	2000f040 	.word	0x2000f040

080040e0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040e0:	2001      	movs	r0, #1
 80040e2:	4770      	bx	lr

080040e4 <_kill>:

int _kill(int pid, int sig)
{
 80040e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040e6:	f01b f9ff 	bl	801f4e8 <__errno>
 80040ea:	2316      	movs	r3, #22
 80040ec:	6003      	str	r3, [r0, #0]
	return -1;
}
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295
 80040f2:	bd08      	pop	{r3, pc}

080040f4 <_exit>:

void _exit (int status)
{
 80040f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040f6:	f01b f9f7 	bl	801f4e8 <__errno>
 80040fa:	2316      	movs	r3, #22
 80040fc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040fe:	e7fe      	b.n	80040fe <_exit+0xa>

08004100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	460d      	mov	r5, r1
 8004104:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	460e      	mov	r6, r1
 8004108:	1b73      	subs	r3, r6, r5
 800410a:	429c      	cmp	r4, r3
 800410c:	dc01      	bgt.n	8004112 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800410e:	4620      	mov	r0, r4
 8004110:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004112:	f3af 8000 	nop.w
 8004116:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	e7f5      	b.n	8004108 <_read+0x8>

0800411c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	460d      	mov	r5, r1
 8004120:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004122:	460e      	mov	r6, r1
 8004124:	1b73      	subs	r3, r6, r5
 8004126:	429c      	cmp	r4, r3
 8004128:	dc01      	bgt.n	800412e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800412a:	4620      	mov	r0, r4
 800412c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800412e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004132:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004136:	e7f5      	b.n	8004124 <_write+0x8>

08004138 <_close>:

int _close(int file)
{
	return -1;
}
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	4770      	bx	lr

0800413e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800413e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004142:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004144:	604b      	str	r3, [r1, #4]
}
 8004146:	4770      	bx	lr

08004148 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004148:	2001      	movs	r0, #1
 800414a:	4770      	bx	lr

0800414c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800414c:	2000      	movs	r0, #0
 800414e:	4770      	bx	lr

08004150 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <_sbrk+0x2c>)
 8004152:	6811      	ldr	r1, [r2, #0]
{
 8004154:	b508      	push	{r3, lr}
 8004156:	4603      	mov	r3, r0
	if (heap_end == 0)
 8004158:	b909      	cbnz	r1, 800415e <_sbrk+0xe>
		heap_end = &end;
 800415a:	4909      	ldr	r1, [pc, #36]	; (8004180 <_sbrk+0x30>)
 800415c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800415e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004160:	4669      	mov	r1, sp
 8004162:	4403      	add	r3, r0
 8004164:	428b      	cmp	r3, r1
 8004166:	d906      	bls.n	8004176 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004168:	f01b f9be 	bl	801f4e8 <__errno>
 800416c:	230c      	movs	r3, #12
 800416e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004174:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004176:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8004178:	e7fc      	b.n	8004174 <_sbrk+0x24>
 800417a:	bf00      	nop
 800417c:	2000f21c 	.word	0x2000f21c
 8004180:	20024bb8 	.word	0x20024bb8

08004184 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LABEL = 2;         // Asap_Regular_15_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004184:	4770      	bx	lr

08004186 <_ZN23ApplicationFontProviderD0Ev>:
 8004186:	b510      	push	{r4, lr}
 8004188:	4604      	mov	r4, r0
 800418a:	2104      	movs	r1, #4
 800418c:	f01b f94b 	bl	801f426 <_ZdlPvj>
 8004190:	4620      	mov	r0, r4
 8004192:	bd10      	pop	{r4, pc}

08004194 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004194:	b508      	push	{r3, lr}
    switch (typography)
 8004196:	2903      	cmp	r1, #3
 8004198:	d813      	bhi.n	80041c2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800419a:	e8df f001 	tbb	[pc, r1]
 800419e:	0602      	.short	0x0602
 80041a0:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // Asap_Regular_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80041a2:	f001 fb87 	bl	80058b4 <_ZN17TypedTextDatabase8getFontsEv>
 80041a6:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 80041a8:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80041aa:	f001 fb83 	bl	80058b4 <_ZN17TypedTextDatabase8getFontsEv>
 80041ae:	6840      	ldr	r0, [r0, #4]
 80041b0:	e7fa      	b.n	80041a8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80041b2:	f001 fb7f 	bl	80058b4 <_ZN17TypedTextDatabase8getFontsEv>
 80041b6:	6880      	ldr	r0, [r0, #8]
 80041b8:	e7f6      	b.n	80041a8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80041ba:	f001 fb7b 	bl	80058b4 <_ZN17TypedTextDatabase8getFontsEv>
 80041be:	68c0      	ldr	r0, [r0, #12]
 80041c0:	e7f2      	b.n	80041a8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7f0      	b.n	80041a8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

080041c8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80041c8:	4800      	ldr	r0, [pc, #0]	; (80041cc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80041ca:	4770      	bx	lr
 80041cc:	080223e0 	.word	0x080223e0

080041d0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80041d0:	200b      	movs	r0, #11
 80041d2:	4770      	bx	lr

080041d4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80041d4:	b513      	push	{r0, r1, r4, lr}
 80041d6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80041d8:	b151      	cbz	r1, 80041f0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80041da:	6803      	ldr	r3, [r0, #0]
 80041dc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80041de:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80041e0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80041e4:	689c      	ldr	r4, [r3, #8]
 80041e6:	f10d 0303 	add.w	r3, sp, #3
 80041ea:	47a0      	blx	r4
        return glyph;
    }
 80041ec:	b002      	add	sp, #8
 80041ee:	bd10      	pop	{r4, pc}
            return 0;
 80041f0:	4608      	mov	r0, r1
 80041f2:	e7fb      	b.n	80041ec <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080041f4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80041f4:	8940      	ldrh	r0, [r0, #10]
 80041f6:	4770      	bx	lr

080041f8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80041f8:	8980      	ldrh	r0, [r0, #12]
 80041fa:	4770      	bx	lr

080041fc <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80041fc:	8880      	ldrh	r0, [r0, #4]
 80041fe:	4770      	bx	lr

08004200 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8004200:	7983      	ldrb	r3, [r0, #6]
 8004202:	8880      	ldrh	r0, [r0, #4]
 8004204:	4418      	add	r0, r3
    }
 8004206:	b280      	uxth	r0, r0
 8004208:	4770      	bx	lr

0800420a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800420a:	79c0      	ldrb	r0, [r0, #7]
    }
 800420c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004210:	4770      	bx	lr

08004212 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8004212:	79c0      	ldrb	r0, [r0, #7]
    }
 8004214:	09c0      	lsrs	r0, r0, #7
 8004216:	4770      	bx	lr

08004218 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8004218:	4770      	bx	lr

0800421a <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800421a:	b510      	push	{r4, lr}
 800421c:	4604      	mov	r4, r0
    }
 800421e:	2108      	movs	r1, #8
 8004220:	f01b f901 	bl	801f426 <_ZdlPvj>
 8004224:	4620      	mov	r0, r4
 8004226:	bd10      	pop	{r4, pc}

08004228 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8004228:	4770      	bx	lr

0800422a <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800422a:	4770      	bx	lr

0800422c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800422c:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	6849      	ldr	r1, [r1, #4]
 8004234:	c303      	stmia	r3!, {r0, r1}
    }
 8004236:	4770      	bx	lr

08004238 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8004238:	4770      	bx	lr

0800423a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800423a:	4770      	bx	lr

0800423c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800423c:	6041      	str	r1, [r0, #4]
    }
 800423e:	4770      	bx	lr

08004240 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004240:	4770      	bx	lr
	...

08004244 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8004246:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800424a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800424e:	2300      	movs	r3, #0
 8004250:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004254:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8004258:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoMainScreenNoTransition();
    }
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	08004305 	.word	0x08004305

08004264 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8004264:	2301      	movs	r3, #1
 8004266:	7203      	strb	r3, [r0, #8]
    }
 8004268:	4770      	bx	lr

0800426a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800426a:	4770      	bx	lr

0800426c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800426c:	4770      	bx	lr

0800426e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800426e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8004270:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004272:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004274:	68c2      	ldr	r2, [r0, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	1054      	asrs	r4, r2, #1
 800427a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800427e:	07d2      	lsls	r2, r2, #31
 8004280:	bf48      	it	mi
 8004282:	590a      	ldrmi	r2, [r1, r4]
    }
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8004288:	bf48      	it	mi
 800428a:	58d3      	ldrmi	r3, [r2, r3]
 800428c:	4718      	bx	r3

0800428e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800428e:	6843      	ldr	r3, [r0, #4]
 8004290:	b12b      	cbz	r3, 800429e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8004292:	6883      	ldr	r3, [r0, #8]
 8004294:	b92b      	cbnz	r3, 80042a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8004296:	68c0      	ldr	r0, [r0, #12]
 8004298:	f000 0001 	and.w	r0, r0, #1
 800429c:	4770      	bx	lr
 800429e:	4618      	mov	r0, r3
 80042a0:	4770      	bx	lr
 80042a2:	2001      	movs	r0, #1
    }
 80042a4:	4770      	bx	lr

080042a6 <_ZN8touchgfx12NoTransitionD0Ev>:
 80042a6:	b510      	push	{r4, lr}
 80042a8:	4604      	mov	r4, r0
 80042aa:	210c      	movs	r1, #12
 80042ac:	f01b f8bb 	bl	801f426 <_ZdlPvj>
 80042b0:	4620      	mov	r0, r4
 80042b2:	bd10      	pop	{r4, pc}

080042b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
 80042b8:	2110      	movs	r1, #16
 80042ba:	f01b f8b4 	bl	801f426 <_ZdlPvj>
 80042be:	4620      	mov	r0, r4
 80042c0:	bd10      	pop	{r4, pc}

080042c2 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80042c2:	b510      	push	{r4, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80042ca:	f01b f8ac 	bl	801f426 <_ZdlPvj>
 80042ce:	4620      	mov	r0, r4
 80042d0:	bd10      	pop	{r4, pc}

080042d2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80042d2:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80042d4:	f00c fafc 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80042d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80042dc:	f00c beda 	b.w	8011094 <_ZN8touchgfx11Application10invalidateEv>

080042e0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80042e4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80042e8:	b158      	cbz	r0, 8004302 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80042ea:	6803      	ldr	r3, [r0, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4798      	blx	r3
 80042f0:	b138      	cbz	r0, 8004302 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80042f2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80042f6:	6803      	ldr	r3, [r0, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8004302:	bd10      	pop	{r4, pc}

08004304 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8004304:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004308:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 800430c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800430e:	68a8      	ldr	r0, [r5, #8]
 8004310:	6803      	ldr	r3, [r0, #0]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4798      	blx	r3
 8004316:	f240 5383 	movw	r3, #1411	; 0x583
 800431a:	4298      	cmp	r0, r3
 800431c:	d805      	bhi.n	800432a <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x26>
 800431e:	4b45      	ldr	r3, [pc, #276]	; (8004434 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x130>)
 8004320:	21a3      	movs	r1, #163	; 0xa3
 8004322:	4a45      	ldr	r2, [pc, #276]	; (8004438 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004324:	4845      	ldr	r0, [pc, #276]	; (800443c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x138>)
 8004326:	f01b f8ad 	bl	801f484 <__assert_func>
 800432a:	6868      	ldr	r0, [r5, #4]
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4798      	blx	r3
 8004332:	280f      	cmp	r0, #15
 8004334:	d803      	bhi.n	800433e <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x3a>
 8004336:	4b42      	ldr	r3, [pc, #264]	; (8004440 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x13c>)
 8004338:	21a4      	movs	r1, #164	; 0xa4
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
 800433c:	e7f2      	b.n	8004324 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800433e:	68e8      	ldr	r0, [r5, #12]
 8004340:	6803      	ldr	r3, [r0, #0]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4798      	blx	r3
 8004346:	280b      	cmp	r0, #11
 8004348:	d803      	bhi.n	8004352 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x4e>
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x140>)
 800434c:	21a5      	movs	r1, #165	; 0xa5
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x134>)
 8004350:	e7e8      	b.n	8004324 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8004352:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800444c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8004356:	f00c fabb 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 800435a:	f00c fafa 	bl	8010952 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800435e:	f8d9 0000 	ldr.w	r0, [r9]
 8004362:	b110      	cbz	r0, 800436a <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004364:	6803      	ldr	r3, [r0, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4798      	blx	r3
    if (*currentTrans)
 800436a:	f8d9 0000 	ldr.w	r0, [r9]
 800436e:	b110      	cbz	r0, 8004376 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4798      	blx	r3
    if (*currentScreen)
 8004376:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004450 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x14c>
 800437a:	f8d8 0000 	ldr.w	r0, [r8]
 800437e:	b110      	cbz	r0, 8004386 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004380:	6803      	ldr	r3, [r0, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	4798      	blx	r3
    if (*currentPresenter)
 8004386:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800438a:	b110      	cbz	r0, 8004392 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4798      	blx	r3
    if (*currentScreen)
 8004392:	f8d8 0000 	ldr.w	r0, [r8]
 8004396:	b110      	cbz	r0, 800439e <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004398:	6803      	ldr	r3, [r0, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4798      	blx	r3
    if (*currentPresenter)
 800439e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80043a2:	b110      	cbz	r0, 80043aa <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80043a4:	6803      	ldr	r3, [r0, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80043aa:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80043ac:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80043ae:	f04f 0b00 	mov.w	fp, #0
 80043b2:	6803      	ldr	r3, [r0, #0]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	4798      	blx	r3
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x144>)
 80043ba:	4604      	mov	r4, r0
 80043bc:	f8c0 b004 	str.w	fp, [r0, #4]
 80043c0:	6003      	str	r3, [r0, #0]
 80043c2:	4659      	mov	r1, fp
 80043c4:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80043c8:	68a8      	ldr	r0, [r5, #8]
 80043ca:	6803      	ldr	r3, [r0, #0]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	4798      	blx	r3
 80043d0:	4606      	mov	r6, r0
 80043d2:	f001 fb91 	bl	8005af8 <_ZN8MainViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80043d6:	6868      	ldr	r0, [r5, #4]
 80043d8:	4659      	mov	r1, fp
 80043da:	6803      	ldr	r3, [r0, #0]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	4798      	blx	r3
 80043e0:	4605      	mov	r5, r0
 80043e2:	4631      	mov	r1, r6
 80043e4:	f001 faa8 	bl	8005938 <_ZN13MainPresenterC1ER8MainView>
    *currentTrans = newTransition;
 80043e8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80043ec:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80043f0:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80043f4:	b1e5      	cbz	r5, 8004430 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x12c>
 80043f6:	1d2b      	adds	r3, r5, #4
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80043f8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80043fc:	4630      	mov	r0, r6
 80043fe:	6833      	ldr	r3, [r6, #0]
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
    {
        model = m;
 8004400:	f8c5 a008 	str.w	sl, [r5, #8]
 8004404:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004406:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004408:	4798      	blx	r3
    newPresenter->activate();
 800440a:	682b      	ldr	r3, [r5, #0]
 800440c:	4628      	mov	r0, r5
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004412:	4621      	mov	r1, r4
 8004414:	4630      	mov	r0, r6
 8004416:	f00d fe7d 	bl	8012114 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	4620      	mov	r0, r4
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4798      	blx	r3
    newTransition->invalidate();
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	4620      	mov	r0, r4
 8004426:	695b      	ldr	r3, [r3, #20]
}
 8004428:	b001      	add	sp, #4
 800442a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442e:	4718      	bx	r3
    model->bind(newPresenter);
 8004430:	462b      	mov	r3, r5
 8004432:	e7e1      	b.n	80043f8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0xf4>
 8004434:	080224cc 	.word	0x080224cc
 8004438:	0802255a 	.word	0x0802255a
 800443c:	08022658 	.word	0x08022658
 8004440:	0802269f 	.word	0x0802269f
 8004444:	08022742 	.word	0x08022742
 8004448:	08022854 	.word	0x08022854
 800444c:	20024954 	.word	0x20024954
 8004450:	20024950 	.word	0x20024950

08004454 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	4617      	mov	r7, r2
 800445a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800445c:	f00c fa96 	bl	801098c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8004462:	2500      	movs	r5, #0
        instance = this;
 8004464:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004466:	4629      	mov	r1, r5
      model(m)
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800446a:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 800446e:	4e0f      	ldr	r6, [pc, #60]	; (80044ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004476:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 800447a:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800447e:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004480:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004488:	4628      	mov	r0, r5
 800448a:	f001 f9c7 	bl	800581c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800448e:	6833      	ldr	r3, [r6, #0]
 8004490:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8004494:	b10a      	cbz	r2, 800449a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8004496:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004498:	b900      	cbnz	r0, 800449c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 800449a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800449c:	f014 f8bf 	bl	801861e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80044a0:	4620      	mov	r0, r4
 80044a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a4:	20024960 	.word	0x20024960
 80044a8:	08022808 	.word	0x08022808
 80044ac:	20024914 	.word	0x20024914
 80044b0:	080227f0 	.word	0x080227f0

080044b4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x1c>)
 80044b6:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80044ba:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80044be:	2300      	movs	r3, #0
 80044c0:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 80044c4:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80044c8:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	08004305 	.word	0x08004305

080044d4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80044d4:	6a00      	ldr	r0, [r0, #32]
 80044d6:	4770      	bx	lr

080044d8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80044d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80044da:	4770      	bx	lr

080044dc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80044dc:	4770      	bx	lr

080044de <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80044de:	888b      	ldrh	r3, [r1, #4]
 80044e0:	6980      	ldr	r0, [r0, #24]
 80044e2:	0adb      	lsrs	r3, r3, #11
 80044e4:	680a      	ldr	r2, [r1, #0]
 80044e6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80044ea:	4410      	add	r0, r2
 80044ec:	4770      	bx	lr

080044ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80044ee:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80044f0:	b1c2      	cbz	r2, 8004524 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80044f2:	7b13      	ldrb	r3, [r2, #12]
 80044f4:	b1b3      	cbz	r3, 8004524 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80044f6:	7b54      	ldrb	r4, [r2, #13]
 80044f8:	7ad2      	ldrb	r2, [r2, #11]
 80044fa:	0224      	lsls	r4, r4, #8
 80044fc:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004500:	4314      	orrs	r4, r2
 8004502:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004504:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004506:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800450a:	8813      	ldrh	r3, [r2, #0]
 800450c:	428b      	cmp	r3, r1
 800450e:	d102      	bne.n	8004516 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004510:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8004514:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004516:	d805      	bhi.n	8004524 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004518:	3801      	subs	r0, #1
 800451a:	3204      	adds	r2, #4
 800451c:	b280      	uxth	r0, r0
 800451e:	2800      	cmp	r0, #0
 8004520:	d1f3      	bne.n	800450a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004522:	e7f7      	b.n	8004514 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004524:	2000      	movs	r0, #0
 8004526:	e7f5      	b.n	8004514 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004528 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004528:	b510      	push	{r4, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	2128      	movs	r1, #40	; 0x28
 800452e:	f01a ff7a 	bl	801f426 <_ZdlPvj>
 8004532:	4620      	mov	r0, r4
 8004534:	bd10      	pop	{r4, pc}
	...

08004538 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004538:	b530      	push	{r4, r5, lr}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800453e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8004542:	9506      	str	r5, [sp, #24]
 8004544:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8004548:	9505      	str	r5, [sp, #20]
 800454a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800454e:	9504      	str	r5, [sp, #16]
 8004550:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8004554:	9503      	str	r5, [sp, #12]
 8004556:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800455a:	9502      	str	r5, [sp, #8]
 800455c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8004560:	9501      	str	r5, [sp, #4]
 8004562:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8004566:	9500      	str	r5, [sp, #0]
 8004568:	f00d fa34 	bl	80119d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 800456e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004574:	61a3      	str	r3, [r4, #24]
 8004576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004578:	61e3      	str	r3, [r4, #28]
 800457a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800457c:	6223      	str	r3, [r4, #32]
 800457e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004580:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004582:	b009      	add	sp, #36	; 0x24
 8004584:	bd30      	pop	{r4, r5, pc}
 8004586:	bf00      	nop
 8004588:	08022878 	.word	0x08022878

0800458c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800458c:	2000      	movs	r0, #0
 800458e:	4770      	bx	lr

08004590 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8004590:	8081      	strh	r1, [r0, #4]
    }
 8004592:	4770      	bx	lr

08004594 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8004594:	80c1      	strh	r1, [r0, #6]
    }
 8004596:	4770      	bx	lr

08004598 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8004598:	8101      	strh	r1, [r0, #8]
    }
 800459a:	4770      	bx	lr

0800459c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800459c:	8141      	strh	r1, [r0, #10]
    }
 800459e:	4770      	bx	lr

080045a0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80045a0:	4770      	bx	lr

080045a2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80045a2:	4770      	bx	lr

080045a4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80045a4:	4770      	bx	lr

080045a6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80045a6:	4770      	bx	lr

080045a8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80045a8:	4770      	bx	lr

080045aa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80045aa:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80045ac:	88c4      	ldrh	r4, [r0, #6]
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	1b12      	subs	r2, r2, r4
 80045b2:	8884      	ldrh	r4, [r0, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	1b09      	subs	r1, r1, r4
 80045b8:	b212      	sxth	r2, r2
    }
 80045ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80045be:	b209      	sxth	r1, r1
 80045c0:	4718      	bx	r3

080045c2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80045c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80045d2:	6010      	str	r0, [r2, #0]
    }
 80045d4:	4770      	bx	lr

080045d6 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80045d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80045d8:	4770      	bx	lr

080045da <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80045da:	4770      	bx	lr

080045dc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80045dc:	4770      	bx	lr

080045de <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80045de:	4770      	bx	lr

080045e0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80045e0:	4770      	bx	lr

080045e2 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80045e2:	4770      	bx	lr

080045e4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80045e4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80045e8:	b11a      	cbz	r2, 80045f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80045ea:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80045ee:	b102      	cbz	r2, 80045f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80045f0:	6018      	str	r0, [r3, #0]
        }
    }
 80045f2:	4770      	bx	lr

080045f4 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
    {
    }
 80045f4:	4770      	bx	lr

080045f6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
    {
    }
 80045f6:	4770      	bx	lr

080045f8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 80045f8:	4770      	bx	lr

080045fa <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80045fa:	b530      	push	{r4, r5, lr}
 80045fc:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80045fe:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8004600:	4604      	mov	r4, r0
        rect.width = width;
 8004602:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004604:	466d      	mov	r5, sp
 8004606:	4601      	mov	r1, r0
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	343c      	adds	r4, #60	; 0x3c
 800460e:	4628      	mov	r0, r5
 8004610:	4798      	blx	r3
 8004612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800461a:	b005      	add	sp, #20
 800461c:	bd30      	pop	{r4, r5, pc}

0800461e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800461e:	b530      	push	{r4, r5, lr}
 8004620:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004622:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004624:	4604      	mov	r4, r0
        rect.height = height;
 8004626:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004628:	466d      	mov	r5, sp
 800462a:	4601      	mov	r1, r0
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004630:	343c      	adds	r4, #60	; 0x3c
 8004632:	4628      	mov	r0, r5
 8004634:	4798      	blx	r3
 8004636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800463a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800463e:	b005      	add	sp, #20
 8004640:	bd30      	pop	{r4, r5, pc}

08004642 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8004642:	2200      	movs	r2, #0
 8004644:	8002      	strh	r2, [r0, #0]
 8004646:	8042      	strh	r2, [r0, #2]
 8004648:	8082      	strh	r2, [r0, #4]
 800464a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800464c:	4770      	bx	lr

0800464e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800464e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004652:	4770      	bx	lr

08004654 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004654:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	4604      	mov	r4, r0
        setX(x);
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800465c:	4615      	mov	r5, r2
        setX(x);
 800465e:	4798      	blx	r3
        setBaselineY(baselineY);
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	4620      	mov	r0, r4
 8004664:	4629      	mov	r1, r5
 8004666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8004668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800466c:	4718      	bx	r3

0800466e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800466e:	2000      	movs	r0, #0
 8004670:	4770      	bx	lr

08004672 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004672:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004674:	4770      	bx	lr

08004676 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8004676:	4770      	bx	lr

08004678 <_ZN12MainViewBase19toggleButtonPressedEv>:
     * Virtual Action Handlers
     */
    virtual void toggleButtonPressed()
    {
        // Override and implement this function in Main
    }
 8004678:	4770      	bx	lr

0800467a <_ZN12MainViewBase18touchButtonPressedEv>:

    virtual void touchButtonPressed()
    {
        // Override and implement this function in Main
    }
 800467a:	4770      	bx	lr

0800467c <_ZN12MainViewBase18clickButtonPressedEv>:

    virtual void clickButtonPressed()
    {
        // Override and implement this function in Main
    }
 800467c:	4770      	bx	lr

0800467e <_ZN12MainViewBase19repeatButtonPressedEv>:

    virtual void repeatButtonPressed()
    {
        // Override and implement this function in Main
    }
 800467e:	4770      	bx	lr

08004680 <_ZN12MainViewBase11setupScreenEv>:
}

void MainViewBase::setupScreen()
{

}
 8004680:	4770      	bx	lr

08004682 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class ImageButtonStyle : public T
 8004682:	4770      	bx	lr

08004684 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8004684:	4770      	bx	lr

08004686 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 8004686:	4770      	bx	lr

08004688 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8004688:	4770      	bx	lr

0800468a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
        return pressed;
 800468a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800468e:	b14b      	cbz	r3, 80046a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004690:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 8004694:	6812      	ldr	r2, [r2, #0]
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004696:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004698:	b13b      	cbz	r3, 80046aa <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x20>
 800469a:	f100 0374 	add.w	r3, r0, #116	; 0x74
 800469e:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 80046a0:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 80046a2:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 80046a4:	f100 0268 	add.w	r2, r0, #104	; 0x68
 80046a8:	e7f4      	b.n	8004694 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80046aa:	f100 0370 	add.w	r3, r0, #112	; 0x70
 80046ae:	e7f6      	b.n	800469e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x14>

080046b0 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>:
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80046b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046b4:	b123      	cbz	r3, 80046c0 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0x10>
 80046b6:	f100 0384 	add.w	r3, r0, #132	; 0x84
 80046ba:	681b      	ldr	r3, [r3, #0]
        color = newColor;
 80046bc:	6683      	str	r3, [r0, #104]	; 0x68
        T::handlePressedUpdated();
    }
 80046be:	4770      	bx	lr
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80046c0:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80046c4:	e7f9      	b.n	80046ba <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv+0xa>

080046c6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80046c6:	4770      	bx	lr

080046c8 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEED1Ev>:
class TextButtonStyle : public T
 80046c8:	4770      	bx	lr

080046ca <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>:
 80046ca:	4770      	bx	lr

080046cc <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
 80046cc:	4770      	bx	lr

080046ce <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEED1Ev>:
 80046ce:	4770      	bx	lr

080046d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80046d0:	4770      	bx	lr

080046d2 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80046d2:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80046d4:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80046d6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80046d8:	68c2      	ldr	r2, [r0, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	1055      	asrs	r5, r2, #1
 80046de:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	bf48      	it	mi
 80046e6:	5962      	ldrmi	r2, [r4, r5]
    }
 80046e8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80046ea:	bf48      	it	mi
 80046ec:	58d3      	ldrmi	r3, [r2, r3]
 80046ee:	4718      	bx	r3

080046f0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80046f0:	6843      	ldr	r3, [r0, #4]
 80046f2:	b12b      	cbz	r3, 8004700 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x10>
 80046f4:	6883      	ldr	r3, [r0, #8]
 80046f6:	b92b      	cbnz	r3, 8004704 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 80046f8:	68c0      	ldr	r0, [r0, #12]
 80046fa:	f000 0001 	and.w	r0, r0, #1
 80046fe:	4770      	bx	lr
 8004700:	4618      	mov	r0, r3
 8004702:	4770      	bx	lr
 8004704:	2001      	movs	r0, #1
    }
 8004706:	4770      	bx	lr

08004708 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE18handleAlphaUpdatedEv>:
        alpha = newAlpha;
 8004708:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800470c:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004710:	4770      	bx	lr

08004712 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE18handleAlphaUpdatedEv>:
        return alpha;
 8004712:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004716:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800471a:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 800471e:	4770      	bx	lr

08004720 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
 8004720:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004724:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004728:	4770      	bx	lr

0800472a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
 800472a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800472e:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
 8004732:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8004736:	4770      	bx	lr

08004738 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
 8004738:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800473c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        buttonImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004740:	4770      	bx	lr

08004742 <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEE18handleAlphaUpdatedEv>:
 8004742:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004746:	f880 30d2 	strb.w	r3, [r0, #210]	; 0xd2
 800474a:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 800474e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8004752:	4770      	bx	lr

08004754 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE18handleAlphaUpdatedEv>:
 8004754:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004758:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 800475c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 8004760:	4770      	bx	lr

08004762 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE18handleAlphaUpdatedEv>:
 8004762:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004766:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
 800476a:	4770      	bx	lr

0800476c <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 800476c:	4601      	mov	r1, r0
        buttonImage.setBitmap(T::getPressed() ? down : up);
 800476e:	303c      	adds	r0, #60	; 0x3c
 8004770:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8004774:	b113      	cbz	r3, 800477c <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8004776:	316a      	adds	r1, #106	; 0x6a
 8004778:	f00a bb3e 	b.w	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800477c:	3168      	adds	r1, #104	; 0x68
 800477e:	e7fb      	b.n	8004778 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv+0xc>

08004780 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8004780:	b510      	push	{r4, lr}
 8004782:	4604      	mov	r4, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8004784:	3070      	adds	r0, #112	; 0x70
 8004786:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800478a:	b13b      	cbz	r3, 800479c <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv+0x1c>
 800478c:	f104 016e 	add.w	r1, r4, #110	; 0x6e
 8004790:	f00a fb32 	bl	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8004794:	4620      	mov	r0, r4
 8004796:	f7ff ffe9 	bl	800476c <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv>
    }
 800479a:	bd10      	pop	{r4, pc}
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800479c:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80047a0:	e7f6      	b.n	8004790 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv+0x10>

080047a2 <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80047a2:	b508      	push	{r3, lr}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80047a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80047a8:	b13b      	cbz	r3, 80047ba <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEE20handlePressedUpdatedEv+0x18>
 80047aa:	f100 03e8 	add.w	r3, r0, #232	; 0xe8
 80047ae:	681b      	ldr	r3, [r3, #0]
        color = newColor;
 80047b0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
        T::handlePressedUpdated();
 80047b4:	f7ff ffe4 	bl	8004780 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv>
    }
 80047b8:	bd08      	pop	{r3, pc}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80047ba:	f100 03e4 	add.w	r3, r0, #228	; 0xe4
 80047be:	e7f6      	b.n	80047ae <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEE20handlePressedUpdatedEv+0xc>

080047c0 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80047c0:	4601      	mov	r1, r0
        buttonImage.setBitmap(T::getPressed() ? down : up);
 80047c2:	3034      	adds	r0, #52	; 0x34
 80047c4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80047c8:	b113      	cbz	r3, 80047d0 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 80047ca:	3162      	adds	r1, #98	; 0x62
 80047cc:	f00a bb14 	b.w	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80047d0:	3160      	adds	r1, #96	; 0x60
 80047d2:	e7fb      	b.n	80047cc <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

080047d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80047d4:	b508      	push	{r3, lr}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80047d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80047da:	b13b      	cbz	r3, 80047ec <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x18>
 80047dc:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        T::handlePressedUpdated();
 80047e6:	f7ff ffeb 	bl	80047c0 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 80047ea:	bd08      	pop	{r3, pc}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80047ec:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 80047f0:	e7f6      	b.n	80047e0 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0xc>

080047f2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80047f2:	b510      	push	{r4, lr}
 80047f4:	4604      	mov	r4, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 80047f6:	307c      	adds	r0, #124	; 0x7c
 80047f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80047fc:	b13b      	cbz	r3, 800480e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x1c>
 80047fe:	f104 017a 	add.w	r1, r4, #122	; 0x7a
 8004802:	f00a faf9 	bl	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 8004806:	4620      	mov	r0, r4
 8004808:	f7ff ff3f 	bl	800468a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>
    }
 800480c:	bd10      	pop	{r4, pc}
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800480e:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8004812:	e7f6      	b.n	8004802 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x10>

08004814 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
class AbstractButtonContainer : public Container
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
 8004818:	2134      	movs	r1, #52	; 0x34
 800481a:	f01a fe04 	bl	801f426 <_ZdlPvj>
 800481e:	4620      	mov	r0, r4
 8004820:	bd10      	pop	{r4, pc}

08004822 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEED0Ev>:
class ImageButtonStyle : public T
 8004822:	b510      	push	{r4, lr}
 8004824:	4604      	mov	r4, r0
 8004826:	216c      	movs	r1, #108	; 0x6c
 8004828:	f01a fdfd 	bl	801f426 <_ZdlPvj>
 800482c:	4620      	mov	r0, r4
 800482e:	bd10      	pop	{r4, pc}

08004830 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEED0Ev>:
class IconButtonStyle : public T
 8004830:	b510      	push	{r4, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	219c      	movs	r1, #156	; 0x9c
 8004836:	f01a fdf6 	bl	801f426 <_ZdlPvj>
 800483a:	4620      	mov	r0, r4
 800483c:	bd10      	pop	{r4, pc}

0800483e <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800483e:	b510      	push	{r4, lr}
 8004840:	4604      	mov	r4, r0
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	f01a fdef 	bl	801f426 <_ZdlPvj>
 8004848:	4620      	mov	r0, r4
 800484a:	bd10      	pop	{r4, pc}

0800484c <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEED0Ev>:
class TextButtonStyle : public T
 800484c:	b510      	push	{r4, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	21ec      	movs	r1, #236	; 0xec
 8004852:	f01a fde8 	bl	801f426 <_ZdlPvj>
 8004856:	4620      	mov	r0, r4
 8004858:	bd10      	pop	{r4, pc}

0800485a <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 800485a:	b510      	push	{r4, lr}
 800485c:	4604      	mov	r4, r0
 800485e:	21b4      	movs	r1, #180	; 0xb4
 8004860:	f01a fde1 	bl	801f426 <_ZdlPvj>
 8004864:	4620      	mov	r0, r4
 8004866:	bd10      	pop	{r4, pc}

08004868 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEED0Ev>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	2188      	movs	r1, #136	; 0x88
 800486e:	f01a fdda 	bl	801f426 <_ZdlPvj>
 8004872:	4620      	mov	r0, r4
 8004874:	bd10      	pop	{r4, pc}

08004876 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004876:	b510      	push	{r4, lr}
 8004878:	4604      	mov	r4, r0
 800487a:	214c      	movs	r1, #76	; 0x4c
 800487c:	f01a fdd3 	bl	801f426 <_ZdlPvj>
 8004880:	4620      	mov	r0, r4
 8004882:	bd10      	pop	{r4, pc}

08004884 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 8004884:	b510      	push	{r4, lr}
 8004886:	4604      	mov	r4, r0
 8004888:	2178      	movs	r1, #120	; 0x78
 800488a:	f01a fdcc 	bl	801f426 <_ZdlPvj>
 800488e:	4620      	mov	r0, r4
 8004890:	bd10      	pop	{r4, pc}

08004892 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED0Ev>:
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	21a8      	movs	r1, #168	; 0xa8
 8004898:	f01a fdc5 	bl	801f426 <_ZdlPvj>
 800489c:	4620      	mov	r0, r4
 800489e:	bd10      	pop	{r4, pc}

080048a0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80048a0:	b510      	push	{r4, lr}
 80048a2:	4604      	mov	r4, r0
 80048a4:	2110      	movs	r1, #16
 80048a6:	f01a fdbe 	bl	801f426 <_ZdlPvj>
 80048aa:	4620      	mov	r0, r4
 80048ac:	bd10      	pop	{r4, pc}

080048ae <_ZN12MainViewBaseD0Ev>:
    virtual ~MainViewBase() {}
 80048ae:	b510      	push	{r4, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	f240 5184 	movw	r1, #1412	; 0x584
 80048b6:	f01a fdb6 	bl	801f426 <_ZdlPvj>
 80048ba:	4620      	mov	r0, r4
 80048bc:	bd10      	pop	{r4, pc}

080048be <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80048be:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80048c2:	b112      	cbz	r2, 80048ca <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	4718      	bx	r3
    }
 80048ca:	4770      	bx	lr

080048cc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    virtual void executeAction()
 80048cc:	b510      	push	{r4, lr}
 80048ce:	4604      	mov	r4, r0
        if (action && action->isValid())
 80048d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80048d2:	b150      	cbz	r0, 80048ea <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 80048d4:	6803      	ldr	r3, [r0, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4798      	blx	r3
 80048da:	b130      	cbz	r0, 80048ea <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
            action->execute(*this);
 80048dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048de:	4621      	mov	r1, r4
 80048e0:	6803      	ldr	r3, [r0, #0]
    }
 80048e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4718      	bx	r3
    }
 80048ea:	bd10      	pop	{r4, pc}

080048ec <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv>:

    void handleTickEvent()
    {
        AbstractButtonContainer::handleTickEvent();

        if (!pressed)
 80048ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    void handleTickEvent()
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4604      	mov	r4, r0
        if (!pressed)
 80048f4:	b16b      	cbz	r3, 8004912 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x26>
        {
            return;
        }
        if (ticks == ticksBeforeContinuous)
 80048f6:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 80048fa:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 80048fe:	429a      	cmp	r2, r3
 8004900:	d108      	bne.n	8004914 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x28>
        {
            executeAction();
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	4798      	blx	r3

            ticks = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	8723      	strh	r3, [r4, #56]	; 0x38
            ticksBeforeContinuous = ticksInterval;
 800490e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004910:	8763      	strh	r3, [r4, #58]	; 0x3a
        }
        else
        {
            ticks++;
        }
    }
 8004912:	bd10      	pop	{r4, pc}
            ticks++;
 8004914:	3301      	adds	r3, #1
 8004916:	8703      	strh	r3, [r0, #56]	; 0x38
 8004918:	e7fb      	b.n	8004912 <_ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv+0x26>

0800491a <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &repeatButton)
 800491a:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
 800491e:	4291      	cmp	r1, r2
 8004920:	d102      	bne.n	8004928 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xe>
    {
        //repeatButtonInteraction
        //When repeatButton clicked call virtual function
        //Call repeatButtonPressed
        repeatButtonPressed();
 8004922:	6803      	ldr	r3, [r0, #0]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    else if (&src == &toggleButton)
    {
        //toggleButtonInteraction
        //When toggleButton clicked call virtual function
        //Call toggleButtonPressed
        toggleButtonPressed();
 8004926:	4718      	bx	r3
    else if (&src == &clickButton)
 8004928:	f500 72d8 	add.w	r2, r0, #432	; 0x1b0
 800492c:	4291      	cmp	r1, r2
 800492e:	d102      	bne.n	8004936 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x1c>
        clickButtonPressed();
 8004930:	6803      	ldr	r3, [r0, #0]
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	e7f7      	b.n	8004926 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
    else if (&src == &touchButton)
 8004936:	f500 7219 	add.w	r2, r0, #612	; 0x264
 800493a:	4291      	cmp	r1, r2
 800493c:	d102      	bne.n	8004944 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2a>
        touchButtonPressed();
 800493e:	6803      	ldr	r3, [r0, #0]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	e7f0      	b.n	8004926 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
    else if (&src == &toggleButton)
 8004944:	f500 7243 	add.w	r2, r0, #780	; 0x30c
 8004948:	4291      	cmp	r1, r2
 800494a:	d102      	bne.n	8004952 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x38>
        toggleButtonPressed();
 800494c:	6803      	ldr	r3, [r0, #0]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	e7e9      	b.n	8004926 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
    }
}
 8004952:	4770      	bx	lr

08004954 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004954:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8004956:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004958:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 800495a:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800495e:	b28d      	uxth	r5, r1
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b92b      	cbnz	r3, 8004970 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004966:	216c      	movs	r1, #108	; 0x6c
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800496a:	4811      	ldr	r0, [pc, #68]	; (80049b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800496c:	f01a fd8a 	bl	801f484 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004970:	4910      	ldr	r1, [pc, #64]	; (80049b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004972:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004974:	8809      	ldrh	r1, [r1, #0]
 8004976:	4291      	cmp	r1, r2
 8004978:	d803      	bhi.n	8004982 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800497c:	216d      	movs	r1, #109	; 0x6d
 800497e:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004980:	e7f3      	b.n	800496a <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004982:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800498e:	6803      	ldr	r3, [r0, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4798      	blx	r3
 8004994:	1a28      	subs	r0, r5, r0
 8004996:	4633      	mov	r3, r6
 8004998:	b201      	sxth	r1, r0
 800499a:	4620      	mov	r0, r4
    }
 800499c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80049a0:	4718      	bx	r3
 80049a2:	bf00      	nop
 80049a4:	20024964 	.word	0x20024964
 80049a8:	080228c8 	.word	0x080228c8
 80049ac:	0802290a 	.word	0x0802290a
 80049b0:	08022945 	.word	0x08022945
 80049b4:	20024968 	.word	0x20024968
 80049b8:	0802298c 	.word	0x0802298c
 80049bc:	2002496c 	.word	0x2002496c

080049c0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80049c0:	2200      	movs	r2, #0
 80049c2:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80049c6:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80049c8:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80049cc:	4770      	bx	lr

080049ce <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80049ce:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4604      	mov	r4, r0
        setX(x);
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80049d6:	4615      	mov	r5, r2
        setX(x);
 80049d8:	4798      	blx	r3
        setY(y);
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80049e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80049e6:	4718      	bx	r3

080049e8 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
        iconReleased = newIconReleased;
 80049e8:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 80049ee:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80049f2:	4604      	mov	r4, r0
        iconPressed = newIconPressed;
 80049f4:	8813      	ldrh	r3, [r2, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80049f6:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80049f8:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 80049fc:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8004a00:	4610      	mov	r0, r2
 8004a02:	f00e ff2d 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004a06:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004a14:	4640      	mov	r0, r8
 8004a16:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8004a1a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8004a1e:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8004a22:	f00e ff51 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8004a26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004a2a:	eba5 0767 	sub.w	r7, r5, r7, asr #1
 8004a2e:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8004a32:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8004a36:	b239      	sxth	r1, r7
 8004a38:	b212      	sxth	r2, r2
 8004a3a:	f7ff ffc8 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
 8004a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8004a4a:	4718      	bx	r3

08004a4c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
        iconReleased = newIconReleased;
 8004a4c:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8004a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8004a52:	f8a0 3078 	strh.w	r3, [r0, #120]	; 0x78
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8004a56:	4604      	mov	r4, r0
        iconPressed = newIconPressed;
 8004a58:	8813      	ldrh	r3, [r2, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8004a5a:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8004a5c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8004a60:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8004a64:	4610      	mov	r0, r2
 8004a66:	f00e fefb 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004a6a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004a6e:	4607      	mov	r7, r0
 8004a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a74:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004a78:	4640      	mov	r0, r8
 8004a7a:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8004a7e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8004a82:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8004a86:	f00e ff1f 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8004a8a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004a8e:	eba5 0767 	sub.w	r7, r5, r7, asr #1
 8004a92:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8004a96:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8004a9a:	b239      	sxth	r1, r7
 8004a9c:	b212      	sxth	r2, r2
 8004a9e:	f7ff ff96 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
 8004aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8004aae:	4718      	bx	r3

08004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 8004ab0:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 8004ab2:	b570      	push	{r4, r5, r6, lr}
 8004ab4:	4604      	mov	r4, r0
        setWidth(width);
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    void setWidthHeight(int16_t width, int16_t height)
 8004ab8:	4615      	mov	r5, r2
        setWidth(width);
 8004aba:	4798      	blx	r3
        setHeight(height);
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8004ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004ac8:	4718      	bx	r3

08004aca <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004aca:	b538      	push	{r3, r4, r5, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	461d      	mov	r5, r3
        setXY(x, y);
 8004ad0:	f7ff ff7d 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004ad4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff ffe8 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}

08004ae2 <_ZN8touchgfx8Drawable14setWidthHeightERKNS_6BitmapE>:
    void setWidthHeight(const Bitmap& bitmap)
 8004ae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	4605      	mov	r5, r0
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8004ae8:	4608      	mov	r0, r1
 8004aea:	f00e feb9 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004aee:	9001      	str	r0, [sp, #4]
 8004af0:	4620      	mov	r0, r4
 8004af2:	f00e fee9 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8004af6:	9901      	ldr	r1, [sp, #4]
 8004af8:	4602      	mov	r2, r0
 8004afa:	4628      	mov	r0, r5
 8004afc:	f7ff ffd8 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004b00:	b003      	add	sp, #12
 8004b02:	bd30      	pop	{r4, r5, pc}

08004b04 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
        up = bmpReleased;
 8004b04:	880b      	ldrh	r3, [r1, #0]
        down = bmpPressed;
 8004b06:	4601      	mov	r1, r0
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8004b08:	b510      	push	{r4, lr}
        up = bmpReleased;
 8004b0a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8004b0e:	4604      	mov	r4, r0
        down = bmpPressed;
 8004b10:	8813      	ldrh	r3, [r2, #0]
 8004b12:	f821 3f6a 	strh.w	r3, [r1, #106]!
        ImageButtonStyle::setWidthHeight(down);
 8004b16:	f7ff ffe4 	bl	8004ae2 <_ZN8touchgfx8Drawable14setWidthHeightERKNS_6BitmapE>
        handlePressedUpdated();
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
 8004b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handlePressedUpdated();
 8004b26:	4718      	bx	r3

08004b28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>:
        up = bmpReleased;
 8004b28:	880b      	ldrh	r3, [r1, #0]
        down = bmpPressed;
 8004b2a:	4601      	mov	r1, r0
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8004b2c:	b510      	push	{r4, lr}
        up = bmpReleased;
 8004b2e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8004b32:	4604      	mov	r4, r0
        down = bmpPressed;
 8004b34:	8813      	ldrh	r3, [r2, #0]
 8004b36:	f821 3f62 	strh.w	r3, [r1, #98]!
        ImageButtonStyle::setWidthHeight(down);
 8004b3a:	f7ff ffd2 	bl	8004ae2 <_ZN8touchgfx8Drawable14setWidthHeightERKNS_6BitmapE>
        handlePressedUpdated();
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4620      	mov	r0, r4
 8004b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
 8004b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handlePressedUpdated();
 8004b4a:	4718      	bx	r3

08004b4c <_ZN8touchgfx6WidgetC1Ev>:
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004b52:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 8004b56:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8004b5a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8004b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b62:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8004b64:	4a01      	ldr	r2, [pc, #4]	; (8004b6c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004b66:	6002      	str	r2, [r0, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	08022a10 	.word	0x08022a10

08004b70 <_ZN8touchgfx3BoxC1Ev>:
    Box()
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8004b74:	2226      	movs	r2, #38	; 0x26
 8004b76:	2100      	movs	r1, #0
 8004b78:	f01a fd14 	bl	801f5a4 <memset>
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f7ff ffe5 	bl	8004b4c <_ZN8touchgfx6WidgetC1Ev>
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 8004b84:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	23ff      	movs	r3, #255	; 0xff
 8004b8a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8004b92:	bd10      	pop	{r4, pc}
 8004b94:	08023c50 	.word	0x08023c50

08004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8004b9e:	2226      	movs	r2, #38	; 0x26
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	f01a fcff 	bl	801f5a4 <memset>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7ff ffd0 	bl	8004b4c <_ZN8touchgfx6WidgetC1Ev>
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	882b      	ldrh	r3, [r5, #0]
 8004bb6:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004bb8:	23ff      	movs	r3, #255	; 0xff
 8004bba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8004bbe:	f00a f91b 	bl	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	bd38      	pop	{r3, r4, r5, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08023d20 	.word	0x08023d20

08004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
        : pressed(false), alpha(255), action(0)
 8004bcc:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x28>)
 8004bce:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004bd2:	6002      	str	r2, [r0, #0]
          firstChild(0)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	8581      	strh	r1, [r0, #44]	; 0x2c
 8004bd8:	6282      	str	r2, [r0, #40]	; 0x28
 8004bda:	6302      	str	r2, [r0, #48]	; 0x30
        : x(0), y(0), width(0), height(0)
 8004bdc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004be0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8004be4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8004be8:	e9c0 2207 	strd	r2, r2, [r0, #28]
        touchable = touch;
 8004bec:	f240 1201 	movw	r2, #257	; 0x101
 8004bf0:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8004bf2:	4770      	bx	lr
 8004bf4:	08022a78 	.word	0x08022a78

08004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
        handlePressedUpdated();
 8004bf8:	6803      	ldr	r3, [r0, #0]
        pressed = isPressed;
 8004bfa:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
        handlePressedUpdated();
 8004bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c02:	4718      	bx	r3

08004c04 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE>:
    void handleClickEvent(const ClickEvent& event)
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	460d      	mov	r5, r1
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8004c08:	7909      	ldrb	r1, [r1, #4]
 8004c0a:	4604      	mov	r4, r0
        return pressed;
 8004c0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004c10:	b981      	cbnz	r1, 8004c34 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x30>
 8004c12:	b183      	cbz	r3, 8004c36 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x32>
            executeAction();
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4620      	mov	r0, r4
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	4798      	blx	r3
            ticks = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	8723      	strh	r3, [r4, #56]	; 0x38
            ticksBeforeContinuous = ticksDelay;
 8004c22:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004c24:	8763      	strh	r3, [r4, #58]	; 0x3a
            Application::getInstance()->registerTimerWidget(this);
 8004c26:	f00b fe53 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 8004c2a:	4621      	mov	r1, r4
    }
 8004c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Application::getInstance()->registerTimerWidget(this);
 8004c30:	f00b be54 	b.w	80108dc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004c34:	b163      	cbz	r3, 8004c50 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
            setPressed(newPressedValue);
 8004c36:	fab1 f181 	clz	r1, r1
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	0949      	lsrs	r1, r1, #5
 8004c3e:	f7ff ffdb 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	4620      	mov	r0, r4
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	4798      	blx	r3
        if (event.getType() == ClickEvent::PRESSED)
 8004c4a:	792b      	ldrb	r3, [r5, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e1      	beq.n	8004c14 <_ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            Application::getInstance()->unregisterTimerWidget(this);
 8004c50:	f00b fe3e 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 8004c54:	4621      	mov	r1, r4
    }
 8004c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Application::getInstance()->unregisterTimerWidget(this);
 8004c5a:	f00b be64 	b.w	8010926 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

08004c5e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	460d      	mov	r5, r1
 8004c62:	7909      	ldrb	r1, [r1, #4]
 8004c64:	4604      	mov	r4, r0
 8004c66:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004c6a:	b979      	cbnz	r1, 8004c8c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x2e>
 8004c6c:	b96e      	cbnz	r6, 8004c8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x2c>
        {
            setPressed(newPressedValue);
 8004c6e:	fab1 f181 	clz	r1, r1
 8004c72:	4620      	mov	r0, r4
 8004c74:	0949      	lsrs	r1, r1, #5
 8004c76:	f7ff ffbf 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004c82:	b116      	cbz	r6, 8004c8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x2c>
 8004c84:	792b      	ldrb	r3, [r5, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d003      	beq.n	8004c92 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x34>
        {
            executeAction();
        }
    }
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	d0fc      	beq.n	8004c8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x2c>
 8004c90:	e7ed      	b.n	8004c6e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    }
 8004c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004c9e:	4718      	bx	r3

08004ca0 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	790d      	ldrb	r5, [r1, #4]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004caa:	b93d      	cbnz	r5, 8004cbc <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1c>
 8004cac:	b13b      	cbz	r3, 8004cbe <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            setPressed(newPressedValue);
            invalidate();
        }
        if (newPressedValue)
        {
            executeAction();
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        }
    }
 8004cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004cba:	4718      	bx	r3
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004cbc:	b15b      	cbz	r3, 8004cd6 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x36>
            setPressed(newPressedValue);
 8004cbe:	fab5 f185 	clz	r1, r5
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	0949      	lsrs	r1, r1, #5
 8004cc6:	f7ff ff97 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	4620      	mov	r0, r4
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	4798      	blx	r3
        if (newPressedValue)
 8004cd2:	2d00      	cmp	r5, #0
 8004cd4:	d0eb      	beq.n	8004cae <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xe>
    }
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE>:
    bool getToggleCanceled()
    {
        return toggleCanceled;
    }

    virtual void handleClickEvent(const ClickEvent& event)
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	460d      	mov	r5, r1
        return toggleCanceled;
 8004cdc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    virtual void handleClickEvent(const ClickEvent& event)
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8004ce6:	792a      	ldrb	r2, [r5, #4]
    {
        bool wasPressed = getPressed();
        bool newPressedValue = !getPressed();
        bool toggleCanceled = getToggleCanceled();
        setToggleCanceled(event.getType() == ClickEvent::CANCEL);
 8004ce8:	f1a2 0c02 	sub.w	ip, r2, #2
 8004cec:	f1dc 0600 	rsbs	r6, ip, #0
 8004cf0:	eb46 060c 	adc.w	r6, r6, ip

        if (((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed)) && (event.getType() != ClickEvent::RELEASED) && !toggleCanceled)
 8004cf4:	2a01      	cmp	r2, #1
        setToggleCanceled(event.getType() == ClickEvent::CANCEL);
 8004cf6:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
        if (((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed)) && (event.getType() != ClickEvent::RELEASED) && !toggleCanceled)
 8004cfa:	d012      	beq.n	8004d22 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4a>
 8004cfc:	b99b      	cbnz	r3, 8004d26 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4e>
        {
            setPressed(newPressedValue);
 8004cfe:	f081 0101 	eor.w	r1, r1, #1
 8004d02:	f7ff ff79 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	4620      	mov	r0, r4
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	4798      	blx	r3
        }

        if (!toggleCanceled && (event.getType() == ClickEvent::RELEASED))
 8004d0e:	792b      	ldrb	r3, [r5, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d108      	bne.n	8004d26 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4e>
        {
            executeAction();
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        }
    }
 8004d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004d20:	4718      	bx	r3
        if (!toggleCanceled && (event.getType() == ClickEvent::RELEASED))
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f6      	beq.n	8004d14 <_ZN8touchgfx19ToggleButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
    }
 8004d26:	bd70      	pop	{r4, r5, r6, pc}

08004d28 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004d2c:	2226      	movs	r2, #38	; 0x26
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f01a fc38 	bl	801f5a4 <memset>
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff ff09 	bl	8004b4c <_ZN8touchgfx6WidgetC1Ev>
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004d3c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8004d40:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004d42:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d4c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	8723      	strh	r3, [r4, #56]	; 0x38
 8004d5a:	63e3      	str	r3, [r4, #60]	; 0x3c
              text(0)
 8004d5c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	bf00      	nop
 8004d64:	08023bc0 	.word	0x08023bc0
 8004d68:	080224c4 	.word	0x080224c4

08004d6c <_ZN12MainViewBaseC1Ev>:
MainViewBase::MainViewBase() :
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4604      	mov	r4, r0
        : presenter(0)
 8004d72:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004d74:	f64f 77ff 	movw	r7, #65535	; 0xffff
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 8004d78:	f104 0ac4 	add.w	sl, r4, #196	; 0xc4
        : T(), up(), down()
 8004d7c:	f504 7680 	add.w	r6, r4, #256	; 0x100
        : T()
 8004d80:	f504 789a 	add.w	r8, r4, #308	; 0x134
        : T()
 8004d84:	f504 79b0 	add.w	r9, r4, #352	; 0x160
 8004d88:	f504 7b19 	add.w	fp, r4, #612	; 0x264
MainViewBase::MainViewBase() :
 8004d8c:	ed2d 8b0e 	vpush	{d8-d14}
 8004d90:	b08d      	sub	sp, #52	; 0x34
 8004d92:	f00d f813 	bl	8011dbc <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 8004d96:	4622      	mov	r2, r4
 8004d98:	4be7      	ldr	r3, [pc, #924]	; (8005138 <_ZN12MainViewBaseC1Ev+0x3cc>)
 8004d9a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004d9c:	f842 3b40 	str.w	r3, [r2], #64
 8004da0:	4610      	mov	r0, r2
 8004da2:	ee08 2a90 	vmov	s17, r2
 8004da6:	f7ff fee3 	bl	8004b70 <_ZN8touchgfx3BoxC1Ev>
 8004daa:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8004dae:	a90a      	add	r1, sp, #40	; 0x28
 8004db0:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004db4:	4618      	mov	r0, r3
 8004db6:	ee0c 3a90 	vmov	s25, r3
 8004dba:	f7ff feed 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004dbe:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8004dc2:	a90a      	add	r1, sp, #40	; 0x28
 8004dc4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004dc8:	4618      	mov	r0, r3
 8004dca:	ee0d 3a10 	vmov	s26, r3
 8004dce:	f7ff fee3 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : AbstractButtonContainer(), ticksDelay(30), ticksInterval(15), ticks(0), ticksBeforeContinuous(0)
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	f7ff fefa 	bl	8004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8004dd8:	4bd8      	ldr	r3, [pc, #864]	; (800513c <_ZN12MainViewBaseC1Ev+0x3d0>)
 8004dda:	a90a      	add	r1, sp, #40	; 0x28
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004de2:	e9c4 353e 	strd	r3, r5, [r4, #248]	; 0xf8
 8004de6:	4bd6      	ldr	r3, [pc, #856]	; (8005140 <_ZN12MainViewBaseC1Ev+0x3d4>)
 8004de8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8004dec:	f7ff fed4 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        buttonImage.setXY(0, 0);
 8004df0:	462a      	mov	r2, r5
 8004df2:	4630      	mov	r0, r6
 8004df4:	4629      	mov	r1, r5
 8004df6:	f8a4 712c 	strh.w	r7, [r4, #300]	; 0x12c
 8004dfa:	f8a4 712e 	strh.w	r7, [r4, #302]	; 0x12e
 8004dfe:	f7ff fde6 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 8004e02:	4631      	mov	r1, r6
 8004e04:	4650      	mov	r0, sl
 8004e06:	f008 f92b 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e0a:	4bce      	ldr	r3, [pc, #824]	; (8005144 <_ZN12MainViewBaseC1Ev+0x3d8>)
 8004e0c:	a90a      	add	r1, sp, #40	; 0x28
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8004e14:	f8a4 7130 	strh.w	r7, [r4, #304]	; 0x130
 8004e18:	f8a4 7132 	strh.w	r7, [r4, #306]	; 0x132
 8004e1c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004e20:	f7ff feba 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8004e24:	4641      	mov	r1, r8
 8004e26:	4650      	mov	r0, sl
 8004e28:	f008 f91a 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e2c:	4bc6      	ldr	r3, [pc, #792]	; (8005148 <_ZN12MainViewBaseC1Ev+0x3dc>)
 8004e2e:	4648      	mov	r0, r9
 8004e30:	f504 7805 	add.w	r8, r4, #532	; 0x214
 8004e34:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8004e38:	f7ff ff76 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
        T::add(text);
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4650      	mov	r0, sl
        : color(0)
 8004e40:	e9c4 556a 	strd	r5, r5, [r4, #424]	; 0x1a8
 8004e44:	f008 f90c 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e48:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
        : T(), up(), down()
 8004e4c:	2234      	movs	r2, #52	; 0x34
 8004e4e:	4629      	mov	r1, r5
 8004e50:	ee08 3a10 	vmov	s16, r3
 8004e54:	4618      	mov	r0, r3
 8004e56:	f01a fba5 	bl	801f5a4 <memset>
class ClickButtonTrigger : public AbstractButtonContainer
 8004e5a:	ee18 0a10 	vmov	r0, s16
 8004e5e:	f7ff feb5 	bl	8004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8004e62:	4bba      	ldr	r3, [pc, #744]	; (800514c <_ZN12MainViewBaseC1Ev+0x3e0>)
 8004e64:	a90a      	add	r1, sp, #40	; 0x28
 8004e66:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004e6a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
 8004e6e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8004e72:	ee0d 3a90 	vmov	s27, r3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fe8e 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        buttonImage.setXY(0, 0);
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4629      	mov	r1, r5
 8004e80:	ee1d 0a90 	vmov	r0, s27
 8004e84:	f8a4 7210 	strh.w	r7, [r4, #528]	; 0x210
 8004e88:	f8a4 7212 	strh.w	r7, [r4, #530]	; 0x212
 8004e8c:	f7ff fd9f 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        T::add(buttonImage);
 8004e90:	ee1d 1a90 	vmov	r1, s27
 8004e94:	ee18 0a10 	vmov	r0, s16
 8004e98:	f008 f8e2 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T()
 8004e9c:	4bac      	ldr	r3, [pc, #688]	; (8005150 <_ZN12MainViewBaseC1Ev+0x3e4>)
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
 8004ea4:	f7ff ff40 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
        T::add(text);
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ee18 0a10 	vmov	r0, s16
 8004eae:	e9c4 5597 	strd	r5, r5, [r4, #604]	; 0x25c
 8004eb2:	f008 f8d5 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
 8004eb6:	2234      	movs	r2, #52	; 0x34
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4658      	mov	r0, fp
 8004ebc:	f01a fb72 	bl	801f5a4 <memset>
class TouchButtonTrigger : public AbstractButtonContainer
 8004ec0:	4658      	mov	r0, fp
 8004ec2:	f7ff fe83 	bl	8004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8004ec6:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <_ZN12MainViewBaseC1Ev+0x3e8>)
 8004ec8:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
 8004ecc:	f504 7326 	add.w	r3, r4, #664	; 0x298
        : Box(), borderColor(0), borderSize(0)
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	ee0e 3a10 	vmov	s28, r3
 8004ed6:	f7ff fe4b 	bl	8004b70 <_ZN8touchgfx3BoxC1Ev>
 8004eda:	4b9f      	ldr	r3, [pc, #636]	; (8005158 <_ZN12MainViewBaseC1Ev+0x3ec>)
        borderBox.setXY(0, 0);
 8004edc:	462a      	mov	r2, r5
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004ee4:	ee1e 0a10 	vmov	r0, s28
        : color(col)
 8004ee8:	f8c4 52c4 	str.w	r5, [r4, #708]	; 0x2c4
 8004eec:	f8a4 52c8 	strh.w	r5, [r4, #712]	; 0x2c8
        : color(0)
 8004ef0:	e9c4 55b3 	strd	r5, r5, [r4, #716]	; 0x2cc
 8004ef4:	e9c4 55b5 	strd	r5, r5, [r4, #724]	; 0x2d4
 8004ef8:	f7ff fd69 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8004efc:	ee1e 1a10 	vmov	r1, s28
 8004f00:	4658      	mov	r0, fp
 8004f02:	f008 f8ad 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T()
 8004f06:	4b95      	ldr	r3, [pc, #596]	; (800515c <_ZN12MainViewBaseC1Ev+0x3f0>)
 8004f08:	a90a      	add	r1, sp, #40	; 0x28
 8004f0a:	f8a4 72dc 	strh.w	r7, [r4, #732]	; 0x2dc
 8004f0e:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
 8004f12:	f504 7338 	add.w	r3, r4, #736	; 0x2e0
 8004f16:	f8a4 72de 	strh.w	r7, [r4, #734]	; 0x2de
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	f7ff fe39 	bl	8004b98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	4658      	mov	r0, fp
        : T()
 8004f2a:	f504 7751 	add.w	r7, r4, #836	; 0x344
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f008 f896 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004f34:	f504 7343 	add.w	r3, r4, #780	; 0x30c
        : AbstractButtonContainer(), toggleCanceled(false)
 8004f38:	4618      	mov	r0, r3
 8004f3a:	ee09 3a10 	vmov	s18, r3
 8004f3e:	f7ff fe45 	bl	8004bcc <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8004f42:	4b87      	ldr	r3, [pc, #540]	; (8005160 <_ZN12MainViewBaseC1Ev+0x3f4>)
 8004f44:	4638      	mov	r0, r7
 8004f46:	f884 5340 	strb.w	r5, [r4, #832]	; 0x340
 8004f4a:	f8c4 330c 	str.w	r3, [r4, #780]	; 0x30c
 8004f4e:	f7ff feeb 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
        T::add(text);
 8004f52:	4639      	mov	r1, r7
 8004f54:	ee19 0a10 	vmov	r0, s18
 8004f58:	e9c4 55e3 	strd	r5, r5, [r4, #908]	; 0x38c
 8004f5c:	f008 f880 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004f60:	f504 7365 	add.w	r3, r4, #916	; 0x394
 8004f64:	4618      	mov	r0, r3
 8004f66:	ee09 3a90 	vmov	s19, r3
 8004f6a:	f7ff fedd 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
 8004f6e:	f504 7377 	add.w	r3, r4, #988	; 0x3dc
 8004f72:	4618      	mov	r0, r3
 8004f74:	ee0a 3a10 	vmov	s20, r3
 8004f78:	f7ff fed6 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
 8004f7c:	f204 4324 	addw	r3, r4, #1060	; 0x424
 8004f80:	4618      	mov	r0, r3
 8004f82:	ee0a 3a90 	vmov	s21, r3
 8004f86:	f7ff fecf 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
 8004f8a:	f204 436c 	addw	r3, r4, #1132	; 0x46c
 8004f8e:	4618      	mov	r0, r3
 8004f90:	ee0b 3a10 	vmov	s22, r3
 8004f94:	f7ff fec8 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
 8004f98:	f204 43b4 	addw	r3, r4, #1204	; 0x4b4
        : TextArea()
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	ee0b 3a90 	vmov	s23, r3
 8004fa2:	f7ff fec1 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004fa6:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <_ZN12MainViewBaseC1Ev+0x3f8>)
 8004fa8:	f8c4 54fc 	str.w	r5, [r4, #1276]	; 0x4fc
 8004fac:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
 8004fb0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
        : TextArea()
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	ee0c 3a10 	vmov	s24, r3
 8004fba:	f7ff feb5 	bl	8004d28 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004fbe:	4b69      	ldr	r3, [pc, #420]	; (8005164 <_ZN12MainViewBaseC1Ev+0x3f8>)
    __background.setPosition(0, 0, 800, 480);
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 8004fc8:	ee18 0a90 	vmov	r0, s17
        : pobject(pObject), pmemfun(pmemfun_1)
 8004fcc:	4b66      	ldr	r3, [pc, #408]	; (8005168 <_ZN12MainViewBaseC1Ev+0x3fc>)
 8004fce:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
 8004fd2:	f8c4 3574 	str.w	r3, [r4, #1396]	; 0x574
 8004fd6:	4b65      	ldr	r3, [pc, #404]	; (800516c <_ZN12MainViewBaseC1Ev+0x400>)
 8004fd8:	f8c4 4578 	str.w	r4, [r4, #1400]	; 0x578
 8004fdc:	f8c4 357c 	str.w	r3, [r4, #1404]	; 0x57c
 8004fe0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004fe4:	f8c4 5580 	str.w	r5, [r4, #1408]	; 0x580
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004fee:	f7ff fd6c 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004ff2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    backgroundImage.setXY(0, 0);
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	66a3      	str	r3, [r4, #104]	; 0x68
 8004ffc:	ee1c 0a90 	vmov	r0, s25
 8005000:	f7ff fce5 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8005004:	a90a      	add	r1, sp, #40	; 0x28
 8005006:	ee1c 0a90 	vmov	r0, s25
 800500a:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800500e:	f009 fef3 	bl	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    counterBackgroundImage.setXY(293, 80);
 8005012:	2250      	movs	r2, #80	; 0x50
 8005014:	f240 1125 	movw	r1, #293	; 0x125
 8005018:	ee1d 0a10 	vmov	r0, s26
 800501c:	f7ff fcd7 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 8005020:	f04f 0305 	mov.w	r3, #5
    counterBackgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
 8005024:	a90a      	add	r1, sp, #40	; 0x28
 8005026:	ee1d 0a10 	vmov	r0, s26
 800502a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800502e:	f009 fee3 	bl	800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005032:	f04f 0103 	mov.w	r1, #3
        ticksDelay = delay;
 8005036:	f04f 1312 	mov.w	r3, #1179666	; 0x120012
    repeatButton.setBitmaps(Bitmap(BITMAP_BTN_LONG_ID), Bitmap(BITMAP_BTN_LONG_PRESSED_ID));
 800503a:	aa0a      	add	r2, sp, #40	; 0x28
 800503c:	4650      	mov	r0, sl
 800503e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8005042:	f04f 0104 	mov.w	r1, #4
 8005046:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800504a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800504e:	a909      	add	r1, sp, #36	; 0x24
 8005050:	f7ff fd58 	bl	8004b04 <_ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
        buttonImage.setXY(x, y);
 8005054:	4630      	mov	r0, r6
 8005056:	462a      	mov	r2, r5
 8005058:	4629      	mov	r1, r5
 800505a:	f7ff fcb8 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 800505e:	f04f 0106 	mov.w	r1, #6
 8005062:	2301      	movs	r3, #1
    repeatButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_ID), Bitmap(BITMAP_ORANGE_ARROW_ID));
 8005064:	aa0a      	add	r2, sp, #40	; 0x28
 8005066:	4650      	mov	r0, sl
 8005068:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800506c:	a909      	add	r1, sp, #36	; 0x24
 800506e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8005072:	f7ff fcb9 	bl	80049e8 <_ZN8touchgfx15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
        rect.x = x;
 8005076:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <_ZN12MainViewBaseC1Ev+0x404>)
        text.setTypedText(t);
 8005078:	ae0a      	add	r6, sp, #40	; 0x28
 800507a:	f04f 0205 	mov.w	r2, #5
 800507e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8005082:	4648      	mov	r0, r9
 8005084:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <_ZN12MainViewBaseC1Ev+0x408>)
 8005086:	4631      	mov	r1, r6
        text.setPosition(x, y, width, height);
 8005088:	2638      	movs	r6, #56	; 0x38
 800508a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800508e:	930a      	str	r3, [sp, #40]	; 0x28
        text.setTypedText(t);
 8005090:	f009 fce6 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 8005094:	4648      	mov	r0, r9
 8005096:	f9b4 20ce 	ldrsh.w	r2, [r4, #206]	; 0xce
 800509a:	f9b4 10cc 	ldrsh.w	r1, [r4, #204]	; 0xcc
 800509e:	f7ff fd07 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
        text.setPosition(x, y, width, height);
 80050a2:	23c8      	movs	r3, #200	; 0xc8
 80050a4:	f06f 011b 	mvn.w	r1, #27
 80050a8:	4648      	mov	r0, r9
 80050aa:	220d      	movs	r2, #13
 80050ac:	9600      	str	r6, [sp, #0]
 80050ae:	f7ff fd0c 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        colorPressed = newColorPressed;
 80050b2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800517c <_ZN12MainViewBaseC1Ev+0x410>
 80050b6:	4a30      	ldr	r2, [pc, #192]	; (8005178 <_ZN12MainViewBaseC1Ev+0x40c>)
        handlePressedUpdated();
 80050b8:	4650      	mov	r0, sl
        colorPressed = newColorPressed;
 80050ba:	e9c4 926a 	strd	r9, r2, [r4, #424]	; 0x1a8
        handlePressedUpdated();
 80050be:	f7ff fb70 	bl	80047a2 <_ZN8touchgfx15TextButtonStyleINS_15IconButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEEE20handlePressedUpdatedEv>
    repeatButton.setPosition(50, 177, 200, 56);
 80050c2:	23c8      	movs	r3, #200	; 0xc8
 80050c4:	22b1      	movs	r2, #177	; 0xb1
 80050c6:	2132      	movs	r1, #50	; 0x32
 80050c8:	4650      	mov	r0, sl
 80050ca:	9600      	str	r6, [sp, #0]
 80050cc:	f7ff fcfd 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
    repeatButton.setAction(flexButtonCallback);
 80050d0:	f204 5c74 	addw	ip, r4, #1396	; 0x574
    clickButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 80050d4:	a80a      	add	r0, sp, #40	; 0x28
 80050d6:	f04f 0e0a 	mov.w	lr, #10
    repeatButton.setAction(flexButtonCallback);
 80050da:	f8cd c00c 	str.w	ip, [sp, #12]
    clickButton.setBitmaps(Bitmap(BITMAP_SMALL_BTN_ID), Bitmap(BITMAP_SMALL_BTN_PRESSED_ID));
 80050de:	a909      	add	r1, sp, #36	; 0x24
        action = &callback;
 80050e0:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
 80050e4:	f04f 0c08 	mov.w	ip, #8
 80050e8:	4602      	mov	r2, r0
 80050ea:	ee18 0a10 	vmov	r0, s16
 80050ee:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80050f2:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 80050f6:	f7ff fd17 	bl	8004b28 <_ZN8touchgfx16ImageButtonStyleINS_18ClickButtonTriggerEE10setBitmapsERKNS_6BitmapES5_>
 80050fa:	462a      	mov	r2, r5
 80050fc:	4629      	mov	r1, r5
 80050fe:	ee1d 0a90 	vmov	r0, s27
 8005102:	f7ff fc64 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 8005106:	f04f 0006 	mov.w	r0, #6
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <_ZN12MainViewBaseC1Ev+0x408>)
        text.setTypedText(t);
 800510c:	a90a      	add	r1, sp, #40	; 0x28
 800510e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005112:	4640      	mov	r0, r8
 8005114:	930a      	str	r3, [sp, #40]	; 0x28
 8005116:	f009 fca3 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800511a:	4640      	mov	r0, r8
 800511c:	f9b4 21ba 	ldrsh.w	r2, [r4, #442]	; 0x1ba
 8005120:	f9b4 11b8 	ldrsh.w	r1, [r4, #440]	; 0x1b8
 8005124:	f7ff fcc4 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
        text.setPosition(x, y, width, height);
 8005128:	2364      	movs	r3, #100	; 0x64
 800512a:	f06f 0101 	mvn.w	r1, #1
 800512e:	4640      	mov	r0, r8
 8005130:	220c      	movs	r2, #12
 8005132:	9600      	str	r6, [sp, #0]
 8005134:	e024      	b.n	8005180 <_ZN12MainViewBaseC1Ev+0x414>
 8005136:	bf00      	nop
 8005138:	080230bc 	.word	0x080230bc
 800513c:	000f001e 	.word	0x000f001e
 8005140:	08022ba4 	.word	0x08022ba4
 8005144:	08022c44 	.word	0x08022c44
 8005148:	08022ce8 	.word	0x08022ce8
 800514c:	08022d8c 	.word	0x08022d8c
 8005150:	08022e2c 	.word	0x08022e2c
 8005154:	08022ecc 	.word	0x08022ecc
 8005158:	08023cb8 	.word	0x08023cb8
 800515c:	08022f68 	.word	0x08022f68
 8005160:	08023008 	.word	0x08023008
 8005164:	08022b14 	.word	0x08022b14
 8005168:	080230a4 	.word	0x080230a4
 800516c:	0800491b 	.word	0x0800491b
 8005170:	00140088 	.word	0x00140088
 8005174:	080224c4 	.word	0x080224c4
 8005178:	ffe79a09 	.word	0xffe79a09
 800517c:	ff464646 	.word	0xff464646
 8005180:	f7ff fca3 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        colorPressed = newColorPressed;
 8005184:	4a95      	ldr	r2, [pc, #596]	; (80053dc <_ZN12MainViewBaseC1Ev+0x670>)
        handlePressedUpdated();
 8005186:	ee18 0a10 	vmov	r0, s16
        colorReleased = newColorReleased;
 800518a:	f8c4 925c 	str.w	r9, [r4, #604]	; 0x25c
        colorPressed = newColorPressed;
 800518e:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
 8005192:	f04f 0907 	mov.w	r9, #7
        handlePressedUpdated();
 8005196:	f7ff fb1d 	bl	80047d4 <_ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>
    clickButton.setPosition(35, 64, 100, 56);
 800519a:	2364      	movs	r3, #100	; 0x64
 800519c:	2240      	movs	r2, #64	; 0x40
 800519e:	2123      	movs	r1, #35	; 0x23
 80051a0:	ee18 0a10 	vmov	r0, s16
 80051a4:	9600      	str	r6, [sp, #0]
 80051a6:	f7ff fc90 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
 80051aa:	9903      	ldr	r1, [sp, #12]
        borderBox.setPosition(x, y, width, height);
 80051ac:	462a      	mov	r2, r5
 80051ae:	2364      	movs	r3, #100	; 0x64
 80051b0:	ee1e 0a10 	vmov	r0, s28
 80051b4:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
 80051b8:	9600      	str	r6, [sp, #0]
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7ff fc85 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        down = colorPressed;
 80051c0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8005400 <_ZN12MainViewBaseC1Ev+0x694>
 80051c4:	4b86      	ldr	r3, [pc, #536]	; (80053e0 <_ZN12MainViewBaseC1Ev+0x674>)
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80051c6:	f04f 0105 	mov.w	r1, #5
        handlePressedUpdated();
 80051ca:	4658      	mov	r0, fp
 80051cc:	f8a4 12c8 	strh.w	r1, [r4, #712]	; 0x2c8
        down = colorPressed;
 80051d0:	e9c4 83b3 	strd	r8, r3, [r4, #716]	; 0x2cc
        borderUp = borderColorReleased;
 80051d4:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80051d8:	f203 4301 	addw	r3, r3, #1025	; 0x401
 80051dc:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
        borderDown = borderColorPressed;
 80051e0:	4b80      	ldr	r3, [pc, #512]	; (80053e4 <_ZN12MainViewBaseC1Ev+0x678>)
 80051e2:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
        handlePressedUpdated();
 80051e6:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ee:	4798      	blx	r3
 80051f0:	f04f 0102 	mov.w	r1, #2
    touchButton.setIconBitmaps(Bitmap(BITMAP_BLACK_ARROW_UP_ID), Bitmap(BITMAP_ORANGE_ARROW_UP_ID));
 80051f4:	4658      	mov	r0, fp
 80051f6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80051fa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80051fe:	a90a      	add	r1, sp, #40	; 0x28
 8005200:	460a      	mov	r2, r1
 8005202:	a909      	add	r1, sp, #36	; 0x24
 8005204:	f7ff fc22 	bl	8004a4c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
        rect.x = x;
 8005208:	4b77      	ldr	r3, [pc, #476]	; (80053e8 <_ZN12MainViewBaseC1Ev+0x67c>)
    touchButton.setPosition(165, 60, 100, 56);
 800520a:	223c      	movs	r2, #60	; 0x3c
 800520c:	21a5      	movs	r1, #165	; 0xa5
 800520e:	4658      	mov	r0, fp
 8005210:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8005214:	9600      	str	r6, [sp, #0]
 8005216:	2364      	movs	r3, #100	; 0x64
 8005218:	f7ff fc57 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
 800521c:	4b73      	ldr	r3, [pc, #460]	; (80053ec <_ZN12MainViewBaseC1Ev+0x680>)
 800521e:	9903      	ldr	r1, [sp, #12]
        text.setTypedText(t);
 8005220:	4638      	mov	r0, r7
 8005222:	930a      	str	r3, [sp, #40]	; 0x28
 8005224:	230b      	movs	r3, #11
        text.setPosition(x, y, width, height);
 8005226:	2624      	movs	r6, #36	; 0x24
 8005228:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        text.setTypedText(t);
 800522c:	a90a      	add	r1, sp, #40	; 0x28
 800522e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005232:	f009 fc15 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 8005236:	4638      	mov	r0, r7
 8005238:	f9b4 2316 	ldrsh.w	r2, [r4, #790]	; 0x316
 800523c:	f9b4 1314 	ldrsh.w	r1, [r4, #788]	; 0x314
 8005240:	f7ff fc36 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
        text.setPosition(x, y, width, height);
 8005244:	2398      	movs	r3, #152	; 0x98
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	462a      	mov	r2, r5
 800524c:	9600      	str	r6, [sp, #0]
 800524e:	f7ff fc3c 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        colorPressed = newColorPressed;
 8005252:	4a62      	ldr	r2, [pc, #392]	; (80053dc <_ZN12MainViewBaseC1Ev+0x670>)
        handlePressedUpdated();
 8005254:	ee19 0a10 	vmov	r0, s18
        colorReleased = newColorReleased;
 8005258:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
        colorPressed = newColorPressed;
 800525c:	f8c4 2390 	str.w	r2, [r4, #912]	; 0x390
        handlePressedUpdated();
 8005260:	f7ff fa26 	bl	80046b0 <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE20handlePressedUpdatedEv>
    toggleButton.setPosition(293, 41, 152, 36);
 8005264:	2398      	movs	r3, #152	; 0x98
 8005266:	2229      	movs	r2, #41	; 0x29
 8005268:	f240 1125 	movw	r1, #293	; 0x125
 800526c:	ee19 0a10 	vmov	r0, s18
 8005270:	9600      	str	r6, [sp, #0]
 8005272:	f7ff fc2a 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
 8005276:	9a03      	ldr	r2, [sp, #12]
        boundingArea = calculateBoundingArea();
 8005278:	ae04      	add	r6, sp, #16
    clickLabel.setXY(45, 43);
 800527a:	212d      	movs	r1, #45	; 0x2d
 800527c:	ee19 0a90 	vmov	r0, s19
 8005280:	f8c4 233c 	str.w	r2, [r4, #828]	; 0x33c
 8005284:	222b      	movs	r2, #43	; 0x2b
 8005286:	4f59      	ldr	r7, [pc, #356]	; (80053ec <_ZN12MainViewBaseC1Ev+0x680>)
 8005288:	f7ff fba1 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 800528c:	ee19 1a90 	vmov	r1, s19
 8005290:	4630      	mov	r0, r6
        color = newColor;
 8005292:	f8c4 83c4 	str.w	r8, [r4, #964]	; 0x3c4
        linespace = space;
 8005296:	f8a4 53c8 	strh.w	r5, [r4, #968]	; 0x3c8
        boundingArea = calculateBoundingArea();
 800529a:	f009 f95f 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800529e:	f504 7374 	add.w	r3, r4, #976	; 0x3d0
 80052a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80052a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    clickLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5YSQ));
 80052aa:	a90a      	add	r1, sp, #40	; 0x28
 80052ac:	ee19 0a90 	vmov	r0, s19
 80052b0:	970a      	str	r7, [sp, #40]	; 0x28
 80052b2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80052b6:	f009 fbd3 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    touchLabel.setXY(171, 43);
 80052ba:	222b      	movs	r2, #43	; 0x2b
 80052bc:	21ab      	movs	r1, #171	; 0xab
 80052be:	ee1a 0a10 	vmov	r0, s20
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80052c2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8005404 <_ZN12MainViewBaseC1Ev+0x698>
 80052c6:	f7ff fb82 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 80052ca:	ee1a 1a10 	vmov	r1, s20
 80052ce:	4630      	mov	r0, r6
        color = newColor;
 80052d0:	f8c4 840c 	str.w	r8, [r4, #1036]	; 0x40c
        linespace = space;
 80052d4:	f8a4 5410 	strh.w	r5, [r4, #1040]	; 0x410
        boundingArea = calculateBoundingArea();
 80052d8:	f009 f940 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80052dc:	f504 6383 	add.w	r3, r4, #1048	; 0x418
        : typedTextId(id)
 80052e0:	f04f 0c08 	mov.w	ip, #8
 80052e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80052e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    touchLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IMRV));
 80052ec:	a90a      	add	r1, sp, #40	; 0x28
 80052ee:	ee1a 0a10 	vmov	r0, s20
 80052f2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80052f6:	970a      	str	r7, [sp, #40]	; 0x28
 80052f8:	f009 fbb2 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    repeatLabel.setXY(103, 156);
 80052fc:	229c      	movs	r2, #156	; 0x9c
 80052fe:	2167      	movs	r1, #103	; 0x67
 8005300:	ee1a 0a90 	vmov	r0, s21
 8005304:	f7ff fb63 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 8005308:	ee1a 1a90 	vmov	r1, s21
 800530c:	4630      	mov	r0, r6
        color = newColor;
 800530e:	f8c4 8454 	str.w	r8, [r4, #1108]	; 0x454
        linespace = space;
 8005312:	f8a4 5458 	strh.w	r5, [r4, #1112]	; 0x458
        boundingArea = calculateBoundingArea();
 8005316:	f009 f921 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800531a:	f504 638c 	add.w	r3, r4, #1120	; 0x460
 800531e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005326:	2309      	movs	r3, #9
    repeatLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EJ8L));
 8005328:	a90a      	add	r1, sp, #40	; 0x28
 800532a:	ee1a 0a90 	vmov	r0, s21
 800532e:	970a      	str	r7, [sp, #40]	; 0x28
 8005330:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005334:	f009 fb94 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    toggleLabel.setXY(283, 20);
 8005338:	2214      	movs	r2, #20
 800533a:	f240 111b 	movw	r1, #283	; 0x11b
 800533e:	ee1b 0a10 	vmov	r0, s22
 8005342:	f7ff fb44 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 8005346:	ee1b 1a10 	vmov	r1, s22
 800534a:	4630      	mov	r0, r6
        color = newColor;
 800534c:	f8c4 849c 	str.w	r8, [r4, #1180]	; 0x49c
        linespace = space;
 8005350:	f8a4 54a0 	strh.w	r5, [r4, #1184]	; 0x4a0
        boundingArea = calculateBoundingArea();
 8005354:	f009 f902 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005358:	f504 6395 	add.w	r3, r4, #1192	; 0x4a8
 800535c:	f04f 0e0a 	mov.w	lr, #10
 8005360:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005364:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    toggleLabel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3VOX));
 8005368:	a90a      	add	r1, sp, #40	; 0x28
 800536a:	ee1b 0a10 	vmov	r0, s22
 800536e:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
 8005372:	970a      	str	r7, [sp, #40]	; 0x28
 8005374:	f009 fb74 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    charTxt.setPosition(135, 136, 130, 20);
 8005378:	2314      	movs	r3, #20
 800537a:	2288      	movs	r2, #136	; 0x88
 800537c:	2187      	movs	r1, #135	; 0x87
 800537e:	ee1b 0a90 	vmov	r0, s23
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2382      	movs	r3, #130	; 0x82
 8005386:	f7ff fba0 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800538e:	ee1b 1a90 	vmov	r1, s23
 8005392:	4630      	mov	r0, r6
        color = newColor;
 8005394:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
    Unicode::snprintf(charTxtBuffer, CHARTXT_SIZE, "%s", touchgfx::TypedText(T_RESOURCEID2).getText());
 8005398:	f204 574c 	addw	r7, r4, #1356	; 0x54c
        boundingArea = calculateBoundingArea();
 800539c:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
        linespace = space;
 80053a0:	f8a4 54e8 	strh.w	r5, [r4, #1256]	; 0x4e8
        boundingArea = calculateBoundingArea();
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a8:	4798      	blx	r3
 80053aa:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 80053ae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80053b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053b6:	f8d9 3000 	ldr.w	r3, [r9]
 80053ba:	b92b      	cbnz	r3, 80053c8 <_ZN12MainViewBaseC1Ev+0x65c>
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <_ZN12MainViewBaseC1Ev+0x684>)
 80053be:	2160      	movs	r1, #96	; 0x60
 80053c0:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <_ZN12MainViewBaseC1Ev+0x688>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053c2:	480d      	ldr	r0, [pc, #52]	; (80053f8 <_ZN12MainViewBaseC1Ev+0x68c>)
 80053c4:	f01a f85e 	bl	801f484 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80053c8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8005408 <_ZN12MainViewBaseC1Ev+0x69c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053cc:	f8b8 3000 	ldrh.w	r3, [r8]
 80053d0:	b9e3      	cbnz	r3, 800540c <_ZN12MainViewBaseC1Ev+0x6a0>
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <_ZN12MainViewBaseC1Ev+0x690>)
 80053d4:	2161      	movs	r1, #97	; 0x61
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <_ZN12MainViewBaseC1Ev+0x688>)
 80053d8:	e7f3      	b.n	80053c2 <_ZN12MainViewBaseC1Ev+0x656>
 80053da:	bf00      	nop
 80053dc:	ffe79a09 	.word	0xffe79a09
 80053e0:	ff283a40 	.word	0xff283a40
 80053e4:	ff5f676d 	.word	0xff5f676d
 80053e8:	00130022 	.word	0x00130022
 80053ec:	080224c4 	.word	0x080224c4
 80053f0:	080228c8 	.word	0x080228c8
 80053f4:	080229ca 	.word	0x080229ca
 80053f8:	08022945 	.word	0x08022945
 80053fc:	0802298c 	.word	0x0802298c
 8005400:	ffdedede 	.word	0xffdedede
 8005404:	20024964 	.word	0x20024964
 8005408:	20024968 	.word	0x20024968
        return texts->getText(typedTextId);
 800540c:	4b4e      	ldr	r3, [pc, #312]	; (8005548 <_ZN12MainViewBaseC1Ev+0x7dc>)
 800540e:	4629      	mov	r1, r5
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f000 fa3f 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 8005416:	4a4d      	ldr	r2, [pc, #308]	; (800554c <_ZN12MainViewBaseC1Ev+0x7e0>)
 8005418:	4603      	mov	r3, r0
 800541a:	210a      	movs	r1, #10
 800541c:	4638      	mov	r0, r7
 800541e:	f00e f966 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8005422:	f04f 0202 	mov.w	r2, #2
        wc1 = value;
 8005426:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
    charTxt.setTypedText(touchgfx::TypedText(T_VALUETEXT));
 800542a:	a90a      	add	r1, sp, #40	; 0x28
 800542c:	4f48      	ldr	r7, [pc, #288]	; (8005550 <_ZN12MainViewBaseC1Ev+0x7e4>)
 800542e:	ee1b 0a90 	vmov	r0, s23
 8005432:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8005436:	970a      	str	r7, [sp, #40]	; 0x28
 8005438:	f009 fb12 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    countTxt.setPosition(352, 112, 358, 93);
 800543c:	235d      	movs	r3, #93	; 0x5d
 800543e:	2270      	movs	r2, #112	; 0x70
 8005440:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005444:	ee1c 0a10 	vmov	r0, s24
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800544e:	f7ff fb3c 	bl	8004aca <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8005452:	4b40      	ldr	r3, [pc, #256]	; (8005554 <_ZN12MainViewBaseC1Ev+0x7e8>)
        boundingArea = calculateBoundingArea();
 8005454:	ee1c 1a10 	vmov	r1, s24
 8005458:	4630      	mov	r0, r6
        color = newColor;
 800545a:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
        boundingArea = calculateBoundingArea();
 800545e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        linespace = space;
 8005462:	f8a4 5534 	strh.w	r5, [r4, #1332]	; 0x534
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LPS6).getText());
 8005466:	f504 65ac 	add.w	r5, r4, #1376	; 0x560
        boundingArea = calculateBoundingArea();
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546e:	4798      	blx	r3
 8005470:	f204 533c 	addw	r3, r4, #1340	; 0x53c
 8005474:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005478:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800547c:	f8d9 3000 	ldr.w	r3, [r9]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d09b      	beq.n	80053bc <_ZN12MainViewBaseC1Ev+0x650>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005484:	f8b8 3000 	ldrh.w	r3, [r8]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d9a2      	bls.n	80053d2 <_ZN12MainViewBaseC1Ev+0x666>
        return texts->getText(typedTextId);
 800548c:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <_ZN12MainViewBaseC1Ev+0x7dc>)
 800548e:	2103      	movs	r1, #3
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f000 f9ff 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 8005496:	4a2d      	ldr	r2, [pc, #180]	; (800554c <_ZN12MainViewBaseC1Ev+0x7e0>)
 8005498:	4603      	mov	r3, r0
 800549a:	210a      	movs	r1, #10
 800549c:	4628      	mov	r0, r5
 800549e:	f00e f926 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80054a2:	f04f 0304 	mov.w	r3, #4
 80054a6:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80054aa:	1d25      	adds	r5, r4, #4
    countTxt.setTypedText(touchgfx::TypedText(T_NUMBERTEXT));
 80054ac:	a90a      	add	r1, sp, #40	; 0x28
 80054ae:	ee1c 0a10 	vmov	r0, s24
 80054b2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80054b6:	970a      	str	r7, [sp, #40]	; 0x28
 80054b8:	f009 fad2 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80054bc:	ee18 1a90 	vmov	r1, s17
 80054c0:	4628      	mov	r0, r5
 80054c2:	f007 fdcd 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054c6:	ee1c 1a90 	vmov	r1, s25
 80054ca:	4628      	mov	r0, r5
 80054cc:	f007 fdc8 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054d0:	ee1d 1a10 	vmov	r1, s26
 80054d4:	4628      	mov	r0, r5
 80054d6:	f007 fdc3 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054da:	4651      	mov	r1, sl
 80054dc:	4628      	mov	r0, r5
 80054de:	f007 fdbf 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054e2:	ee18 1a10 	vmov	r1, s16
 80054e6:	4628      	mov	r0, r5
 80054e8:	f007 fdba 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054ec:	4659      	mov	r1, fp
 80054ee:	4628      	mov	r0, r5
 80054f0:	f007 fdb6 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054f4:	ee19 1a10 	vmov	r1, s18
 80054f8:	4628      	mov	r0, r5
 80054fa:	f007 fdb1 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054fe:	ee19 1a90 	vmov	r1, s19
 8005502:	4628      	mov	r0, r5
 8005504:	f007 fdac 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005508:	ee1a 1a10 	vmov	r1, s20
 800550c:	4628      	mov	r0, r5
 800550e:	f007 fda7 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005512:	ee1a 1a90 	vmov	r1, s21
 8005516:	4628      	mov	r0, r5
 8005518:	f007 fda2 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800551c:	ee1b 1a10 	vmov	r1, s22
 8005520:	4628      	mov	r0, r5
 8005522:	f007 fd9d 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005526:	ee1b 1a90 	vmov	r1, s23
 800552a:	4628      	mov	r0, r5
 800552c:	f007 fd98 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005530:	4628      	mov	r0, r5
 8005532:	ee1c 1a10 	vmov	r1, s24
 8005536:	f007 fd93 	bl	800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800553a:	4620      	mov	r0, r4
 800553c:	b00d      	add	sp, #52	; 0x34
 800553e:	ecbd 8b0e 	vpop	{d8-d14}
 8005542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	20024970 	.word	0x20024970
 800554c:	08022a02 	.word	0x08022a02
 8005550:	080224c4 	.word	0x080224c4
 8005554:	ffe31414 	.word	0xffe31414

08005558 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_15_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_15_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_15_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 69, 15, 3, 4, 1, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0, 0, 0);
 8005558:	4770      	bx	lr
	...

0800555c <_Z28getFont_Asap_Regular_15_4bppv>:
{
 800555c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 69, 15, 3, 4, 1, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0, 0, 0);
 800555e:	4d15      	ldr	r5, [pc, #84]	; (80055b4 <_Z28getFont_Asap_Regular_15_4bppv+0x58>)
{
 8005560:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Asap_Regular_15_4bpp(glyphs_Asap_Regular_15_4bpp, 69, 15, 3, 4, 1, 1, 1, unicodes_Asap_Regular_15_4bpp, kerning_Asap_Regular_15_4bpp, 0, 0, 0, 0);
 8005562:	782c      	ldrb	r4, [r5, #0]
 8005564:	f3bf 8f5b 	dmb	ish
 8005568:	f014 0401 	ands.w	r4, r4, #1
 800556c:	d11f      	bne.n	80055ae <_Z28getFont_Asap_Regular_15_4bppv+0x52>
 800556e:	4628      	mov	r0, r5
 8005570:	f019 ff5b 	bl	801f42a <__cxa_guard_acquire>
 8005574:	b1d8      	cbz	r0, 80055ae <_Z28getFont_Asap_Regular_15_4bppv+0x52>
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <_Z28getFont_Asap_Regular_15_4bppv+0x5c>)
 8005578:	2204      	movs	r2, #4
 800557a:	4910      	ldr	r1, [pc, #64]	; (80055bc <_Z28getFont_Asap_Regular_15_4bppv+0x60>)
 800557c:	9306      	str	r3, [sp, #24]
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <_Z28getFont_Asap_Regular_15_4bppv+0x64>)
 8005580:	4810      	ldr	r0, [pc, #64]	; (80055c4 <_Z28getFont_Asap_Regular_15_4bppv+0x68>)
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	2301      	movs	r3, #1
 8005586:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	2303      	movs	r3, #3
 800558e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005592:	e9cd 3200 	strd	r3, r2, [sp]
 8005596:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800559a:	230f      	movs	r3, #15
 800559c:	2245      	movs	r2, #69	; 0x45
 800559e:	f7fe ffcb 	bl	8004538 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80055a2:	4809      	ldr	r0, [pc, #36]	; (80055c8 <_Z28getFont_Asap_Regular_15_4bppv+0x6c>)
 80055a4:	f019 ff8c 	bl	801f4c0 <atexit>
 80055a8:	4628      	mov	r0, r5
 80055aa:	f019 ff4a 	bl	801f442 <__cxa_guard_release>
    return Asap_Regular_15_4bpp;
}
 80055ae:	4805      	ldr	r0, [pc, #20]	; (80055c4 <_Z28getFont_Asap_Regular_15_4bppv+0x68>)
 80055b0:	b00d      	add	sp, #52	; 0x34
 80055b2:	bd30      	pop	{r4, r5, pc}
 80055b4:	2000f220 	.word	0x2000f220
 80055b8:	080241f8 	.word	0x080241f8
 80055bc:	9008420c 	.word	0x9008420c
 80055c0:	08024208 	.word	0x08024208
 80055c4:	2000f224 	.word	0x2000f224
 80055c8:	08005559 	.word	0x08005559

080055cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_27_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_27_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_27_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_27_4bpp(glyphs_Asap_Regular_27_4bpp, 15, 27, 5, 4, 1, 0, 0, unicodes_Asap_Regular_27_4bpp, kerning_Asap_Regular_27_4bpp, 63, 0, 0, 0);
 80055cc:	4770      	bx	lr
	...

080055d0 <_Z28getFont_Asap_Regular_27_4bppv>:
{
 80055d0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Asap_Regular_27_4bpp(glyphs_Asap_Regular_27_4bpp, 15, 27, 5, 4, 1, 0, 0, unicodes_Asap_Regular_27_4bpp, kerning_Asap_Regular_27_4bpp, 63, 0, 0, 0);
 80055d2:	4d16      	ldr	r5, [pc, #88]	; (800562c <_Z28getFont_Asap_Regular_27_4bppv+0x5c>)
{
 80055d4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Asap_Regular_27_4bpp(glyphs_Asap_Regular_27_4bpp, 15, 27, 5, 4, 1, 0, 0, unicodes_Asap_Regular_27_4bpp, kerning_Asap_Regular_27_4bpp, 63, 0, 0, 0);
 80055d6:	782c      	ldrb	r4, [r5, #0]
 80055d8:	f3bf 8f5b 	dmb	ish
 80055dc:	f014 0401 	ands.w	r4, r4, #1
 80055e0:	d120      	bne.n	8005624 <_Z28getFont_Asap_Regular_27_4bppv+0x54>
 80055e2:	4628      	mov	r0, r5
 80055e4:	f019 ff21 	bl	801f42a <__cxa_guard_acquire>
 80055e8:	b1e0      	cbz	r0, 8005624 <_Z28getFont_Asap_Regular_27_4bppv+0x54>
 80055ea:	233f      	movs	r3, #63	; 0x3f
 80055ec:	2201      	movs	r2, #1
 80055ee:	4910      	ldr	r1, [pc, #64]	; (8005630 <_Z28getFont_Asap_Regular_27_4bppv+0x60>)
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <_Z28getFont_Asap_Regular_27_4bppv+0x64>)
 80055f4:	4810      	ldr	r0, [pc, #64]	; (8005638 <_Z28getFont_Asap_Regular_27_4bppv+0x68>)
 80055f6:	9306      	str	r3, [sp, #24]
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <_Z28getFont_Asap_Regular_27_4bppv+0x6c>)
 80055fa:	9408      	str	r4, [sp, #32]
 80055fc:	9403      	str	r4, [sp, #12]
 80055fe:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8005602:	2304      	movs	r3, #4
 8005604:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005608:	2305      	movs	r3, #5
 800560a:	220f      	movs	r2, #15
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	231b      	movs	r3, #27
 8005610:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005614:	f7fe ff90 	bl	8004538 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005618:	4809      	ldr	r0, [pc, #36]	; (8005640 <_Z28getFont_Asap_Regular_27_4bppv+0x70>)
 800561a:	f019 ff51 	bl	801f4c0 <atexit>
 800561e:	4628      	mov	r0, r5
 8005620:	f019 ff0f 	bl	801f442 <__cxa_guard_release>
    return Asap_Regular_27_4bpp;
}
 8005624:	4804      	ldr	r0, [pc, #16]	; (8005638 <_Z28getFont_Asap_Regular_27_4bppv+0x68>)
 8005626:	b00d      	add	sp, #52	; 0x34
 8005628:	bd30      	pop	{r4, r5, pc}
 800562a:	bf00      	nop
 800562c:	2000f24c 	.word	0x2000f24c
 8005630:	900845d4 	.word	0x900845d4
 8005634:	080241fc 	.word	0x080241fc
 8005638:	2000f250 	.word	0x2000f250
 800563c:	0802420c 	.word	0x0802420c
 8005640:	080055cd 	.word	0x080055cd

08005644 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_80_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_80_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_80_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 66, 80, 17, 4, 1, 2, 1, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0, 0, 0);
 8005644:	4770      	bx	lr
	...

08005648 <_Z28getFont_Asap_Regular_80_4bppv>:
{
 8005648:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 66, 80, 17, 4, 1, 2, 1, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0, 0, 0);
 800564a:	4d16      	ldr	r5, [pc, #88]	; (80056a4 <_Z28getFont_Asap_Regular_80_4bppv+0x5c>)
{
 800564c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 66, 80, 17, 4, 1, 2, 1, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0, 0, 0);
 800564e:	782c      	ldrb	r4, [r5, #0]
 8005650:	f3bf 8f5b 	dmb	ish
 8005654:	f014 0401 	ands.w	r4, r4, #1
 8005658:	d120      	bne.n	800569c <_Z28getFont_Asap_Regular_80_4bppv+0x54>
 800565a:	4628      	mov	r0, r5
 800565c:	f019 fee5 	bl	801f42a <__cxa_guard_acquire>
 8005660:	b1e0      	cbz	r0, 800569c <_Z28getFont_Asap_Regular_80_4bppv+0x54>
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <_Z28getFont_Asap_Regular_80_4bppv+0x60>)
 8005664:	2202      	movs	r2, #2
 8005666:	4911      	ldr	r1, [pc, #68]	; (80056ac <_Z28getFont_Asap_Regular_80_4bppv+0x64>)
 8005668:	9306      	str	r3, [sp, #24]
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <_Z28getFont_Asap_Regular_80_4bppv+0x68>)
 800566c:	4811      	ldr	r0, [pc, #68]	; (80056b4 <_Z28getFont_Asap_Regular_80_4bppv+0x6c>)
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	2301      	movs	r3, #1
 8005672:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	2204      	movs	r2, #4
 800567a:	2311      	movs	r3, #17
 800567c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005680:	e9cd 3200 	strd	r3, r2, [sp]
 8005684:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005688:	2350      	movs	r3, #80	; 0x50
 800568a:	2242      	movs	r2, #66	; 0x42
 800568c:	f7fe ff54 	bl	8004538 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005690:	4809      	ldr	r0, [pc, #36]	; (80056b8 <_Z28getFont_Asap_Regular_80_4bppv+0x70>)
 8005692:	f019 ff15 	bl	801f4c0 <atexit>
 8005696:	4628      	mov	r0, r5
 8005698:	f019 fed3 	bl	801f442 <__cxa_guard_release>
    return Asap_Regular_80_4bpp;
}
 800569c:	4805      	ldr	r0, [pc, #20]	; (80056b4 <_Z28getFont_Asap_Regular_80_4bppv+0x6c>)
 800569e:	b00d      	add	sp, #52	; 0x34
 80056a0:	bd30      	pop	{r4, r5, pc}
 80056a2:	bf00      	nop
 80056a4:	2000f278 	.word	0x2000f278
 80056a8:	08024200 	.word	0x08024200
 80056ac:	900846a8 	.word	0x900846a8
 80056b0:	08024210 	.word	0x08024210
 80056b4:	2000f27c 	.word	0x2000f27c
 80056b8:	08005645 	.word	0x08005645

080056bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80056bc:	4770      	bx	lr
	...

080056c0 <_Z23getFont_verdana_20_4bppv>:
{
 80056c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80056c2:	4d15      	ldr	r5, [pc, #84]	; (8005718 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80056c4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80056c6:	782c      	ldrb	r4, [r5, #0]
 80056c8:	f3bf 8f5b 	dmb	ish
 80056cc:	f014 0401 	ands.w	r4, r4, #1
 80056d0:	d11e      	bne.n	8005710 <_Z23getFont_verdana_20_4bppv+0x50>
 80056d2:	4628      	mov	r0, r5
 80056d4:	f019 fea9 	bl	801f42a <__cxa_guard_acquire>
 80056d8:	b1d0      	cbz	r0, 8005710 <_Z23getFont_verdana_20_4bppv+0x50>
 80056da:	233f      	movs	r3, #63	; 0x3f
 80056dc:	2201      	movs	r2, #1
 80056de:	490f      	ldr	r1, [pc, #60]	; (800571c <_Z23getFont_verdana_20_4bppv+0x5c>)
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <_Z23getFont_verdana_20_4bppv+0x60>)
 80056e4:	480f      	ldr	r0, [pc, #60]	; (8005724 <_Z23getFont_verdana_20_4bppv+0x64>)
 80056e6:	9306      	str	r3, [sp, #24]
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <_Z23getFont_verdana_20_4bppv+0x68>)
 80056ea:	9408      	str	r4, [sp, #32]
 80056ec:	9403      	str	r4, [sp, #12]
 80056ee:	9400      	str	r4, [sp, #0]
 80056f0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80056f4:	2304      	movs	r3, #4
 80056f6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80056fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056fe:	2314      	movs	r3, #20
 8005700:	f7fe ff1a 	bl	8004538 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8005706:	f019 fedb 	bl	801f4c0 <atexit>
 800570a:	4628      	mov	r0, r5
 800570c:	f019 fe99 	bl	801f442 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8005710:	4804      	ldr	r0, [pc, #16]	; (8005724 <_Z23getFont_verdana_20_4bppv+0x64>)
 8005712:	b00d      	add	sp, #52	; 0x34
 8005714:	bd30      	pop	{r4, r5, pc}
 8005716:	bf00      	nop
 8005718:	2000f2a4 	.word	0x2000f2a4
 800571c:	90084a44 	.word	0x90084a44
 8005720:	08024204 	.word	0x08024204
 8005724:	2000f2a8 	.word	0x2000f2a8
 8005728:	08024214 	.word	0x08024214
 800572c:	080056bd 	.word	0x080056bd

08005730 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8005730:	2000      	movs	r0, #0
 8005732:	4770      	bx	lr

08005734 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8005734:	2000      	movs	r0, #0
 8005736:	4770      	bx	lr

08005738 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b503      	push	{r0, r1, lr}
 800573c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800573e:	2100      	movs	r1, #0
{
 8005740:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8005744:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005746:	f00b ff75 	bl	8011634 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800574a:	b002      	add	sp, #8
 800574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005750:	b003      	add	sp, #12
 8005752:	4770      	bx	lr

08005754 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005754:	b40c      	push	{r2, r3}
 8005756:	b507      	push	{r0, r1, r2, lr}
 8005758:	ab04      	add	r3, sp, #16
 800575a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800575e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005760:	f00b ff68 	bl	8011634 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005764:	b003      	add	sp, #12
 8005766:	f85d eb04 	ldr.w	lr, [sp], #4
 800576a:	b002      	add	sp, #8
 800576c:	4770      	bx	lr
	...

08005770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8005770:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8005772:	b510      	push	{r4, lr}
 8005774:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8005776:	b373      	cbz	r3, 80057d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005778:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800577a:	b92b      	cbnz	r3, 8005788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800577e:	21c0      	movs	r1, #192	; 0xc0
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005782:	4819      	ldr	r0, [pc, #100]	; (80057e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8005784:	f019 fe7e 	bl	801f484 <__assert_func>
            return buffer[pos];
 8005788:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800578a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800578e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005790:	b30b      	cbz	r3, 80057d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8005792:	f00d f9ef 	bl	8012b74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8005796:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8005798:	2b01      	cmp	r3, #1
 800579a:	d803      	bhi.n	80057a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800579c:	4b13      	ldr	r3, [pc, #76]	; (80057ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800579e:	21c5      	movs	r1, #197	; 0xc5
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80057a2:	e7ee      	b.n	8005782 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80057a4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80057a6:	f640 103f 	movw	r0, #2367	; 0x93f
 80057aa:	1c53      	adds	r3, r2, #1
 80057ac:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	4619      	mov	r1, r3
 80057b2:	bf88      	it	hi
 80057b4:	f1a3 010a 	subhi.w	r1, r3, #10
 80057b8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80057bc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80057be:	4281      	cmp	r1, r0
 80057c0:	d109      	bne.n	80057d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80057c2:	2b0a      	cmp	r3, #10
 80057c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80057c8:	bf28      	it	cs
 80057ca:	2300      	movcs	r3, #0
            return buffer[pos];
 80057cc:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80057ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80057d2:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80057d4:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80057d6:	4620      	mov	r0, r4
}
 80057d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80057dc:	f00d b8cc 	b.w	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80057e0:	080230f8 	.word	0x080230f8
 80057e4:	08023101 	.word	0x08023101
 80057e8:	080231ac 	.word	0x080231ac
 80057ec:	080231f6 	.word	0x080231f6
 80057f0:	08023204 	.word	0x08023204

080057f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80057f4:	f00d b889 	b.w	801290a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080057f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80057f8:	b510      	push	{r4, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	ac02      	add	r4, sp, #8
 80057fe:	e884 0006 	stmia.w	r4, {r1, r2}
 8005802:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8005804:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005806:	4621      	mov	r1, r4
    va_start(pArg, format);
 8005808:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	9b08      	ldr	r3, [sp, #32]
 8005812:	f00a fb93 	bl	800ff3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005816:	b006      	add	sp, #24
 8005818:	bd10      	pop	{r4, pc}
	...

0800581c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800581c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800581e:	bb18      	cbnz	r0, 8005868 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8005822:	4813      	ldr	r0, [pc, #76]	; (8005870 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4913      	ldr	r1, [pc, #76]	; (8005874 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8005828:	b1b3      	cbz	r3, 8005858 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800582a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800582c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800582e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005830:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005832:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	441a      	add	r2, r3
 8005838:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800583c:	2200      	movs	r2, #0
 800583e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005840:	f000 f838 	bl	80058b4 <_ZN17TypedTextDatabase8getFontsEv>
 8005844:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005846:	f000 f833 	bl	80058b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800584c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8005850:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8005854:	8018      	strh	r0, [r3, #0]
    }
}
 8005856:	e007      	b.n	8005868 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800585a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800585e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8005862:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8005864:	2c00      	cmp	r4, #0
 8005866:	d1e8      	bne.n	800583a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8005868:	bd38      	pop	{r3, r4, r5, pc}
 800586a:	bf00      	nop
 800586c:	2000f2d0 	.word	0x2000f2d0
 8005870:	2000f2d4 	.word	0x2000f2d4
 8005874:	2000f2d8 	.word	0x2000f2d8
 8005878:	2000f2dc 	.word	0x2000f2dc
 800587c:	20024964 	.word	0x20024964
 8005880:	2002496c 	.word	0x2002496c
 8005884:	20024968 	.word	0x20024968
 8005888:	90084a88 	.word	0x90084a88
 800588c:	90084a54 	.word	0x90084a54
 8005890:	90084b70 	.word	0x90084b70

08005894 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	2000f2d8 	.word	0x2000f2d8
 80058ac:	2000f2d4 	.word	0x2000f2d4

080058b0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80058b0:	200d      	movs	r0, #13
 80058b2:	4770      	bx	lr

080058b4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80058b4:	4800      	ldr	r0, [pc, #0]	; (80058b8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80058b6:	4770      	bx	lr
 80058b8:	2000f2e0 	.word	0x2000f2e0

080058bc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80058bc:	b510      	push	{r4, lr}
};
 80058be:	4c07      	ldr	r4, [pc, #28]	; (80058dc <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_Asap_Regular_80_4bpp()),
 80058c0:	f7ff fec2 	bl	8005648 <_Z28getFont_Asap_Regular_80_4bppv>
};
 80058c4:	6020      	str	r0, [r4, #0]
    &(getFont_Asap_Regular_27_4bpp()),
 80058c6:	f7ff fe83 	bl	80055d0 <_Z28getFont_Asap_Regular_27_4bppv>
};
 80058ca:	6060      	str	r0, [r4, #4]
    &(getFont_Asap_Regular_15_4bpp()),
 80058cc:	f7ff fe46 	bl	800555c <_Z28getFont_Asap_Regular_15_4bppv>
};
 80058d0:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 80058d2:	f7ff fef5 	bl	80056c0 <_Z23getFont_verdana_20_4bppv>
};
 80058d6:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	2000f2e0 	.word	0x2000f2e0

080058e0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80058e0:	4770      	bx	lr

080058e2 <_ZN19FrontendApplicationD0Ev>:
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
 80058e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058ea:	f019 fd9c 	bl	801f426 <_ZdlPvj>
 80058ee:	4620      	mov	r0, r4
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80058f2:	b510      	push	{r4, lr}
 80058f4:	4604      	mov	r4, r0
    {
        model.tick();
 80058f6:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 80058fa:	f000 f95a 	bl	8005bb2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80058fe:	4620      	mov	r0, r4
    }
 8005900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8005904:	f00a be92 	b.w	801062c <_ZN8touchgfx11Application15handleTickEventEv>

08005908 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800590c:	f7fe fda2 	bl	8004454 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005910:	4b01      	ldr	r3, [pc, #4]	; (8005918 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8005912:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8005914:	6023      	str	r3, [r4, #0]
}
 8005916:	bd10      	pop	{r4, pc}
 8005918:	080232e0 	.word	0x080232e0

0800591c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800591c:	4770      	bx	lr

0800591e <_ZThn4_N13MainPresenterD1Ev>:
 800591e:	3804      	subs	r0, #4
 8005920:	4770      	bx	lr

08005922 <_ZN13MainPresenter10deactivateEv>:
{
}

void MainPresenter::activate()
{
}
 8005922:	4770      	bx	lr

08005924 <_ZN13MainPresenterD0Ev>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4604      	mov	r4, r0
 8005928:	2110      	movs	r1, #16
 800592a:	f019 fd7c 	bl	801f426 <_ZdlPvj>
 800592e:	4620      	mov	r0, r4
 8005930:	bd10      	pop	{r4, pc}

08005932 <_ZThn4_N13MainPresenterD0Ev>:
 8005932:	f1a0 0004 	sub.w	r0, r0, #4
 8005936:	e7f5      	b.n	8005924 <_ZN13MainPresenterD0Ev>

08005938 <_ZN13MainPresenterC1ER8MainView>:
    ModelListener() : model(0) {}
 8005938:	2200      	movs	r2, #0
    : view(v)
 800593a:	60c1      	str	r1, [r0, #12]
 800593c:	6082      	str	r2, [r0, #8]
 800593e:	4a04      	ldr	r2, [pc, #16]	; (8005950 <_ZN13MainPresenterC1ER8MainView+0x18>)
MainPresenter::MainPresenter(MainView& v)
 8005940:	b510      	push	{r4, lr}
    : view(v)
 8005942:	f102 0408 	add.w	r4, r2, #8
 8005946:	3220      	adds	r2, #32
 8005948:	6004      	str	r4, [r0, #0]
 800594a:	6042      	str	r2, [r0, #4]
}
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	08023324 	.word	0x08023324

08005954 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8005954:	4770      	bx	lr

08005956 <_ZN8MainView11setupScreenEv>:
{
}

void MainView::setupScreen()
{
}
 8005956:	4770      	bx	lr

08005958 <_ZN8MainViewD0Ev>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	f240 5184 	movw	r1, #1412	; 0x584
 8005960:	f019 fd61 	bl	801f426 <_ZdlPvj>
 8005964:	4620      	mov	r0, r4
 8005966:	bd10      	pop	{r4, pc}

08005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
        handleAlphaUpdated();
 8005968:	6803      	ldr	r3, [r0, #0]
        alpha = newAlpha;
 800596a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
        handleAlphaUpdated();
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	4718      	bx	r3

08005974 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>:
     *
     * @return The wildcard used in the text.
     */
    const Unicode::UnicodeChar* getWildcard() const
    {
        return getWildcard1();
 8005974:	6803      	ldr	r3, [r0, #0]
 8005976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005978:	4718      	bx	r3
	...

0800597c <_ZN8MainView18clickButtonPressedEv>:
void MainView::tearDownScreen()
{
}

void MainView::clickButtonPressed()
{
 800597c:	b538      	push	{r3, r4, r5, lr}
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 800597e:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
{
 8005982:	4604      	mov	r4, r0
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8005984:	4628      	mov	r0, r5
 8005986:	f7ff fff5 	bl	8005974 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 800598a:	f00d fb9d 	bl	80130c8 <_ZN8touchgfx7Unicode4atoiEPKt>
    if (tmpVal <= 50)
 800598e:	2832      	cmp	r0, #50	; 0x32
 8005990:	dc15      	bgt.n	80059be <_ZN8MainView18clickButtonPressedEv+0x42>
//        my_textBuffer[0]='a';
//        my_textBuffer[1]='b';
//        my_textBuffer[2]=0;


        Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", tmpVal);
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <_ZN8MainView18clickButtonPressedEv+0x44>)
 8005996:	210a      	movs	r1, #10
 8005998:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 800599c:	f00d fea7 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        //Unicode::snprintf(charTxtBuffer, CHARTXT_SIZE, "abcdefgh");
        Unicode::snprintf(charTxtBuffer, CHARTXT_SIZE, "abcAbc123");
 80059a0:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <_ZN8MainView18clickButtonPressedEv+0x48>)
 80059a2:	210a      	movs	r1, #10
 80059a4:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 80059a8:	f00d fea1 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        countTxt.invalidate();
 80059ac:	4628      	mov	r0, r5
 80059ae:	f00b ff63 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
        charTxt.invalidate();
 80059b2:	f204 40b4 	addw	r0, r4, #1204	; 0x4b4
//            touchButton.setTouchable(false);
//            touchButton.setPressed(false);
//            touchButton.invalidate();
//        }
    }
}
 80059b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        charTxt.invalidate();
 80059ba:	f00b bf5d 	b.w	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	0802334c 	.word	0x0802334c
 80059c4:	0802334f 	.word	0x0802334f

080059c8 <_ZN8MainView18touchButtonPressedEv>:

void MainView::touchButtonPressed()
{
 80059c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 80059ca:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
{
 80059ce:	4604      	mov	r4, r0
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 80059d0:	4630      	mov	r0, r6
 80059d2:	f7ff ffcf 	bl	8005974 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 80059d6:	f00d fb77 	bl	80130c8 <_ZN8touchgfx7Unicode4atoiEPKt>
    if (tmpVal <= 50)
 80059da:	2832      	cmp	r0, #50	; 0x32
 80059dc:	dc3e      	bgt.n	8005a5c <_ZN8MainView18touchButtonPressedEv+0x94>
    {
        tmpVal++;
 80059de:	1c45      	adds	r5, r0, #1
        Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", tmpVal);
 80059e0:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <_ZN8MainView18touchButtonPressedEv+0x98>)
 80059e2:	210a      	movs	r1, #10
 80059e4:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 80059e8:	462b      	mov	r3, r5
 80059ea:	f00d fe80 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        countTxt.invalidate();
 80059ee:	4630      	mov	r0, r6
 80059f0:	f00b ff42 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
        if (repeatButton.getAlpha() == 100)
 80059f4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 80059f8:	2b64      	cmp	r3, #100	; 0x64
 80059fa:	d10b      	bne.n	8005a14 <_ZN8MainView18touchButtonPressedEv+0x4c>
        {
            repeatButton.setAlpha(255);
 80059fc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8005a00:	21ff      	movs	r1, #255	; 0xff
 8005a02:	9001      	str	r0, [sp, #4]
 8005a04:	f7ff ffb0 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
        touchable = touch;
 8005a08:	2301      	movs	r3, #1
            repeatButton.setTouchable(true);
            repeatButton.invalidate();
 8005a0a:	9801      	ldr	r0, [sp, #4]
 8005a0c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
 8005a10:	f00b ff32 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
        }

        if (tmpVal == 50)
 8005a14:	2d32      	cmp	r5, #50	; 0x32
 8005a16:	d121      	bne.n	8005a5c <_ZN8MainView18touchButtonPressedEv+0x94>
 8005a18:	2500      	movs	r5, #0
        {
            clickButton.setAlpha(100);
 8005a1a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	9001      	str	r0, [sp, #4]
 8005a22:	f7ff ffa1 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
            clickButton.setTouchable(false);
            clickButton.setPressed(false);
 8005a26:	4629      	mov	r1, r5
 8005a28:	9801      	ldr	r0, [sp, #4]
 8005a2a:	f884 51d4 	strb.w	r5, [r4, #468]	; 0x1d4
 8005a2e:	f7ff f8e3 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            clickButton.invalidate();
 8005a32:	9801      	ldr	r0, [sp, #4]
 8005a34:	f00b ff20 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>

            touchButton.setAlpha(100);
 8005a38:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8005a3c:	2164      	movs	r1, #100	; 0x64
 8005a3e:	9001      	str	r0, [sp, #4]
 8005a40:	f7ff ff92 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
            touchButton.setTouchable(false);
            touchButton.setPressed(false);
 8005a44:	9801      	ldr	r0, [sp, #4]
 8005a46:	4629      	mov	r1, r5
 8005a48:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
 8005a4c:	f7ff f8d4 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            touchButton.invalidate();
 8005a50:	9801      	ldr	r0, [sp, #4]
        }
    }
}
 8005a52:	b002      	add	sp, #8
 8005a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            touchButton.invalidate();
 8005a58:	f00b bf0e 	b.w	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	0802334c 	.word	0x0802334c

08005a64 <_ZN8MainView19repeatButtonPressedEv>:

void MainView::repeatButtonPressed()
{
 8005a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8005a66:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
{
 8005a6a:	4604      	mov	r4, r0
    int tmpVal = Unicode::atoi(countTxt.getWildcard());
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff ff81 	bl	8005974 <_ZNK8touchgfx23TextAreaWithOneWildcard11getWildcardEv>
 8005a72:	f00d fb29 	bl	80130c8 <_ZN8touchgfx7Unicode4atoiEPKt>
    if (tmpVal >= 0)
 8005a76:	2800      	cmp	r0, #0
 8005a78:	db39      	blt.n	8005aee <_ZN8MainView19repeatButtonPressedEv+0x8a>
    {
        tmpVal--;
 8005a7a:	1e45      	subs	r5, r0, #1
        Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%d", tmpVal);
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <_ZN8MainView19repeatButtonPressedEv+0x90>)
 8005a7e:	210a      	movs	r1, #10
 8005a80:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 8005a84:	462b      	mov	r3, r5
 8005a86:	f00d fe32 	bl	80136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        countTxt.invalidate();
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f00b fef4 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
        if (clickButton.getAlpha() == 100)
 8005a90:	f894 31dd 	ldrb.w	r3, [r4, #477]	; 0x1dd
 8005a94:	2b64      	cmp	r3, #100	; 0x64
 8005a96:	d116      	bne.n	8005ac6 <_ZN8MainView19repeatButtonPressedEv+0x62>
        {
            clickButton.setAlpha(255);
 8005a98:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 8005a9c:	2601      	movs	r6, #1
 8005a9e:	21ff      	movs	r1, #255	; 0xff
 8005aa0:	9001      	str	r0, [sp, #4]
 8005aa2:	f7ff ff61 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
            clickButton.setTouchable(true);
            clickButton.invalidate();
 8005aa6:	9801      	ldr	r0, [sp, #4]
 8005aa8:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
 8005aac:	f00b fee4 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>

            touchButton.setAlpha(255);
 8005ab0:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8005ab4:	21ff      	movs	r1, #255	; 0xff
 8005ab6:	9001      	str	r0, [sp, #4]
 8005ab8:	f7ff ff56 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
            touchButton.setTouchable(true);
            touchButton.invalidate();
 8005abc:	9801      	ldr	r0, [sp, #4]
 8005abe:	f884 6288 	strb.w	r6, [r4, #648]	; 0x288
 8005ac2:	f00b fed9 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
        }

        if (tmpVal <= 0)
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	dc11      	bgt.n	8005aee <_ZN8MainView19repeatButtonPressedEv+0x8a>
        {
            repeatButton.setAlpha(100);
 8005aca:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	9001      	str	r0, [sp, #4]
 8005ad2:	f7ff ff49 	bl	8005968 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
 8005ad6:	2100      	movs	r1, #0
            repeatButton.setTouchable(false);
            repeatButton.setPressed(false);
 8005ad8:	9801      	ldr	r0, [sp, #4]
 8005ada:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
 8005ade:	f7ff f88b 	bl	8004bf8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            repeatButton.invalidate();
 8005ae2:	9801      	ldr	r0, [sp, #4]
        }
    }
}
 8005ae4:	b002      	add	sp, #8
 8005ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            repeatButton.invalidate();
 8005aea:	f00b bec5 	b.w	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8005aee:	b002      	add	sp, #8
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	bf00      	nop
 8005af4:	0802334c 	.word	0x0802334c

08005af8 <_ZN8MainViewC1Ev>:
MainView::MainView()
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4604      	mov	r4, r0
 8005afc:	f7ff f936 	bl	8004d6c <_ZN12MainViewBaseC1Ev>
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <_ZN8MainViewC1Ev+0x10>)
}
 8005b02:	4620      	mov	r0, r4
MainView::MainView()
 8005b04:	6023      	str	r3, [r4, #0]
}
 8005b06:	bd10      	pop	{r4, pc}
 8005b08:	08023364 	.word	0x08023364

08005b0c <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE7setTextENS_9TypedTextE>:
    void setText(TypedText t)
 8005b0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        text.setTypedText(t);
 8005b10:	f100 0738 	add.w	r7, r0, #56	; 0x38
    void setText(TypedText t)
 8005b14:	4605      	mov	r5, r0
        boundingArea = calculateBoundingArea();
 8005b16:	466c      	mov	r4, sp
        text.setTypedText(t);
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f105 0674 	add.w	r6, r5, #116	; 0x74
 8005b1e:	f008 ff9f 	bl	800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
 8005b22:	892b      	ldrh	r3, [r5, #8]
 8005b24:	4639      	mov	r1, r7
 8005b26:	4620      	mov	r0, r4
 8005b28:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
 8005b2c:	f9b5 800a 	ldrsh.w	r8, [r5, #10]
 8005b30:	f008 fd14 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005b34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005b38:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4620      	mov	r0, r4
        rect.height = height;
 8005b40:	f8a5 8042 	strh.w	r8, [r5, #66]	; 0x42
 8005b44:	f008 fd0a 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005b48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005b4c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    }
 8005b50:	b004      	add	sp, #16
 8005b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b58 <_ZN8MainView19toggleButtonPressedEv>:

void MainView::toggleButtonPressed()
{
 8005b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (countTxt.getColor() == Color::getColorFromRGB(222, 222, 222))
 8005b5a:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    {
        countTxt.setColor(Color::getColorFromRGB(231, 154, 9));
        toggleButton.setText(TypedText(T_TOGGLEBUTTONORANGE));
 8005b5e:	f500 7543 	add.w	r5, r0, #780	; 0x30c
    if (countTxt.getColor() == Color::getColorFromRGB(222, 222, 222))
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <_ZN8MainView19toggleButtonPressedEv+0x48>)
{
 8005b64:	4604      	mov	r4, r0
    }
    else
    {
        countTxt.setColor(Color::getColorFromRGB(222, 222, 222));
        toggleButton.setText(TypedText(T_TOGGLEBUTTONWHITE));
 8005b66:	4669      	mov	r1, sp
    if (countTxt.getColor() == Color::getColorFromRGB(222, 222, 222))
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <_ZN8MainView19toggleButtonPressedEv+0x4c>)
        color = newColor;
 8005b6c:	bf03      	ittte	eq
 8005b6e:	4a0e      	ldreq	r2, [pc, #56]	; (8005ba8 <_ZN8MainView19toggleButtonPressedEv+0x50>)
        : typedTextId(id)
 8005b70:	9300      	streq	r3, [sp, #0]
 8005b72:	230c      	moveq	r3, #12
 8005b74:	9300      	strne	r3, [sp, #0]
 8005b76:	bf16      	itet	ne
 8005b78:	230b      	movne	r3, #11
 8005b7a:	f8c0 2530 	streq.w	r2, [r0, #1328]	; 0x530
 8005b7e:	f8c0 2530 	strne.w	r2, [r0, #1328]	; 0x530
        toggleButton.setText(TypedText(T_TOGGLEBUTTONWHITE));
 8005b82:	4628      	mov	r0, r5
 8005b84:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005b88:	f7ff ffc0 	bl	8005b0c <_ZN8touchgfx15TextButtonStyleINS_19ToggleButtonTriggerEE7setTextENS_9TypedTextE>
    }
    countTxt.invalidate();
 8005b8c:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 8005b90:	f00b fe72 	bl	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
    toggleButton.invalidate();
 8005b94:	4628      	mov	r0, r5
}
 8005b96:	b003      	add	sp, #12
 8005b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    toggleButton.invalidate();
 8005b9c:	f00b be6c 	b.w	8011878 <_ZNK8touchgfx8Drawable10invalidateEv>
 8005ba0:	ffdedede 	.word	0xffdedede
 8005ba4:	080224c4 	.word	0x080224c4
 8005ba8:	ffe79a09 	.word	0xffe79a09

08005bac <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005bac:	2200      	movs	r2, #0
 8005bae:	6002      	str	r2, [r0, #0]
{
}
 8005bb0:	4770      	bx	lr

08005bb2 <_ZN5Model4tickEv>:

void Model::tick()
{
}
 8005bb2:	4770      	bx	lr

08005bb4 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8005bb4:	4770      	bx	lr

08005bb6 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	4770      	bx	lr

08005bba <ft6x06_ReadID>:
{
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	4604      	mov	r4, r0
  TS_IO_Init();
 8005bbe:	f7fa fe00 	bl	80007c2 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8005bc2:	21a8      	movs	r1, #168	; 0xa8
 8005bc4:	b2e0      	uxtb	r0, r4
 8005bc6:	f7fa fe19 	bl	80007fc <TS_IO_Read>
}
 8005bca:	b280      	uxth	r0, r0
 8005bcc:	bd10      	pop	{r4, pc}
	...

08005bd0 <ft6x06_TS_DetectTouch>:
{
 8005bd0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8005bd2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8005bd8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8005bdc:	f7fa fe0e 	bl	80007fc <TS_IO_Read>
 8005be0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8005be4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8005bf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8005bf8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8005bfc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 8005c02:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8005c06:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8005c08:	2200      	movs	r2, #0
 8005c0a:	709a      	strb	r2, [r3, #2]
}
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd10      	pop	{r4, pc}
 8005c10:	2000f2f2 	.word	0x2000f2f2

08005c14 <ft6x06_TS_GetXY>:
{
 8005c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8005c16:	4c15      	ldr	r4, [pc, #84]	; (8005c6c <ft6x06_TS_GetXY+0x58>)
{
 8005c18:	4615      	mov	r5, r2
 8005c1a:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8005c1c:	78a3      	ldrb	r3, [r4, #2]
 8005c1e:	7862      	ldrb	r2, [r4, #1]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d91f      	bls.n	8005c64 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8005c24:	b303      	cbz	r3, 8005c68 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	bf14      	ite	ne
 8005c2a:	2100      	movne	r1, #0
 8005c2c:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8005c2e:	2304      	movs	r3, #4
 8005c30:	b2c0      	uxtb	r0, r0
 8005c32:	eb0d 0203 	add.w	r2, sp, r3
 8005c36:	f7fa fdff 	bl	8000838 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8005c3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c48:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8005c4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8005c4e:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8005c50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8005c5e:	78a3      	ldrb	r3, [r4, #2]
 8005c60:	3301      	adds	r3, #1
 8005c62:	70a3      	strb	r3, [r4, #2]
}
 8005c64:	b002      	add	sp, #8
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8005c68:	2103      	movs	r1, #3
 8005c6a:	e7e0      	b.n	8005c2e <ft6x06_TS_GetXY+0x1a>
 8005c6c:	2000f2f2 	.word	0x2000f2f2

08005c70 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8005c70:	2201      	movs	r2, #1
 8005c72:	21a4      	movs	r1, #164	; 0xa4
 8005c74:	b2c0      	uxtb	r0, r0
 8005c76:	f7fa bda5 	b.w	80007c4 <TS_IO_Write>

08005c7a <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	21a4      	movs	r1, #164	; 0xa4
 8005c7e:	b2c0      	uxtb	r0, r0
 8005c80:	f7fa bda0 	b.w	80007c4 <TS_IO_Write>

08005c84 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8005c84:	f7ff bff9 	b.w	8005c7a <ft6x06_TS_DisableIT>

08005c88 <ft6x06_TS_ClearIT>:
 8005c88:	4770      	bx	lr
	...

08005c8c <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <ft6x06_Init+0x28>)
{  
 8005c8e:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	4290      	cmp	r0, r2
 8005c94:	d00a      	beq.n	8005cac <ft6x06_Init+0x20>
 8005c96:	7859      	ldrb	r1, [r3, #1]
 8005c98:	4288      	cmp	r0, r1
 8005c9a:	d007      	beq.n	8005cac <ft6x06_Init+0x20>
 8005c9c:	b10a      	cbz	r2, 8005ca2 <ft6x06_Init+0x16>
 8005c9e:	b929      	cbnz	r1, 8005cac <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8005ca0:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 8005ca2:	5498      	strb	r0, [r3, r2]
}
 8005ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 8005ca8:	f7fa bd8b 	b.w	80007c2 <TS_IO_Init>
}
 8005cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000f2f0 	.word	0x2000f2f0

08005cb8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4604      	mov	r4, r0
 8005cbc:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	49c9      	ldr	r1, [pc, #804]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005cc2:	f7fb f903 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8005cc6:	49c9      	ldr	r1, [pc, #804]	; (8005fec <OTM8009A_Init+0x334>)
 8005cc8:	2003      	movs	r0, #3
 8005cca:	f7fb f8ff 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8005cce:	49c8      	ldr	r1, [pc, #800]	; (8005ff0 <OTM8009A_Init+0x338>)
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f7fb f8fb 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8005cd6:	49c7      	ldr	r1, [pc, #796]	; (8005ff4 <OTM8009A_Init+0x33c>)
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f7fb f8f7 	bl	8000ecc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005cde:	49c4      	ldr	r1, [pc, #784]	; (8005ff0 <OTM8009A_Init+0x338>)
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fb f8f3 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8005ce6:	49c4      	ldr	r1, [pc, #784]	; (8005ff8 <OTM8009A_Init+0x340>)
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7fb f8ef 	bl	8000ecc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8005cee:	200a      	movs	r0, #10
 8005cf0:	f7fb f8ea 	bl	8000ec8 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8005cf4:	49c1      	ldr	r1, [pc, #772]	; (8005ffc <OTM8009A_Init+0x344>)
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f7fb f8e8 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8005cfc:	49c0      	ldr	r1, [pc, #768]	; (8006000 <OTM8009A_Init+0x348>)
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fb f8e4 	bl	8000ecc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8005d04:	200a      	movs	r0, #10
 8005d06:	f7fb f8df 	bl	8000ec8 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8005d0a:	49be      	ldr	r1, [pc, #760]	; (8006004 <OTM8009A_Init+0x34c>)
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7fb f8dd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8005d12:	49bd      	ldr	r1, [pc, #756]	; (8006008 <OTM8009A_Init+0x350>)
 8005d14:	2000      	movs	r0, #0
 8005d16:	f7fb f8d9 	bl	8000ecc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8005d1a:	49bc      	ldr	r1, [pc, #752]	; (800600c <OTM8009A_Init+0x354>)
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fb f8d5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8005d22:	49bb      	ldr	r1, [pc, #748]	; (8006010 <OTM8009A_Init+0x358>)
 8005d24:	2000      	movs	r0, #0
 8005d26:	f7fb f8d1 	bl	8000ecc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8005d2a:	49ba      	ldr	r1, [pc, #744]	; (8006014 <OTM8009A_Init+0x35c>)
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f7fb f8cd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8005d32:	49b9      	ldr	r1, [pc, #740]	; (8006018 <OTM8009A_Init+0x360>)
 8005d34:	2000      	movs	r0, #0
 8005d36:	f7fb f8c9 	bl	8000ecc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005d3a:	49ab      	ldr	r1, [pc, #684]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f7fb f8c5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8005d42:	49b6      	ldr	r1, [pc, #728]	; (800601c <OTM8009A_Init+0x364>)
 8005d44:	2000      	movs	r0, #0
 8005d46:	f7fb f8c1 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8005d4a:	49b5      	ldr	r1, [pc, #724]	; (8006020 <OTM8009A_Init+0x368>)
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f7fb f8bd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8005d52:	49b4      	ldr	r1, [pc, #720]	; (8006024 <OTM8009A_Init+0x36c>)
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7fb f8b9 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8005d5a:	49b3      	ldr	r1, [pc, #716]	; (8006028 <OTM8009A_Init+0x370>)
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fb f8b5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8005d62:	49b2      	ldr	r1, [pc, #712]	; (800602c <OTM8009A_Init+0x374>)
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fb f8b1 	bl	8000ecc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8005d6a:	49b1      	ldr	r1, [pc, #708]	; (8006030 <OTM8009A_Init+0x378>)
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f7fb f8ad 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8005d72:	49b0      	ldr	r1, [pc, #704]	; (8006034 <OTM8009A_Init+0x37c>)
 8005d74:	2000      	movs	r0, #0
 8005d76:	f7fb f8a9 	bl	8000ecc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8005d7a:	49af      	ldr	r1, [pc, #700]	; (8006038 <OTM8009A_Init+0x380>)
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f7fb f8a5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8005d82:	49a3      	ldr	r1, [pc, #652]	; (8006010 <OTM8009A_Init+0x358>)
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7fb f8a1 	bl	8000ecc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005d8a:	4997      	ldr	r1, [pc, #604]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fb f89d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8005d92:	49aa      	ldr	r1, [pc, #680]	; (800603c <OTM8009A_Init+0x384>)
 8005d94:	2002      	movs	r0, #2
 8005d96:	f7fb f899 	bl	8000ecc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8005d9a:	49a9      	ldr	r1, [pc, #676]	; (8006040 <OTM8009A_Init+0x388>)
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7fb f895 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8005da2:	49a8      	ldr	r1, [pc, #672]	; (8006044 <OTM8009A_Init+0x38c>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fb f891 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8005daa:	49a7      	ldr	r1, [pc, #668]	; (8006048 <OTM8009A_Init+0x390>)
 8005dac:	2000      	movs	r0, #0
 8005dae:	f7fb f88d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8005db2:	49a6      	ldr	r1, [pc, #664]	; (800604c <OTM8009A_Init+0x394>)
 8005db4:	2000      	movs	r0, #0
 8005db6:	f7fb f889 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8005dba:	49a5      	ldr	r1, [pc, #660]	; (8006050 <OTM8009A_Init+0x398>)
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7fb f885 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8005dc2:	49a4      	ldr	r1, [pc, #656]	; (8006054 <OTM8009A_Init+0x39c>)
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f7fb f881 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8005dca:	4995      	ldr	r1, [pc, #596]	; (8006020 <OTM8009A_Init+0x368>)
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f7fb f87d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8005dd2:	49a1      	ldr	r1, [pc, #644]	; (8006058 <OTM8009A_Init+0x3a0>)
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f7fb f879 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8005dda:	4993      	ldr	r1, [pc, #588]	; (8006028 <OTM8009A_Init+0x370>)
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f7fb f875 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8005de2:	499e      	ldr	r1, [pc, #632]	; (800605c <OTM8009A_Init+0x3a4>)
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7fb f871 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8005dea:	499d      	ldr	r1, [pc, #628]	; (8006060 <OTM8009A_Init+0x3a8>)
 8005dec:	2000      	movs	r0, #0
 8005dee:	f7fb f86d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8005df2:	499c      	ldr	r1, [pc, #624]	; (8006064 <OTM8009A_Init+0x3ac>)
 8005df4:	2002      	movs	r0, #2
 8005df6:	f7fb f869 	bl	8000ecc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005dfa:	497d      	ldr	r1, [pc, #500]	; (8005ff0 <OTM8009A_Init+0x338>)
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f7fb f865 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8005e02:	4999      	ldr	r1, [pc, #612]	; (8006068 <OTM8009A_Init+0x3b0>)
 8005e04:	2006      	movs	r0, #6
 8005e06:	f7fb f861 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8005e0a:	4998      	ldr	r1, [pc, #608]	; (800606c <OTM8009A_Init+0x3b4>)
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7fb f85d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8005e12:	4997      	ldr	r1, [pc, #604]	; (8006070 <OTM8009A_Init+0x3b8>)
 8005e14:	200e      	movs	r0, #14
 8005e16:	f7fb f859 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8005e1a:	4996      	ldr	r1, [pc, #600]	; (8006074 <OTM8009A_Init+0x3bc>)
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f7fb f855 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8005e22:	4995      	ldr	r1, [pc, #596]	; (8006078 <OTM8009A_Init+0x3c0>)
 8005e24:	200e      	movs	r0, #14
 8005e26:	f7fb f851 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8005e2a:	4994      	ldr	r1, [pc, #592]	; (800607c <OTM8009A_Init+0x3c4>)
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7fb f84d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8005e32:	4993      	ldr	r1, [pc, #588]	; (8006080 <OTM8009A_Init+0x3c8>)
 8005e34:	200a      	movs	r0, #10
 8005e36:	f7fb f849 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8005e3a:	4992      	ldr	r1, [pc, #584]	; (8006084 <OTM8009A_Init+0x3cc>)
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7fb f845 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8005e42:	4991      	ldr	r1, [pc, #580]	; (8006088 <OTM8009A_Init+0x3d0>)
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7fb f841 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005e4a:	4969      	ldr	r1, [pc, #420]	; (8005ff0 <OTM8009A_Init+0x338>)
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7fb f83d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8005e52:	498e      	ldr	r1, [pc, #568]	; (800608c <OTM8009A_Init+0x3d4>)
 8005e54:	200a      	movs	r0, #10
 8005e56:	f7fb f839 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8005e5a:	498d      	ldr	r1, [pc, #564]	; (8006090 <OTM8009A_Init+0x3d8>)
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f7fb f835 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8005e62:	498c      	ldr	r1, [pc, #560]	; (8006094 <OTM8009A_Init+0x3dc>)
 8005e64:	200f      	movs	r0, #15
 8005e66:	f7fb f831 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8005e6a:	4980      	ldr	r1, [pc, #512]	; (800606c <OTM8009A_Init+0x3b4>)
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fb f82d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8005e72:	4989      	ldr	r1, [pc, #548]	; (8006098 <OTM8009A_Init+0x3e0>)
 8005e74:	200f      	movs	r0, #15
 8005e76:	f7fb f829 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8005e7a:	497e      	ldr	r1, [pc, #504]	; (8006074 <OTM8009A_Init+0x3bc>)
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f7fb f825 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8005e82:	4986      	ldr	r1, [pc, #536]	; (800609c <OTM8009A_Init+0x3e4>)
 8005e84:	200a      	movs	r0, #10
 8005e86:	f7fb f821 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8005e8a:	497c      	ldr	r1, [pc, #496]	; (800607c <OTM8009A_Init+0x3c4>)
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7fb f81d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8005e92:	4983      	ldr	r1, [pc, #524]	; (80060a0 <OTM8009A_Init+0x3e8>)
 8005e94:	200f      	movs	r0, #15
 8005e96:	f7fb f819 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8005e9a:	497a      	ldr	r1, [pc, #488]	; (8006084 <OTM8009A_Init+0x3cc>)
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f7fb f815 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8005ea2:	4980      	ldr	r1, [pc, #512]	; (80060a4 <OTM8009A_Init+0x3ec>)
 8005ea4:	200f      	movs	r0, #15
 8005ea6:	f7fb f811 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8005eaa:	497f      	ldr	r1, [pc, #508]	; (80060a8 <OTM8009A_Init+0x3f0>)
 8005eac:	2000      	movs	r0, #0
 8005eae:	f7fb f80d 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8005eb2:	497e      	ldr	r1, [pc, #504]	; (80060ac <OTM8009A_Init+0x3f4>)
 8005eb4:	200a      	movs	r0, #10
 8005eb6:	f7fb f809 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8005eba:	497d      	ldr	r1, [pc, #500]	; (80060b0 <OTM8009A_Init+0x3f8>)
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f7fb f805 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8005ec2:	497c      	ldr	r1, [pc, #496]	; (80060b4 <OTM8009A_Init+0x3fc>)
 8005ec4:	200a      	movs	r0, #10
 8005ec6:	f7fb f801 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8005eca:	4949      	ldr	r1, [pc, #292]	; (8005ff0 <OTM8009A_Init+0x338>)
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f7fa fffd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8005ed2:	4979      	ldr	r1, [pc, #484]	; (80060b8 <OTM8009A_Init+0x400>)
 8005ed4:	200a      	movs	r0, #10
 8005ed6:	f7fa fff9 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8005eda:	496d      	ldr	r1, [pc, #436]	; (8006090 <OTM8009A_Init+0x3d8>)
 8005edc:	2000      	movs	r0, #0
 8005ede:	f7fa fff5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8005ee2:	4976      	ldr	r1, [pc, #472]	; (80060bc <OTM8009A_Init+0x404>)
 8005ee4:	200f      	movs	r0, #15
 8005ee6:	f7fa fff1 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8005eea:	4960      	ldr	r1, [pc, #384]	; (800606c <OTM8009A_Init+0x3b4>)
 8005eec:	2000      	movs	r0, #0
 8005eee:	f7fa ffed 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8005ef2:	4973      	ldr	r1, [pc, #460]	; (80060c0 <OTM8009A_Init+0x408>)
 8005ef4:	200f      	movs	r0, #15
 8005ef6:	f7fa ffe9 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8005efa:	495e      	ldr	r1, [pc, #376]	; (8006074 <OTM8009A_Init+0x3bc>)
 8005efc:	2000      	movs	r0, #0
 8005efe:	f7fa ffe5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8005f02:	4970      	ldr	r1, [pc, #448]	; (80060c4 <OTM8009A_Init+0x40c>)
 8005f04:	200a      	movs	r0, #10
 8005f06:	f7fa ffe1 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8005f0a:	495c      	ldr	r1, [pc, #368]	; (800607c <OTM8009A_Init+0x3c4>)
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f7fa ffdd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8005f12:	496d      	ldr	r1, [pc, #436]	; (80060c8 <OTM8009A_Init+0x410>)
 8005f14:	200f      	movs	r0, #15
 8005f16:	f7fa ffd9 	bl	8000ecc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8005f1a:	495a      	ldr	r1, [pc, #360]	; (8006084 <OTM8009A_Init+0x3cc>)
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f7fa ffd5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8005f22:	496a      	ldr	r1, [pc, #424]	; (80060cc <OTM8009A_Init+0x414>)
 8005f24:	200f      	movs	r0, #15
 8005f26:	f7fa ffd1 	bl	8000ecc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8005f2a:	493d      	ldr	r1, [pc, #244]	; (8006020 <OTM8009A_Init+0x368>)
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7fa ffcd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8005f32:	4967      	ldr	r1, [pc, #412]	; (80060d0 <OTM8009A_Init+0x418>)
 8005f34:	2000      	movs	r0, #0
 8005f36:	f7fa ffc9 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8005f3a:	4966      	ldr	r1, [pc, #408]	; (80060d4 <OTM8009A_Init+0x41c>)
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f7fa ffc5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8005f42:	4965      	ldr	r1, [pc, #404]	; (80060d8 <OTM8009A_Init+0x420>)
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7fa ffc1 	bl	8000ecc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8005f4a:	4964      	ldr	r1, [pc, #400]	; (80060dc <OTM8009A_Init+0x424>)
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7fa ffbd 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8005f52:	4963      	ldr	r1, [pc, #396]	; (80060e0 <OTM8009A_Init+0x428>)
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7fa ffb9 	bl	8000ecc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005f5a:	4923      	ldr	r1, [pc, #140]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7fa ffb5 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8005f62:	4960      	ldr	r1, [pc, #384]	; (80060e4 <OTM8009A_Init+0x42c>)
 8005f64:	2003      	movs	r0, #3
 8005f66:	f7fa ffb1 	bl	8000ecc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005f6a:	491f      	ldr	r1, [pc, #124]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7fa ffad 	bl	8000ecc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005f72:	491d      	ldr	r1, [pc, #116]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005f74:	2000      	movs	r0, #0
 8005f76:	f7fa ffa9 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8005f7a:	495b      	ldr	r1, [pc, #364]	; (80060e8 <OTM8009A_Init+0x430>)
 8005f7c:	2010      	movs	r0, #16
 8005f7e:	f7fa ffa5 	bl	8000ecc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8005f82:	4919      	ldr	r1, [pc, #100]	; (8005fe8 <OTM8009A_Init+0x330>)
 8005f84:	2000      	movs	r0, #0
 8005f86:	f7fa ffa1 	bl	8000ecc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8005f8a:	4958      	ldr	r1, [pc, #352]	; (80060ec <OTM8009A_Init+0x434>)
 8005f8c:	2010      	movs	r0, #16
 8005f8e:	f7fa ff9d 	bl	8000ecc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8005f92:	2000      	movs	r0, #0
 8005f94:	4956      	ldr	r1, [pc, #344]	; (80060f0 <OTM8009A_Init+0x438>)
 8005f96:	f7fa ff99 	bl	8000ecc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8005f9a:	2078      	movs	r0, #120	; 0x78
 8005f9c:	f7fa ff94 	bl	8000ec8 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	f000 80c7 	beq.w	8006134 <OTM8009A_Init+0x47c>
 8005fa6:	2c02      	cmp	r4, #2
 8005fa8:	d103      	bne.n	8005fb2 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8005faa:	4952      	ldr	r1, [pc, #328]	; (80060f4 <OTM8009A_Init+0x43c>)
 8005fac:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8005fae:	f7fa ff8d 	bl	8000ecc <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005fb2:	2d01      	cmp	r5, #1
 8005fb4:	d10b      	bne.n	8005fce <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8005fb6:	4950      	ldr	r1, [pc, #320]	; (80060f8 <OTM8009A_Init+0x440>)
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f7fa ff87 	bl	8000ecc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8005fbe:	494f      	ldr	r1, [pc, #316]	; (80060fc <OTM8009A_Init+0x444>)
 8005fc0:	2004      	movs	r0, #4
 8005fc2:	f7fa ff83 	bl	8000ecc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8005fc6:	494e      	ldr	r1, [pc, #312]	; (8006100 <OTM8009A_Init+0x448>)
 8005fc8:	2004      	movs	r0, #4
 8005fca:	f7fa ff7f 	bl	8000ecc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8005fce:	494d      	ldr	r1, [pc, #308]	; (8006104 <OTM8009A_Init+0x44c>)
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f7fa ff7b 	bl	8000ecc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8005fd6:	494c      	ldr	r1, [pc, #304]	; (8006108 <OTM8009A_Init+0x450>)
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f7fa ff77 	bl	8000ecc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8005fde:	494b      	ldr	r1, [pc, #300]	; (800610c <OTM8009A_Init+0x454>)
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f7fa ff73 	bl	8000ecc <DSI_IO_WriteCmd>
 8005fe6:	e093      	b.n	8006110 <OTM8009A_Init+0x458>
 8005fe8:	080233a0 	.word	0x080233a0
 8005fec:	08023406 	.word	0x08023406
 8005ff0:	080233b6 	.word	0x080233b6
 8005ff4:	0802348c 	.word	0x0802348c
 8005ff8:	080233cc 	.word	0x080233cc
 8005ffc:	080233e2 	.word	0x080233e2
 8006000:	080233f8 	.word	0x080233f8
 8006004:	080233fe 	.word	0x080233fe
 8006008:	08023400 	.word	0x08023400
 800600c:	08023402 	.word	0x08023402
 8006010:	08023404 	.word	0x08023404
 8006014:	080233a2 	.word	0x080233a2
 8006018:	080233a4 	.word	0x080233a4
 800601c:	080233a6 	.word	0x080233a6
 8006020:	080233a8 	.word	0x080233a8
 8006024:	080233aa 	.word	0x080233aa
 8006028:	080233ac 	.word	0x080233ac
 800602c:	080233ae 	.word	0x080233ae
 8006030:	080233b0 	.word	0x080233b0
 8006034:	080233b2 	.word	0x080233b2
 8006038:	080233b4 	.word	0x080233b4
 800603c:	0802350a 	.word	0x0802350a
 8006040:	080233b8 	.word	0x080233b8
 8006044:	080233ba 	.word	0x080233ba
 8006048:	080233bc 	.word	0x080233bc
 800604c:	080233be 	.word	0x080233be
 8006050:	080233c0 	.word	0x080233c0
 8006054:	080233c2 	.word	0x080233c2
 8006058:	080233c4 	.word	0x080233c4
 800605c:	080233c6 	.word	0x080233c6
 8006060:	080233c8 	.word	0x080233c8
 8006064:	0802350d 	.word	0x0802350d
 8006068:	08023510 	.word	0x08023510
 800606c:	080233ca 	.word	0x080233ca
 8006070:	08023517 	.word	0x08023517
 8006074:	080233ce 	.word	0x080233ce
 8006078:	08023526 	.word	0x08023526
 800607c:	080233d0 	.word	0x080233d0
 8006080:	0802340a 	.word	0x0802340a
 8006084:	080233d2 	.word	0x080233d2
 8006088:	080233f0 	.word	0x080233f0
 800608c:	08023415 	.word	0x08023415
 8006090:	080233d4 	.word	0x080233d4
 8006094:	08023420 	.word	0x08023420
 8006098:	08023430 	.word	0x08023430
 800609c:	08023440 	.word	0x08023440
 80060a0:	0802344b 	.word	0x0802344b
 80060a4:	0802345b 	.word	0x0802345b
 80060a8:	080233d6 	.word	0x080233d6
 80060ac:	0802346b 	.word	0x0802346b
 80060b0:	080233d8 	.word	0x080233d8
 80060b4:	08023476 	.word	0x08023476
 80060b8:	08023481 	.word	0x08023481
 80060bc:	0802348f 	.word	0x0802348f
 80060c0:	0802349f 	.word	0x0802349f
 80060c4:	080234af 	.word	0x080234af
 80060c8:	080234ba 	.word	0x080234ba
 80060cc:	080234ca 	.word	0x080234ca
 80060d0:	080233f2 	.word	0x080233f2
 80060d4:	080233f4 	.word	0x080233f4
 80060d8:	080233f6 	.word	0x080233f6
 80060dc:	080233fa 	.word	0x080233fa
 80060e0:	080233fc 	.word	0x080233fc
 80060e4:	080234da 	.word	0x080234da
 80060e8:	080234e8 	.word	0x080234e8
 80060ec:	080234f9 	.word	0x080234f9
 80060f0:	080233da 	.word	0x080233da
 80060f4:	080233dc 	.word	0x080233dc
 80060f8:	080233e0 	.word	0x080233e0
 80060fc:	080234de 	.word	0x080234de
 8006100:	080234e3 	.word	0x080234e3
 8006104:	080233e4 	.word	0x080233e4
 8006108:	080233e6 	.word	0x080233e6
 800610c:	080233e8 	.word	0x080233e8

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8006110:	490a      	ldr	r1, [pc, #40]	; (800613c <OTM8009A_Init+0x484>)
 8006112:	2000      	movs	r0, #0
 8006114:	f7fa feda 	bl	8000ecc <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8006118:	4909      	ldr	r1, [pc, #36]	; (8006140 <OTM8009A_Init+0x488>)
 800611a:	2000      	movs	r0, #0
 800611c:	f7fa fed6 	bl	8000ecc <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8006120:	4908      	ldr	r1, [pc, #32]	; (8006144 <OTM8009A_Init+0x48c>)
 8006122:	2000      	movs	r0, #0
 8006124:	f7fa fed2 	bl	8000ecc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8006128:	4907      	ldr	r1, [pc, #28]	; (8006148 <OTM8009A_Init+0x490>)
 800612a:	2000      	movs	r0, #0
 800612c:	f7fa fece 	bl	8000ecc <DSI_IO_WriteCmd>

  return 0;
}
 8006130:	2000      	movs	r0, #0
 8006132:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8006134:	4905      	ldr	r1, [pc, #20]	; (800614c <OTM8009A_Init+0x494>)
 8006136:	4620      	mov	r0, r4
 8006138:	e739      	b.n	8005fae <OTM8009A_Init+0x2f6>
 800613a:	bf00      	nop
 800613c:	080233ea 	.word	0x080233ea
 8006140:	080233ec 	.word	0x080233ec
 8006144:	080233a0 	.word	0x080233a0
 8006148:	080233ee 	.word	0x080233ee
 800614c:	080233de 	.word	0x080233de

08006150 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006150:	490f      	ldr	r1, [pc, #60]	; (8006190 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006152:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006154:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8006160:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <SystemInit+0x44>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800616a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006172:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006176:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006178:	4a07      	ldr	r2, [pc, #28]	; (8006198 <SystemInit+0x48>)
 800617a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006182:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006184:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800618a:	608b      	str	r3, [r1, #8]
#endif
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000ed00 	.word	0xe000ed00
 8006194:	40023800 	.word	0x40023800
 8006198:	24003010 	.word	0x24003010

0800619c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800619e:	2003      	movs	r0, #3
{
 80061a0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061aa:	f000 f82d 	bl	8006208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061ae:	2000      	movs	r0, #0
 80061b0:	f7fd ff16 	bl	8003fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061b4:	f7fd fc60 	bl	8003a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80061b8:	2000      	movs	r0, #0
 80061ba:	bd08      	pop	{r3, pc}
 80061bc:	40023c00 	.word	0x40023c00

080061c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80061c0:	4a03      	ldr	r2, [pc, #12]	; (80061d0 <HAL_IncTick+0x10>)
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <HAL_IncTick+0x14>)
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	440b      	add	r3, r1
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	2000f2f8 	.word	0x2000f2f8
 80061d4:	20000064 	.word	0x20000064

080061d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80061d8:	4b01      	ldr	r3, [pc, #4]	; (80061e0 <HAL_GetTick+0x8>)
 80061da:	6818      	ldr	r0, [r3, #0]
}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	2000f2f8 	.word	0x2000f2f8

080061e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061e8:	f7ff fff6 	bl	80061d8 <HAL_GetTick>
 80061ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061ee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80061f0:	bf1e      	ittt	ne
 80061f2:	4b04      	ldrne	r3, [pc, #16]	; (8006204 <HAL_Delay+0x20>)
 80061f4:	781b      	ldrbne	r3, [r3, #0]
 80061f6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061f8:	f7ff ffee 	bl	80061d8 <HAL_GetTick>
 80061fc:	1b43      	subs	r3, r0, r5
 80061fe:	42a3      	cmp	r3, r4
 8006200:	d3fa      	bcc.n	80061f8 <HAL_Delay+0x14>
  {
  }
}
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000064 	.word	0x20000064

08006208 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006208:	4907      	ldr	r1, [pc, #28]	; (8006228 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800620a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800620c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800620e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006216:	0412      	lsls	r2, r2, #16
 8006218:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800621a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800621c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006224:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006226:	4770      	bx	lr
 8006228:	e000ed00 	.word	0xe000ed00

0800622c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800622e:	b530      	push	{r4, r5, lr}
 8006230:	68dc      	ldr	r4, [r3, #12]
 8006232:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006236:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800623a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800623c:	2d04      	cmp	r5, #4
 800623e:	bf28      	it	cs
 8006240:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006242:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006244:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006248:	bf8c      	ite	hi
 800624a:	3c03      	subhi	r4, #3
 800624c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800624e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8006252:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006254:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006258:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800625c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006260:	fa01 f104 	lsl.w	r1, r1, r4
 8006264:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006268:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800626c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800626e:	db06      	blt.n	800627e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006270:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006274:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006278:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800627c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800627e:	f000 000f 	and.w	r0, r0, #15
 8006282:	4a02      	ldr	r2, [pc, #8]	; (800628c <HAL_NVIC_SetPriority+0x60>)
 8006284:	5413      	strb	r3, [r2, r0]
 8006286:	e7f9      	b.n	800627c <HAL_NVIC_SetPriority+0x50>
 8006288:	e000ed00 	.word	0xe000ed00
 800628c:	e000ed14 	.word	0xe000ed14

08006290 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006290:	2800      	cmp	r0, #0
 8006292:	db08      	blt.n	80062a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006294:	0942      	lsrs	r2, r0, #5
 8006296:	2301      	movs	r3, #1
 8006298:	f000 001f 	and.w	r0, r0, #31
 800629c:	fa03 f000 	lsl.w	r0, r3, r0
 80062a0:	4b01      	ldr	r3, [pc, #4]	; (80062a8 <HAL_NVIC_EnableIRQ+0x18>)
 80062a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80062a6:	4770      	bx	lr
 80062a8:	e000e100 	.word	0xe000e100

080062ac <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80062ac:	2800      	cmp	r0, #0
 80062ae:	db0d      	blt.n	80062cc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062b0:	0943      	lsrs	r3, r0, #5
 80062b2:	2201      	movs	r2, #1
 80062b4:	f000 001f 	and.w	r0, r0, #31
 80062b8:	3320      	adds	r3, #32
 80062ba:	fa02 f000 	lsl.w	r0, r2, r0
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <HAL_NVIC_DisableIRQ+0x24>)
 80062c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80062c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062c8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	e000e100 	.word	0xe000e100

080062d4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80062d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <HAL_MPU_Disable+0x18>)
 80062da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	e000ed00 	.word	0xe000ed00

080062f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_MPU_Enable+0x1c>)
 80062f2:	f040 0001 	orr.w	r0, r0, #1
 80062f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80062fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006300:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006306:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800630a:	4770      	bx	lr
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006310:	7843      	ldrb	r3, [r0, #1]
 8006312:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_MPU_ConfigRegion+0x54>)
{
 8006314:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800631a:	7801      	ldrb	r1, [r0, #0]
 800631c:	b1e9      	cbz	r1, 800635a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800631e:	6843      	ldr	r3, [r0, #4]
 8006320:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006324:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006326:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006328:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800632a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800632e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006330:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006332:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006336:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006338:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800633c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800633e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006342:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006348:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800634a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800634e:	7a01      	ldrb	r1, [r0, #8]
 8006350:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006354:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006358:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800635a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800635e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8006362:	e7f9      	b.n	8006358 <HAL_MPU_ConfigRegion+0x48>
 8006364:	e000ed00 	.word	0xe000ed00

08006368 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006368:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800636a:	4604      	mov	r4, r0
 800636c:	b908      	cbnz	r0, 8006372 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800636e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006370:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006372:	7f43      	ldrb	r3, [r0, #29]
 8006374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006378:	b913      	cbnz	r3, 8006380 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800637a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800637c:	f7fd fb9a 	bl	8003ab4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006380:	2302      	movs	r3, #2
 8006382:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006384:	7923      	ldrb	r3, [r4, #4]
 8006386:	b9e3      	cbnz	r3, 80063c2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <HAL_CRC_Init+0x70>)
 800638c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	f022 0218 	bic.w	r2, r2, #24
 8006394:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006396:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006398:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800639a:	b9d2      	cbnz	r2, 80063d2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800639c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063a0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80063a2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	6961      	ldr	r1, [r4, #20]
 80063a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063ac:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80063ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80063bc:	2301      	movs	r3, #1
 80063be:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80063c0:	e7d6      	b.n	8006370 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80063c2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f808 	bl	80063dc <HAL_CRCEx_Polynomial_Set>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d0e2      	beq.n	8006396 <HAL_CRC_Init+0x2e>
 80063d0:	e7cd      	b.n	800636e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063d2:	6922      	ldr	r2, [r4, #16]
 80063d4:	e7e4      	b.n	80063a0 <HAL_CRC_Init+0x38>
 80063d6:	bf00      	nop
 80063d8:	04c11db7 	.word	0x04c11db7

080063dc <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80063dc:	231f      	movs	r3, #31
{
 80063de:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80063e0:	3b01      	subs	r3, #1
 80063e2:	d31c      	bcc.n	800641e <HAL_CRCEx_Polynomial_Set+0x42>
 80063e4:	fa21 f403 	lsr.w	r4, r1, r3
 80063e8:	07e4      	lsls	r4, r4, #31
 80063ea:	d5f9      	bpl.n	80063e0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80063ec:	2a10      	cmp	r2, #16
 80063ee:	d012      	beq.n	8006416 <HAL_CRCEx_Polynomial_Set+0x3a>
 80063f0:	d804      	bhi.n	80063fc <HAL_CRCEx_Polynomial_Set+0x20>
 80063f2:	b13a      	cbz	r2, 8006404 <HAL_CRCEx_Polynomial_Set+0x28>
 80063f4:	2a08      	cmp	r2, #8
 80063f6:	d010      	beq.n	800641a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80063f8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80063fa:	e00b      	b.n	8006414 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80063fc:	2a18      	cmp	r2, #24
 80063fe:	d1fb      	bne.n	80063f8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8006400:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8006402:	d8f9      	bhi.n	80063f8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006408:	6883      	ldr	r3, [r0, #8]
 800640a:	f023 0318 	bic.w	r3, r3, #24
 800640e:	431a      	orrs	r2, r3
 8006410:	6082      	str	r2, [r0, #8]
 8006412:	2000      	movs	r0, #0
}
 8006414:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8006416:	2b07      	cmp	r3, #7
 8006418:	e7f3      	b.n	8006402 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800641a:	2b0f      	cmp	r3, #15
 800641c:	e7f1      	b.n	8006402 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1ea      	bne.n	80063f8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8006422:	e7ef      	b.n	8006404 <HAL_CRCEx_Polynomial_Set+0x28>

08006424 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006424:	6803      	ldr	r3, [r0, #0]
{
 8006426:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006428:	2018      	movs	r0, #24
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	3910      	subs	r1, #16
 800642e:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8006432:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006434:	4c05      	ldr	r4, [pc, #20]	; (800644c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8006436:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006438:	5c20      	ldrb	r0, [r4, r0]
 800643a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800643c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8006440:	f020 0003 	bic.w	r0, r0, #3
 8006444:	bf88      	it	hi
 8006446:	3004      	addhi	r0, #4
 8006448:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800644a:	bd10      	pop	{r4, pc}
 800644c:	0802354d 	.word	0x0802354d

08006450 <HAL_DMA_Init>:
{
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006454:	f7ff fec0 	bl	80061d8 <HAL_GetTick>
 8006458:	4605      	mov	r5, r0
  if(hdma == NULL)
 800645a:	2c00      	cmp	r4, #0
 800645c:	d073      	beq.n	8006546 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 800645e:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8006460:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006462:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8006466:	2300      	movs	r3, #0
 8006468:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006474:	6821      	ldr	r1, [r4, #0]
 8006476:	680b      	ldr	r3, [r1, #0]
 8006478:	07d8      	lsls	r0, r3, #31
 800647a:	d42f      	bmi.n	80064dc <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800647c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800647e:	4d33      	ldr	r5, [pc, #204]	; (800654c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006480:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006482:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006484:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8006488:	4313      	orrs	r3, r2
 800648a:	68e2      	ldr	r2, [r4, #12]
 800648c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800648e:	6922      	ldr	r2, [r4, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	6962      	ldr	r2, [r4, #20]
 8006494:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006496:	69e2      	ldr	r2, [r4, #28]
 8006498:	4303      	orrs	r3, r0
 800649a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800649c:	6a22      	ldr	r2, [r4, #32]
 800649e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064a2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064a4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064a8:	bf02      	ittt	eq
 80064aa:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80064ae:	4335      	orreq	r5, r6
 80064b0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80064b4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80064b6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064b8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80064bc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c0:	d133      	bne.n	800652a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80064c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064c4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80064c6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064c8:	b37d      	cbz	r5, 800652a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064ca:	b990      	cbnz	r0, 80064f2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80064cc:	2a01      	cmp	r2, #1
 80064ce:	d021      	beq.n	8006514 <HAL_DMA_Init+0xc4>
 80064d0:	f032 0202 	bics.w	r2, r2, #2
 80064d4:	d129      	bne.n	800652a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d6:	01ea      	lsls	r2, r5, #7
 80064d8:	d527      	bpl.n	800652a <HAL_DMA_Init+0xda>
 80064da:	e01e      	b.n	800651a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064dc:	f7ff fe7c 	bl	80061d8 <HAL_GetTick>
 80064e0:	1b40      	subs	r0, r0, r5
 80064e2:	2805      	cmp	r0, #5
 80064e4:	d9c6      	bls.n	8006474 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064e6:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064e8:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ea:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80064ec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064f2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80064f6:	d114      	bne.n	8006522 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80064f8:	2a03      	cmp	r2, #3
 80064fa:	d816      	bhi.n	800652a <HAL_DMA_Init+0xda>
 80064fc:	a001      	add	r0, pc, #4	; (adr r0, 8006504 <HAL_DMA_Init+0xb4>)
 80064fe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006502:	bf00      	nop
 8006504:	0800651b 	.word	0x0800651b
 8006508:	080064d7 	.word	0x080064d7
 800650c:	0800651b 	.word	0x0800651b
 8006510:	08006515 	.word	0x08006515
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006514:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8006518:	d107      	bne.n	800652a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800651a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800651c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800651e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8006520:	e7e4      	b.n	80064ec <HAL_DMA_Init+0x9c>
    switch (tmp)
 8006522:	2a02      	cmp	r2, #2
 8006524:	d9f9      	bls.n	800651a <HAL_DMA_Init+0xca>
 8006526:	2a03      	cmp	r2, #3
 8006528:	d0d5      	beq.n	80064d6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800652a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff ff79 	bl	8006424 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006532:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006534:	233f      	movs	r3, #63	; 0x3f
 8006536:	4093      	lsls	r3, r2
 8006538:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800653c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8006540:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8006544:	e7d4      	b.n	80064f0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8006546:	2001      	movs	r0, #1
 8006548:	e7d2      	b.n	80064f0 <HAL_DMA_Init+0xa0>
 800654a:	bf00      	nop
 800654c:	e010803f 	.word	0xe010803f

08006550 <HAL_DMA_Start_IT>:
{
 8006550:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8006552:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006556:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8006558:	2c01      	cmp	r4, #1
 800655a:	d034      	beq.n	80065c6 <HAL_DMA_Start_IT+0x76>
 800655c:	2401      	movs	r4, #1
 800655e:	2500      	movs	r5, #0
 8006560:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006564:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8006568:	2c01      	cmp	r4, #1
 800656a:	f04f 0402 	mov.w	r4, #2
 800656e:	d128      	bne.n	80065c2 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8006570:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006574:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006576:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800657e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8006580:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006582:	6883      	ldr	r3, [r0, #8]
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d119      	bne.n	80065bc <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8006588:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800658a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800658c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800658e:	233f      	movs	r3, #63	; 0x3f
 8006590:	4093      	lsls	r3, r2
 8006592:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	f043 0316 	orr.w	r3, r3, #22
 800659a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800659c:	6963      	ldr	r3, [r4, #20]
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80065a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80065a6:	b11b      	cbz	r3, 80065b0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f043 0308 	orr.w	r3, r3, #8
 80065ae:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80065b0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	6023      	str	r3, [r4, #0]
}
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 80065bc:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80065be:	60e2      	str	r2, [r4, #12]
 80065c0:	e7e4      	b.n	800658c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80065c2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80065c6:	2002      	movs	r0, #2
 80065c8:	e7f7      	b.n	80065ba <HAL_DMA_Start_IT+0x6a>

080065ca <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d003      	beq.n	80065da <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80065d6:	2001      	movs	r0, #1
 80065d8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80065da:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80065dc:	2305      	movs	r3, #5
 80065de:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80065e2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	6013      	str	r3, [r2, #0]
}
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80065f0:	2300      	movs	r3, #0
{
 80065f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80065f4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065f6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80065f8:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <HAL_DMA_IRQHandler+0x178>)
{
 80065fa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80065fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006600:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8006602:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006604:	409a      	lsls	r2, r3
 8006606:	4232      	tst	r2, r6
 8006608:	d00c      	beq.n	8006624 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800660a:	6801      	ldr	r1, [r0, #0]
 800660c:	6808      	ldr	r0, [r1, #0]
 800660e:	0740      	lsls	r0, r0, #29
 8006610:	d508      	bpl.n	8006624 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006612:	6808      	ldr	r0, [r1, #0]
 8006614:	f020 0004 	bic.w	r0, r0, #4
 8006618:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800661a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800661c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006624:	2201      	movs	r2, #1
 8006626:	409a      	lsls	r2, r3
 8006628:	4232      	tst	r2, r6
 800662a:	d008      	beq.n	800663e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800662c:	6821      	ldr	r1, [r4, #0]
 800662e:	6949      	ldr	r1, [r1, #20]
 8006630:	0609      	lsls	r1, r1, #24
 8006632:	d504      	bpl.n	800663e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006634:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006636:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006638:	f042 0202 	orr.w	r2, r2, #2
 800663c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800663e:	2204      	movs	r2, #4
 8006640:	409a      	lsls	r2, r3
 8006642:	4232      	tst	r2, r6
 8006644:	d008      	beq.n	8006658 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006646:	6821      	ldr	r1, [r4, #0]
 8006648:	6809      	ldr	r1, [r1, #0]
 800664a:	0788      	lsls	r0, r1, #30
 800664c:	d504      	bpl.n	8006658 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800664e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006650:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006652:	f042 0204 	orr.w	r2, r2, #4
 8006656:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006658:	2210      	movs	r2, #16
 800665a:	409a      	lsls	r2, r3
 800665c:	4232      	tst	r2, r6
 800665e:	d010      	beq.n	8006682 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	0709      	lsls	r1, r1, #28
 8006666:	d50c      	bpl.n	8006682 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006668:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	0350      	lsls	r0, r2, #13
 800666e:	d537      	bpl.n	80066e0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	0319      	lsls	r1, r3, #12
 8006674:	d401      	bmi.n	800667a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8006676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006678:	e000      	b.n	800667c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800667a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800667c:	b10b      	cbz	r3, 8006682 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800667e:	4620      	mov	r0, r4
 8006680:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006682:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006684:	2220      	movs	r2, #32
 8006686:	408a      	lsls	r2, r1
 8006688:	4232      	tst	r2, r6
 800668a:	d03a      	beq.n	8006702 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	06c6      	lsls	r6, r0, #27
 8006692:	d536      	bpl.n	8006702 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006694:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006696:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800669a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800669c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800669e:	d127      	bne.n	80066f0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066a0:	f022 0216 	bic.w	r2, r2, #22
 80066a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ac:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80066b0:	b90a      	cbnz	r2, 80066b6 <HAL_DMA_IRQHandler+0xc6>
 80066b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80066b4:	b11a      	cbz	r2, 80066be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f022 0208 	bic.w	r2, r2, #8
 80066bc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066be:	233f      	movs	r3, #63	; 0x3f
 80066c0:	408b      	lsls	r3, r1
 80066c2:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80066ca:	2300      	movs	r3, #0
 80066cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80066d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d045      	beq.n	8006762 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80066d6:	4620      	mov	r0, r4
}
 80066d8:	b003      	add	sp, #12
 80066da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80066de:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	05d2      	lsls	r2, r2, #23
 80066e4:	d4c7      	bmi.n	8006676 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e7c2      	b.n	8006676 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066f0:	0350      	lsls	r0, r2, #13
 80066f2:	d527      	bpl.n	8006744 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	0319      	lsls	r1, r3, #12
 80066f8:	d431      	bmi.n	800675e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80066fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80066fc:	b10b      	cbz	r3, 8006702 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80066fe:	4620      	mov	r0, r4
 8006700:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006702:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006704:	b36b      	cbz	r3, 8006762 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006706:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006708:	07da      	lsls	r2, r3, #31
 800670a:	d519      	bpl.n	8006740 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800670c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8006710:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8006712:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8006716:	2305      	movs	r3, #5
 8006718:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800671c:	6813      	ldr	r3, [r2, #0]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	3301      	adds	r3, #1
 8006728:	42bb      	cmp	r3, r7
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	d802      	bhi.n	8006734 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	07db      	lsls	r3, r3, #31
 8006732:	d4f7      	bmi.n	8006724 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8006734:	2301      	movs	r3, #1
 8006736:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800673a:	2300      	movs	r3, #0
 800673c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8006740:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006742:	e7c6      	b.n	80066d2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800674a:	d108      	bne.n	800675e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	f021 0110 	bic.w	r1, r1, #16
 8006752:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006754:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8006756:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800675a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800675e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006760:	e7cc      	b.n	80066fc <HAL_DMA_IRQHandler+0x10c>
}
 8006762:	b003      	add	sp, #12
 8006764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006766:	bf00      	nop
 8006768:	20000060 	.word	0x20000060

0800676c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800676c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800676e:	4770      	bx	lr

08006770 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006770:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006772:	4604      	mov	r4, r0
 8006774:	b380      	cbz	r0, 80067d8 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006776:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800677a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800677e:	b91b      	cbnz	r3, 8006788 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006780:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006784:	f7fd f9ac 	bl	8003ae0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006788:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800678a:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800678c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006798:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800679a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800679c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800679e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a0:	f022 0207 	bic.w	r2, r2, #7
 80067a4:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80067a6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80067a8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80067aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ac:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80067b0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80067b4:	430a      	orrs	r2, r1
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80067b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067ba:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80067be:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80067c2:	0552      	lsls	r2, r2, #21
 80067c4:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80067c8:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80067ca:	430a      	orrs	r2, r1
 80067cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80067ce:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80067d0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80067d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80067d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80067d8:	2001      	movs	r0, #1
 80067da:	e7fc      	b.n	80067d6 <HAL_DMA2D_Init+0x66>

080067dc <HAL_DMA2D_LineEventCallback>:
 80067dc:	4770      	bx	lr

080067de <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80067de:	4770      	bx	lr

080067e0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80067e0:	6803      	ldr	r3, [r0, #0]
{
 80067e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80067e4:	685e      	ldr	r6, [r3, #4]
{
 80067e6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80067e8:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80067ea:	07f2      	lsls	r2, r6, #31
 80067ec:	d514      	bpl.n	8006818 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80067ee:	05e9      	lsls	r1, r5, #23
 80067f0:	d512      	bpl.n	8006818 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80067fa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006802:	2201      	movs	r2, #1
 8006804:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006806:	2304      	movs	r3, #4
 8006808:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800680c:	2300      	movs	r3, #0
 800680e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006812:	69c3      	ldr	r3, [r0, #28]
 8006814:	b103      	cbz	r3, 8006818 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006816:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006818:	06b2      	lsls	r2, r6, #26
 800681a:	d516      	bpl.n	800684a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800681c:	04ab      	lsls	r3, r5, #18
 800681e:	d514      	bpl.n	800684a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006828:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800682a:	2220      	movs	r2, #32
 800682c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800682e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006830:	f043 0302 	orr.w	r3, r3, #2
 8006834:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006836:	2304      	movs	r3, #4
 8006838:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800683c:	2300      	movs	r3, #0
 800683e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006842:	69e3      	ldr	r3, [r4, #28]
 8006844:	b10b      	cbz	r3, 800684a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006846:	4620      	mov	r0, r4
 8006848:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800684a:	0730      	lsls	r0, r6, #28
 800684c:	d516      	bpl.n	800687c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800684e:	0529      	lsls	r1, r5, #20
 8006850:	d514      	bpl.n	800687c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800685a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800685c:	2208      	movs	r2, #8
 800685e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006860:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006862:	f043 0304 	orr.w	r3, r3, #4
 8006866:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006868:	2304      	movs	r3, #4
 800686a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800686e:	2300      	movs	r3, #0
 8006870:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006874:	69e3      	ldr	r3, [r4, #28]
 8006876:	b10b      	cbz	r3, 800687c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006878:	4620      	mov	r0, r4
 800687a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800687c:	0772      	lsls	r2, r6, #29
 800687e:	d50b      	bpl.n	8006898 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006880:	056b      	lsls	r3, r5, #21
 8006882:	d509      	bpl.n	8006898 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006884:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006886:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006890:	2204      	movs	r2, #4
 8006892:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006894:	f7ff ffa2 	bl	80067dc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006898:	07b0      	lsls	r0, r6, #30
 800689a:	d514      	bpl.n	80068c6 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800689c:	05a9      	lsls	r1, r5, #22
 800689e:	d512      	bpl.n	80068c6 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80068a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80068aa:	2202      	movs	r2, #2
 80068ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80068ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068b0:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068b8:	2300      	movs	r3, #0
 80068ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	b10b      	cbz	r3, 80068c6 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80068c2:	4620      	mov	r0, r4
 80068c4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80068c6:	06f2      	lsls	r2, r6, #27
 80068c8:	d513      	bpl.n	80068f2 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80068ca:	04eb      	lsls	r3, r5, #19
 80068cc:	d511      	bpl.n	80068f2 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80068ce:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80068d0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80068da:	2210      	movs	r2, #16
 80068dc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80068de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068e0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 80068e8:	2300      	movs	r3, #0
 80068ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80068ee:	f7ff ff76 	bl	80067de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80068f2:	bd70      	pop	{r4, r5, r6, pc}

080068f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80068f4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80068f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	f04f 0302 	mov.w	r3, #2
 8006900:	d031      	beq.n	8006966 <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006902:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8006904:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006906:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800690a:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 800690e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006912:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006914:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006918:	0513      	lsls	r3, r2, #20
 800691a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800691c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006920:	4e1b      	ldr	r6, [pc, #108]	; (8006990 <HAL_DMA2D_ConfigLayer+0x9c>)
 8006922:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006924:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006926:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800692a:	2d01      	cmp	r5, #1
 800692c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800692e:	bf96      	itet	ls
 8006930:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006934:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006938:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800693a:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800693c:	b9a9      	cbnz	r1, 800696a <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800693e:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006940:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006942:	ea04 0406 	and.w	r4, r4, r6
 8006946:	ea43 0304 	orr.w	r3, r3, r4
 800694a:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800694c:	6a03      	ldr	r3, [r0, #32]
 800694e:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006950:	d803      	bhi.n	800695a <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006952:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006958:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800695a:	2301      	movs	r3, #1
 800695c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006960:	2300      	movs	r3, #0
 8006962:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 8006966:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006968:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800696a:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800696c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800696e:	ea04 0406 	and.w	r4, r4, r6
 8006972:	ea43 0304 	orr.w	r3, r3, r4
 8006976:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006978:	f04f 0318 	mov.w	r3, #24
 800697c:	fb03 0101 	mla	r1, r3, r1, r0
 8006980:	6a0b      	ldr	r3, [r1, #32]
 8006982:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006984:	d8e9      	bhi.n	800695a <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006986:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800698c:	6213      	str	r3, [r2, #32]
 800698e:	e7e4      	b.n	800695a <HAL_DMA2D_ConfigLayer+0x66>
 8006990:	00ccfff0 	.word	0x00ccfff0

08006994 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006998:	4607      	mov	r7, r0
 800699a:	460d      	mov	r5, r1
 800699c:	4614      	mov	r4, r2
 800699e:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80069a0:	f7ff fc1a 	bl	80061d8 <HAL_GetTick>
 80069a4:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80069aa:	07d2      	lsls	r2, r2, #31
 80069ac:	d50a      	bpl.n	80069c4 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80069ae:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80069b2:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 80069b4:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80069b6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80069ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80069be:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80069c4:	f7ff fc08 	bl	80061d8 <HAL_GetTick>
 80069c8:	eba0 0008 	sub.w	r0, r0, r8
 80069cc:	2864      	cmp	r0, #100	; 0x64
 80069ce:	d9ea      	bls.n	80069a6 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
 80069d2:	e7f5      	b.n	80069c0 <DSI_ShortWrite+0x2c>

080069d4 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069d4:	7c03      	ldrb	r3, [r0, #16]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d05c      	beq.n	8006a94 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80069da:	2200      	movs	r2, #0
 80069dc:	6803      	ldr	r3, [r0, #0]
 80069de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80069e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80069e6:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80069e8:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80069ea:	d507      	bpl.n	80069fc <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80069ec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80069f0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80069f4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80069f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80069fc:	078a      	lsls	r2, r1, #30
 80069fe:	d505      	bpl.n	8006a0c <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006a00:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006a04:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8006a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006a0c:	074a      	lsls	r2, r1, #29
 8006a0e:	d505      	bpl.n	8006a1c <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006a10:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006a1c:	070a      	lsls	r2, r1, #28
 8006a1e:	d505      	bpl.n	8006a2c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006a20:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a24:	f042 0202 	orr.w	r2, r2, #2
 8006a28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006a2c:	06ca      	lsls	r2, r1, #27
 8006a2e:	d505      	bpl.n	8006a3c <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006a30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a34:	f042 020c 	orr.w	r2, r2, #12
 8006a38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006a3c:	068a      	lsls	r2, r1, #26
 8006a3e:	d505      	bpl.n	8006a4c <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006a40:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a44:	f042 0210 	orr.w	r2, r2, #16
 8006a48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006a4c:	064a      	lsls	r2, r1, #25
 8006a4e:	d505      	bpl.n	8006a5c <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006a50:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a54:	f042 0220 	orr.w	r2, r2, #32
 8006a58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006a5c:	060a      	lsls	r2, r1, #24
 8006a5e:	d505      	bpl.n	8006a6c <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006a60:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006a6c:	05ca      	lsls	r2, r1, #23
 8006a6e:	d505      	bpl.n	8006a7c <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006a70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006a7c:	058a      	lsls	r2, r1, #22
 8006a7e:	d505      	bpl.n	8006a8c <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006a80:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006a84:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006a88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006a90:	4618      	mov	r0, r3
 8006a92:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a94:	2002      	movs	r0, #2
}
 8006a96:	4770      	bx	lr

08006a98 <HAL_DSI_Init>:
{
 8006a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a9a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f000 80a7 	beq.w	8006bf2 <HAL_DSI_Init+0x15a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006aa4:	7c43      	ldrb	r3, [r0, #17]
 8006aa6:	b90b      	cbnz	r3, 8006aac <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006aa8:	f7fd f83a 	bl	8003b20 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006aac:	2303      	movs	r3, #3
 8006aae:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006aba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006abe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006ac2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006ace:	f7ff fb83 	bl	80061d8 <HAL_GetTick>
 8006ad2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8006ada:	04d9      	lsls	r1, r3, #19
 8006adc:	d57a      	bpl.n	8006bd4 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006ade:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006ae2:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8006ae6:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8006aea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006aee:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006af2:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006af6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006af8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006afc:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006afe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006b02:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006b04:	430b      	orrs	r3, r1
 8006b06:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8006b1a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006b26:	f7ff fb5d 	bl	80061e4 <HAL_Delay>
  tickstart = HAL_GetTick();
 8006b2a:	f7ff fb55 	bl	80061d8 <HAL_GetTick>
 8006b2e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006b36:	05d2      	lsls	r2, r2, #23
 8006b38:	d555      	bpl.n	8006be6 <HAL_DSI_Init+0x14e>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006b3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006b3e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006b42:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006b44:	f042 0206 	orr.w	r2, r2, #6
 8006b48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006b4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006b50:	f022 0203 	bic.w	r2, r2, #3
 8006b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006b58:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006b5c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006b5e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006b60:	f042 0201 	orr.w	r2, r2, #1
 8006b64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006b68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006b6c:	f022 0203 	bic.w	r2, r2, #3
 8006b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006b74:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006b78:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006b7a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006b7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b86:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006b8c:	491a      	ldr	r1, [pc, #104]	; (8006bf8 <HAL_DSI_Init+0x160>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006b8e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006b90:	686a      	ldr	r2, [r5, #4]
 8006b92:	2a01      	cmp	r2, #1
 8006b94:	bf38      	it	cc
 8006b96:	2201      	movcc	r2, #1
 8006b98:	434a      	muls	r2, r1
 8006b9a:	68a9      	ldr	r1, [r5, #8]
 8006b9c:	f001 0103 	and.w	r1, r1, #3
 8006ba0:	408a      	lsls	r2, r1
 8006ba2:	6829      	ldr	r1, [r5, #0]
 8006ba4:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006ba6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006ba8:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006bac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006bb0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006bb4:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006bb8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006bc2:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006bc6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8006bca:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006bcc:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8006bce:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006bd0:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8006bd2:	e006      	b.n	8006be2 <HAL_DSI_Init+0x14a>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006bd4:	f7ff fb00 	bl	80061d8 <HAL_GetTick>
 8006bd8:	1b80      	subs	r0, r0, r6
 8006bda:	2864      	cmp	r0, #100	; 0x64
 8006bdc:	f67f af7a 	bls.w	8006ad4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006be0:	2003      	movs	r0, #3
}
 8006be2:	b002      	add	sp, #8
 8006be4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006be6:	f7ff faf7 	bl	80061d8 <HAL_GetTick>
 8006bea:	1b80      	subs	r0, r0, r6
 8006bec:	2864      	cmp	r0, #100	; 0x64
 8006bee:	d99f      	bls.n	8006b30 <HAL_DSI_Init+0x98>
 8006bf0:	e7f6      	b.n	8006be0 <HAL_DSI_Init+0x148>
    return HAL_ERROR;
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	e7f5      	b.n	8006be2 <HAL_DSI_Init+0x14a>
 8006bf6:	bf00      	nop
 8006bf8:	003d0900 	.word	0x003d0900

08006bfc <HAL_DSI_ErrorCallback>:
 8006bfc:	4770      	bx	lr

08006bfe <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006bfe:	6803      	ldr	r3, [r0, #0]
 8006c00:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006c04:	07d1      	lsls	r1, r2, #31
{
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006c0a:	d508      	bpl.n	8006c1e <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006c0c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006c10:	07d2      	lsls	r2, r2, #31
 8006c12:	d504      	bpl.n	8006c1e <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006c14:	2201      	movs	r2, #1
 8006c16:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006c1a:	f7fa f9c9 	bl	8000fb0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006c24:	0791      	lsls	r1, r2, #30
 8006c26:	d509      	bpl.n	8006c3c <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006c28:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006c2c:	0792      	lsls	r2, r2, #30
 8006c2e:	d505      	bpl.n	8006c3c <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006c30:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006c32:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006c34:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006c38:	f7fa f9ee 	bl	8001018 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006c3c:	69a3      	ldr	r3, [r4, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04e      	beq.n	8006ce0 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006c42:	6821      	ldr	r1, [r4, #0]
 8006c44:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006c48:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006c4c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006c50:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006c52:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006c56:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006c58:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006c5a:	b119      	cbz	r1, 8006c64 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006c5c:	6961      	ldr	r1, [r4, #20]
 8006c5e:	f041 0101 	orr.w	r1, r1, #1
 8006c62:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006c64:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8006c68:	d003      	beq.n	8006c72 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006c6a:	6962      	ldr	r2, [r4, #20]
 8006c6c:	f042 0202 	orr.w	r2, r2, #2
 8006c70:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006c72:	07d8      	lsls	r0, r3, #31
 8006c74:	d503      	bpl.n	8006c7e <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006c76:	6962      	ldr	r2, [r4, #20]
 8006c78:	f042 0204 	orr.w	r2, r2, #4
 8006c7c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006c7e:	0799      	lsls	r1, r3, #30
 8006c80:	d503      	bpl.n	8006c8a <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006c82:	6962      	ldr	r2, [r4, #20]
 8006c84:	f042 0208 	orr.w	r2, r2, #8
 8006c88:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006c8a:	f013 0f0c 	tst.w	r3, #12
 8006c8e:	d003      	beq.n	8006c98 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006c90:	6962      	ldr	r2, [r4, #20]
 8006c92:	f042 0210 	orr.w	r2, r2, #16
 8006c96:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006c98:	06da      	lsls	r2, r3, #27
 8006c9a:	d503      	bpl.n	8006ca4 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006c9c:	6962      	ldr	r2, [r4, #20]
 8006c9e:	f042 0220 	orr.w	r2, r2, #32
 8006ca2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006ca4:	0698      	lsls	r0, r3, #26
 8006ca6:	d503      	bpl.n	8006cb0 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cae:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006cb0:	0659      	lsls	r1, r3, #25
 8006cb2:	d503      	bpl.n	8006cbc <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006cb4:	6962      	ldr	r2, [r4, #20]
 8006cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cba:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006cbc:	061a      	lsls	r2, r3, #24
 8006cbe:	d503      	bpl.n	8006cc8 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006cc0:	6962      	ldr	r2, [r4, #20]
 8006cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006cc8:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006ccc:	d003      	beq.n	8006cd6 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd4:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006cd6:	6963      	ldr	r3, [r4, #20]
 8006cd8:	b113      	cbz	r3, 8006ce0 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff ff8e 	bl	8006bfc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ce2:	7c03      	ldrb	r3, [r0, #16]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d00b      	beq.n	8006d00 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006ce8:	6803      	ldr	r3, [r0, #0]
 8006cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cec:	f022 0203 	bic.w	r2, r2, #3
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf4:	4311      	orrs	r1, r2
 8006cf6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006d00:	2002      	movs	r0, #2
}
 8006d02:	4770      	bx	lr

08006d04 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006d04:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d06:	7c03      	ldrb	r3, [r0, #16]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d06a      	beq.n	8006de2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006d0c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d0e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006d18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006d24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	f022 0203 	bic.w	r2, r2, #3
 8006d36:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	4322      	orrs	r2, r4
 8006d3c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	f022 0207 	bic.w	r2, r2, #7
 8006d44:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d46:	695c      	ldr	r4, [r3, #20]
 8006d48:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006d4c:	432a      	orrs	r2, r5
 8006d4e:	694d      	ldr	r5, [r1, #20]
 8006d50:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d52:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d54:	4322      	orrs	r2, r4
 8006d56:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	f022 020f 	bic.w	r2, r2, #15
 8006d5e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d60:	691c      	ldr	r4, [r3, #16]
 8006d62:	432c      	orrs	r4, r5
 8006d64:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006d66:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006d6a:	f024 040e 	bic.w	r4, r4, #14
 8006d6e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006d72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006d76:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006d78:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006d7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d82:	0c12      	lsrs	r2, r2, #16
 8006d84:	0412      	lsls	r2, r2, #16
 8006d86:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006d88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d8a:	4322      	orrs	r2, r4
 8006d8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006d8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006d92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006d96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006d9a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006d9e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006da2:	432a      	orrs	r2, r5
 8006da4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006da6:	432a      	orrs	r2, r5
 8006da8:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006daa:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006dac:	432a      	orrs	r2, r5
 8006dae:	4322      	orrs	r2, r4
 8006db0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006db4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006dbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006dc2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006dce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006dd2:	f042 0202 	orr.w	r2, r2, #2
 8006dd6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006dde:	4618      	mov	r0, r3
}
 8006de0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006de2:	2002      	movs	r0, #2
 8006de4:	e7fc      	b.n	8006de0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006de8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006de8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dea:	7c03      	ldrb	r3, [r0, #16]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d02a      	beq.n	8006e46 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <HAL_DSI_ConfigCommand+0x64>)
 8006df4:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8006df6:	4023      	ands	r3, r4
 8006df8:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006dfa:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8006dfc:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006e00:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006e02:	688d      	ldr	r5, [r1, #8]
 8006e04:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8006e06:	68cd      	ldr	r5, [r1, #12]
 8006e08:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006e0a:	690d      	ldr	r5, [r1, #16]
 8006e0c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006e0e:	694d      	ldr	r5, [r1, #20]
 8006e10:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006e12:	698d      	ldr	r5, [r1, #24]
 8006e14:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8006e16:	69cd      	ldr	r5, [r1, #28]
 8006e18:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006e1a:	6a0d      	ldr	r5, [r1, #32]
 8006e1c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006e1e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006e20:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006e22:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8006e24:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006e26:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006e28:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006e2a:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006e2c:	4323      	orrs	r3, r4
 8006e2e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006e30:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006e32:	f023 0302 	bic.w	r3, r3, #2
 8006e36:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006e38:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006e42:	4618      	mov	r0, r3
}
 8006e44:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006e46:	2002      	movs	r0, #2
 8006e48:	e7fc      	b.n	8006e44 <HAL_DSI_ConfigCommand+0x5c>
 8006e4a:	bf00      	nop
 8006e4c:	fef080ff 	.word	0xfef080ff

08006e50 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e50:	7c03      	ldrb	r3, [r0, #16]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d00b      	beq.n	8006e6e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006e56:	6803      	ldr	r3, [r0, #0]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	f022 021f 	bic.w	r2, r2, #31
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4311      	orrs	r1, r2
 8006e64:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e66:	2300      	movs	r3, #0
 8006e68:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e6e:	2002      	movs	r0, #2
}
 8006e70:	4770      	bx	lr

08006e72 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006e72:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e74:	7c03      	ldrb	r3, [r0, #16]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d035      	beq.n	8006ee6 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006e7a:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006e7c:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006e80:	4294      	cmp	r4, r2
 8006e82:	bf38      	it	cc
 8006e84:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006e86:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006e8a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8006e8e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006e92:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006e96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e9a:	4322      	orrs	r2, r4
 8006e9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006ea0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006ea4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006ea8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006eac:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006eb0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006eb4:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006eb6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006eba:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006ebc:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006ebe:	432a      	orrs	r2, r5
 8006ec0:	4322      	orrs	r2, r4
 8006ec2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006ec6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006eca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006ece:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006ed2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006ed6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006eda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006ee2:	4618      	mov	r0, r3
}
 8006ee4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	e7fc      	b.n	8006ee4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006eec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006eec:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006eee:	7c03      	ldrb	r3, [r0, #16]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d05c      	beq.n	8006fae <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ef4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ef6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ef8:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006efa:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006efc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006f00:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006f08:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006f0a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006f0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006f12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006f14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f18:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006f1c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8006f1e:	4014      	ands	r4, r2
 8006f20:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006f22:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8006f24:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f26:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006f28:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006f2a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006f2c:	4014      	ands	r4, r2
 8006f2e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f30:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006f32:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f34:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006f36:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006f38:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006f3c:	4014      	ands	r4, r2
 8006f3e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f42:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006f46:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006f48:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006f4a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006f4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f52:	4014      	ands	r4, r2
 8006f54:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006f58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f5c:	432c      	orrs	r4, r5
 8006f5e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006f62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f66:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006f6a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006f6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f72:	698d      	ldr	r5, [r1, #24]
 8006f74:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006f76:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006f78:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006f7a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006f7e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006f82:	4014      	ands	r4, r2
 8006f84:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006f88:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006f8c:	432c      	orrs	r4, r5
 8006f8e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006f92:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006f96:	4022      	ands	r2, r4
 8006f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006faa:	4618      	mov	r0, r3
}
 8006fac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006fae:	2002      	movs	r0, #2
 8006fb0:	e7fc      	b.n	8006fac <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006fb2:	bf00      	nop
 8006fb4:	ffff0000 	.word	0xffff0000

08006fb8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006fb8:	7c03      	ldrb	r3, [r0, #16]
{
 8006fba:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d01c      	beq.n	8006ffa <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006fc0:	6802      	ldr	r2, [r0, #0]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	6851      	ldr	r1, [r2, #4]
 8006fc8:	f041 0101 	orr.w	r1, r1, #1
 8006fcc:	6051      	str	r1, [r2, #4]
 8006fce:	6851      	ldr	r1, [r2, #4]
 8006fd0:	f001 0101 	and.w	r1, r1, #1
 8006fd4:	9100      	str	r1, [sp, #0]
 8006fd6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8006fde:	f041 0108 	orr.w	r1, r1, #8
 8006fe2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8006fe6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006fea:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006fec:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006fee:	f002 0208 	and.w	r2, r2, #8
 8006ff2:	9201      	str	r2, [sp, #4]
 8006ff4:	9a01      	ldr	r2, [sp, #4]
}
 8006ff6:	b002      	add	sp, #8
 8006ff8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006ffa:	2002      	movs	r0, #2
 8006ffc:	e7fb      	b.n	8006ff6 <HAL_DSI_Start+0x3e>

08006ffe <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ffe:	7c03      	ldrb	r3, [r0, #16]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d00a      	beq.n	800701a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007004:	6802      	ldr	r2, [r0, #0]
 8007006:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800700a:	f043 0304 	orr.w	r3, r3, #4
 800700e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007012:	2300      	movs	r3, #0
 8007014:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007016:	4618      	mov	r0, r3
 8007018:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800701a:	2002      	movs	r0, #2
}
 800701c:	4770      	bx	lr

0800701e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800701e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007020:	7c05      	ldrb	r5, [r0, #16]
{
 8007022:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007024:	2d01      	cmp	r5, #1
 8007026:	d009      	beq.n	800703c <HAL_DSI_ShortWrite+0x1e>
 8007028:	2501      	movs	r5, #1
 800702a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800702c:	9d06      	ldr	r5, [sp, #24]
 800702e:	9500      	str	r5, [sp, #0]
 8007030:	f7ff fcb0 	bl	8006994 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007034:	2300      	movs	r3, #0
 8007036:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007038:	b003      	add	sp, #12
 800703a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800703c:	2002      	movs	r0, #2
 800703e:	e7fb      	b.n	8007038 <HAL_DSI_ShortWrite+0x1a>

08007040 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007046:	7c03      	ldrb	r3, [r0, #16]
{
 8007048:	4606      	mov	r6, r0
 800704a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800704c:	2b01      	cmp	r3, #1
{
 800704e:	4615      	mov	r5, r2
 8007050:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8007054:	d052      	beq.n	80070fc <HAL_DSI_LongWrite+0xbc>
 8007056:	2301      	movs	r3, #1
 8007058:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800705a:	f7ff f8bd 	bl	80061d8 <HAL_GetTick>
 800705e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007060:	6831      	ldr	r1, [r6, #0]
 8007062:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8007064:	f013 0a01 	ands.w	sl, r3, #1
 8007068:	d01a      	beq.n	80070a0 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800706a:	2c03      	cmp	r4, #3
 800706c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800706e:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007072:	bf28      	it	cs
 8007074:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8007076:	4282      	cmp	r2, r0
 8007078:	d11d      	bne.n	80070b6 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800707a:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800707c:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800707e:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007082:	bb13      	cbnz	r3, 80070ca <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007084:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007086:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800708a:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800708c:	0222      	lsls	r2, r4, #8
 800708e:	0224      	lsls	r4, r4, #8
 8007090:	b292      	uxth	r2, r2
 8007092:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8007096:	4315      	orrs	r5, r2
 8007098:	432c      	orrs	r4, r5
 800709a:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800709c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800709e:	e008      	b.n	80070b2 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80070a0:	f7ff f89a 	bl	80061d8 <HAL_GetTick>
 80070a4:	eba0 000b 	sub.w	r0, r0, fp
 80070a8:	2864      	cmp	r0, #100	; 0x64
 80070aa:	d9d9      	bls.n	8007060 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80070ac:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80070ae:	f886 a010 	strb.w	sl, [r6, #16]
}
 80070b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80070b6:	f818 3002 	ldrb.w	r3, [r8, r2]
 80070ba:	3201      	adds	r2, #1
 80070bc:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80070c0:	fa03 f30c 	lsl.w	r3, r3, ip
 80070c4:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 80070c8:	e7d5      	b.n	8007076 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80070ca:	2b04      	cmp	r3, #4
    fifoword = 0U;
 80070cc:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80070d0:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80070d2:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80070d4:	bf28      	it	cs
 80070d6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80070da:	f812 8000 	ldrb.w	r8, [r2, r0]
 80070de:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80070e2:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80070e4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80070e8:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80070ea:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80070ee:	d1f4      	bne.n	80070da <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80070f0:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80070f4:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80070f6:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80070fa:	e7c2      	b.n	8007082 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80070fc:	2002      	movs	r0, #2
 80070fe:	e7d8      	b.n	80070b2 <HAL_DSI_LongWrite+0x72>

08007100 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007100:	7c03      	ldrb	r3, [r0, #16]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d010      	beq.n	8007128 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007106:	6803      	ldr	r3, [r0, #0]
 8007108:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800710c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007110:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007114:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007118:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800711c:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007120:	2300      	movs	r3, #0
 8007122:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007124:	4618      	mov	r0, r3
 8007126:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007128:	2002      	movs	r0, #2
}
 800712a:	4770      	bx	lr

0800712c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800712c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007130:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007132:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80072f0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007136:	4a6c      	ldr	r2, [pc, #432]	; (80072e8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8007138:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800713a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800713c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800713e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8007142:	43ac      	bics	r4, r5
 8007144:	f040 80b6 	bne.w	80072b4 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007148:	684d      	ldr	r5, [r1, #4]
 800714a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800714e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007150:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007154:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007158:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800715a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800715c:	2f01      	cmp	r7, #1
 800715e:	d834      	bhi.n	80071ca <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8007160:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007162:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8007166:	68cf      	ldr	r7, [r1, #12]
 8007168:	fa07 f708 	lsl.w	r7, r7, r8
 800716c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8007170:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007172:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007174:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007178:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800717c:	409f      	lsls	r7, r3
 800717e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8007182:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8007184:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007186:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007188:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800718c:	688f      	ldr	r7, [r1, #8]
 800718e:	fa07 f708 	lsl.w	r7, r7, r8
 8007192:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8007196:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007198:	d119      	bne.n	80071ce <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800719a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800719e:	f003 0b07 	and.w	fp, r3, #7
 80071a2:	f04f 0e0f 	mov.w	lr, #15
 80071a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80071aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80071ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80071b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80071b6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80071ba:	690f      	ldr	r7, [r1, #16]
 80071bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80071c0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80071c4:	f8ca 7020 	str.w	r7, [sl, #32]
 80071c8:	e001      	b.n	80071ce <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071ca:	2c03      	cmp	r4, #3
 80071cc:	d1da      	bne.n	8007184 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80071ce:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80071d0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80071d8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80071dc:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80071e0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071e2:	d067      	beq.n	80072b4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80071e8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071ec:	f003 0703 	and.w	r7, r3, #3
 80071f0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80071f8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071fc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071fe:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8007202:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8007206:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800720a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800720e:	9401      	str	r4, [sp, #4]
 8007210:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007212:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8007216:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800721a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800721e:	4c33      	ldr	r4, [pc, #204]	; (80072ec <HAL_GPIO_Init+0x1c0>)
 8007220:	42a0      	cmp	r0, r4
 8007222:	d04e      	beq.n	80072c2 <HAL_GPIO_Init+0x196>
 8007224:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007228:	42a0      	cmp	r0, r4
 800722a:	d04c      	beq.n	80072c6 <HAL_GPIO_Init+0x19a>
 800722c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007230:	42a0      	cmp	r0, r4
 8007232:	d04a      	beq.n	80072ca <HAL_GPIO_Init+0x19e>
 8007234:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007238:	42a0      	cmp	r0, r4
 800723a:	d048      	beq.n	80072ce <HAL_GPIO_Init+0x1a2>
 800723c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007240:	42a0      	cmp	r0, r4
 8007242:	d046      	beq.n	80072d2 <HAL_GPIO_Init+0x1a6>
 8007244:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007248:	42a0      	cmp	r0, r4
 800724a:	d044      	beq.n	80072d6 <HAL_GPIO_Init+0x1aa>
 800724c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007250:	42a0      	cmp	r0, r4
 8007252:	d042      	beq.n	80072da <HAL_GPIO_Init+0x1ae>
 8007254:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007258:	42a0      	cmp	r0, r4
 800725a:	d040      	beq.n	80072de <HAL_GPIO_Init+0x1b2>
 800725c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007260:	42a0      	cmp	r0, r4
 8007262:	d03e      	beq.n	80072e2 <HAL_GPIO_Init+0x1b6>
 8007264:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007268:	42a0      	cmp	r0, r4
 800726a:	bf0c      	ite	eq
 800726c:	2409      	moveq	r4, #9
 800726e:	240a      	movne	r4, #10
 8007270:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007272:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007274:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8007278:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800727a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800727e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8007280:	bf54      	ite	pl
 8007282:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007284:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007288:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800728a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800728c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800728e:	bf54      	ite	pl
 8007290:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007292:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007296:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8007298:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800729a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800729c:	bf54      	ite	pl
 800729e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80072a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80072a4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80072a6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80072a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80072aa:	bf54      	ite	pl
 80072ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80072ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80072b2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80072b4:	3301      	adds	r3, #1
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	f47f af3e 	bne.w	8007138 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80072bc:	b003      	add	sp, #12
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80072c2:	2400      	movs	r4, #0
 80072c4:	e7d4      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072c6:	2401      	movs	r4, #1
 80072c8:	e7d2      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072ca:	2402      	movs	r4, #2
 80072cc:	e7d0      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072ce:	2403      	movs	r4, #3
 80072d0:	e7ce      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072d2:	2404      	movs	r4, #4
 80072d4:	e7cc      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072d6:	2405      	movs	r4, #5
 80072d8:	e7ca      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072da:	2406      	movs	r4, #6
 80072dc:	e7c8      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072de:	2407      	movs	r4, #7
 80072e0:	e7c6      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072e2:	2408      	movs	r4, #8
 80072e4:	e7c4      	b.n	8007270 <HAL_GPIO_Init+0x144>
 80072e6:	bf00      	nop
 80072e8:	40013c00 	.word	0x40013c00
 80072ec:	40020000 	.word	0x40020000
 80072f0:	40023800 	.word	0x40023800

080072f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80072f8:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80072fa:	4c4a      	ldr	r4, [pc, #296]	; (8007424 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80072fc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800742c <HAL_GPIO_DeInit+0x138>
 8007300:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007430 <HAL_GPIO_DeInit+0x13c>
 8007304:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007434 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8007308:	2301      	movs	r3, #1
 800730a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800730e:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8007312:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8007316:	d16e      	bne.n	80073f6 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8007318:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800731c:	f002 0c03 	and.w	ip, r2, #3
 8007320:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007322:	4b41      	ldr	r3, [pc, #260]	; (8007428 <HAL_GPIO_DeInit+0x134>)
 8007324:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007328:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800732c:	4298      	cmp	r0, r3
 800732e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007332:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8007336:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800733a:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800733e:	d05f      	beq.n	8007400 <HAL_GPIO_DeInit+0x10c>
 8007340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007344:	4298      	cmp	r0, r3
 8007346:	d05d      	beq.n	8007404 <HAL_GPIO_DeInit+0x110>
 8007348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734c:	4298      	cmp	r0, r3
 800734e:	d05b      	beq.n	8007408 <HAL_GPIO_DeInit+0x114>
 8007350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007354:	4298      	cmp	r0, r3
 8007356:	d059      	beq.n	800740c <HAL_GPIO_DeInit+0x118>
 8007358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735c:	4298      	cmp	r0, r3
 800735e:	d057      	beq.n	8007410 <HAL_GPIO_DeInit+0x11c>
 8007360:	4548      	cmp	r0, r9
 8007362:	d057      	beq.n	8007414 <HAL_GPIO_DeInit+0x120>
 8007364:	4550      	cmp	r0, sl
 8007366:	d057      	beq.n	8007418 <HAL_GPIO_DeInit+0x124>
 8007368:	4558      	cmp	r0, fp
 800736a:	d057      	beq.n	800741c <HAL_GPIO_DeInit+0x128>
 800736c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007370:	4298      	cmp	r0, r3
 8007372:	d055      	beq.n	8007420 <HAL_GPIO_DeInit+0x12c>
 8007374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007378:	4298      	cmp	r0, r3
 800737a:	bf0c      	ite	eq
 800737c:	2309      	moveq	r3, #9
 800737e:	230a      	movne	r3, #10
 8007380:	fa03 f30c 	lsl.w	r3, r3, ip
 8007384:	4543      	cmp	r3, r8
 8007386:	d113      	bne.n	80073b0 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	ea23 0307 	bic.w	r3, r3, r7
 800738e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	ea23 0307 	bic.w	r3, r3, r7
 8007396:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007398:	68e3      	ldr	r3, [r4, #12]
 800739a:	ea23 0307 	bic.w	r3, r3, r7
 800739e:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	ea23 0307 	bic.w	r3, r3, r7
 80073a6:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80073a8:	68ab      	ldr	r3, [r5, #8]
 80073aa:	ea23 0306 	bic.w	r3, r3, r6
 80073ae:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073b0:	2603      	movs	r6, #3
 80073b2:	0053      	lsls	r3, r2, #1
 80073b4:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073b6:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073ba:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073be:	270f      	movs	r7, #15
 80073c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073c4:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073c8:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80073cc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073ce:	fa22 f506 	lsr.w	r5, r2, r6
 80073d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80073d6:	6a2e      	ldr	r6, [r5, #32]
 80073d8:	ea26 0707 	bic.w	r7, r6, r7
 80073dc:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073de:	68c5      	ldr	r5, [r0, #12]
 80073e0:	ea25 0503 	bic.w	r5, r5, r3
 80073e4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073e6:	6845      	ldr	r5, [r0, #4]
 80073e8:	ea25 050e 	bic.w	r5, r5, lr
 80073ec:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80073ee:	6885      	ldr	r5, [r0, #8]
 80073f0:	ea25 0303 	bic.w	r3, r5, r3
 80073f4:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80073f6:	3201      	adds	r2, #1
 80073f8:	2a10      	cmp	r2, #16
 80073fa:	d185      	bne.n	8007308 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80073fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007400:	2300      	movs	r3, #0
 8007402:	e7bd      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007404:	2301      	movs	r3, #1
 8007406:	e7bb      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007408:	2302      	movs	r3, #2
 800740a:	e7b9      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 800740c:	2303      	movs	r3, #3
 800740e:	e7b7      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007410:	2304      	movs	r3, #4
 8007412:	e7b5      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007414:	2305      	movs	r3, #5
 8007416:	e7b3      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007418:	2306      	movs	r3, #6
 800741a:	e7b1      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 800741c:	2307      	movs	r3, #7
 800741e:	e7af      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007420:	2308      	movs	r3, #8
 8007422:	e7ad      	b.n	8007380 <HAL_GPIO_DeInit+0x8c>
 8007424:	40013c00 	.word	0x40013c00
 8007428:	40020000 	.word	0x40020000
 800742c:	40021400 	.word	0x40021400
 8007430:	40021800 	.word	0x40021800
 8007434:	40021c00 	.word	0x40021c00

08007438 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007438:	6903      	ldr	r3, [r0, #16]
 800743a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800743c:	bf14      	ite	ne
 800743e:	2001      	movne	r0, #1
 8007440:	2000      	moveq	r0, #0
 8007442:	4770      	bx	lr

08007444 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007444:	b10a      	cbz	r2, 800744a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007446:	6181      	str	r1, [r0, #24]
  }
}
 8007448:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800744a:	0409      	lsls	r1, r1, #16
 800744c:	e7fb      	b.n	8007446 <HAL_GPIO_WritePin+0x2>

0800744e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800744e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007450:	ea01 0203 	and.w	r2, r1, r3
 8007454:	ea21 0103 	bic.w	r1, r1, r3
 8007458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800745c:	6181      	str	r1, [r0, #24]
}
 800745e:	4770      	bx	lr

08007460 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007460:	6803      	ldr	r3, [r0, #0]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	0791      	lsls	r1, r2, #30
 8007466:	d501      	bpl.n	800746c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007468:	2200      	movs	r2, #0
 800746a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	07d2      	lsls	r2, r2, #31
 8007470:	d403      	bmi.n	800747a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	f042 0201 	orr.w	r2, r2, #1
 8007478:	619a      	str	r2, [r3, #24]
  }
}
 800747a:	4770      	bx	lr

0800747c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800747c:	b530      	push	{r4, r5, lr}
 800747e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007480:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007484:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007486:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007488:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800748a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800748e:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007490:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007492:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800749a:	ea20 0002 	bic.w	r0, r0, r2
 800749e:	4303      	orrs	r3, r0
 80074a0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074a2:	bd30      	pop	{r4, r5, pc}
 80074a4:	03ff63ff 	.word	0x03ff63ff

080074a8 <I2C_IsErrorOccurred>:
{
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80074ac:	6803      	ldr	r3, [r0, #0]
{
 80074ae:	4605      	mov	r5, r0
 80074b0:	4688      	mov	r8, r1
 80074b2:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80074b4:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80074b6:	f014 0410 	ands.w	r4, r4, #16
 80074ba:	d079      	beq.n	80075b0 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074bc:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	0694      	lsls	r4, r2, #26
 80074cc:	d436      	bmi.n	800753c <I2C_IsErrorOccurred+0x94>
 80074ce:	b10e      	cbz	r6, 80074d4 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 80074d0:	2404      	movs	r4, #4
 80074d2:	e039      	b.n	8007548 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80074d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80074d8:	d0f6      	beq.n	80074c8 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074da:	f7fe fe7d 	bl	80061d8 <HAL_GetTick>
 80074de:	1bc0      	subs	r0, r0, r7
 80074e0:	4540      	cmp	r0, r8
 80074e2:	d802      	bhi.n	80074ea <I2C_IsErrorOccurred+0x42>
 80074e4:	f1b8 0f00 	cmp.w	r8, #0
 80074e8:	d1ed      	bne.n	80074c6 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80074ee:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074f2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80074f4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074f6:	0400      	lsls	r0, r0, #16
 80074f8:	d50a      	bpl.n	8007510 <I2C_IsErrorOccurred+0x68>
 80074fa:	0449      	lsls	r1, r1, #17
 80074fc:	d408      	bmi.n	8007510 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80074fe:	2a20      	cmp	r2, #32
 8007500:	d006      	beq.n	8007510 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007508:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800750a:	f7fe fe65 	bl	80061d8 <HAL_GetTick>
 800750e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	699c      	ldr	r4, [r3, #24]
 8007514:	f014 0420 	ands.w	r4, r4, #32
 8007518:	d1d5      	bne.n	80074c6 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800751a:	f7fe fe5d 	bl	80061d8 <HAL_GetTick>
 800751e:	1bc0      	subs	r0, r0, r7
 8007520:	2819      	cmp	r0, #25
 8007522:	d9f5      	bls.n	8007510 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007524:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8007526:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8007528:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800752c:	f043 0320 	orr.w	r3, r3, #32
 8007530:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007532:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007536:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800753a:	e7e9      	b.n	8007510 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 800753c:	2e00      	cmp	r6, #0
 800753e:	d1c7      	bne.n	80074d0 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007540:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8007542:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8007544:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007546:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800754c:	05d0      	lsls	r0, r2, #23
 800754e:	d505      	bpl.n	800755c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007550:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007554:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007558:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800755a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800755c:	0551      	lsls	r1, r2, #21
 800755e:	d505      	bpl.n	800756c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007560:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007564:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007568:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800756a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800756c:	0592      	lsls	r2, r2, #22
 800756e:	d521      	bpl.n	80075b4 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007570:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007574:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007578:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800757a:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 800757c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 800757e:	f7ff ff6f 	bl	8007460 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007582:	682a      	ldr	r2, [r5, #0]
 8007584:	6853      	ldr	r3, [r2, #4]
 8007586:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800758a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800758e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007598:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800759a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800759c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800759e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075a0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80075aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80075ae:	e003      	b.n	80075b8 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	4626      	mov	r6, r4
 80075b2:	e7c9      	b.n	8007548 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	d1e0      	bne.n	800757a <I2C_IsErrorOccurred+0xd2>
}
 80075b8:	4630      	mov	r0, r6
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080075be <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80075be:	b570      	push	{r4, r5, r6, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	079b      	lsls	r3, r3, #30
 80075cc:	d501      	bpl.n	80075d2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80075ce:	2000      	movs	r0, #0
}
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d2:	4632      	mov	r2, r6
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ff66 	bl	80074a8 <I2C_IsErrorOccurred>
 80075dc:	b9a0      	cbnz	r0, 8007608 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80075de:	1c6a      	adds	r2, r5, #1
 80075e0:	d0f1      	beq.n	80075c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e2:	f7fe fdf9 	bl	80061d8 <HAL_GetTick>
 80075e6:	1b80      	subs	r0, r0, r6
 80075e8:	42a8      	cmp	r0, r5
 80075ea:	d801      	bhi.n	80075f0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	d1ea      	bne.n	80075c6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075f2:	f043 0320 	orr.w	r3, r3, #32
 80075f6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	2320      	movs	r3, #32
 80075fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fe:	2300      	movs	r3, #0
 8007600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007604:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007608:	2001      	movs	r0, #1
 800760a:	e7e1      	b.n	80075d0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800760c <I2C_WaitOnFlagUntilTimeout>:
{
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	9f06      	ldr	r7, [sp, #24]
 8007612:	4604      	mov	r4, r0
 8007614:	4688      	mov	r8, r1
 8007616:	4616      	mov	r6, r2
 8007618:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	6993      	ldr	r3, [r2, #24]
 800761e:	ea38 0303 	bics.w	r3, r8, r3
 8007622:	bf0c      	ite	eq
 8007624:	2301      	moveq	r3, #1
 8007626:	2300      	movne	r3, #0
 8007628:	42b3      	cmp	r3, r6
 800762a:	d001      	beq.n	8007630 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800762c:	2000      	movs	r0, #0
 800762e:	e015      	b.n	800765c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007630:	1c6b      	adds	r3, r5, #1
 8007632:	d0f3      	beq.n	800761c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007634:	f7fe fdd0 	bl	80061d8 <HAL_GetTick>
 8007638:	1bc0      	subs	r0, r0, r7
 800763a:	42a8      	cmp	r0, r5
 800763c:	d801      	bhi.n	8007642 <I2C_WaitOnFlagUntilTimeout+0x36>
 800763e:	2d00      	cmp	r5, #0
 8007640:	d1eb      	bne.n	800761a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007644:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007646:	f043 0320 	orr.w	r3, r3, #32
 800764a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800764c:	2320      	movs	r3, #32
 800764e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007652:	2300      	movs	r3, #0
 8007654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007658:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007660 <I2C_RequestMemoryWrite>:
{
 8007660:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007664:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <I2C_RequestMemoryWrite+0x68>)
{
 8007668:	4605      	mov	r5, r0
 800766a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	b2f2      	uxtb	r2, r6
 8007670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8007674:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007678:	f7ff ff00 	bl	800747c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800767c:	4628      	mov	r0, r5
 800767e:	4642      	mov	r2, r8
 8007680:	4639      	mov	r1, r7
 8007682:	f7ff ff9c 	bl	80075be <I2C_WaitOnTXISFlagUntilTimeout>
 8007686:	b118      	cbz	r0, 8007690 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8007688:	2001      	movs	r0, #1
}
 800768a:	b002      	add	sp, #8
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007690:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007692:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007694:	d10d      	bne.n	80076b2 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007696:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007698:	2200      	movs	r2, #0
 800769a:	2180      	movs	r1, #128	; 0x80
 800769c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800769e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076a0:	463b      	mov	r3, r7
 80076a2:	f8cd 8000 	str.w	r8, [sp]
 80076a6:	f7ff ffb1 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80076aa:	3800      	subs	r0, #0
 80076ac:	bf18      	it	ne
 80076ae:	2001      	movne	r0, #1
 80076b0:	e7eb      	b.n	800768a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076b2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b4:	4639      	mov	r1, r7
 80076b6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ba:	4642      	mov	r2, r8
 80076bc:	f7ff ff7f 	bl	80075be <I2C_WaitOnTXISFlagUntilTimeout>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1e1      	bne.n	8007688 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	e7e6      	b.n	8007696 <I2C_RequestMemoryWrite+0x36>
 80076c8:	80002000 	.word	0x80002000

080076cc <I2C_RequestMemoryRead>:
{
 80076cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076d0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076d2:	4b18      	ldr	r3, [pc, #96]	; (8007734 <I2C_RequestMemoryRead+0x68>)
{
 80076d4:	4605      	mov	r5, r0
 80076d6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	b2f2      	uxtb	r2, r6
 80076dc:	2300      	movs	r3, #0
{
 80076de:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076e2:	f7ff fecb 	bl	800747c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e6:	4628      	mov	r0, r5
 80076e8:	4642      	mov	r2, r8
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7ff ff67 	bl	80075be <I2C_WaitOnTXISFlagUntilTimeout>
 80076f0:	b118      	cbz	r0, 80076fa <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80076f2:	2001      	movs	r0, #1
}
 80076f4:	b002      	add	sp, #8
 80076f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fa:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076fc:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fe:	d10d      	bne.n	800771c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007700:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007702:	2200      	movs	r2, #0
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007708:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800770a:	463b      	mov	r3, r7
 800770c:	f8cd 8000 	str.w	r8, [sp]
 8007710:	f7ff ff7c 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007714:	3800      	subs	r0, #0
 8007716:	bf18      	it	ne
 8007718:	2001      	movne	r0, #1
 800771a:	e7eb      	b.n	80076f4 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800771c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771e:	4639      	mov	r1, r7
 8007720:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007722:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007724:	4642      	mov	r2, r8
 8007726:	f7ff ff4a 	bl	80075be <I2C_WaitOnTXISFlagUntilTimeout>
 800772a:	2800      	cmp	r0, #0
 800772c:	d1e1      	bne.n	80076f2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	e7e6      	b.n	8007700 <I2C_RequestMemoryRead+0x34>
 8007732:	bf00      	nop
 8007734:	80002000 	.word	0x80002000

08007738 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	460d      	mov	r5, r1
 800773e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	069b      	lsls	r3, r3, #26
 8007746:	d501      	bpl.n	800774c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007748:	2000      	movs	r0, #0
}
 800774a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800774c:	4632      	mov	r2, r6
 800774e:	4629      	mov	r1, r5
 8007750:	4620      	mov	r0, r4
 8007752:	f7ff fea9 	bl	80074a8 <I2C_IsErrorOccurred>
 8007756:	b990      	cbnz	r0, 800777e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007758:	f7fe fd3e 	bl	80061d8 <HAL_GetTick>
 800775c:	1b80      	subs	r0, r0, r6
 800775e:	42a8      	cmp	r0, r5
 8007760:	d801      	bhi.n	8007766 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007762:	2d00      	cmp	r5, #0
 8007764:	d1ec      	bne.n	8007740 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007766:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007768:	f043 0320 	orr.w	r3, r3, #32
 800776c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800776e:	2320      	movs	r3, #32
 8007770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007774:	2300      	movs	r3, #0
 8007776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800777a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800777e:	2001      	movs	r0, #1
 8007780:	e7e3      	b.n	800774a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08007782 <HAL_I2C_Init>:
{
 8007782:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007784:	4604      	mov	r4, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d04a      	beq.n	8007820 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800778a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800778e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007792:	b91b      	cbnz	r3, 800779c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007794:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007798:	f7fc f9fa 	bl	8003b90 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800779c:	2324      	movs	r3, #36	; 0x24
 800779e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077ac:	6862      	ldr	r2, [r4, #4]
 80077ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077bc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077c0:	2901      	cmp	r1, #1
 80077c2:	d124      	bne.n	800780e <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077c8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ca:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077cc:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80077d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077d6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80077e4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077e6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80077ec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077ee:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80077fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007800:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007802:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007806:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007808:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800780c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800780e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007812:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007814:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007816:	d1d8      	bne.n	80077ca <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	e7d4      	b.n	80077ca <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8007820:	2001      	movs	r0, #1
 8007822:	e7f3      	b.n	800780c <HAL_I2C_Init+0x8a>

08007824 <HAL_I2C_DeInit>:
{
 8007824:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007826:	4604      	mov	r4, r0
 8007828:	b198      	cbz	r0, 8007852 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800782a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800782c:	2324      	movs	r3, #36	; 0x24
 800782e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800783a:	f7fc fa0b 	bl	8003c54 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783e:	2000      	movs	r0, #0
 8007840:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8007842:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007846:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800784a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800784c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007850:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007852:	2001      	movs	r0, #1
 8007854:	e7fc      	b.n	8007850 <HAL_I2C_DeInit+0x2c>

08007856 <HAL_I2C_Mem_Write>:
{
 8007856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	b085      	sub	sp, #20
 800785c:	469b      	mov	fp, r3
 800785e:	4604      	mov	r4, r0
 8007860:	460f      	mov	r7, r1
 8007862:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8007866:	4692      	mov	sl, r2
 8007868:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800786c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800786e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007872:	2b20      	cmp	r3, #32
 8007874:	f040 80a3 	bne.w	80079be <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8007878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800787a:	b10b      	cbz	r3, 8007880 <HAL_I2C_Mem_Write+0x2a>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	b933      	cbnz	r3, 800788e <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007884:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007886:	2001      	movs	r0, #1
}
 8007888:	b005      	add	sp, #20
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800788e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007892:	2b01      	cmp	r3, #1
 8007894:	f000 8093 	beq.w	80079be <HAL_I2C_Mem_Write+0x168>
 8007898:	2501      	movs	r5, #1
 800789a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800789e:	f7fe fc9b 	bl	80061d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078a2:	2319      	movs	r3, #25
 80078a4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80078a6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078a8:	462a      	mov	r2, r5
 80078aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7ff feac 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80078b4:	4680      	mov	r8, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d1e5      	bne.n	8007886 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078ba:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80078bc:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078be:	4652      	mov	r2, sl
 80078c0:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80078cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ce:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078d0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80078d2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80078d4:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078d6:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80078da:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078dc:	465b      	mov	r3, fp
 80078de:	f7ff febf 	bl	8007660 <I2C_RequestMemoryWrite>
 80078e2:	b110      	cbz	r0, 80078ea <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80078e4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80078e8:	e7cd      	b.n	8007886 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d955      	bls.n	800799e <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078f2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078f8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078fc:	4639      	mov	r1, r7
 80078fe:	4620      	mov	r0, r4
 8007900:	f7ff fdbc 	bl	800747c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007904:	4632      	mov	r2, r6
 8007906:	4649      	mov	r1, r9
 8007908:	4620      	mov	r0, r4
 800790a:	f7ff fe58 	bl	80075be <I2C_WaitOnTXISFlagUntilTimeout>
 800790e:	2800      	cmp	r0, #0
 8007910:	d1b9      	bne.n	8007886 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007914:	6822      	ldr	r2, [r4, #0]
 8007916:	f813 1b01 	ldrb.w	r1, [r3], #1
 800791a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800791c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800791e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007922:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007924:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007926:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007928:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800792a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800792c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800792e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007930:	b29b      	uxth	r3, r3
 8007932:	b1ab      	cbz	r3, 8007960 <HAL_I2C_Mem_Write+0x10a>
 8007934:	b9a2      	cbnz	r2, 8007960 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007936:	464b      	mov	r3, r9
 8007938:	2180      	movs	r1, #128	; 0x80
 800793a:	4620      	mov	r0, r4
 800793c:	9600      	str	r6, [sp, #0]
 800793e:	f7ff fe65 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007942:	2800      	cmp	r0, #0
 8007944:	d19f      	bne.n	8007886 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	2bff      	cmp	r3, #255	; 0xff
 800794c:	d92f      	bls.n	80079ae <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800794e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007954:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007956:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007958:	4639      	mov	r1, r7
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff fd8e 	bl	800747c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007960:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1cd      	bne.n	8007904 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007968:	4632      	mov	r2, r6
 800796a:	4649      	mov	r1, r9
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff fee3 	bl	8007738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007972:	2800      	cmp	r0, #0
 8007974:	d187      	bne.n	8007886 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	2120      	movs	r1, #32
 800797a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007982:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007986:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007990:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007994:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007998:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800799c:	e774      	b.n	8007888 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800799e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079a4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80079a6:	b292      	uxth	r2, r2
 80079a8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	e7a6      	b.n	80078fc <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80079ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079b4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80079b6:	b292      	uxth	r2, r2
 80079b8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	e7cc      	b.n	8007958 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80079be:	2002      	movs	r0, #2
 80079c0:	e762      	b.n	8007888 <HAL_I2C_Mem_Write+0x32>
	...

080079c4 <HAL_I2C_Mem_Read>:
{
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	b085      	sub	sp, #20
 80079ca:	469b      	mov	fp, r3
 80079cc:	4604      	mov	r4, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80079d4:	4692      	mov	sl, r2
 80079d6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80079da:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80079dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	f040 80a7 	bne.w	8007b34 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80079e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e8:	b10b      	cbz	r3, 80079ee <HAL_I2C_Mem_Read+0x2a>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	b933      	cbnz	r3, 80079fc <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80079f4:	2001      	movs	r0, #1
}
 80079f6:	b005      	add	sp, #20
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80079fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f000 8097 	beq.w	8007b34 <HAL_I2C_Mem_Read+0x170>
 8007a06:	2501      	movs	r5, #1
 8007a08:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007a0c:	f7fe fbe4 	bl	80061d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a10:	2319      	movs	r3, #25
 8007a12:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007a14:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a16:	462a      	mov	r2, r5
 8007a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fdf5 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007a22:	4680      	mov	r8, r0
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d1e5      	bne.n	80079f4 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a28:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8007a2a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a34:	2340      	movs	r3, #64	; 0x40
 8007a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8007a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a3c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a3e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007a40:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a42:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a44:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8007a48:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a4a:	465b      	mov	r3, fp
 8007a4c:	f7ff fe3e 	bl	80076cc <I2C_RequestMemoryRead>
 8007a50:	b110      	cbz	r0, 8007a58 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8007a52:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007a56:	e7cd      	b.n	80079f4 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2bff      	cmp	r3, #255	; 0xff
 8007a5e:	4b36      	ldr	r3, [pc, #216]	; (8007b38 <HAL_I2C_Mem_Read+0x174>)
 8007a60:	d958      	bls.n	8007b14 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a62:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a6a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f7ff fd04 	bl	800747c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a74:	464b      	mov	r3, r9
 8007a76:	2200      	movs	r2, #0
 8007a78:	2104      	movs	r1, #4
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	9600      	str	r6, [sp, #0]
 8007a7e:	f7ff fdc5 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1b6      	bne.n	80079f4 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007a90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007a92:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007a94:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007a96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007a98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007a9a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007a9c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007a9e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	b1ab      	cbz	r3, 8007ad6 <HAL_I2C_Mem_Read+0x112>
 8007aaa:	b9a2      	cbnz	r2, 8007ad6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aac:	464b      	mov	r3, r9
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	9600      	str	r6, [sp, #0]
 8007ab4:	f7ff fdaa 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d19b      	bne.n	80079f4 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007abc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2bff      	cmp	r3, #255	; 0xff
 8007ac2:	d92f      	bls.n	8007b24 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ac4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007aca:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007acc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7ff fcd3 	bl	800747c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007ad6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ca      	bne.n	8007a74 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ade:	4632      	mov	r2, r6
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff fe28 	bl	8007738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d183      	bne.n	80079f4 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	2120      	movs	r1, #32
 8007af0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007af8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007afc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007b00:	f022 0201 	bic.w	r2, r2, #1
 8007b04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007b0a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b0e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007b12:	e770      	b.n	80079f6 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007b14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	e7a3      	b.n	8007a6c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8007b24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b2a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007b2c:	b292      	uxth	r2, r2
 8007b2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	e7cc      	b.n	8007ace <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8007b34:	2002      	movs	r0, #2
 8007b36:	e75e      	b.n	80079f6 <HAL_I2C_Mem_Read+0x32>
 8007b38:	80002400 	.word	0x80002400

08007b3c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b3c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8007b3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b40:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b42:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8007b44:	b103      	cbz	r3, 8007b48 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8007b46:	4718      	bx	r3
}
 8007b48:	4770      	bx	lr

08007b4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b4a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	b2dc      	uxtb	r4, r3
 8007b54:	d11d      	bne.n	8007b92 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d019      	beq.n	8007b92 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b5e:	2324      	movs	r3, #36	; 0x24
 8007b60:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b64:	6803      	ldr	r3, [r0, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4311      	orrs	r1, r2
 8007b7a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	f042 0201 	orr.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b84:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007b86:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007b8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007b8e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007b90:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007b92:	2002      	movs	r0, #2
 8007b94:	e7fc      	b.n	8007b90 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b96:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	b2dc      	uxtb	r4, r3
 8007ba0:	d11c      	bne.n	8007bdc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ba2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d018      	beq.n	8007bdc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007baa:	2324      	movs	r3, #36	; 0x24
 8007bac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007bba:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bbc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bc0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007bc4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007bd0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007bd4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007bd8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007bda:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007bdc:	2002      	movs	r0, #2
 8007bde:	e7fc      	b.n	8007bda <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007be0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	3801      	subs	r0, #1
 8007be4:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8007be6:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8007be8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8007bec:	462f      	mov	r7, r5
 8007bee:	4425      	add	r5, r4
 8007bf0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007bf4:	d822      	bhi.n	8007c3c <JPEG_Bits_To_SizeCodes+0x5c>
 8007bf6:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8007bf8:	b954      	cbnz	r4, 8007c10 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 8007bfa:	3601      	adds	r6, #1
 8007bfc:	2e11      	cmp	r6, #17
 8007bfe:	d1f3      	bne.n	8007be8 <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8007c00:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007c02:	2601      	movs	r6, #1
  *LastK = p;
 8007c04:	601d      	str	r5, [r3, #0]
  code = 0;
 8007c06:	4623      	mov	r3, r4
  si = Huffsize[0];
 8007c08:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8007c0a:	5d08      	ldrb	r0, [r1, r4]
 8007c0c:	b9a0      	cbnz	r0, 8007c38 <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8007c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 8007c10:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 8007c12:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 8007c16:	e7ef      	b.n	8007bf8 <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 8007c18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 8007c1c:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007c1e:	5d08      	ldrb	r0, [r1, r4]
 8007c20:	193b      	adds	r3, r7, r4
 8007c22:	42a8      	cmp	r0, r5
 8007c24:	d0f8      	beq.n	8007c18 <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 8007c26:	2d1f      	cmp	r5, #31
 8007c28:	d808      	bhi.n	8007c3c <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007c2a:	fa06 f005 	lsl.w	r0, r6, r5
 8007c2e:	4298      	cmp	r0, r3
 8007c30:	d904      	bls.n	8007c3c <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 8007c32:	005b      	lsls	r3, r3, #1
    si++;
 8007c34:	3501      	adds	r5, #1
 8007c36:	e7e8      	b.n	8007c0a <JPEG_Bits_To_SizeCodes+0x2a>
 8007c38:	1b1f      	subs	r7, r3, r4
 8007c3a:	e7f0      	b.n	8007c1e <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	e7e6      	b.n	8007c0e <JPEG_Bits_To_SizeCodes+0x2e>

08007c40 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c42:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8007c46:	460d      	mov	r5, r1
 8007c48:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007c4a:	ab01      	add	r3, sp, #4
 8007c4c:	aa43      	add	r2, sp, #268	; 0x10c
 8007c4e:	a902      	add	r1, sp, #8
 8007c50:	f7ff ffc6 	bl	8007be0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007c54:	b938      	cbnz	r0, 8007c66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8007c56:	9e01      	ldr	r6, [sp, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	f104 0110 	add.w	r1, r4, #16
 8007c5e:	3610      	adds	r6, #16
 8007c60:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007c62:	42a1      	cmp	r1, r4
 8007c64:	d102      	bne.n	8007c6c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007c66:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007c6c:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007c70:	2e0b      	cmp	r6, #11
 8007c72:	d80a      	bhi.n	8007c8a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007c74:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007c78:	f852 cb04 	ldr.w	ip, [r2], #4
 8007c7c:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007c80:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007c84:	3f01      	subs	r7, #1
 8007c86:	55af      	strb	r7, [r5, r6]
      k++;
 8007c88:	e7eb      	b.n	8007c62 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e7eb      	b.n	8007c66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08007c8e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007c94:	681c      	ldr	r4, [r3, #0]
{
 8007c96:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007c98:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d125      	bne.n	8007cec <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007ca0:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007ca4:	a901      	add	r1, sp, #4
 8007ca6:	f7ff ffcb 	bl	8007c40 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007caa:	b9e8      	cbnz	r0, 8007ce8 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007cac:	aa01      	add	r2, sp, #4
 8007cae:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8007cb2:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007cb6:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007cb8:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007cba:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007cbc:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 8007cbe:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007cc0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 8007cc4:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007cc6:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007cc8:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007ccc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007cd0:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007cd2:	7b13      	ldrb	r3, [r2, #12]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007cda:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007ce0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007ce4:	42b4      	cmp	r4, r6
 8007ce6:	d1e9      	bne.n	8007cbc <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007ce8:	b011      	add	sp, #68	; 0x44
 8007cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007cec:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d102      	bne.n	8007cfa <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007cf4:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 8007cf8:	e7d4      	b.n	8007ca4 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e7f4      	b.n	8007ce8 <JPEG_Set_HuffDC_Mem+0x5a>

08007cfe <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007d02:	6804      	ldr	r4, [r0, #0]
{
 8007d04:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 8007d08:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007d0a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d115      	bne.n	8007d3e <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007d12:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007d16:	466b      	mov	r3, sp
 8007d18:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 8007d1c:	a901      	add	r1, sp, #4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff ff5e 	bl	8007be0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d15d      	bne.n	8007de4 <JPEG_Set_HuffAC_Mem+0xe6>
 8007d28:	9b00      	ldr	r3, [sp, #0]
 8007d2a:	460e      	mov	r6, r1
 8007d2c:	f105 0c10 	add.w	ip, r5, #16
 8007d30:	4617      	mov	r7, r2
 8007d32:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 8007d34:	f04f 0e0a 	mov.w	lr, #10
 8007d38:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007d3a:	ad42      	add	r5, sp, #264	; 0x108
 8007d3c:	e021      	b.n	8007d82 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007d3e:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d110      	bne.n	8007d68 <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007d46:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 8007d4a:	e7e4      	b.n	8007d16 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007d4c:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 8007d50:	b163      	cbz	r3, 8007d6c <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007d52:	2bf0      	cmp	r3, #240	; 0xf0
 8007d54:	d04a      	beq.n	8007dec <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 8007d56:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 8007d5a:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007d64:	2ba1      	cmp	r3, #161	; 0xa1
 8007d66:	d902      	bls.n	8007d6e <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007d68:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 8007d6a:	e03b      	b.n	8007de4 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 8007d6c:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007d6e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007d72:	f857 8b04 	ldr.w	r8, [r7], #4
 8007d76:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007d7a:	f816 2b01 	ldrb.w	r2, [r6], #1
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8007d82:	4561      	cmp	r1, ip
 8007d84:	d1e2      	bne.n	8007d4c <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007d86:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8007d8a:	a942      	add	r1, sp, #264	; 0x108
 8007d8c:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 8007d90:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007d92:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007d98:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 8007d9c:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8007da0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007da2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8007da6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007da8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8007dac:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007dae:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8007db2:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007db4:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 8007db8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007dba:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 8007dbe:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007dc0:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007dc2:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007dc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007dca:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007dcc:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007dd6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ddc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007de0:	42b4      	cmp	r4, r6
 8007de2:	d1e7      	bne.n	8007db4 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007de4:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 8007de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 8007dec:	23a1      	movs	r3, #161	; 0xa1
 8007dee:	e7be      	b.n	8007d6e <JPEG_Set_HuffAC_Mem+0x70>

08007df0 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007df0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007df6:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007df8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007dfa:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007dfc:	f002 0203 	and.w	r2, r2, #3
 8007e00:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	bf0c      	ite	eq
 8007e06:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007e0a:	f022 0208 	bicne.w	r2, r2, #8
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e1a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8007e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e22:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007e48:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007e4a:	f002 020c 	and.w	r2, r2, #12
 8007e4e:	2a08      	cmp	r2, #8
 8007e50:	d104      	bne.n	8007e5c <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e54:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007e58:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e5a:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007e5c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007e5e:	f002 020c 	and.w	r2, r2, #12
 8007e62:	2a0c      	cmp	r2, #12
 8007e64:	d1f9      	bne.n	8007e5a <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e68:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007e6c:	e7f4      	b.n	8007e58 <JPEG_Init_Process+0x68>
	...

08007e70 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8007e72:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8007e74:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d927      	bls.n	8007eca <JPEG_DMA_StartProcess+0x5a>
 8007e7a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007e7c:	2903      	cmp	r1, #3
 8007e7e:	d924      	bls.n	8007eca <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8007e80:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007e82:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8007e86:	4d1a      	ldr	r5, [pc, #104]	; (8007ef0 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8007e88:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8007e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8007e90:	4e18      	ldr	r6, [pc, #96]	; (8007ef4 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8007e92:	4f19      	ldr	r7, [pc, #100]	; (8007ef8 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8007e94:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8007e96:	6802      	ldr	r2, [r0, #0]
 8007e98:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007e9a:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8007e9c:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 8007ea0:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8007ea4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007ea6:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8007ea8:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8007eaa:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8007eac:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8007eae:	4e13      	ldr	r6, [pc, #76]	; (8007efc <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8007eb0:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8007eb2:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007eb4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007eb6:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8007eb8:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007eba:	69a1      	ldr	r1, [r4, #24]
 8007ebc:	f7fe fb48 	bl	8006550 <HAL_DMA_Start_IT>
 8007ec0:	b128      	cbz	r0, 8007ece <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007ec2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ec4:	f043 0304 	orr.w	r3, r3, #4
 8007ec8:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e00e      	b.n	8007eec <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007ece:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ed0:	6821      	ldr	r1, [r4, #0]
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	69e2      	ldr	r2, [r4, #28]
 8007ed6:	3144      	adds	r1, #68	; 0x44
 8007ed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007eda:	f7fe fb39 	bl	8006550 <HAL_DMA_Start_IT>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1ef      	bne.n	8007ec2 <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8007ee2:	6822      	ldr	r2, [r4, #0]
 8007ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007ee6:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8007eea:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0800845d 	.word	0x0800845d
 8007ef4:	08008341 	.word	0x08008341
 8007ef8:	08008911 	.word	0x08008911
 8007efc:	08008901 	.word	0x08008901

08007f00 <HAL_JPEG_Init>:
{
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007f02:	4604      	mov	r4, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f000 811f 	beq.w	8008148 <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007f0a:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8007f0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f12:	b91b      	cbnz	r3, 8007f1c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007f14:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007f18:	f7fb febe 	bl	8003c98 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007f1c:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	498a      	ldr	r1, [pc, #552]	; (800814c <HAL_JPEG_Init+0x24c>)
 8007f22:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007f26:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007f2c:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007f3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007f40:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8007f44:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8007f46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007f48:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8007f4c:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f54:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007f56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f5c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007f5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007f60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f64:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007f66:	4b7a      	ldr	r3, [pc, #488]	; (8008150 <HAL_JPEG_Init+0x250>)
 8007f68:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007f6a:	4b7a      	ldr	r3, [pc, #488]	; (8008154 <HAL_JPEG_Init+0x254>)
 8007f6c:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8007f6e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007f70:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007f74:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 8007f76:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007f78:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007f7a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007f7c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007f80:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007f82:	4333      	orrs	r3, r6
 8007f84:	7c4e      	ldrb	r6, [r1, #17]
 8007f86:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007f8a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007f8e:	42a8      	cmp	r0, r5
 8007f90:	d1f0      	bne.n	8007f74 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007f92:	4b71      	ldr	r3, [pc, #452]	; (8008158 <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007f94:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8007f98:	4970      	ldr	r1, [pc, #448]	; (800815c <HAL_JPEG_Init+0x25c>)
 8007f9a:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007f9e:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 8007fa2:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007fa6:	460d      	mov	r5, r1
 8007fa8:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007faa:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 8007fae:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8007fb2:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007fb6:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 8007fb8:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007fba:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007fbe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007fc0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007fc4:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007fc8:	ea43 030c 	orr.w	r3, r3, ip
 8007fcc:	f895 c011 	ldrb.w	ip, [r5, #17]
 8007fd0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007fd4:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007fd8:	42be      	cmp	r6, r7
 8007fda:	d1ec      	bne.n	8007fb6 <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 8007fdc:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007fe0:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007fe8:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8007fec:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 8007ff0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007ff4:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 8007ff8:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ffa:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007ffe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008000:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008004:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008008:	4333      	orrs	r3, r6
 800800a:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800800e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008012:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8008016:	4285      	cmp	r5, r0
 8008018:	d1ec      	bne.n	8007ff4 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800801a:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800801e:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 8008022:	484f      	ldr	r0, [pc, #316]	; (8008160 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 8008024:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008026:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800802a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800802e:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8008032:	4003      	ands	r3, r0
  *address = value;
 8008034:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008038:	2301      	movs	r3, #1
 800803a:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800803e:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8008042:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8008046:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800804a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800804e:	4b45      	ldr	r3, [pc, #276]	; (8008164 <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 8008050:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008052:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 8008056:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800805a:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800805e:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008060:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8008064:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 8008068:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800806c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8008070:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8008074:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 8008078:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 800807c:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800807e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 8008082:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 8008086:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800808a:	4937      	ldr	r1, [pc, #220]	; (8008168 <HAL_JPEG_Init+0x268>)
 800808c:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 800808e:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008092:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8008096:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800809a:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800809e:	4b33      	ldr	r3, [pc, #204]	; (800816c <HAL_JPEG_Init+0x26c>)
 80080a0:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 80080a4:	4b32      	ldr	r3, [pc, #200]	; (8008170 <HAL_JPEG_Init+0x270>)
 80080a6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 80080aa:	4b32      	ldr	r3, [pc, #200]	; (8008174 <HAL_JPEG_Init+0x274>)
 80080ac:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 80080b0:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 80080b4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80080b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 80080ba:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80080be:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 80080c2:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80080c4:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80080c8:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80080ca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80080ce:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80080d2:	4333      	orrs	r3, r6
 80080d4:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 80080d8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80080dc:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 80080e0:	42a8      	cmp	r0, r5
 80080e2:	d1ec      	bne.n	80080be <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80080e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080e8:	491c      	ldr	r1, [pc, #112]	; (800815c <HAL_JPEG_Init+0x25c>)
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff fe07 	bl	8007cfe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80080f0:	b110      	cbz	r0, 80080f8 <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80080f2:	2001      	movs	r0, #1
 80080f4:	6520      	str	r0, [r4, #80]	; 0x50
}
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 80080f8:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80080fa:	4620      	mov	r0, r4
 80080fc:	491a      	ldr	r1, [pc, #104]	; (8008168 <HAL_JPEG_Init+0x268>)
 80080fe:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8008102:	f7ff fdfc 	bl	8007cfe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008106:	2800      	cmp	r0, #0
 8008108:	d1f3      	bne.n	80080f2 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 800810a:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800810c:	4620      	mov	r0, r4
 800810e:	490f      	ldr	r1, [pc, #60]	; (800814c <HAL_JPEG_Init+0x24c>)
 8008110:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8008114:	f7ff fdbb 	bl	8007c8e <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008118:	2800      	cmp	r0, #0
 800811a:	d1ea      	bne.n	80080f2 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 800811c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800811e:	4620      	mov	r0, r4
 8008120:	4915      	ldr	r1, [pc, #84]	; (8008178 <HAL_JPEG_Init+0x278>)
 8008122:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8008126:	f7ff fdb2 	bl	8007c8e <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e1      	bne.n	80080f2 <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	6853      	ldr	r3, [r2, #4]
 8008132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008136:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008138:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800813a:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800813c:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800813e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008142:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8008144:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 8008146:	e7d6      	b.n	80080f6 <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 8008148:	2001      	movs	r0, #1
 800814a:	e7d4      	b.n	80080f6 <HAL_JPEG_Init+0x1f6>
 800814c:	08023715 	.word	0x08023715
 8008150:	08023731 	.word	0x08023731
 8008154:	080236b9 	.word	0x080236b9
 8008158:	0b0a0908 	.word	0x0b0a0908
 800815c:	08023607 	.word	0x08023607
 8008160:	ffff0000 	.word	0xffff0000
 8008164:	09080706 	.word	0x09080706
 8008168:	08023555 	.word	0x08023555
 800816c:	01000404 	.word	0x01000404
 8008170:	05070403 	.word	0x05070403
 8008174:	04040201 	.word	0x04040201
 8008178:	080236f9 	.word	0x080236f9

0800817c <HAL_JPEG_GetInfo>:
{
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008180:	2800      	cmp	r0, #0
 8008182:	d06a      	beq.n	800825a <HAL_JPEG_GetInfo+0xde>
 8008184:	2900      	cmp	r1, #0
 8008186:	d068      	beq.n	800825a <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008188:	6804      	ldr	r4, [r0, #0]
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d13b      	bne.n	800820c <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008194:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008196:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008198:	6863      	ldr	r3, [r4, #4]
 800819a:	0c1b      	lsrs	r3, r3, #16
 800819c:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800819e:	68e3      	ldr	r3, [r4, #12]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80081a4:	680b      	ldr	r3, [r1, #0]
 80081a6:	f023 0320 	bic.w	r3, r3, #32
 80081aa:	2b10      	cmp	r3, #16
 80081ac:	d13b      	bne.n	8008226 <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80081ae:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80081b0:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80081b2:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80081b6:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80081b8:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80081ba:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80081bc:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80081c0:	d12f      	bne.n	8008222 <HAL_JPEG_GetInfo+0xa6>
 80081c2:	4313      	orrs	r3, r2
 80081c4:	071a      	lsls	r2, r3, #28
 80081c6:	d12e      	bne.n	8008226 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80081c8:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80081ca:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	3450      	adds	r4, #80	; 0x50
 80081d0:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8008260 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80081d4:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80081d6:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80081da:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 80081de:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80081e2:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 80081e6:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80081e8:	fa29 f206 	lsr.w	r2, r9, r6
 80081ec:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 80081ee:	2a01      	cmp	r2, #1
 80081f0:	d120      	bne.n	8008234 <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 80081f2:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 80081f4:	3608      	adds	r6, #8
 80081f6:	3701      	adds	r7, #1
 80081f8:	2e20      	cmp	r6, #32
 80081fa:	d1f5      	bne.n	80081e8 <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 80081fc:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80081fe:	2d40      	cmp	r5, #64	; 0x40
 8008200:	d1ed      	bne.n	80081de <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008202:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008204:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008206:	610b      	str	r3, [r1, #16]
}
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	f013 0303 	ands.w	r3, r3, #3
 8008212:	d0c0      	beq.n	8008196 <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d11d      	bne.n	800825a <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800821e:	2330      	movs	r3, #48	; 0x30
 8008220:	e7b9      	b.n	8008196 <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008222:	2d03      	cmp	r5, #3
 8008224:	d001      	beq.n	800822a <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008226:	2300      	movs	r3, #0
 8008228:	e7cf      	b.n	80081ca <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800822a:	4313      	orrs	r3, r2
 800822c:	071b      	lsls	r3, r3, #28
 800822e:	d1fa      	bne.n	8008226 <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008230:	2301      	movs	r3, #1
 8008232:	e7ca      	b.n	80081ca <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008234:	fb0e fb02 	mul.w	fp, lr, r2
 8008238:	f897 a000 	ldrb.w	sl, [r7]
 800823c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800823e:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008242:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008246:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 8008248:	bf8b      	itete	hi
 800824a:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800824e:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 8008252:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008254:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008258:	e7cc      	b.n	80081f4 <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 800825a:	2001      	movs	r0, #1
 800825c:	e7d4      	b.n	8008208 <HAL_JPEG_GetInfo+0x8c>
 800825e:	bf00      	nop
 8008260:	08023771 	.word	0x08023771

08008264 <HAL_JPEG_Decode_DMA>:
{
 8008264:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008266:	4604      	mov	r4, r0
 8008268:	b348      	cbz	r0, 80082be <HAL_JPEG_Decode_DMA+0x5a>
 800826a:	b341      	cbz	r1, 80082be <HAL_JPEG_Decode_DMA+0x5a>
 800826c:	b33b      	cbz	r3, 80082be <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800826e:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 8008272:	2d01      	cmp	r5, #1
 8008274:	d028      	beq.n	80082c8 <HAL_JPEG_Decode_DMA+0x64>
 8008276:	2501      	movs	r5, #1
 8008278:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800827c:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 8008280:	2d01      	cmp	r5, #1
 8008282:	d11e      	bne.n	80082c2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008284:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008286:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008288:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800828c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800828e:	f025 050f 	bic.w	r5, r5, #15
 8008292:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008294:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8008296:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800829a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800829e:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 80082a0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80082a2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80082a4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80082a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 80082a8:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 80082aa:	f7ff fda1 	bl	8007df0 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80082ae:	f7ff fddf 	bl	8007e70 <JPEG_DMA_StartProcess>
 80082b2:	b128      	cbz	r0, 80082c0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80082b4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80082b6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80082ba:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 80082be:	2001      	movs	r0, #1
}
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 80082c2:	2300      	movs	r3, #0
 80082c4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 80082c8:	2002      	movs	r0, #2
 80082ca:	e7f9      	b.n	80082c0 <HAL_JPEG_Decode_DMA+0x5c>

080082cc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80082cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80082ce:	f003 030c 	and.w	r3, r3, #12
 80082d2:	2b0c      	cmp	r3, #12
 80082d4:	d117      	bne.n	8008306 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80082d6:	f011 0301 	ands.w	r3, r1, #1
 80082da:	d005      	beq.n	80082e8 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80082dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80082de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082e2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 80082e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80082e8:	0789      	lsls	r1, r1, #30
 80082ea:	d505      	bpl.n	80082f8 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80082ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 80082ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80082f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082f6:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80082f8:	6801      	ldr	r1, [r0, #0]
 80082fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80082fc:	ea22 0303 	bic.w	r3, r2, r3
 8008300:	630b      	str	r3, [r1, #48]	; 0x30
}
 8008302:	2000      	movs	r0, #0
 8008304:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008306:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008308:	f003 030c 	and.w	r3, r3, #12
 800830c:	2b08      	cmp	r3, #8
 800830e:	d1f8      	bne.n	8008302 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008310:	f011 0301 	ands.w	r3, r1, #1
 8008314:	d004      	beq.n	8008320 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008316:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800831c:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800831e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008320:	078a      	lsls	r2, r1, #30
 8008322:	d5e9      	bpl.n	80082f8 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008324:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008326:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800832a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800832e:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008330:	e7e2      	b.n	80082f8 <HAL_JPEG_Pause+0x2c>

08008332 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008332:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008334:	6282      	str	r2, [r0, #40]	; 0x28
}
 8008336:	4770      	bx	lr

08008338 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008338:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800833a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800833c:	4770      	bx	lr

0800833e <HAL_JPEG_EncodeCpltCallback>:
 800833e:	4770      	bx	lr

08008340 <JPEG_DMAErrorCallback>:
{
 8008340:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008342:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008344:	f7fe fa12 	bl	800676c <HAL_DMA_GetError>
 8008348:	2802      	cmp	r0, #2
 800834a:	d016      	beq.n	800837a <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800834c:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800834e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800835a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8008360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008362:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008368:	2301      	movs	r3, #1
 800836a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800836e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008370:	f043 0304 	orr.w	r3, r3, #4
 8008374:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 8008376:	f7f9 f9fd 	bl	8001774 <HAL_JPEG_ErrorCallback>
}
 800837a:	bd10      	pop	{r4, pc}

0800837c <JPEG_ReadInputData>:
{
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800837e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8008380:	4604      	mov	r4, r0
 8008382:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008384:	bb35      	cbnz	r5, 80083d4 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008386:	2101      	movs	r1, #1
 8008388:	f7ff ffa0 	bl	80082cc <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800838c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800838e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8008392:	d11e      	bne.n	80083d2 <JPEG_ReadInputData+0x56>
 8008394:	b1ed      	cbz	r5, 80083d2 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 8008396:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800839a:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800839e:	d830      	bhi.n	8008402 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80083a0:	69a5      	ldr	r5, [r4, #24]
 80083a2:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 80083a4:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80083a6:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80083a8:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80083aa:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 80083ac:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80083ae:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80083b0:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80083b4:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80083b8:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80083ba:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80083be:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80083c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80083c6:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 80083c8:	6a22      	ldr	r2, [r4, #32]
 80083ca:	f102 0204 	add.w	r2, r2, #4
 80083ce:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80083d0:	d1e8      	bne.n	80083a4 <JPEG_ReadInputData+0x28>
}
 80083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80083d4:	6a03      	ldr	r3, [r0, #32]
 80083d6:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80083d8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80083da:	d901      	bls.n	80083e0 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80083dc:	1aed      	subs	r5, r5, r3
 80083de:	e7d5      	b.n	800838c <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80083e0:	429d      	cmp	r5, r3
 80083e2:	d10c      	bne.n	80083fe <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80083e4:	6a01      	ldr	r1, [r0, #32]
 80083e6:	f7f9 f96d 	bl	80016c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80083ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083ec:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80083ee:	bf84      	itt	hi
 80083f0:	f023 0303 	bichi.w	r3, r3, #3
 80083f4:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 80083f6:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80083f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 80083fa:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80083fc:	e7c6      	b.n	800838c <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 80083fe:	2500      	movs	r5, #0
 8008400:	e7c4      	b.n	800838c <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 8008402:	2d03      	cmp	r5, #3
 8008404:	d826      	bhi.n	8008454 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008406:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 8008408:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800840a:	6a21      	ldr	r1, [r4, #32]
 800840c:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800840e:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008410:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 8008412:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008414:	fa01 f100 	lsl.w	r1, r1, r0
 8008418:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800841c:	6a21      	ldr	r1, [r4, #32]
 800841e:	f101 0101 	add.w	r1, r1, #1
 8008422:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008424:	d1f1      	bne.n	800840a <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	6413      	str	r3, [r2, #64]	; 0x40
}
 800842a:	e7d2      	b.n	80083d2 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800842c:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800842e:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008430:	69a6      	ldr	r6, [r4, #24]
 8008432:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008434:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008436:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008438:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800843a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800843e:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008440:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008442:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008446:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008448:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800844c:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800844e:	6a22      	ldr	r2, [r4, #32]
 8008450:	3204      	adds	r2, #4
 8008452:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008454:	42bb      	cmp	r3, r7
 8008456:	d1e9      	bne.n	800842c <JPEG_ReadInputData+0xb0>
 8008458:	e7bb      	b.n	80083d2 <JPEG_ReadInputData+0x56>
	...

0800845c <JPEG_DMAInCpltCallback>:
{
 800845c:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800845e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008464:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8008468:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800846a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800846c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008470:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008474:	0412      	lsls	r2, r2, #16
 8008476:	0c12      	lsrs	r2, r2, #16
 8008478:	2a0c      	cmp	r2, #12
 800847a:	d12c      	bne.n	80084d6 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800847c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800847e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008482:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008484:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008486:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <JPEG_DMAInCpltCallback+0x9c>)
 800848c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 8008490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008496:	6a21      	ldr	r1, [r4, #32]
 8008498:	f7f9 f914 	bl	80016c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800849c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d91a      	bls.n	80084d8 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80084a2:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 80084a6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80084a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80084aa:	04db      	lsls	r3, r3, #19
 80084ac:	d41d      	bmi.n	80084ea <JPEG_DMAInCpltCallback+0x8e>
 80084ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084b0:	b1db      	cbz	r3, 80084ea <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	089b      	lsrs	r3, r3, #2
 80084b6:	69a1      	ldr	r1, [r4, #24]
 80084b8:	3240      	adds	r2, #64	; 0x40
 80084ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80084bc:	f7fe f848 	bl	8006550 <HAL_DMA_Start_IT>
 80084c0:	b170      	cbz	r0, 80084e0 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80084c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 80084c4:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80084c6:	f043 0304 	orr.w	r3, r3, #4
 80084ca:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80084cc:	2306      	movs	r3, #6
 80084ce:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80084d2:	f7f9 f94f 	bl	8001774 <HAL_JPEG_ErrorCallback>
}
 80084d6:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0e5      	beq.n	80084a8 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 80084dc:	2304      	movs	r3, #4
 80084de:	e7e2      	b.n	80084a6 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80084e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084e8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80084ea:	6822      	ldr	r2, [r4, #0]
 80084ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80084ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084f2:	6313      	str	r3, [r2, #48]	; 0x30
 80084f4:	e7ef      	b.n	80084d6 <JPEG_DMAInCpltCallback+0x7a>
 80084f6:	bf00      	nop
 80084f8:	0003fffc 	.word	0x0003fffc

080084fc <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80084fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008500:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008504:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8008506:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008508:	4293      	cmp	r3, r2
 800850a:	d32a      	bcc.n	8008562 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800850c:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800850e:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008510:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008512:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008516:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008518:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800851a:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800851c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800851e:	69e0      	ldr	r0, [r4, #28]
 8008520:	4428      	add	r0, r5
 8008522:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008526:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008528:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800852a:	69e0      	ldr	r0, [r4, #28]
 800852c:	4428      	add	r0, r5
 800852e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008532:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008536:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008538:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800853a:	69e0      	ldr	r0, [r4, #28]
 800853c:	4428      	add	r0, r5
 800853e:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008542:	f103 0304 	add.w	r3, r3, #4
 8008546:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008548:	d1e1      	bne.n	800850e <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800854a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800854c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800854e:	429a      	cmp	r2, r3
 8008550:	d106      	bne.n	8008560 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008552:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008554:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008556:	4620      	mov	r0, r4
 8008558:	f7f9 f8d2 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008562:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008564:	4293      	cmp	r3, r2
 8008566:	d9fb      	bls.n	8008560 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008568:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800856a:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008570:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008572:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008574:	d105      	bne.n	8008582 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008576:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800857a:	429f      	cmp	r7, r3
 800857c:	d119      	bne.n	80085b2 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800857e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008580:	e7e9      	b.n	8008556 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008582:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008584:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008588:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800858a:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800858c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800858e:	69e1      	ldr	r1, [r4, #28]
 8008590:	4429      	add	r1, r5
 8008592:	0a1d      	lsrs	r5, r3, #8
 8008594:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008596:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008598:	69e1      	ldr	r1, [r4, #28]
 800859a:	4429      	add	r1, r5
 800859c:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800859e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80085a0:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80085a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80085a4:	69e1      	ldr	r1, [r4, #28]
 80085a6:	4429      	add	r1, r5
 80085a8:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80085aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ac:	3304      	adds	r3, #4
 80085ae:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 80085b0:	e7de      	b.n	8008570 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80085b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80085b4:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 80085b6:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80085b8:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 80085bc:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 80085be:	4560      	cmp	r0, ip
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80085c0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80085c2:	d114      	bne.n	80085ee <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7f9 f89a 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 80085d0:	1d2b      	adds	r3, r5, #4
 80085d2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d8c3      	bhi.n	8008560 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085d8:	00da      	lsls	r2, r3, #3
 80085da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085dc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80085de:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085e0:	fa26 f202 	lsr.w	r2, r6, r2
 80085e4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80085e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085e8:	3201      	adds	r2, #1
 80085ea:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085ec:	e7f2      	b.n	80085d4 <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80085ee:	f000 0203 	and.w	r2, r0, #3
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 80085f4:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80085f6:	00d2      	lsls	r2, r2, #3
 80085f8:	fa26 f202 	lsr.w	r2, r6, r2
 80085fc:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 80085fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008600:	3301      	adds	r3, #1
 8008602:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8008604:	e7db      	b.n	80085be <JPEG_StoreOutputData+0xc2>

08008606 <JPEG_Process>:
{
 8008606:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008608:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800860a:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	2b02      	cmp	r3, #2
 8008612:	d114      	bne.n	800863e <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008614:	6803      	ldr	r3, [r0, #0]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	065a      	lsls	r2, r3, #25
 800861a:	d510      	bpl.n	800863e <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800861c:	1d01      	adds	r1, r0, #4
 800861e:	f7ff fdad 	bl	800817c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008622:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008624:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008626:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008628:	f7f8 fffe 	bl	8001628 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800863c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800863e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008640:	04db      	lsls	r3, r3, #19
 8008642:	d407      	bmi.n	8008654 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008648:	0795      	lsls	r5, r2, #30
 800864a:	d543      	bpl.n	80086d4 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800864c:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800864e:	4620      	mov	r0, r4
 8008650:	f7ff fe94 	bl	800837c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008654:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008656:	0499      	lsls	r1, r3, #18
 8008658:	d407      	bmi.n	800866a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865e:	0712      	lsls	r2, r2, #28
 8008660:	d53d      	bpl.n	80086de <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008662:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff ff49 	bl	80084fc <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008672:	2a20      	cmp	r2, #32
 8008674:	d13b      	bne.n	80086ee <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800867e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008680:	f002 020c 	and.w	r2, r2, #12
 8008684:	2a08      	cmp	r2, #8
 8008686:	d103      	bne.n	8008690 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800868a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008692:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800869a:	b133      	cbz	r3, 80086aa <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800869c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800869e:	4620      	mov	r0, r4
 80086a0:	69e1      	ldr	r1, [r4, #28]
 80086a2:	f7f9 f82d 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 80086aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80086ac:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80086ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80086b0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80086b2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80086b6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80086ba:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80086bc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80086be:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 80086c2:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 80086c6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80086ca:	d10d      	bne.n	80086e8 <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80086cc:	f7f9 f85a 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80086d0:	4628      	mov	r0, r5
}
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	0758      	lsls	r0, r3, #29
 80086d8:	d5bc      	bpl.n	8008654 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80086da:	2101      	movs	r1, #1
 80086dc:	e7b7      	b.n	800864e <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80086de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e0:	06db      	lsls	r3, r3, #27
 80086e2:	d5c2      	bpl.n	800866a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80086e4:	2101      	movs	r1, #1
 80086e6:	e7bd      	b.n	8008664 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80086e8:	f7ff fe29 	bl	800833e <HAL_JPEG_EncodeCpltCallback>
 80086ec:	e7f0      	b.n	80086d0 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 80086ee:	2000      	movs	r0, #0
 80086f0:	e7ef      	b.n	80086d2 <JPEG_Process+0xcc>

080086f2 <JPEG_DMA_PollResidualData>:
{
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80086f8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80086fa:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 80086fe:	d123      	bne.n	8008748 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008704:	06d0      	lsls	r0, r2, #27
 8008706:	d51f      	bpl.n	8008748 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800870a:	69e1      	ldr	r1, [r4, #28]
 800870c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800870e:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8008710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008712:	69e2      	ldr	r2, [r4, #28]
 8008714:	440a      	add	r2, r1
 8008716:	0a19      	lsrs	r1, r3, #8
 8008718:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800871a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800871c:	69e2      	ldr	r2, [r4, #28]
 800871e:	440a      	add	r2, r1
 8008720:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008722:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008724:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008726:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008728:	69e2      	ldr	r2, [r4, #28]
 800872a:	440a      	add	r2, r1
 800872c:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800872e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008730:	3304      	adds	r3, #4
 8008732:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008736:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008738:	429a      	cmp	r2, r3
 800873a:	d105      	bne.n	8008748 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800873c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800873e:	4620      	mov	r0, r4
 8008740:	69e1      	ldr	r1, [r4, #28]
 8008742:	f7f8 ffdd 	bl	8001700 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008746:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008748:	3e01      	subs	r6, #1
 800874a:	d1d5      	bne.n	80086f8 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800874c:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800874e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008752:	06c9      	lsls	r1, r1, #27
 8008754:	d501      	bpl.n	800875a <JPEG_DMA_PollResidualData+0x68>
 8008756:	0492      	lsls	r2, r2, #18
 8008758:	d420      	bmi.n	800879c <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f022 0201 	bic.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008764:	b133      	cbz	r3, 8008774 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008766:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008768:	4620      	mov	r0, r4
 800876a:	69e1      	ldr	r1, [r4, #28]
 800876c:	f7f8 ffc8 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 8008774:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008776:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008778:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800877a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800877e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008782:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008784:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800878e:	f04f 0201 	mov.w	r2, #1
 8008792:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008796:	d102      	bne.n	800879e <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008798:	f7f8 fff4 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
}
 800879c:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800879e:	f7ff fdce 	bl	800833e <HAL_JPEG_EncodeCpltCallback>
}
 80087a2:	e7fb      	b.n	800879c <JPEG_DMA_PollResidualData+0xaa>

080087a4 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80087a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80087a6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 80087aa:	b570      	push	{r4, r5, r6, lr}
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80087b0:	d034      	beq.n	800881c <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80087b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b0c      	cmp	r3, #12
 80087ba:	d13e      	bne.n	800883a <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80087bc:	f011 0601 	ands.w	r6, r1, #1
 80087c0:	d00a      	beq.n	80087d8 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80087c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80087c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c8:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80087ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 80087d2:	b99b      	cbnz	r3, 80087fc <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 80087d4:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80087d8:	07a8      	lsls	r0, r5, #30
 80087da:	d509      	bpl.n	80087f0 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80087dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087e2:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80087e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087e6:	0419      	lsls	r1, r3, #16
 80087e8:	d51a      	bpl.n	8008820 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff ff81 	bl	80086f2 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80087f4:	431e      	orrs	r6, r3
 80087f6:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 80087f8:	2000      	movs	r0, #0
 80087fa:	e010      	b.n	800881e <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80087fc:	6802      	ldr	r2, [r0, #0]
 80087fe:	089b      	lsrs	r3, r3, #2
 8008800:	6981      	ldr	r1, [r0, #24]
 8008802:	3240      	adds	r2, #64	; 0x40
 8008804:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008806:	f7fd fea3 	bl	8006550 <HAL_DMA_Start_IT>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0e2      	beq.n	80087d4 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800880e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008810:	f043 0304 	orr.w	r3, r3, #4
 8008814:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008816:	2306      	movs	r3, #6
 8008818:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800881c:	2001      	movs	r0, #1
}
 800881e:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	089b      	lsrs	r3, r3, #2
 8008826:	69e2      	ldr	r2, [r4, #28]
 8008828:	3144      	adds	r1, #68	; 0x44
 800882a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800882c:	f7fd fe90 	bl	8006550 <HAL_DMA_Start_IT>
 8008830:	2800      	cmp	r0, #0
 8008832:	d1ec      	bne.n	800880e <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 8008834:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8008838:	e7da      	b.n	80087f0 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800883a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b08      	cmp	r3, #8
 8008842:	d1d9      	bne.n	80087f8 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008844:	f011 0301 	ands.w	r3, r1, #1
 8008848:	d004      	beq.n	8008854 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800884a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800884c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008850:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008852:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008854:	07aa      	lsls	r2, r5, #30
 8008856:	d505      	bpl.n	8008864 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008858:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800885a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800885e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008862:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008864:	6821      	ldr	r1, [r4, #0]
 8008866:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008868:	4313      	orrs	r3, r2
 800886a:	630b      	str	r3, [r1, #48]	; 0x30
 800886c:	e7c4      	b.n	80087f8 <HAL_JPEG_Resume+0x54>
	...

08008870 <JPEG_DMA_EndProcess>:
{
 8008870:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8008872:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8008874:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8008876:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6859      	ldr	r1, [r3, #4]
 800887c:	4b1f      	ldr	r3, [pc, #124]	; (80088fc <JPEG_DMA_EndProcess+0x8c>)
 800887e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008888:	429a      	cmp	r2, r3
 800888a:	d105      	bne.n	8008898 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800888c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800888e:	69c1      	ldr	r1, [r0, #28]
 8008890:	f7f8 ff36 	bl	8001700 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800889c:	f015 0510 	ands.w	r5, r5, #16
 80088a0:	d124      	bne.n	80088ec <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 80088a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a4:	b12b      	cbz	r3, 80088b2 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80088a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80088a8:	4620      	mov	r0, r4
 80088aa:	69e1      	ldr	r1, [r4, #28]
 80088ac:	f7f8 ff28 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80088b0:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088b2:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80088b4:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	f023 0301 	bic.w	r3, r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80088be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088c2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088c6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088ca:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088cc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80088d6:	f04f 0201 	mov.w	r2, #1
 80088da:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088de:	d102      	bne.n	80088e6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80088e0:	f7f8 ff50 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
}
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80088e6:	f7ff fd2a 	bl	800833e <HAL_JPEG_EncodeCpltCallback>
 80088ea:	e7fb      	b.n	80088e4 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80088ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088ee:	049b      	lsls	r3, r3, #18
 80088f0:	d4f8      	bmi.n	80088e4 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 80088f2:	4620      	mov	r0, r4
}
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80088f8:	f7ff befb 	b.w	80086f2 <JPEG_DMA_PollResidualData>
 80088fc:	0003fffc 	.word	0x0003fffc

08008900 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008900:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008902:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	d501      	bpl.n	800890c <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8008908:	f7ff bfb2 	b.w	8008870 <JPEG_DMA_EndProcess>
}
 800890c:	4770      	bx	lr
	...

08008910 <JPEG_DMAOutCpltCallback>:
{
 8008910:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008912:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008918:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800891e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008920:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008924:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008928:	0412      	lsls	r2, r2, #16
 800892a:	0c12      	lsrs	r2, r2, #16
 800892c:	2a0c      	cmp	r2, #12
 800892e:	d129      	bne.n	8008984 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008932:	0692      	lsls	r2, r2, #26
 8008934:	d42c      	bmi.n	8008990 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8008936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008938:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800893a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800893e:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008940:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008942:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <JPEG_DMAOutCpltCallback+0x8c>)
 8008948:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 800894c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008952:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008954:	f7f8 fed4 	bl	8001700 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008958:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800895a:	049b      	lsls	r3, r3, #18
 800895c:	d418      	bmi.n	8008990 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800895e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008960:	6821      	ldr	r1, [r4, #0]
 8008962:	089b      	lsrs	r3, r3, #2
 8008964:	69e2      	ldr	r2, [r4, #28]
 8008966:	3144      	adds	r1, #68	; 0x44
 8008968:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800896a:	f7fd fdf1 	bl	8006550 <HAL_DMA_Start_IT>
 800896e:	b150      	cbz	r0, 8008986 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008970:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008972:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008974:	f043 0304 	orr.w	r3, r3, #4
 8008978:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800897a:	2306      	movs	r3, #6
 800897c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008980:	f7f8 fef8 	bl	8001774 <HAL_JPEG_ErrorCallback>
}
 8008984:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800898a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800898e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008990:	6822      	ldr	r2, [r4, #0]
 8008992:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008994:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008998:	6313      	str	r3, [r2, #48]	; 0x30
 800899a:	e7f3      	b.n	8008984 <JPEG_DMAOutCpltCallback+0x74>
 800899c:	0003fffc 	.word	0x0003fffc

080089a0 <HAL_JPEG_IRQHandler>:
{
 80089a0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 80089a2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 80089a6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 80089a8:	3b03      	subs	r3, #3
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d854      	bhi.n	8008a58 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80089ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80089b0:	f003 030c 	and.w	r3, r3, #12
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d103      	bne.n	80089c0 <HAL_JPEG_IRQHandler+0x20>
}
 80089b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 80089bc:	f7ff be23 	b.w	8008606 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80089c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b0c      	cmp	r3, #12
 80089c8:	d146      	bne.n	8008a58 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80089ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d114      	bne.n	80089fe <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80089d4:	6803      	ldr	r3, [r0, #0]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	0659      	lsls	r1, r3, #25
 80089da:	d510      	bpl.n	80089fe <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80089dc:	1d01      	adds	r1, r0, #4
 80089de:	f7ff fbcd 	bl	800817c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80089e2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80089e4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80089e6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80089e8:	f7f8 fe1e 	bl	8001628 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80089f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a02:	0692      	lsls	r2, r2, #26
 8008a04:	d528      	bpl.n	8008a58 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8008a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8008a08:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8008a0a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008a10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a16:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	f022 0201 	bic.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a22:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 8008a30:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d101      	bne.n	8008a3c <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 8008a38:	f7fd fdc7 	bl	80065ca <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 8008a3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008a3e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d103      	bne.n	8008a4e <HAL_JPEG_IRQHandler+0xae>
}
 8008a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 8008a4a:	f7fd bdbe 	b.w	80065ca <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8008a4e:	4620      	mov	r0, r4
}
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8008a54:	f7ff bf0c 	b.w	8008870 <JPEG_DMA_EndProcess>
}
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <HAL_JPEG_GetState>:
  return hjpeg->State;
 8008a5a:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
}
 8008a5e:	4770      	bx	lr

08008a60 <HAL_JPEG_GetError>:
  return hjpeg->ErrorCode;
 8008a60:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 8008a62:	4770      	bx	lr

08008a64 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a64:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a66:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a68:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a6c:	3284      	adds	r2, #132	; 0x84
 8008a6e:	1883      	adds	r3, r0, r2
{
 8008a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a74:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a76:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a7a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008a7c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a80:	684c      	ldr	r4, [r1, #4]
 8008a82:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a86:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a8a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008a8e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008a90:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a92:	68c5      	ldr	r5, [r0, #12]
 8008a94:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008a98:	443d      	add	r5, r7
 8008a9a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008a9e:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008aa0:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008aa2:	68c5      	ldr	r5, [r0, #12]
 8008aa4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8008aa8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008aaa:	689d      	ldr	r5, [r3, #8]
 8008aac:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8008ab0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008ab2:	688d      	ldr	r5, [r1, #8]
 8008ab4:	68c7      	ldr	r7, [r0, #12]
 8008ab6:	3501      	adds	r5, #1
 8008ab8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008abc:	443d      	add	r5, r7
 8008abe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008ac2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008ac4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008ac6:	691d      	ldr	r5, [r3, #16]
 8008ac8:	f025 0507 	bic.w	r5, r5, #7
 8008acc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008ace:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008ad0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008ad2:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008ad6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008ada:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008ade:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8008ae2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008ae6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8008aea:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8008aee:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008af0:	695d      	ldr	r5, [r3, #20]
 8008af2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008af6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008af8:	694d      	ldr	r5, [r1, #20]
 8008afa:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008afc:	69dd      	ldr	r5, [r3, #28]
 8008afe:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8008b02:	f025 0507 	bic.w	r5, r5, #7
 8008b06:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008b08:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008b0c:	433d      	orrs	r5, r7
 8008b0e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008b10:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008b12:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008b14:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008b18:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b1a:	b31e      	cbz	r6, 8008b64 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b1c:	2e01      	cmp	r6, #1
 8008b1e:	d023      	beq.n	8008b68 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b20:	1eb5      	subs	r5, r6, #2
 8008b22:	2d02      	cmp	r5, #2
 8008b24:	d922      	bls.n	8008b6c <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8008b26:	2e07      	cmp	r6, #7
 8008b28:	bf0c      	ite	eq
 8008b2a:	2502      	moveq	r5, #2
 8008b2c:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b2e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b30:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b34:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b38:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b3a:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b3c:	3403      	adds	r4, #3
 8008b3e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008b40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b42:	436e      	muls	r6, r5
 8008b44:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008b48:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008b4a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008b4c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8008b50:	f024 0407 	bic.w	r4, r4, #7
 8008b54:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008b56:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008b58:	5883      	ldr	r3, [r0, r2]
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	5083      	str	r3, [r0, r2]
}
 8008b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8008b64:	2504      	movs	r5, #4
 8008b66:	e7e2      	b.n	8008b2e <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008b68:	2503      	movs	r5, #3
 8008b6a:	e7e0      	b.n	8008b2e <LTDC_SetConfig+0xca>
    tmp = 2U;
 8008b6c:	2502      	movs	r5, #2
 8008b6e:	e7de      	b.n	8008b2e <LTDC_SetConfig+0xca>

08008b70 <HAL_LTDC_Init>:
{
 8008b70:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8008b72:	4604      	mov	r4, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d063      	beq.n	8008c40 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008b78:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8008b7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b80:	b91b      	cbnz	r3, 8008b8a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8008b82:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008b86:	f7fb f8ff 	bl	8003d88 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008b98:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008b9a:	6999      	ldr	r1, [r3, #24]
 8008b9c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008ba0:	4302      	orrs	r2, r0
 8008ba2:	68e0      	ldr	r0, [r4, #12]
 8008ba4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ba6:	6920      	ldr	r0, [r4, #16]
 8008ba8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008baa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008bac:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008bae:	4925      	ldr	r1, [pc, #148]	; (8008c44 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008bb0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	400a      	ands	r2, r1
 8008bb6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008bbe:	69a0      	ldr	r0, [r4, #24]
 8008bc0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008bc2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008bc4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	400a      	ands	r2, r1
 8008bca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008bd2:	6a20      	ldr	r0, [r4, #32]
 8008bd4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008bd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008bd8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	400a      	ands	r2, r1
 8008bde:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008be8:	4302      	orrs	r2, r0
 8008bea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008bec:	695a      	ldr	r2, [r3, #20]
 8008bee:	4011      	ands	r1, r2
 8008bf0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008c02:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008c06:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008c0a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008c0e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c12:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008c16:	430a      	orrs	r2, r1
 8008c18:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008c1c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008c20:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008c22:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c26:	f042 0206 	orr.w	r2, r2, #6
 8008c2a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	f042 0201 	orr.w	r2, r2, #1
 8008c32:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008c34:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008c36:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008c3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008c40:	2001      	movs	r0, #1
 8008c42:	e7fc      	b.n	8008c3e <HAL_LTDC_Init+0xce>
 8008c44:	f000f800 	.word	0xf000f800

08008c48 <HAL_LTDC_ErrorCallback>:
 8008c48:	4770      	bx	lr

08008c4a <HAL_LTDC_LineEventCallback>:
 8008c4a:	4770      	bx	lr

08008c4c <HAL_LTDC_ReloadEventCallback>:
 8008c4c:	4770      	bx	lr

08008c4e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008c4e:	6803      	ldr	r3, [r0, #0]
{
 8008c50:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008c52:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8008c54:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008c56:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008c58:	0772      	lsls	r2, r6, #29
 8008c5a:	d514      	bpl.n	8008c86 <HAL_LTDC_IRQHandler+0x38>
 8008c5c:	0769      	lsls	r1, r5, #29
 8008c5e:	d512      	bpl.n	8008c86 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c62:	f022 0204 	bic.w	r2, r2, #4
 8008c66:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008c68:	2204      	movs	r2, #4
 8008c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008c6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8008c70:	f043 0301 	orr.w	r3, r3, #1
 8008c74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8008c78:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008c7a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008c7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008c82:	f7ff ffe1 	bl	8008c48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008c86:	07b2      	lsls	r2, r6, #30
 8008c88:	d516      	bpl.n	8008cb8 <HAL_LTDC_IRQHandler+0x6a>
 8008c8a:	07ab      	lsls	r3, r5, #30
 8008c8c:	d514      	bpl.n	8008cb8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008c8e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008c90:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c94:	f022 0202 	bic.w	r2, r2, #2
 8008c98:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008c9e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008ca8:	2304      	movs	r3, #4
 8008caa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008cb4:	f7ff ffc8 	bl	8008c48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008cb8:	07f0      	lsls	r0, r6, #31
 8008cba:	d510      	bpl.n	8008cde <HAL_LTDC_IRQHandler+0x90>
 8008cbc:	07e9      	lsls	r1, r5, #31
 8008cbe:	d50e      	bpl.n	8008cde <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008cc0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008cc2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc6:	f022 0201 	bic.w	r2, r2, #1
 8008cca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008ccc:	2201      	movs	r2, #1
 8008cce:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8008cd0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008cd2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008cd6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008cda:	f7ff ffb6 	bl	8008c4a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008cde:	0732      	lsls	r2, r6, #28
 8008ce0:	d511      	bpl.n	8008d06 <HAL_LTDC_IRQHandler+0xb8>
 8008ce2:	072b      	lsls	r3, r5, #28
 8008ce4:	d50f      	bpl.n	8008d06 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008ce6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008ce8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cec:	f022 0208 	bic.w	r2, r2, #8
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008d02:	f7ff ffa3 	bl	8008c4c <HAL_LTDC_ReloadEventCallback>
}
 8008d06:	bd70      	pop	{r4, r5, r6, pc}

08008d08 <HAL_LTDC_ConfigLayer>:
{
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008d0c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8008d10:	4606      	mov	r6, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	f04f 0002 	mov.w	r0, #2
 8008d1c:	d01f      	beq.n	8008d5e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d1e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8008d20:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d24:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d26:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d2a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008d2e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d32:	3438      	adds	r4, #56	; 0x38
 8008d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d40:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008d42:	4630      	mov	r0, r6
 8008d44:	4662      	mov	r2, ip
 8008d46:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d48:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008d4a:	f7ff fe8b 	bl	8008a64 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008d4e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008d50:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008d52:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008d56:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008d5a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8008d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008d64 <HAL_LTDC_SetPitch>:
{
 8008d64:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008d66:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	f04f 0302 	mov.w	r3, #2
 8008d70:	d02c      	beq.n	8008dcc <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008d72:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d74:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008d78:	fb04 0402 	mla	r4, r4, r2, r0
 8008d7c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008d7e:	b33c      	cbz	r4, 8008dd0 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008d80:	2c01      	cmp	r4, #1
 8008d82:	d027      	beq.n	8008dd4 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d84:	1ea5      	subs	r5, r4, #2
 8008d86:	429d      	cmp	r5, r3
 8008d88:	d902      	bls.n	8008d90 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8008d8a:	2c07      	cmp	r4, #7
 8008d8c:	bf18      	it	ne
 8008d8e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008d90:	01d2      	lsls	r2, r2, #7
 8008d92:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008d94:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008d96:	3284      	adds	r2, #132	; 0x84
 8008d98:	4422      	add	r2, r4
 8008d9a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8008d9c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008da0:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8008da4:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008da6:	4c0c      	ldr	r4, [pc, #48]	; (8008dd8 <HAL_LTDC_SetPitch+0x74>)
 8008da8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008daa:	f045 0501 	orr.w	r5, r5, #1
 8008dae:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008db0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8008db2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	e7dd      	b.n	8008d90 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e7db      	b.n	8008d90 <HAL_LTDC_SetPitch+0x2c>
 8008dd8:	40016800 	.word	0x40016800

08008ddc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8008ddc:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8008dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8008de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008de2:	4c19      	ldr	r4, [pc, #100]	; (8008e48 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008de4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dfa:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008dfc:	f7fd f9ec 	bl	80061d8 <HAL_GetTick>
 8008e00:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e02:	6863      	ldr	r3, [r4, #4]
 8008e04:	03da      	lsls	r2, r3, #15
 8008e06:	d50c      	bpl.n	8008e22 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e08:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e0a:	4d0f      	ldr	r5, [pc, #60]	; (8008e48 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e10:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008e12:	f7fd f9e1 	bl	80061d8 <HAL_GetTick>
 8008e16:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e18:	686b      	ldr	r3, [r5, #4]
 8008e1a:	039b      	lsls	r3, r3, #14
 8008e1c:	d50a      	bpl.n	8008e34 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e006      	b.n	8008e30 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e22:	f7fd f9d9 	bl	80061d8 <HAL_GetTick>
 8008e26:	1b40      	subs	r0, r0, r5
 8008e28:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008e2c:	d9e9      	bls.n	8008e02 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8008e2e:	2003      	movs	r0, #3
}
 8008e30:	b003      	add	sp, #12
 8008e32:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e34:	f7fd f9d0 	bl	80061d8 <HAL_GetTick>
 8008e38:	1b00      	subs	r0, r0, r4
 8008e3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008e3e:	d9eb      	bls.n	8008e18 <HAL_PWREx_EnableOverDrive+0x3c>
 8008e40:	e7f5      	b.n	8008e2e <HAL_PWREx_EnableOverDrive+0x52>
 8008e42:	bf00      	nop
 8008e44:	40023800 	.word	0x40023800
 8008e48:	40007000 	.word	0x40007000

08008e4c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008e50:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008e52:	b136      	cbz	r6, 8008e62 <QSPI_Config+0x16>
 8008e54:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8008e58:	d003      	beq.n	8008e62 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008e5a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008e5c:	6804      	ldr	r4, [r0, #0]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008e62:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e66:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008e6a:	f1b9 0f00 	cmp.w	r9, #0
 8008e6e:	d04f      	beq.n	8008f10 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e70:	694b      	ldr	r3, [r1, #20]
 8008e72:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008e76:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e78:	f8d1 a000 	ldr.w	sl, [r1]
 8008e7c:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8008e80:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8008e84:	ea49 0902 	orr.w	r9, r9, r2
 8008e88:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008e8c:	b335      	cbz	r5, 8008edc <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008e8e:	688b      	ldr	r3, [r1, #8]
 8008e90:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e94:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008e96:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e98:	b19f      	cbz	r7, 8008ec2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e9a:	ea4a 0307 	orr.w	r3, sl, r7
 8008e9e:	4323      	orrs	r3, r4
 8008ea0:	68cc      	ldr	r4, [r1, #12]
 8008ea2:	ea43 0308 	orr.w	r3, r3, r8
 8008ea6:	ea43 030e 	orr.w	r3, r3, lr
 8008eaa:	4333      	orrs	r3, r6
 8008eac:	4323      	orrs	r3, r4
 8008eae:	ea43 030c 	orr.w	r3, r3, ip
 8008eb2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008eb4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008eb8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008eba:	d00d      	beq.n	8008ed8 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008ebc:	684b      	ldr	r3, [r1, #4]
 8008ebe:	6183      	str	r3, [r0, #24]
 8008ec0:	e00a      	b.n	8008ed8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ec2:	ea4a 0304 	orr.w	r3, sl, r4
 8008ec6:	ea43 0308 	orr.w	r3, r3, r8
 8008eca:	ea43 030e 	orr.w	r3, r3, lr
 8008ece:	4333      	orrs	r3, r6
 8008ed0:	ea43 030c 	orr.w	r3, r3, ip
 8008ed4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ed6:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008edc:	b16f      	cbz	r7, 8008efa <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ede:	ea4a 0307 	orr.w	r3, sl, r7
 8008ee2:	4323      	orrs	r3, r4
 8008ee4:	68cc      	ldr	r4, [r1, #12]
 8008ee6:	ea43 0308 	orr.w	r3, r3, r8
 8008eea:	ea43 030e 	orr.w	r3, r3, lr
 8008eee:	4323      	orrs	r3, r4
 8008ef0:	ea43 030c 	orr.w	r3, r3, ip
 8008ef4:	ea43 0309 	orr.w	r3, r3, r9
 8008ef8:	e7dc      	b.n	8008eb4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008efa:	ea4a 0304 	orr.w	r3, sl, r4
 8008efe:	ea43 0308 	orr.w	r3, r3, r8
 8008f02:	ea43 030e 	orr.w	r3, r3, lr
 8008f06:	ea43 030c 	orr.w	r3, r3, ip
 8008f0a:	ea43 0309 	orr.w	r3, r3, r9
 8008f0e:	e7e2      	b.n	8008ed6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f10:	b365      	cbz	r5, 8008f6c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f12:	6804      	ldr	r4, [r0, #0]
 8008f14:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f16:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f18:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f1a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f1e:	694e      	ldr	r6, [r1, #20]
 8008f20:	ea43 0502 	orr.w	r5, r3, r2
 8008f24:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8008f28:	04b6      	lsls	r6, r6, #18
 8008f2a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f2e:	b1a7      	cbz	r7, 8008f5a <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f30:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f32:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f36:	ea40 0008 	orr.w	r0, r0, r8
 8008f3a:	ea43 0300 	orr.w	r3, r3, r0
 8008f3e:	68c8      	ldr	r0, [r1, #12]
 8008f40:	ea43 030c 	orr.w	r3, r3, ip
 8008f44:	ea43 0300 	orr.w	r3, r3, r0
 8008f48:	ea43 0306 	orr.w	r3, r3, r6
 8008f4c:	ea43 0305 	orr.w	r3, r3, r5
 8008f50:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f52:	d0c1      	beq.n	8008ed8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008f54:	684b      	ldr	r3, [r1, #4]
 8008f56:	61a3      	str	r3, [r4, #24]
 8008f58:	e7be      	b.n	8008ed8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f5a:	ea40 0008 	orr.w	r0, r0, r8
 8008f5e:	4303      	orrs	r3, r0
 8008f60:	ea43 030c 	orr.w	r3, r3, ip
 8008f64:	4333      	orrs	r3, r6
 8008f66:	432b      	orrs	r3, r5
 8008f68:	6163      	str	r3, [r4, #20]
 8008f6a:	e7b5      	b.n	8008ed8 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f6c:	b17f      	cbz	r7, 8008f8e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f6e:	ea46 0307 	orr.w	r3, r6, r7
 8008f72:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8008f74:	6800      	ldr	r0, [r0, #0]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	4323      	orrs	r3, r4
 8008f7a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8008f7c:	4323      	orrs	r3, r4
 8008f7e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008f80:	4323      	orrs	r3, r4
 8008f82:	68cc      	ldr	r4, [r1, #12]
 8008f84:	4323      	orrs	r3, r4
 8008f86:	694c      	ldr	r4, [r1, #20]
 8008f88:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008f8c:	e792      	b.n	8008eb4 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d0a2      	beq.n	8008ed8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f92:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008f94:	6800      	ldr	r0, [r0, #0]
 8008f96:	4333      	orrs	r3, r6
 8008f98:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	694b      	ldr	r3, [r1, #20]
 8008f9e:	4332      	orrs	r2, r6
 8008fa0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8008fa2:	4332      	orrs	r2, r6
 8008fa4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8008fa8:	6142      	str	r2, [r0, #20]
}
 8008faa:	e795      	b.n	8008ed8 <QSPI_Config+0x8c>

08008fac <QSPI_WaitFlagStateUntilTimeout>:
{
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460e      	mov	r6, r1
 8008fb8:	4615      	mov	r5, r2
 8008fba:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	6893      	ldr	r3, [r2, #8]
 8008fc0:	4233      	tst	r3, r6
 8008fc2:	bf14      	ite	ne
 8008fc4:	2301      	movne	r3, #1
 8008fc6:	2300      	moveq	r3, #0
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	d101      	bne.n	8008fd0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e012      	b.n	8008ff6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008fd0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008fd4:	d0f3      	beq.n	8008fbe <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd6:	f7fd f8ff 	bl	80061d8 <HAL_GetTick>
 8008fda:	1bc0      	subs	r0, r0, r7
 8008fdc:	4540      	cmp	r0, r8
 8008fde:	d802      	bhi.n	8008fe6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008fe0:	f1b8 0f00 	cmp.w	r8, #0
 8008fe4:	d1ea      	bne.n	8008fbc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008fe6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008fe8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008fea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ff0:	f043 0301 	orr.w	r3, r3, #1
 8008ff4:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008ffc <HAL_QSPI_Init>:
{
 8008ffc:	b530      	push	{r4, r5, lr}
 8008ffe:	4604      	mov	r4, r0
 8009000:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8009002:	f7fd f8e9 	bl	80061d8 <HAL_GetTick>
 8009006:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8009008:	2c00      	cmp	r4, #0
 800900a:	d047      	beq.n	800909c <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800900c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009010:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8009014:	b94a      	cbnz	r2, 800902a <HAL_QSPI_Init+0x2e>
 8009016:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8009018:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800901a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800901e:	f7fa fee9 	bl	8003df4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009022:	f241 3288 	movw	r2, #5000	; 0x1388
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800902a:	6820      	ldr	r0, [r4, #0]
 800902c:	68a1      	ldr	r1, [r4, #8]
 800902e:	6802      	ldr	r2, [r0, #0]
 8009030:	3901      	subs	r1, #1
 8009032:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8009036:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800903a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800903c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800903e:	4620      	mov	r0, r4
 8009040:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009042:	9200      	str	r2, [sp, #0]
 8009044:	2200      	movs	r2, #0
 8009046:	f7ff ffb1 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800904a:	bb10      	cbnz	r0, 8009092 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	69e5      	ldr	r5, [r4, #28]
 8009050:	68e3      	ldr	r3, [r4, #12]
 8009052:	6811      	ldr	r1, [r2, #0]
 8009054:	432b      	orrs	r3, r5
 8009056:	6a25      	ldr	r5, [r4, #32]
 8009058:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800905c:	432b      	orrs	r3, r5
 800905e:	6865      	ldr	r5, [r4, #4]
 8009060:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8009064:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009068:	430b      	orrs	r3, r1
 800906a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800906c:	6855      	ldr	r5, [r2, #4]
 800906e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009072:	430b      	orrs	r3, r1
 8009074:	6921      	ldr	r1, [r4, #16]
 8009076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800907a:	4909      	ldr	r1, [pc, #36]	; (80090a0 <HAL_QSPI_Init+0xa4>)
 800907c:	4029      	ands	r1, r5
 800907e:	430b      	orrs	r3, r1
 8009080:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800908a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800908c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800908e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009092:	2300      	movs	r3, #0
 8009094:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009098:	b005      	add	sp, #20
 800909a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800909c:	2001      	movs	r0, #1
 800909e:	e7fb      	b.n	8009098 <HAL_QSPI_Init+0x9c>
 80090a0:	ffe0f8fe 	.word	0xffe0f8fe

080090a4 <HAL_QSPI_Command>:
{
 80090a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	b085      	sub	sp, #20
 80090ac:	4617      	mov	r7, r2
 80090ae:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80090b0:	f7fd f892 	bl	80061d8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80090b4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80090b8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80090ba:	2a01      	cmp	r2, #1
 80090bc:	d033      	beq.n	8009126 <HAL_QSPI_Command+0x82>
 80090be:	2201      	movs	r2, #1
 80090c0:	2602      	movs	r6, #2
 80090c2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80090c6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80090ca:	2a01      	cmp	r2, #1
 80090cc:	fa5f f882 	uxtb.w	r8, r2
 80090d0:	d127      	bne.n	8009122 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090d2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090d4:	9003      	str	r0, [sp, #12]
 80090d6:	2120      	movs	r1, #32
 80090d8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090da:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090dc:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80090de:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090e2:	f7ff ff63 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80090e6:	4605      	mov	r5, r0
 80090e8:	b9a0      	cbnz	r0, 8009114 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80090ea:	4602      	mov	r2, r0
 80090ec:	4649      	mov	r1, r9
 80090ee:	4620      	mov	r0, r4
 80090f0:	f7ff feac 	bl	8008e4c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80090f4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80090f8:	9b03      	ldr	r3, [sp, #12]
 80090fa:	b94a      	cbnz	r2, 8009110 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80090fc:	4642      	mov	r2, r8
 80090fe:	4631      	mov	r1, r6
 8009100:	4620      	mov	r0, r4
 8009102:	9700      	str	r7, [sp, #0]
 8009104:	f7ff ff52 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009108:	4605      	mov	r5, r0
 800910a:	b918      	cbnz	r0, 8009114 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009110:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009114:	2300      	movs	r3, #0
 8009116:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800911a:	4628      	mov	r0, r5
 800911c:	b005      	add	sp, #20
 800911e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009122:	4635      	mov	r5, r6
 8009124:	e7f6      	b.n	8009114 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8009126:	2502      	movs	r5, #2
 8009128:	e7f7      	b.n	800911a <HAL_QSPI_Command+0x76>

0800912a <HAL_QSPI_Transmit>:
{
 800912a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912c:	4604      	mov	r4, r0
 800912e:	b085      	sub	sp, #20
 8009130:	4616      	mov	r6, r2
 8009132:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009134:	f7fd f850 	bl	80061d8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009138:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800913c:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800913e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009140:	2a01      	cmp	r2, #1
 8009142:	d049      	beq.n	80091d8 <HAL_QSPI_Transmit+0xae>
 8009144:	2201      	movs	r2, #1
 8009146:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800914a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800914e:	2a01      	cmp	r2, #1
 8009150:	b2d0      	uxtb	r0, r2
 8009152:	d13f      	bne.n	80091d4 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009154:	2200      	movs	r2, #0
 8009156:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8009158:	2f00      	cmp	r7, #0
 800915a:	d036      	beq.n	80091ca <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800915c:	2212      	movs	r2, #18
 800915e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009162:	692a      	ldr	r2, [r5, #16]
 8009164:	3201      	adds	r2, #1
 8009166:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009168:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800916a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800916c:	3201      	adds	r2, #1
 800916e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009170:	696a      	ldr	r2, [r5, #20]
 8009172:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009176:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009178:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800917a:	b98a      	cbnz	r2, 80091a0 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800917c:	2201      	movs	r2, #1
 800917e:	2102      	movs	r1, #2
 8009180:	4620      	mov	r0, r4
 8009182:	9600      	str	r6, [sp, #0]
 8009184:	f7ff ff12 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009188:	b910      	cbnz	r0, 8009190 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	2202      	movs	r2, #2
 800918e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009190:	2301      	movs	r3, #1
 8009192:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009196:	2300      	movs	r3, #0
 8009198:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800919c:	b005      	add	sp, #20
 800919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80091a0:	2201      	movs	r2, #1
 80091a2:	2104      	movs	r1, #4
 80091a4:	4620      	mov	r0, r4
 80091a6:	9600      	str	r6, [sp, #0]
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	f7ff feff 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1ee      	bne.n	8009190 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80091b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80091b4:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80091b6:	7812      	ldrb	r2, [r2, #0]
 80091b8:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 80091bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091be:	3201      	adds	r2, #1
 80091c0:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80091c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091c4:	3a01      	subs	r2, #1
 80091c6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80091c8:	e7d6      	b.n	8009178 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80091ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091cc:	f043 0308 	orr.w	r3, r3, #8
 80091d0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80091d2:	e7e0      	b.n	8009196 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 80091d4:	2002      	movs	r0, #2
 80091d6:	e7de      	b.n	8009196 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 80091d8:	2002      	movs	r0, #2
 80091da:	e7df      	b.n	800919c <HAL_QSPI_Transmit+0x72>

080091dc <HAL_QSPI_Receive>:
{
 80091dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	b085      	sub	sp, #20
 80091e2:	4616      	mov	r6, r2
 80091e4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80091e6:	f7fc fff7 	bl	80061d8 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80091ea:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80091ec:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80091ee:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 80091f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	d04d      	beq.n	8009296 <HAL_QSPI_Receive+0xba>
 80091fa:	2201      	movs	r2, #1
 80091fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009200:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009204:	2a01      	cmp	r2, #1
 8009206:	b2d0      	uxtb	r0, r2
 8009208:	d143      	bne.n	8009292 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800920a:	2200      	movs	r2, #0
 800920c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800920e:	2f00      	cmp	r7, #0
 8009210:	d03a      	beq.n	8009288 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009212:	2222      	movs	r2, #34	; 0x22
 8009214:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009218:	692a      	ldr	r2, [r5, #16]
 800921a:	3201      	adds	r2, #1
 800921c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800921e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009220:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009222:	3201      	adds	r2, #1
 8009224:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009226:	6969      	ldr	r1, [r5, #20]
 8009228:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800922c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8009230:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009232:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009236:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009238:	b98a      	cbnz	r2, 800925e <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800923a:	2201      	movs	r2, #1
 800923c:	2102      	movs	r1, #2
 800923e:	4620      	mov	r0, r4
 8009240:	9600      	str	r6, [sp, #0]
 8009242:	f7ff feb3 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009246:	b910      	cbnz	r0, 800924e <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	2202      	movs	r2, #2
 800924c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800924e:	2301      	movs	r3, #1
 8009250:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009254:	2300      	movs	r3, #0
 8009256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800925a:	b005      	add	sp, #20
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800925e:	2201      	movs	r2, #1
 8009260:	2106      	movs	r1, #6
 8009262:	4620      	mov	r0, r4
 8009264:	9600      	str	r6, [sp, #0]
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	f7ff fea0 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800926c:	2800      	cmp	r0, #0
 800926e:	d1ee      	bne.n	800924e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009270:	f895 1020 	ldrb.w	r1, [r5, #32]
 8009274:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009276:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009278:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800927a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800927c:	3201      	adds	r2, #1
 800927e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009280:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009282:	3a01      	subs	r2, #1
 8009284:	63a2      	str	r2, [r4, #56]	; 0x38
 8009286:	e7d6      	b.n	8009236 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009288:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800928a:	f043 0308 	orr.w	r3, r3, #8
 800928e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8009290:	e7e0      	b.n	8009254 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8009292:	2002      	movs	r0, #2
 8009294:	e7de      	b.n	8009254 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8009296:	2002      	movs	r0, #2
 8009298:	e7df      	b.n	800925a <HAL_QSPI_Receive+0x7e>

0800929a <HAL_QSPI_AutoPolling>:
{
 800929a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800929e:	4604      	mov	r4, r0
 80092a0:	4615      	mov	r5, r2
 80092a2:	461e      	mov	r6, r3
 80092a4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80092a6:	f7fc ff97 	bl	80061d8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80092aa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80092ae:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80092b0:	2a01      	cmp	r2, #1
 80092b2:	d040      	beq.n	8009336 <HAL_QSPI_AutoPolling+0x9c>
 80092b4:	2201      	movs	r2, #1
 80092b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80092ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80092be:	2a01      	cmp	r2, #1
 80092c0:	b2d7      	uxtb	r7, r2
 80092c2:	d136      	bne.n	8009332 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80092c4:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092c6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092c8:	9003      	str	r0, [sp, #12]
 80092ca:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092cc:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092ce:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80092d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092d4:	2120      	movs	r1, #32
 80092d6:	f7ff fe69 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80092da:	bb20      	cbnz	r0, 8009326 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80092dc:	6821      	ldr	r1, [r4, #0]
 80092de:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80092e0:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80092e2:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80092e4:	686a      	ldr	r2, [r5, #4]
 80092e6:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80092e8:	68aa      	ldr	r2, [r5, #8]
 80092ea:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80092ec:	680a      	ldr	r2, [r1, #0]
 80092ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80092f2:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80092f4:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80092f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80092fa:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80092fc:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80092fe:	68ea      	ldr	r2, [r5, #12]
 8009300:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009308:	f7ff fda0 	bl	8008e4c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	463a      	mov	r2, r7
 8009310:	2108      	movs	r1, #8
 8009312:	4620      	mov	r0, r4
 8009314:	9600      	str	r6, [sp, #0]
 8009316:	f7ff fe49 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800931a:	b920      	cbnz	r0, 8009326 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	2208      	movs	r2, #8
 8009320:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009322:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009326:	2300      	movs	r3, #0
 8009328:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800932c:	b004      	add	sp, #16
 800932e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8009332:	2002      	movs	r0, #2
 8009334:	e7f7      	b.n	8009326 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8009336:	2002      	movs	r0, #2
 8009338:	e7f8      	b.n	800932c <HAL_QSPI_AutoPolling+0x92>

0800933a <HAL_QSPI_MemoryMapped>:
{
 800933a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800933c:	4604      	mov	r4, r0
 800933e:	4616      	mov	r6, r2
 8009340:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009342:	f7fc ff49 	bl	80061d8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009346:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800934a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800934c:	2a01      	cmp	r2, #1
 800934e:	d033      	beq.n	80093b8 <HAL_QSPI_MemoryMapped+0x7e>
 8009350:	2201      	movs	r2, #1
 8009352:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009356:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800935a:	2a01      	cmp	r2, #1
 800935c:	d12a      	bne.n	80093b4 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800935e:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009360:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009362:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009364:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009366:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800936a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800936c:	9100      	str	r1, [sp, #0]
 800936e:	2120      	movs	r1, #32
 8009370:	f7ff fe1c 	bl	8008fac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009374:	4605      	mov	r5, r0
 8009376:	b9b8      	cbnz	r0, 80093a8 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	6872      	ldr	r2, [r6, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800937e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009380:	f020 0008 	bic.w	r0, r0, #8
 8009384:	ea40 0002 	orr.w	r0, r0, r2
 8009388:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800938a:	d107      	bne.n	800939c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800938c:	6832      	ldr	r2, [r6, #0]
 800938e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009390:	2210      	movs	r2, #16
 8009392:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800939a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800939c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80093a0:	4639      	mov	r1, r7
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7ff fd52 	bl	8008e4c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80093a8:	2300      	movs	r3, #0
 80093aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80093ae:	4628      	mov	r0, r5
 80093b0:	b003      	add	sp, #12
 80093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80093b4:	2502      	movs	r5, #2
 80093b6:	e7f7      	b.n	80093a8 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80093b8:	2502      	movs	r5, #2
 80093ba:	e7f8      	b.n	80093ae <HAL_QSPI_MemoryMapped+0x74>

080093bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093c0:	4604      	mov	r4, r0
 80093c2:	b340      	cbz	r0, 8009416 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093c4:	6803      	ldr	r3, [r0, #0]
 80093c6:	07db      	lsls	r3, r3, #31
 80093c8:	d410      	bmi.n	80093ec <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	079f      	lsls	r7, r3, #30
 80093ce:	d464      	bmi.n	800949a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	0719      	lsls	r1, r3, #28
 80093d4:	f100 80aa 	bmi.w	800952c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	075a      	lsls	r2, r3, #29
 80093dc:	f100 80cb 	bmi.w	8009576 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e0:	69a2      	ldr	r2, [r4, #24]
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	f040 8134 	bne.w	8009650 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80093e8:	2000      	movs	r0, #0
 80093ea:	e02b      	b.n	8009444 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80093ec:	4b96      	ldr	r3, [pc, #600]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	f002 020c 	and.w	r2, r2, #12
 80093f4:	2a04      	cmp	r2, #4
 80093f6:	d007      	beq.n	8009408 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	f002 020c 	and.w	r2, r2, #12
 80093fe:	2a08      	cmp	r2, #8
 8009400:	d10b      	bne.n	800941a <HAL_RCC_OscConfig+0x5e>
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	0256      	lsls	r6, r2, #9
 8009406:	d508      	bpl.n	800941a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009408:	4b8f      	ldr	r3, [pc, #572]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	039d      	lsls	r5, r3, #14
 800940e:	d5dc      	bpl.n	80093ca <HAL_RCC_OscConfig+0xe>
 8009410:	6863      	ldr	r3, [r4, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1d9      	bne.n	80093ca <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8009416:	2001      	movs	r0, #1
 8009418:	e014      	b.n	8009444 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800941a:	6862      	ldr	r2, [r4, #4]
 800941c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009420:	d113      	bne.n	800944a <HAL_RCC_OscConfig+0x8e>
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009428:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800942a:	f7fc fed5 	bl	80061d8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800942e:	4e86      	ldr	r6, [pc, #536]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8009430:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009432:	6833      	ldr	r3, [r6, #0]
 8009434:	0398      	lsls	r0, r3, #14
 8009436:	d4c8      	bmi.n	80093ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009438:	f7fc fece 	bl	80061d8 <HAL_GetTick>
 800943c:	1b40      	subs	r0, r0, r5
 800943e:	2864      	cmp	r0, #100	; 0x64
 8009440:	d9f7      	bls.n	8009432 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8009442:	2003      	movs	r0, #3
}
 8009444:	b002      	add	sp, #8
 8009446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800944a:	4d7f      	ldr	r5, [pc, #508]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b992      	cbnz	r2, 8009476 <HAL_RCC_OscConfig+0xba>
 8009450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800945c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800945e:	f7fc febb 	bl	80061d8 <HAL_GetTick>
 8009462:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	0399      	lsls	r1, r3, #14
 8009468:	d5af      	bpl.n	80093ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800946a:	f7fc feb5 	bl	80061d8 <HAL_GetTick>
 800946e:	1b80      	subs	r0, r0, r6
 8009470:	2864      	cmp	r0, #100	; 0x64
 8009472:	d9f7      	bls.n	8009464 <HAL_RCC_OscConfig+0xa8>
 8009474:	e7e5      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009476:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800947a:	d107      	bne.n	800948c <HAL_RCC_OscConfig+0xd0>
 800947c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	e7ce      	b.n	800942a <HAL_RCC_OscConfig+0x6e>
 800948c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009498:	e7f6      	b.n	8009488 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800949a:	4b6b      	ldr	r3, [pc, #428]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	f012 0f0c 	tst.w	r2, #12
 80094a2:	d007      	beq.n	80094b4 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	f002 020c 	and.w	r2, r2, #12
 80094aa:	2a08      	cmp	r2, #8
 80094ac:	d111      	bne.n	80094d2 <HAL_RCC_OscConfig+0x116>
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	0252      	lsls	r2, r2, #9
 80094b2:	d40e      	bmi.n	80094d2 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094b4:	4a64      	ldr	r2, [pc, #400]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	079b      	lsls	r3, r3, #30
 80094ba:	d502      	bpl.n	80094c2 <HAL_RCC_OscConfig+0x106>
 80094bc:	68e3      	ldr	r3, [r4, #12]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d1a9      	bne.n	8009416 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	6921      	ldr	r1, [r4, #16]
 80094c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80094ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80094ce:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094d0:	e77e      	b.n	80093d0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094d2:	68e2      	ldr	r2, [r4, #12]
 80094d4:	b1c2      	cbz	r2, 8009508 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80094d6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094d8:	4d5b      	ldr	r5, [pc, #364]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80094e0:	f7fc fe7a 	bl	80061d8 <HAL_GetTick>
 80094e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e6:	682b      	ldr	r3, [r5, #0]
 80094e8:	079f      	lsls	r7, r3, #30
 80094ea:	d507      	bpl.n	80094fc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	6922      	ldr	r2, [r4, #16]
 80094f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80094f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	e769      	b.n	80093d0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094fc:	f7fc fe6c 	bl	80061d8 <HAL_GetTick>
 8009500:	1b80      	subs	r0, r0, r6
 8009502:	2802      	cmp	r0, #2
 8009504:	d9ef      	bls.n	80094e6 <HAL_RCC_OscConfig+0x12a>
 8009506:	e79c      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8009508:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800950a:	4e4f      	ldr	r6, [pc, #316]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009512:	f7fc fe61 	bl	80061d8 <HAL_GetTick>
 8009516:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	0798      	lsls	r0, r3, #30
 800951c:	f57f af58 	bpl.w	80093d0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009520:	f7fc fe5a 	bl	80061d8 <HAL_GetTick>
 8009524:	1b40      	subs	r0, r0, r5
 8009526:	2802      	cmp	r0, #2
 8009528:	d9f6      	bls.n	8009518 <HAL_RCC_OscConfig+0x15c>
 800952a:	e78a      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800952c:	6963      	ldr	r3, [r4, #20]
 800952e:	4d46      	ldr	r5, [pc, #280]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 8009530:	b183      	cbz	r3, 8009554 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8009532:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009534:	f043 0301 	orr.w	r3, r3, #1
 8009538:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800953a:	f7fc fe4d 	bl	80061d8 <HAL_GetTick>
 800953e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009540:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009542:	079b      	lsls	r3, r3, #30
 8009544:	f53f af48 	bmi.w	80093d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009548:	f7fc fe46 	bl	80061d8 <HAL_GetTick>
 800954c:	1b80      	subs	r0, r0, r6
 800954e:	2802      	cmp	r0, #2
 8009550:	d9f6      	bls.n	8009540 <HAL_RCC_OscConfig+0x184>
 8009552:	e776      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8009554:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009556:	f023 0301 	bic.w	r3, r3, #1
 800955a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800955c:	f7fc fe3c 	bl	80061d8 <HAL_GetTick>
 8009560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009562:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009564:	079f      	lsls	r7, r3, #30
 8009566:	f57f af37 	bpl.w	80093d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800956a:	f7fc fe35 	bl	80061d8 <HAL_GetTick>
 800956e:	1b80      	subs	r0, r0, r6
 8009570:	2802      	cmp	r0, #2
 8009572:	d9f6      	bls.n	8009562 <HAL_RCC_OscConfig+0x1a6>
 8009574:	e765      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009576:	4b34      	ldr	r3, [pc, #208]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 8009578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800957a:	00d0      	lsls	r0, r2, #3
 800957c:	d427      	bmi.n	80095ce <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800957e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8009580:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009582:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009586:	641a      	str	r2, [r3, #64]	; 0x40
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009592:	4d2e      	ldr	r5, [pc, #184]	; (800964c <HAL_RCC_OscConfig+0x290>)
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	05d9      	lsls	r1, r3, #23
 8009598:	d51b      	bpl.n	80095d2 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	4d2a      	ldr	r5, [pc, #168]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d127      	bne.n	80095f2 <HAL_RCC_OscConfig+0x236>
 80095a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095aa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80095ae:	f7fc fe13 	bl	80061d8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b2:	4e25      	ldr	r6, [pc, #148]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80095b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80095b8:	079b      	lsls	r3, r3, #30
 80095ba:	d53f      	bpl.n	800963c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80095bc:	2f00      	cmp	r7, #0
 80095be:	f43f af0f 	beq.w	80093e0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80095c2:	4a21      	ldr	r2, [pc, #132]	; (8009648 <HAL_RCC_OscConfig+0x28c>)
 80095c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80095c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ca:	6413      	str	r3, [r2, #64]	; 0x40
 80095cc:	e708      	b.n	80093e0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80095ce:	2700      	movs	r7, #0
 80095d0:	e7df      	b.n	8009592 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80095da:	f7fc fdfd 	bl	80061d8 <HAL_GetTick>
 80095de:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	05da      	lsls	r2, r3, #23
 80095e4:	d4d9      	bmi.n	800959a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095e6:	f7fc fdf7 	bl	80061d8 <HAL_GetTick>
 80095ea:	1b80      	subs	r0, r0, r6
 80095ec:	2864      	cmp	r0, #100	; 0x64
 80095ee:	d9f7      	bls.n	80095e0 <HAL_RCC_OscConfig+0x224>
 80095f0:	e727      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f2:	b9ab      	cbnz	r3, 8009620 <HAL_RCC_OscConfig+0x264>
 80095f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095fa:	f023 0301 	bic.w	r3, r3, #1
 80095fe:	672b      	str	r3, [r5, #112]	; 0x70
 8009600:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009602:	f023 0304 	bic.w	r3, r3, #4
 8009606:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009608:	f7fc fde6 	bl	80061d8 <HAL_GetTick>
 800960c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800960e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009610:	0798      	lsls	r0, r3, #30
 8009612:	d5d3      	bpl.n	80095bc <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009614:	f7fc fde0 	bl	80061d8 <HAL_GetTick>
 8009618:	1b80      	subs	r0, r0, r6
 800961a:	4540      	cmp	r0, r8
 800961c:	d9f7      	bls.n	800960e <HAL_RCC_OscConfig+0x252>
 800961e:	e710      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009620:	2b05      	cmp	r3, #5
 8009622:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009624:	d103      	bne.n	800962e <HAL_RCC_OscConfig+0x272>
 8009626:	f043 0304 	orr.w	r3, r3, #4
 800962a:	672b      	str	r3, [r5, #112]	; 0x70
 800962c:	e7b9      	b.n	80095a2 <HAL_RCC_OscConfig+0x1e6>
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	672b      	str	r3, [r5, #112]	; 0x70
 8009634:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009636:	f023 0304 	bic.w	r3, r3, #4
 800963a:	e7b5      	b.n	80095a8 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800963c:	f7fc fdcc 	bl	80061d8 <HAL_GetTick>
 8009640:	1b40      	subs	r0, r0, r5
 8009642:	4540      	cmp	r0, r8
 8009644:	d9b7      	bls.n	80095b6 <HAL_RCC_OscConfig+0x1fa>
 8009646:	e6fc      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
 8009648:	40023800 	.word	0x40023800
 800964c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009650:	4d3c      	ldr	r5, [pc, #240]	; (8009744 <HAL_RCC_OscConfig+0x388>)
 8009652:	68ab      	ldr	r3, [r5, #8]
 8009654:	f003 030c 	and.w	r3, r3, #12
 8009658:	2b08      	cmp	r3, #8
 800965a:	d042      	beq.n	80096e2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800965c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800965e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009664:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009666:	d12f      	bne.n	80096c8 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8009668:	f7fc fdb6 	bl	80061d8 <HAL_GetTick>
 800966c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800966e:	682b      	ldr	r3, [r5, #0]
 8009670:	0199      	lsls	r1, r3, #6
 8009672:	d423      	bmi.n	80096bc <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009674:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009678:	4313      	orrs	r3, r2
 800967a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800967c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009682:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009686:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009688:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800968c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800968e:	0852      	lsrs	r2, r2, #1
 8009690:	3a01      	subs	r2, #1
 8009692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009696:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800969e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096a0:	f7fc fd9a 	bl	80061d8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a4:	4d27      	ldr	r5, [pc, #156]	; (8009744 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 80096a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	019a      	lsls	r2, r3, #6
 80096ac:	f53f ae9c 	bmi.w	80093e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096b0:	f7fc fd92 	bl	80061d8 <HAL_GetTick>
 80096b4:	1b00      	subs	r0, r0, r4
 80096b6:	2802      	cmp	r0, #2
 80096b8:	d9f6      	bls.n	80096a8 <HAL_RCC_OscConfig+0x2ec>
 80096ba:	e6c2      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096bc:	f7fc fd8c 	bl	80061d8 <HAL_GetTick>
 80096c0:	1b80      	subs	r0, r0, r6
 80096c2:	2802      	cmp	r0, #2
 80096c4:	d9d3      	bls.n	800966e <HAL_RCC_OscConfig+0x2b2>
 80096c6:	e6bc      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80096c8:	f7fc fd86 	bl	80061d8 <HAL_GetTick>
 80096cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	019b      	lsls	r3, r3, #6
 80096d2:	f57f ae89 	bpl.w	80093e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096d6:	f7fc fd7f 	bl	80061d8 <HAL_GetTick>
 80096da:	1b00      	subs	r0, r0, r4
 80096dc:	2802      	cmp	r0, #2
 80096de:	d9f6      	bls.n	80096ce <HAL_RCC_OscConfig+0x312>
 80096e0:	e6af      	b.n	8009442 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096e2:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80096e4:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096e6:	f43f ae96 	beq.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ee:	69e1      	ldr	r1, [r4, #28]
 80096f0:	428a      	cmp	r2, r1
 80096f2:	f47f ae90 	bne.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fa:	6a21      	ldr	r1, [r4, #32]
 80096fc:	428a      	cmp	r2, r1
 80096fe:	f47f ae8a 	bne.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009702:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009706:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009708:	401a      	ands	r2, r3
 800970a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800970e:	f47f ae82 	bne.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009714:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8009718:	0852      	lsrs	r2, r2, #1
 800971a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800971c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8009720:	f47f ae79 	bne.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009728:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800972a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800972e:	f47f ae72 	bne.w	8009416 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009732:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009736:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009738:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800973c:	f43f ae54 	beq.w	80093e8 <HAL_RCC_OscConfig+0x2c>
 8009740:	e669      	b.n	8009416 <HAL_RCC_OscConfig+0x5a>
 8009742:	bf00      	nop
 8009744:	40023800 	.word	0x40023800

08009748 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009748:	4913      	ldr	r1, [pc, #76]	; (8009798 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800974a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800974c:	688b      	ldr	r3, [r1, #8]
 800974e:	f003 030c 	and.w	r3, r3, #12
 8009752:	2b04      	cmp	r3, #4
 8009754:	d01b      	beq.n	800978e <HAL_RCC_GetSysClockFreq+0x46>
 8009756:	2b08      	cmp	r3, #8
 8009758:	d11b      	bne.n	8009792 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800975a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800975c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800975e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009760:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009764:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009768:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800976c:	bf1a      	itte	ne
 800976e:	480b      	ldrne	r0, [pc, #44]	; (800979c <HAL_RCC_GetSysClockFreq+0x54>)
 8009770:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009772:	480b      	ldreq	r0, [pc, #44]	; (80097a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8009774:	fba1 0100 	umull	r0, r1, r1, r0
 8009778:	f7f6 fdb2 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <HAL_RCC_GetSysClockFreq+0x50>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009784:	3301      	adds	r3, #1
 8009786:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8009788:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800978c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800978e:	4803      	ldr	r0, [pc, #12]	; (800979c <HAL_RCC_GetSysClockFreq+0x54>)
 8009790:	e7fc      	b.n	800978c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8009792:	4803      	ldr	r0, [pc, #12]	; (80097a0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8009794:	e7fa      	b.n	800978c <HAL_RCC_GetSysClockFreq+0x44>
 8009796:	bf00      	nop
 8009798:	40023800 	.word	0x40023800
 800979c:	017d7840 	.word	0x017d7840
 80097a0:	00f42400 	.word	0x00f42400

080097a4 <HAL_RCC_ClockConfig>:
{
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80097aa:	4604      	mov	r4, r0
 80097ac:	b910      	cbnz	r0, 80097b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80097ae:	2001      	movs	r0, #1
}
 80097b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097b4:	4a46      	ldr	r2, [pc, #280]	; (80098d0 <HAL_RCC_ClockConfig+0x12c>)
 80097b6:	6813      	ldr	r3, [r2, #0]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	428b      	cmp	r3, r1
 80097be:	d328      	bcc.n	8009812 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	0797      	lsls	r7, r2, #30
 80097c4:	d430      	bmi.n	8009828 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097c6:	07d0      	lsls	r0, r2, #31
 80097c8:	d444      	bmi.n	8009854 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097ca:	4a41      	ldr	r2, [pc, #260]	; (80098d0 <HAL_RCC_ClockConfig+0x12c>)
 80097cc:	6813      	ldr	r3, [r2, #0]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	42ab      	cmp	r3, r5
 80097d4:	d867      	bhi.n	80098a6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	0751      	lsls	r1, r2, #29
 80097da:	d470      	bmi.n	80098be <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097dc:	0713      	lsls	r3, r2, #28
 80097de:	d507      	bpl.n	80097f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80097e0:	4a3c      	ldr	r2, [pc, #240]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 80097e2:	6921      	ldr	r1, [r4, #16]
 80097e4:	6893      	ldr	r3, [r2, #8]
 80097e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80097ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80097ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80097f0:	f7ff ffaa 	bl	8009748 <HAL_RCC_GetSysClockFreq>
 80097f4:	4b37      	ldr	r3, [pc, #220]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 80097f6:	4a38      	ldr	r2, [pc, #224]	; (80098d8 <HAL_RCC_ClockConfig+0x134>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	40d8      	lsrs	r0, r3
 8009802:	4b36      	ldr	r3, [pc, #216]	; (80098dc <HAL_RCC_ClockConfig+0x138>)
 8009804:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009806:	4b36      	ldr	r3, [pc, #216]	; (80098e0 <HAL_RCC_ClockConfig+0x13c>)
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	f7fa fbe9 	bl	8003fe0 <HAL_InitTick>
  return HAL_OK;
 800980e:	2000      	movs	r0, #0
 8009810:	e7ce      	b.n	80097b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	f023 030f 	bic.w	r3, r3, #15
 8009818:	430b      	orrs	r3, r1
 800981a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800981c:	6813      	ldr	r3, [r2, #0]
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	428b      	cmp	r3, r1
 8009824:	d1c3      	bne.n	80097ae <HAL_RCC_ClockConfig+0xa>
 8009826:	e7cb      	b.n	80097c0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009828:	f012 0f04 	tst.w	r2, #4
 800982c:	4b29      	ldr	r3, [pc, #164]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 800982e:	d003      	beq.n	8009838 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009830:	6899      	ldr	r1, [r3, #8]
 8009832:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8009836:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009838:	0716      	lsls	r6, r2, #28
 800983a:	d503      	bpl.n	8009844 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800983c:	6899      	ldr	r1, [r3, #8]
 800983e:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8009842:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009844:	4923      	ldr	r1, [pc, #140]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 8009846:	68a0      	ldr	r0, [r4, #8]
 8009848:	688b      	ldr	r3, [r1, #8]
 800984a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800984e:	4303      	orrs	r3, r0
 8009850:	608b      	str	r3, [r1, #8]
 8009852:	e7b8      	b.n	80097c6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4b1f      	ldr	r3, [pc, #124]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 8009858:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800985a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800985c:	d11b      	bne.n	8009896 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800985e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009862:	d0a4      	beq.n	80097ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009864:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009866:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800986a:	4f1a      	ldr	r7, [pc, #104]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800986c:	f022 0203 	bic.w	r2, r2, #3
 8009870:	430a      	orrs	r2, r1
 8009872:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8009874:	f7fc fcb0 	bl	80061d8 <HAL_GetTick>
 8009878:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6862      	ldr	r2, [r4, #4]
 800987e:	f003 030c 	and.w	r3, r3, #12
 8009882:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009886:	d0a0      	beq.n	80097ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009888:	f7fc fca6 	bl	80061d8 <HAL_GetTick>
 800988c:	1b80      	subs	r0, r0, r6
 800988e:	4540      	cmp	r0, r8
 8009890:	d9f3      	bls.n	800987a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8009892:	2003      	movs	r0, #3
 8009894:	e78c      	b.n	80097b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009896:	2902      	cmp	r1, #2
 8009898:	d102      	bne.n	80098a0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800989a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800989e:	e7e0      	b.n	8009862 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098a0:	f012 0f02 	tst.w	r2, #2
 80098a4:	e7dd      	b.n	8009862 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	f023 030f 	bic.w	r3, r3, #15
 80098ac:	432b      	orrs	r3, r5
 80098ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098b0:	6813      	ldr	r3, [r2, #0]
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	42ab      	cmp	r3, r5
 80098b8:	f47f af79 	bne.w	80097ae <HAL_RCC_ClockConfig+0xa>
 80098bc:	e78b      	b.n	80097d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098be:	4905      	ldr	r1, [pc, #20]	; (80098d4 <HAL_RCC_ClockConfig+0x130>)
 80098c0:	68e0      	ldr	r0, [r4, #12]
 80098c2:	688b      	ldr	r3, [r1, #8]
 80098c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80098c8:	4303      	orrs	r3, r0
 80098ca:	608b      	str	r3, [r1, #8]
 80098cc:	e786      	b.n	80097dc <HAL_RCC_ClockConfig+0x38>
 80098ce:	bf00      	nop
 80098d0:	40023c00 	.word	0x40023c00
 80098d4:	40023800 	.word	0x40023800
 80098d8:	08023535 	.word	0x08023535
 80098dc:	20000060 	.word	0x20000060
 80098e0:	20000068 	.word	0x20000068

080098e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098e4:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80098e6:	4a05      	ldr	r2, [pc, #20]	; (80098fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80098ee:	5cd3      	ldrb	r3, [r2, r3]
 80098f0:	4a03      	ldr	r2, [pc, #12]	; (8009900 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80098f2:	6810      	ldr	r0, [r2, #0]
}
 80098f4:	40d8      	lsrs	r0, r3
 80098f6:	4770      	bx	lr
 80098f8:	40023800 	.word	0x40023800
 80098fc:	08023545 	.word	0x08023545
 8009900:	20000060 	.word	0x20000060

08009904 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009904:	230f      	movs	r3, #15
 8009906:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <HAL_RCC_GetClockConfig+0x34>)
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	f002 0203 	and.w	r2, r2, #3
 8009910:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009918:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8009920:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	08db      	lsrs	r3, r3, #3
 8009926:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800992a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800992c:	4b03      	ldr	r3, [pc, #12]	; (800993c <HAL_RCC_GetClockConfig+0x38>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 030f 	and.w	r3, r3, #15
 8009934:	600b      	str	r3, [r1, #0]
}
 8009936:	4770      	bx	lr
 8009938:	40023800 	.word	0x40023800
 800993c:	40023c00 	.word	0x40023c00

08009940 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009940:	6803      	ldr	r3, [r0, #0]
{
 8009942:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009946:	f013 0601 	ands.w	r6, r3, #1
{
 800994a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800994c:	d00b      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800994e:	4ab0      	ldr	r2, [pc, #704]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009950:	6891      	ldr	r1, [r2, #8]
 8009952:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8009956:	6091      	str	r1, [r2, #8]
 8009958:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800995a:	6891      	ldr	r1, [r2, #8]
 800995c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800995e:	fab6 f686 	clz	r6, r6
 8009962:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009964:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009966:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800996a:	d012      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800996c:	49a8      	ldr	r1, [pc, #672]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800996e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8009970:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009974:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009978:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800997c:	bf08      	it	eq
 800997e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009980:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009984:	bf16      	itet	ne
 8009986:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800998a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800998c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800998e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009992:	02d9      	lsls	r1, r3, #11
 8009994:	d510      	bpl.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009996:	489e      	ldr	r0, [pc, #632]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009998:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800999a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800999e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80099a2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80099a6:	ea42 0201 	orr.w	r2, r2, r1
 80099aa:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80099ae:	f000 81a7 	beq.w	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80099b2:	2900      	cmp	r1, #0
 80099b4:	bf08      	it	eq
 80099b6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80099b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80099bc:	bf18      	it	ne
 80099be:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80099c0:	069a      	lsls	r2, r3, #26
 80099c2:	d531      	bpl.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80099c4:	4b92      	ldr	r3, [pc, #584]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80099c6:	4f93      	ldr	r7, [pc, #588]	; (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80099c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099ce:	641a      	str	r2, [r3, #64]	; 0x40
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e2:	f7fc fbf9 	bl	80061d8 <HAL_GetTick>
 80099e6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	05db      	lsls	r3, r3, #23
 80099ec:	f140 818a 	bpl.w	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80099f0:	4f87      	ldr	r7, [pc, #540]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80099f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80099f8:	f040 818f 	bne.w	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80099fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009a02:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009a06:	4a82      	ldr	r2, [pc, #520]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a08:	f040 81ad 	bne.w	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009a0c:	6891      	ldr	r1, [r2, #8]
 8009a0e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8009a12:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009a16:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8009a1a:	4301      	orrs	r1, r0
 8009a1c:	6091      	str	r1, [r2, #8]
 8009a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	06da      	lsls	r2, r3, #27
 8009a2c:	d50c      	bpl.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a2e:	4a78      	ldr	r2, [pc, #480]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a30:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8009a34:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009a38:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8009a3c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8009a40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009a42:	4301      	orrs	r1, r0
 8009a44:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a48:	045f      	lsls	r7, r3, #17
 8009a4a:	d508      	bpl.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a4c:	4970      	ldr	r1, [pc, #448]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8009a50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009a54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009a58:	4302      	orrs	r2, r0
 8009a5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a5e:	0418      	lsls	r0, r3, #16
 8009a60:	d508      	bpl.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a62:	496b      	ldr	r1, [pc, #428]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a64:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009a66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009a6a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8009a6e:	4302      	orrs	r2, r0
 8009a70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a74:	03d9      	lsls	r1, r3, #15
 8009a76:	d508      	bpl.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a78:	4965      	ldr	r1, [pc, #404]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009a7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009a80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009a84:	4302      	orrs	r2, r0
 8009a86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a8a:	039a      	lsls	r2, r3, #14
 8009a8c:	d508      	bpl.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a8e:	4960      	ldr	r1, [pc, #384]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009a90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009a92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009a96:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8009a9a:	4302      	orrs	r2, r0
 8009a9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009aa0:	065f      	lsls	r7, r3, #25
 8009aa2:	d508      	bpl.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009aa4:	495a      	ldr	r1, [pc, #360]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009aa6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009aa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009aac:	f022 0203 	bic.w	r2, r2, #3
 8009ab0:	4302      	orrs	r2, r0
 8009ab2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ab6:	0618      	lsls	r0, r3, #24
 8009ab8:	d508      	bpl.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009aba:	4955      	ldr	r1, [pc, #340]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009abc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009abe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009ac2:	f022 020c 	bic.w	r2, r2, #12
 8009ac6:	4302      	orrs	r2, r0
 8009ac8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009acc:	05d9      	lsls	r1, r3, #23
 8009ace:	d508      	bpl.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ad0:	494f      	ldr	r1, [pc, #316]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009ad2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009ad4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009ad8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009adc:	4302      	orrs	r2, r0
 8009ade:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ae2:	059a      	lsls	r2, r3, #22
 8009ae4:	d508      	bpl.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ae6:	494a      	ldr	r1, [pc, #296]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009ae8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009aea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009aee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009af2:	4302      	orrs	r2, r0
 8009af4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009af8:	055f      	lsls	r7, r3, #21
 8009afa:	d508      	bpl.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009afc:	4944      	ldr	r1, [pc, #272]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009b08:	4302      	orrs	r2, r0
 8009b0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b0e:	0518      	lsls	r0, r3, #20
 8009b10:	d508      	bpl.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009b12:	493f      	ldr	r1, [pc, #252]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b1e:	4302      	orrs	r2, r0
 8009b20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b24:	04d9      	lsls	r1, r3, #19
 8009b26:	d508      	bpl.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b28:	4939      	ldr	r1, [pc, #228]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8009b2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009b34:	4302      	orrs	r2, r0
 8009b36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009b3a:	049a      	lsls	r2, r3, #18
 8009b3c:	d508      	bpl.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009b3e:	4934      	ldr	r1, [pc, #208]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b40:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009b42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b4a:	4302      	orrs	r2, r0
 8009b4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b50:	025f      	lsls	r7, r3, #9
 8009b52:	d508      	bpl.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b54:	492e      	ldr	r1, [pc, #184]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b56:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009b58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009b60:	4302      	orrs	r2, r0
 8009b62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009b66:	0298      	lsls	r0, r3, #10
 8009b68:	d50c      	bpl.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b6a:	4829      	ldr	r0, [pc, #164]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b6c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009b6e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8009b72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b76:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8009b7a:	bf08      	it	eq
 8009b7c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8009b84:	f013 0f08 	tst.w	r3, #8
 8009b88:	bf18      	it	ne
 8009b8a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b8c:	0359      	lsls	r1, r3, #13
 8009b8e:	d508      	bpl.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b90:	491f      	ldr	r1, [pc, #124]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009b92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009b94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009b98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b9c:	4302      	orrs	r2, r0
 8009b9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009ba2:	021a      	lsls	r2, r3, #8
 8009ba4:	d509      	bpl.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ba6:	491a      	ldr	r1, [pc, #104]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009ba8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009bac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009bb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009bb4:	4302      	orrs	r2, r0
 8009bb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009bba:	015f      	lsls	r7, r3, #5
 8009bbc:	d509      	bpl.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009bbe:	4914      	ldr	r1, [pc, #80]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009bc0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8009bc4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8009bc8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009bcc:	4302      	orrs	r2, r0
 8009bce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009bd2:	0118      	lsls	r0, r3, #4
 8009bd4:	d509      	bpl.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009bd6:	490e      	ldr	r1, [pc, #56]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009bd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009bdc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8009be0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009be4:	4302      	orrs	r2, r0
 8009be6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009bea:	00d9      	lsls	r1, r3, #3
 8009bec:	d509      	bpl.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009bee:	4908      	ldr	r1, [pc, #32]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009bf0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009bf4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8009bf8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009bfc:	4302      	orrs	r2, r0
 8009bfe:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c02:	2e01      	cmp	r6, #1
 8009c04:	f000 80b3 	beq.w	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009c08:	019a      	lsls	r2, r3, #6
 8009c0a:	f100 80b0 	bmi.w	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009c10:	40023800 	.word	0x40023800
 8009c14:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009c18:	2d01      	cmp	r5, #1
 8009c1a:	d16f      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009c1c:	4d9d      	ldr	r5, [pc, #628]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c24:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c26:	f7fc fad7 	bl	80061d8 <HAL_GetTick>
 8009c2a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	009f      	lsls	r7, r3, #2
 8009c30:	f100 8121 	bmi.w	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	0316      	lsls	r6, r2, #12
 8009c38:	d501      	bpl.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8009c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c3c:	b11b      	cbz	r3, 8009c46 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8009c3e:	02d0      	lsls	r0, r2, #11
 8009c40:	d51c      	bpl.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c44:	b9d3      	cbnz	r3, 8009c7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009c46:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c4a:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c52:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6961      	ldr	r1, [r4, #20]
 8009c5a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009c5e:	69a1      	ldr	r1, [r4, #24]
 8009c60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009c64:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c68:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8009c6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009c6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009c72:	3901      	subs	r1, #1
 8009c74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009c78:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009c7c:	0291      	lsls	r1, r2, #10
 8009c7e:	d515      	bpl.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009c80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c86:	d111      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c88:	4982      	ldr	r1, [pc, #520]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009c8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c8e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8009c96:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8009c9a:	4303      	orrs	r3, r0
 8009c9c:	6960      	ldr	r0, [r4, #20]
 8009c9e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8009ca2:	6a20      	ldr	r0, [r4, #32]
 8009ca4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009cac:	0712      	lsls	r2, r2, #28
 8009cae:	d519      	bpl.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009cb0:	4a78      	ldr	r2, [pc, #480]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009cb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009cb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009cba:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8009cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6961      	ldr	r1, [r4, #20]
 8009cc6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009cca:	69e1      	ldr	r1, [r4, #28]
 8009ccc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8009cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cd4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009cd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009cda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ce4:	4c6b      	ldr	r4, [pc, #428]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cee:	f7fc fa73 	bl	80061d8 <HAL_GetTick>
 8009cf2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	f140 80c4 	bpl.w	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e009      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8009d00:	2601      	movs	r6, #1
 8009d02:	e659      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d04:	f7fc fa68 	bl	80061d8 <HAL_GetTick>
 8009d08:	eba0 0008 	sub.w	r0, r0, r8
 8009d0c:	2864      	cmp	r0, #100	; 0x64
 8009d0e:	f67f ae6b 	bls.w	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8009d12:	2003      	movs	r0, #3
}
 8009d14:	b003      	add	sp, #12
 8009d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009d1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009d1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009d20:	4293      	cmp	r3, r2
 8009d22:	f43f ae6b 	beq.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d32:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d3a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8009d3c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d40:	07d8      	lsls	r0, r3, #31
 8009d42:	f57f ae5b 	bpl.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8009d46:	f7fc fa47 	bl	80061d8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d4a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009d4e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d52:	0799      	lsls	r1, r3, #30
 8009d54:	f53f ae52 	bmi.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d58:	f7fc fa3e 	bl	80061d8 <HAL_GetTick>
 8009d5c:	eba0 0008 	sub.w	r0, r0, r8
 8009d60:	4548      	cmp	r0, r9
 8009d62:	d9f5      	bls.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009d64:	e7d5      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d66:	6891      	ldr	r1, [r2, #8]
 8009d68:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009d6c:	e656      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8009d6e:	4e49      	ldr	r6, [pc, #292]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009d70:	6833      	ldr	r3, [r6, #0]
 8009d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d76:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009d78:	f7fc fa2e 	bl	80061d8 <HAL_GetTick>
 8009d7c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d7e:	6833      	ldr	r3, [r6, #0]
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	d472      	bmi.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009d84:	6822      	ldr	r2, [r4, #0]
 8009d86:	07d7      	lsls	r7, r2, #31
 8009d88:	d512      	bpl.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8009d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d8c:	b983      	cbnz	r3, 8009db0 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d8e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d92:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d9a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	6861      	ldr	r1, [r4, #4]
 8009da2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009da6:	68a1      	ldr	r1, [r4, #8]
 8009da8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8009dac:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009db0:	0316      	lsls	r6, r2, #12
 8009db2:	d503      	bpl.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dba:	d005      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009dbc:	02d0      	lsls	r0, r2, #11
 8009dbe:	d51e      	bpl.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dc6:	d11a      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009dc8:	4932      	ldr	r1, [pc, #200]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009dca:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009dce:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009dd6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8009dda:	4303      	orrs	r3, r0
 8009ddc:	6860      	ldr	r0, [r4, #4]
 8009dde:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8009de2:	68e0      	ldr	r0, [r4, #12]
 8009de4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009dec:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8009df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009df2:	f020 001f 	bic.w	r0, r0, #31
 8009df6:	3b01      	subs	r3, #1
 8009df8:	4303      	orrs	r3, r0
 8009dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009dfe:	01d1      	lsls	r1, r2, #7
 8009e00:	d511      	bpl.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e02:	4924      	ldr	r1, [pc, #144]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009e04:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e08:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009e0c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8009e10:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8009e14:	4303      	orrs	r3, r0
 8009e16:	6860      	ldr	r0, [r4, #4]
 8009e18:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8009e1c:	6920      	ldr	r0, [r4, #16]
 8009e1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e26:	0192      	lsls	r2, r2, #6
 8009e28:	d50d      	bpl.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	6862      	ldr	r2, [r4, #4]
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009e34:	68e2      	ldr	r2, [r4, #12]
 8009e36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e3a:	68a2      	ldr	r2, [r4, #8]
 8009e3c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009e40:	4a14      	ldr	r2, [pc, #80]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009e42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8009e46:	4e13      	ldr	r6, [pc, #76]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8009e48:	6833      	ldr	r3, [r6, #0]
 8009e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e4e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009e50:	f7fc f9c2 	bl	80061d8 <HAL_GetTick>
 8009e54:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e56:	6833      	ldr	r3, [r6, #0]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	f53f aedd 	bmi.w	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e5e:	f7fc f9bb 	bl	80061d8 <HAL_GetTick>
 8009e62:	1bc0      	subs	r0, r0, r7
 8009e64:	2864      	cmp	r0, #100	; 0x64
 8009e66:	d9f6      	bls.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009e68:	e753      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e6a:	f7fc f9b5 	bl	80061d8 <HAL_GetTick>
 8009e6e:	1bc0      	subs	r0, r0, r7
 8009e70:	2864      	cmp	r0, #100	; 0x64
 8009e72:	d984      	bls.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009e74:	e74d      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e76:	f7fc f9af 	bl	80061d8 <HAL_GetTick>
 8009e7a:	1b80      	subs	r0, r0, r6
 8009e7c:	2864      	cmp	r0, #100	; 0x64
 8009e7e:	f67f aed5 	bls.w	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8009e82:	e746      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e84:	f7fc f9a8 	bl	80061d8 <HAL_GetTick>
 8009e88:	1b40      	subs	r0, r0, r5
 8009e8a:	2864      	cmp	r0, #100	; 0x64
 8009e8c:	f67f af32 	bls.w	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009e90:	e73f      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009e92:	bf00      	nop
 8009e94:	40023800 	.word	0x40023800

08009e98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	b1c8      	cbz	r0, 8009ed4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ea0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009ea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ea8:	b91b      	cbnz	r3, 8009eb2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009eaa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009eae:	f7fa f82d 	bl	8003f0c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009eb2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009eb4:	1d21      	adds	r1, r4, #4
 8009eb6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009eb8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ebc:	f000 f9cf 	bl	800a25e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009ec0:	6862      	ldr	r2, [r4, #4]
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	f000 fa05 	bl	800a2d4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009eca:	2301      	movs	r3, #1

  return HAL_OK;
 8009ecc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ece:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	e7fc      	b.n	8009ed2 <HAL_SDRAM_Init+0x3a>

08009ed8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009ed8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009eda:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009ede:	4605      	mov	r5, r0
 8009ee0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009ee2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009ee4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009ee6:	d010      	beq.n	8009f0a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009ee8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009eec:	2c01      	cmp	r4, #1
 8009eee:	d110      	bne.n	8009f12 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ef0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ef2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ef4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ef8:	f000 fa22 	bl	800a340 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009efc:	6833      	ldr	r3, [r6, #0]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d104      	bne.n	8009f0c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f02:	2305      	movs	r3, #5
 8009f04:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009f08:	2000      	movs	r0, #0
}
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009f0c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8009f10:	e7fa      	b.n	8009f08 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7f9      	b.n	8009f0a <HAL_SDRAM_SendCommand+0x32>

08009f16 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f16:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f1c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	b2d8      	uxtb	r0, r3
 8009f22:	d00d      	beq.n	8009f40 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009f24:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	b2dd      	uxtb	r5, r3
 8009f2c:	d109      	bne.n	8009f42 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f2e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f30:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f32:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f36:	f000 fa15 	bl	800a364 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009f3a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f3c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009f42:	2001      	movs	r0, #1
 8009f44:	e7fc      	b.n	8009f40 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08009f46 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f46:	4770      	bx	lr

08009f48 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d133      	bne.n	8009fb8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	2302      	movs	r3, #2
 8009f52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f56:	6803      	ldr	r3, [r0, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f60:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <HAL_TIM_Base_Start_IT+0x74>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01a      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6a:	d017      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f6c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d013      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00f      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f84:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d007      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x54>
 8009f94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d107      	bne.n	8009fac <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	4a08      	ldr	r2, [pc, #32]	; (8009fc0 <HAL_TIM_Base_Start_IT+0x78>)
 8009fa0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa2:	2a06      	cmp	r2, #6
 8009fa4:	d006      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8009fa6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009faa:	d003      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	f042 0201 	orr.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fb4:	2000      	movs	r0, #0
}
 8009fb6:	4770      	bx	lr
    return HAL_ERROR;
 8009fb8:	2001      	movs	r0, #1
 8009fba:	4770      	bx	lr
 8009fbc:	40010000 	.word	0x40010000
 8009fc0:	00010007 	.word	0x00010007

08009fc4 <HAL_TIM_OC_DelayElapsedCallback>:
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_TIM_IC_CaptureCallback>:
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009fc8:	4770      	bx	lr

08009fca <HAL_TIM_TriggerCallback>:
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fcc:	6803      	ldr	r3, [r0, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	0791      	lsls	r1, r2, #30
{
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fd6:	d50f      	bpl.n	8009ff8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	0792      	lsls	r2, r2, #30
 8009fdc:	d50c      	bpl.n	8009ff8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fde:	f06f 0202 	mvn.w	r2, #2
 8009fe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	0799      	lsls	r1, r3, #30
 8009fec:	f000 8085 	beq.w	800a0fa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ff0:	f7ff ffe9 	bl	8009fc6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	0752      	lsls	r2, r2, #29
 8009ffe:	d510      	bpl.n	800a022 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a000:	68da      	ldr	r2, [r3, #12]
 800a002:	0750      	lsls	r0, r2, #29
 800a004:	d50d      	bpl.n	800a022 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a006:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a00a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a00e:	2202      	movs	r2, #2
 800a010:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a018:	d075      	beq.n	800a106 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a01a:	f7ff ffd4 	bl	8009fc6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01e:	2300      	movs	r3, #0
 800a020:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	691a      	ldr	r2, [r3, #16]
 800a026:	0711      	lsls	r1, r2, #28
 800a028:	d50f      	bpl.n	800a04a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	0712      	lsls	r2, r2, #28
 800a02e:	d50c      	bpl.n	800a04a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a030:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a034:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a038:	2204      	movs	r2, #4
 800a03a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	079b      	lsls	r3, r3, #30
 800a040:	d067      	beq.n	800a112 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a042:	f7ff ffc0 	bl	8009fc6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a046:	2300      	movs	r3, #0
 800a048:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	06d0      	lsls	r0, r2, #27
 800a050:	d510      	bpl.n	800a074 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	06d1      	lsls	r1, r2, #27
 800a056:	d50d      	bpl.n	800a074 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a058:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a05c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a05e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a060:	2208      	movs	r2, #8
 800a062:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a06a:	d058      	beq.n	800a11e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800a06c:	f7ff ffab 	bl	8009fc6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a070:	2300      	movs	r3, #0
 800a072:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	691a      	ldr	r2, [r3, #16]
 800a078:	07d2      	lsls	r2, r2, #31
 800a07a:	d508      	bpl.n	800a08e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	07d0      	lsls	r0, r2, #31
 800a080:	d505      	bpl.n	800a08e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a082:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a086:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a088:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a08a:	f7f9 fce9 	bl	8003a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	691a      	ldr	r2, [r3, #16]
 800a092:	0611      	lsls	r1, r2, #24
 800a094:	d508      	bpl.n	800a0a8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	0612      	lsls	r2, r2, #24
 800a09a:	d505      	bpl.n	800a0a8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a09c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a0a4:	f000 f8d9 	bl	800a25a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	05d0      	lsls	r0, r2, #23
 800a0ae:	d508      	bpl.n	800a0c2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	0611      	lsls	r1, r2, #24
 800a0b4:	d505      	bpl.n	800a0c2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a0be:	f000 f8cd 	bl	800a25c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	0652      	lsls	r2, r2, #25
 800a0c8:	d508      	bpl.n	800a0dc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	0650      	lsls	r0, r2, #25
 800a0ce:	d505      	bpl.n	800a0dc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a0d8:	f7ff ff77 	bl	8009fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	0691      	lsls	r1, r2, #26
 800a0e2:	d522      	bpl.n	800a12a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0e4:	68da      	ldr	r2, [r3, #12]
 800a0e6:	0692      	lsls	r2, r2, #26
 800a0e8:	d51f      	bpl.n	800a12a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0ea:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0f0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a0f6:	f000 b8af 	b.w	800a258 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0fa:	f7ff ff63 	bl	8009fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7ff ff62 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 800a104:	e776      	b.n	8009ff4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a106:	f7ff ff5d 	bl	8009fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7ff ff5c 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 800a110:	e785      	b.n	800a01e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a112:	f7ff ff57 	bl	8009fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff ff56 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 800a11c:	e793      	b.n	800a046 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	f7ff ff51 	bl	8009fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a122:	4620      	mov	r0, r4
 800a124:	f7ff ff50 	bl	8009fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 800a128:	e7a2      	b.n	800a070 <HAL_TIM_IRQHandler+0xa4>
}
 800a12a:	bd10      	pop	{r4, pc}

0800a12c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a12c:	4a30      	ldr	r2, [pc, #192]	; (800a1f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800a12e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a130:	4290      	cmp	r0, r2
 800a132:	d012      	beq.n	800a15a <TIM_Base_SetConfig+0x2e>
 800a134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a138:	d00f      	beq.n	800a15a <TIM_Base_SetConfig+0x2e>
 800a13a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a13e:	4290      	cmp	r0, r2
 800a140:	d00b      	beq.n	800a15a <TIM_Base_SetConfig+0x2e>
 800a142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a146:	4290      	cmp	r0, r2
 800a148:	d007      	beq.n	800a15a <TIM_Base_SetConfig+0x2e>
 800a14a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a14e:	4290      	cmp	r0, r2
 800a150:	d003      	beq.n	800a15a <TIM_Base_SetConfig+0x2e>
 800a152:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a156:	4290      	cmp	r0, r2
 800a158:	d119      	bne.n	800a18e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800a15a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a160:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a162:	4a23      	ldr	r2, [pc, #140]	; (800a1f0 <TIM_Base_SetConfig+0xc4>)
 800a164:	4290      	cmp	r0, r2
 800a166:	d029      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a168:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a16c:	d026      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a16e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a172:	4290      	cmp	r0, r2
 800a174:	d022      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a17a:	4290      	cmp	r0, r2
 800a17c:	d01e      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a17e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a182:	4290      	cmp	r0, r2
 800a184:	d01a      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a186:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a18a:	4290      	cmp	r0, r2
 800a18c:	d016      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a18e:	4a19      	ldr	r2, [pc, #100]	; (800a1f4 <TIM_Base_SetConfig+0xc8>)
 800a190:	4290      	cmp	r0, r2
 800a192:	d013      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a198:	4290      	cmp	r0, r2
 800a19a:	d00f      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a19c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1a0:	4290      	cmp	r0, r2
 800a1a2:	d00b      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a1a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a1a8:	4290      	cmp	r0, r2
 800a1aa:	d007      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a1ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1b0:	4290      	cmp	r0, r2
 800a1b2:	d003      	beq.n	800a1bc <TIM_Base_SetConfig+0x90>
 800a1b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1b8:	4290      	cmp	r0, r2
 800a1ba:	d103      	bne.n	800a1c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c0:	68ca      	ldr	r2, [r1, #12]
 800a1c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1c4:	694a      	ldr	r2, [r1, #20]
 800a1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a1cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1ce:	688b      	ldr	r3, [r1, #8]
 800a1d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1d2:	680b      	ldr	r3, [r1, #0]
 800a1d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1d6:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <TIM_Base_SetConfig+0xc4>)
 800a1d8:	4298      	cmp	r0, r3
 800a1da:	d003      	beq.n	800a1e4 <TIM_Base_SetConfig+0xb8>
 800a1dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1e0:	4298      	cmp	r0, r3
 800a1e2:	d101      	bne.n	800a1e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1e4:	690b      	ldr	r3, [r1, #16]
 800a1e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	6143      	str	r3, [r0, #20]
}
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40010000 	.word	0x40010000
 800a1f4:	40014000 	.word	0x40014000

0800a1f8 <HAL_TIM_Base_Init>:
{
 800a1f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b350      	cbz	r0, 800a254 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a1fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a206:	b91b      	cbnz	r3, 800a210 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a208:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a20c:	f7ff fe9b 	bl	8009f46 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a210:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a212:	6820      	ldr	r0, [r4, #0]
 800a214:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800a216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a21a:	f7ff ff87 	bl	800a12c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a21e:	2301      	movs	r3, #1
  return HAL_OK;
 800a220:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a222:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a226:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a22a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a22e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a23a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a23e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a246:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a24a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a24e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a252:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a254:	2001      	movs	r0, #1
 800a256:	e7fc      	b.n	800a252 <HAL_TIM_Base_Init+0x5a>

0800a258 <HAL_TIMEx_CommutCallback>:
 800a258:	4770      	bx	lr

0800a25a <HAL_TIMEx_BreakCallback>:
 800a25a:	4770      	bx	lr

0800a25c <HAL_TIMEx_Break2Callback>:
 800a25c:	4770      	bx	lr

0800a25e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a25e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a262:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a264:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800a268:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800a26c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800a270:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800a274:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800a278:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a27a:	b9a2      	cbnz	r2, 800a2a6 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a27c:	ea43 0209 	orr.w	r2, r3, r9
 800a280:	6801      	ldr	r1, [r0, #0]
 800a282:	432a      	orrs	r2, r5
 800a284:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800a288:	ea42 0308 	orr.w	r3, r2, r8
 800a28c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800a290:	ea43 030e 	orr.w	r3, r3, lr
 800a294:	ea43 030c 	orr.w	r3, r3, ip
 800a298:	433b      	orrs	r3, r7
 800a29a:	4333      	orrs	r3, r6
 800a29c:	430b      	orrs	r3, r1
 800a29e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2a6:	6802      	ldr	r2, [r0, #0]
 800a2a8:	ea43 0309 	orr.w	r3, r3, r9
 800a2ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a2b4:	ea45 0308 	orr.w	r3, r5, r8
 800a2b8:	6842      	ldr	r2, [r0, #4]
 800a2ba:	ea43 030e 	orr.w	r3, r3, lr
 800a2be:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800a2c2:	ea43 030c 	orr.w	r3, r3, ip
 800a2c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800a2ca:	433b      	orrs	r3, r7
 800a2cc:	4333      	orrs	r3, r6
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	6043      	str	r3, [r0, #4]
 800a2d2:	e7e5      	b.n	800a2a0 <FMC_SDRAM_Init+0x42>

0800a2d4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a2d4:	68cb      	ldr	r3, [r1, #12]
 800a2d6:	f103 3cff 	add.w	ip, r3, #4294967295
 800a2da:	694b      	ldr	r3, [r1, #20]
{
 800a2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	680f      	ldr	r7, [r1, #0]
 800a2e2:	684c      	ldr	r4, [r1, #4]
 800a2e4:	688e      	ldr	r6, [r1, #8]
 800a2e6:	051b      	lsls	r3, r3, #20
 800a2e8:	690d      	ldr	r5, [r1, #16]
 800a2ea:	3c01      	subs	r4, #1
 800a2ec:	6989      	ldr	r1, [r1, #24]
 800a2ee:	3e01      	subs	r6, #1
 800a2f0:	3d01      	subs	r5, #1
 800a2f2:	3f01      	subs	r7, #1
 800a2f4:	3901      	subs	r1, #1
 800a2f6:	0124      	lsls	r4, r4, #4
 800a2f8:	0236      	lsls	r6, r6, #8
 800a2fa:	042d      	lsls	r5, r5, #16
 800a2fc:	0609      	lsls	r1, r1, #24
 800a2fe:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800a302:	b95a      	cbnz	r2, 800a31c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a304:	433b      	orrs	r3, r7
 800a306:	6882      	ldr	r2, [r0, #8]
 800a308:	4323      	orrs	r3, r4
 800a30a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a30e:	4333      	orrs	r3, r6
 800a310:	432b      	orrs	r3, r5
 800a312:	430b      	orrs	r3, r1
 800a314:	4313      	orrs	r3, r2
 800a316:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a318:	2000      	movs	r0, #0
 800a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a31c:	6882      	ldr	r2, [r0, #8]
 800a31e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a322:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800a326:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a328:	ea44 0306 	orr.w	r3, r4, r6
 800a32c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a32e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a330:	68c2      	ldr	r2, [r0, #12]
 800a332:	432b      	orrs	r3, r5
 800a334:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a338:	430b      	orrs	r3, r1
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60c3      	str	r3, [r0, #12]
 800a33e:	e7eb      	b.n	800a318 <FMC_SDRAM_Timing_Init+0x44>

0800a340 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a340:	6902      	ldr	r2, [r0, #16]
{
 800a342:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a344:	e9d1 3400 	ldrd	r3, r4, [r1]
 800a348:	0d92      	lsrs	r2, r2, #22
 800a34a:	4323      	orrs	r3, r4
 800a34c:	68cc      	ldr	r4, [r1, #12]
 800a34e:	0592      	lsls	r2, r2, #22
 800a350:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800a354:	4313      	orrs	r3, r2
 800a356:	688a      	ldr	r2, [r1, #8]
 800a358:	3a01      	subs	r2, #1
 800a35a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a35e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a360:	2000      	movs	r0, #0
 800a362:	bd10      	pop	{r4, pc}

0800a364 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a364:	6943      	ldr	r3, [r0, #20]
 800a366:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a36a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a36e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a372:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800a374:	2000      	movs	r0, #0
 800a376:	4770      	bx	lr

0800a378 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a378:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a37c:	b113      	cbz	r3, 800a384 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800a37e:	f06f 0005 	mvn.w	r0, #5
 800a382:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a384:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800a38a:	b912      	cbnz	r2, 800a392 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a38c:	f3ef 8211 	mrs	r2, BASEPRI
 800a390:	b112      	cbz	r2, 800a398 <osKernelInitialize+0x20>
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	2a02      	cmp	r2, #2
 800a396:	d0f2      	beq.n	800a37e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	b910      	cbnz	r0, 800a3a2 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a39c:	2201      	movs	r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3a0:	4770      	bx	lr
    } else {
      stat = osError;
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a3a6:	4770      	bx	lr
 800a3a8:	2000f55c 	.word	0x2000f55c

0800a3ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3ac:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ae:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3b2:	b113      	cbz	r3, 800a3ba <osKernelStart+0xe>
    stat = osErrorISR;
 800a3b4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800a3b8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ba:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800a3be:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800a3c0:	b912      	cbnz	r2, 800a3c8 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a3c6:	b112      	cbz	r2, 800a3ce <osKernelStart+0x22>
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	2a02      	cmp	r2, #2
 800a3cc:	d0f2      	beq.n	800a3b4 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	2a01      	cmp	r2, #1
 800a3d2:	d105      	bne.n	800a3e0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a3d8:	f001 fe7a 	bl	800c0d0 <vTaskStartScheduler>
      stat = osOK;
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7eb      	b.n	800a3b8 <osKernelStart+0xc>
      stat = osError;
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a3e4:	e7e8      	b.n	800a3b8 <osKernelStart+0xc>
 800a3e6:	bf00      	nop
 800a3e8:	2000f55c 	.word	0x2000f55c

0800a3ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a3f2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3f4:	460b      	mov	r3, r1
  hTask = NULL;
 800a3f6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a3fc:	bb22      	cbnz	r2, 800a448 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fe:	f3ef 8210 	mrs	r2, PRIMASK
 800a402:	b912      	cbnz	r2, 800a40a <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a404:	f3ef 8211 	mrs	r2, BASEPRI
 800a408:	b11a      	cbz	r2, 800a412 <osThreadNew+0x26>
 800a40a:	4a22      	ldr	r2, [pc, #136]	; (800a494 <osThreadNew+0xa8>)
 800a40c:	6812      	ldr	r2, [r2, #0]
 800a40e:	2a02      	cmp	r2, #2
 800a410:	d01a      	beq.n	800a448 <osThreadNew+0x5c>
 800a412:	b1c8      	cbz	r0, 800a448 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a414:	2c00      	cmp	r4, #0
 800a416:	d02f      	beq.n	800a478 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a418:	69a5      	ldr	r5, [r4, #24]
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	bf08      	it	eq
 800a41e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a420:	1e6a      	subs	r2, r5, #1
 800a422:	46ac      	mov	ip, r5
 800a424:	2a37      	cmp	r2, #55	; 0x37
 800a426:	d82b      	bhi.n	800a480 <osThreadNew+0x94>
 800a428:	6862      	ldr	r2, [r4, #4]
 800a42a:	07d2      	lsls	r2, r2, #31
 800a42c:	d428      	bmi.n	800a480 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a42e:	6966      	ldr	r6, [r4, #20]
 800a430:	b16e      	cbz	r6, 800a44e <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a432:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a434:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a436:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a43a:	b157      	cbz	r7, 800a452 <osThreadNew+0x66>
 800a43c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a440:	d902      	bls.n	800a448 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a442:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a444:	b104      	cbz	r4, 800a448 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a446:	b9ee      	cbnz	r6, 800a484 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a448:	9805      	ldr	r0, [sp, #20]
}
 800a44a:	b007      	add	sp, #28
 800a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a44e:	2280      	movs	r2, #128	; 0x80
 800a450:	e7f0      	b.n	800a434 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a452:	f1be 0f00 	cmp.w	lr, #0
 800a456:	d1f7      	bne.n	800a448 <osThreadNew+0x5c>
      if (mem == 0) {
 800a458:	6924      	ldr	r4, [r4, #16]
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	d1f4      	bne.n	800a448 <osThreadNew+0x5c>
 800a45e:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a460:	a905      	add	r1, sp, #20
 800a462:	b292      	uxth	r2, r2
 800a464:	e9cd c100 	strd	ip, r1, [sp]
 800a468:	4621      	mov	r1, r4
 800a46a:	f001 fca6 	bl	800bdba <xTaskCreate>
 800a46e:	2801      	cmp	r0, #1
          hTask = NULL;
 800a470:	bf1c      	itt	ne
 800a472:	2300      	movne	r3, #0
 800a474:	9305      	strne	r3, [sp, #20]
 800a476:	e7e7      	b.n	800a448 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 800a478:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a47c:	2280      	movs	r2, #128	; 0x80
 800a47e:	e7ef      	b.n	800a460 <osThreadNew+0x74>
        return (NULL);
 800a480:	2000      	movs	r0, #0
 800a482:	e7e2      	b.n	800a44a <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a484:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a488:	9500      	str	r5, [sp, #0]
 800a48a:	f001 fc58 	bl	800bd3e <xTaskCreateStatic>
 800a48e:	9005      	str	r0, [sp, #20]
 800a490:	e7da      	b.n	800a448 <osThreadNew+0x5c>
 800a492:	bf00      	nop
 800a494:	2000f55c 	.word	0x2000f55c

0800a498 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a498:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a49a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a49e:	b113      	cbz	r3, 800a4a6 <osDelay+0xe>
    stat = osErrorISR;
 800a4a0:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800a4a4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800a4aa:	b913      	cbnz	r3, 800a4b2 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a4b0:	b11b      	cbz	r3, 800a4ba <osDelay+0x22>
 800a4b2:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <osDelay+0x30>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d0f2      	beq.n	800a4a0 <osDelay+0x8>
    if (ticks != 0U) {
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d0f2      	beq.n	800a4a4 <osDelay+0xc>
      vTaskDelay(ticks);
 800a4be:	f001 fdc5 	bl	800c04c <vTaskDelay>
    stat = osOK;
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e7ee      	b.n	800a4a4 <osDelay+0xc>
 800a4c6:	bf00      	nop
 800a4c8:	2000f55c 	.word	0x2000f55c

0800a4cc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4d0:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800a4d4:	b116      	cbz	r6, 800a4dc <osMutexNew+0x10>
  hMutex = NULL;
 800a4d6:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800a4d8:	4620      	mov	r0, r4
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4dc:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800a4e0:	b912      	cbnz	r2, 800a4e8 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4e6:	b11a      	cbz	r2, 800a4f0 <osMutexNew+0x24>
 800a4e8:	4a18      	ldr	r2, [pc, #96]	; (800a54c <osMutexNew+0x80>)
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	2a02      	cmp	r2, #2
 800a4ee:	d0f2      	beq.n	800a4d6 <osMutexNew+0xa>
    if (attr != NULL) {
 800a4f0:	b115      	cbz	r5, 800a4f8 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800a4f2:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800a4f4:	0733      	lsls	r3, r6, #28
 800a4f6:	d4ee      	bmi.n	800a4d6 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a4f8:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800a4fc:	b17d      	cbz	r5, 800a51e <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a4fe:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800a502:	b151      	cbz	r1, 800a51a <osMutexNew+0x4e>
 800a504:	2b4f      	cmp	r3, #79	; 0x4f
 800a506:	d9e6      	bls.n	800a4d6 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800a508:	b1de      	cbz	r6, 800a542 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a50a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a50c:	f000 ff4e 	bl	800b3ac <xQueueCreateMutexStatic>
 800a510:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800a512:	2800      	cmp	r0, #0
 800a514:	d0df      	beq.n	800a4d6 <osMutexNew+0xa>
          name = attr->name;
 800a516:	682d      	ldr	r5, [r5, #0]
 800a518:	e00a      	b.n	800a530 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1db      	bne.n	800a4d6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800a51e:	b196      	cbz	r6, 800a546 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a520:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800a522:	f000 ff78 	bl	800b416 <xQueueCreateMutex>
 800a526:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800a528:	2800      	cmp	r0, #0
 800a52a:	d0d4      	beq.n	800a4d6 <osMutexNew+0xa>
        if (attr != NULL) {
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d1f2      	bne.n	800a516 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800a530:	4629      	mov	r1, r5
 800a532:	4620      	mov	r0, r4
 800a534:	f001 fa3a 	bl	800b9ac <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a538:	2e00      	cmp	r6, #0
 800a53a:	d0cd      	beq.n	800a4d8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a53c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800a540:	e7ca      	b.n	800a4d8 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a542:	2001      	movs	r0, #1
 800a544:	e7e2      	b.n	800a50c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800a546:	2001      	movs	r0, #1
 800a548:	e7eb      	b.n	800a522 <osMutexNew+0x56>
 800a54a:	bf00      	nop
 800a54c:	2000f55c 	.word	0x2000f55c

0800a550 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a550:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a552:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a556:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800a558:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a55c:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55e:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800a562:	b112      	cbz	r2, 800a56a <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800a564:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800a568:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56a:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800a56e:	b912      	cbnz	r2, 800a576 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a570:	f3ef 8211 	mrs	r2, BASEPRI
 800a574:	b11a      	cbz	r2, 800a57e <osMutexAcquire+0x2e>
 800a576:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <osMutexAcquire+0x5c>)
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	2a02      	cmp	r2, #2
 800a57c:	d0f2      	beq.n	800a564 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800a57e:	b188      	cbz	r0, 800a5a4 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a580:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800a582:	b163      	cbz	r3, 800a59e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a584:	f001 f999 	bl	800b8ba <xQueueTakeMutexRecursive>
 800a588:	2801      	cmp	r0, #1
 800a58a:	d101      	bne.n	800a590 <osMutexAcquire+0x40>
  stat = osOK;
 800a58c:	2000      	movs	r0, #0
 800a58e:	e7eb      	b.n	800a568 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800a590:	2c00      	cmp	r4, #0
 800a592:	bf14      	ite	ne
 800a594:	f06f 0001 	mvnne.w	r0, #1
 800a598:	f06f 0002 	mvneq.w	r0, #2
 800a59c:	e7e4      	b.n	800a568 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a59e:	f001 f8c1 	bl	800b724 <xQueueSemaphoreTake>
 800a5a2:	e7f1      	b.n	800a588 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800a5a4:	f06f 0003 	mvn.w	r0, #3
 800a5a8:	e7de      	b.n	800a568 <osMutexAcquire+0x18>
 800a5aa:	bf00      	nop
 800a5ac:	2000f55c 	.word	0x2000f55c

0800a5b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a5b0:	b508      	push	{r3, lr}
 800a5b2:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a5b4:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800a5b8:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5bc:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800a5c0:	b112      	cbz	r2, 800a5c8 <osMutexRelease+0x18>
    stat = osErrorISR;
 800a5c2:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800a5c6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c8:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800a5cc:	b912      	cbnz	r2, 800a5d4 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a5d2:	b11a      	cbz	r2, 800a5dc <osMutexRelease+0x2c>
 800a5d4:	4a0a      	ldr	r2, [pc, #40]	; (800a600 <osMutexRelease+0x50>)
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	2a02      	cmp	r2, #2
 800a5da:	d0f2      	beq.n	800a5c2 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800a5dc:	b168      	cbz	r0, 800a5fa <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800a5de:	b13b      	cbz	r3, 800a5f0 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a5e0:	f000 fef9 	bl	800b3d6 <xQueueGiveMutexRecursive>
 800a5e4:	2801      	cmp	r0, #1
  stat = osOK;
 800a5e6:	bf0c      	ite	eq
 800a5e8:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800a5ea:	f06f 0002 	mvnne.w	r0, #2
 800a5ee:	e7ea      	b.n	800a5c6 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	f000 fe1f 	bl	800b236 <xQueueGenericSend>
 800a5f8:	e7f4      	b.n	800a5e4 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800a5fa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a5fe:	e7e2      	b.n	800a5c6 <osMutexRelease+0x16>
 800a600:	2000f55c 	.word	0x2000f55c

0800a604 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a604:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a606:	460e      	mov	r6, r1
 800a608:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a60a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a60e:	b11b      	cbz	r3, 800a618 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a610:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a612:	4620      	mov	r0, r4
 800a614:	b002      	add	sp, #8
 800a616:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a618:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a61c:	b913      	cbnz	r3, 800a624 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a61e:	f3ef 8311 	mrs	r3, BASEPRI
 800a622:	b11b      	cbz	r3, 800a62c <osSemaphoreNew+0x28>
 800a624:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <osSemaphoreNew+0xa8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d0f1      	beq.n	800a610 <osSemaphoreNew+0xc>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0ef      	beq.n	800a610 <osSemaphoreNew+0xc>
 800a630:	42b0      	cmp	r0, r6
 800a632:	d3ed      	bcc.n	800a610 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800a634:	b1ed      	cbz	r5, 800a672 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a636:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800a63a:	b1c3      	cbz	r3, 800a66e <osSemaphoreNew+0x6a>
 800a63c:	2a4f      	cmp	r2, #79	; 0x4f
 800a63e:	d9e7      	bls.n	800a610 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800a640:	2801      	cmp	r0, #1
 800a642:	d129      	bne.n	800a698 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a644:	2203      	movs	r2, #3
 800a646:	9200      	str	r2, [sp, #0]
 800a648:	2200      	movs	r2, #0
 800a64a:	4611      	mov	r1, r2
 800a64c:	f000 fd6e 	bl	800b12c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800a650:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a652:	2800      	cmp	r0, #0
 800a654:	d0dc      	beq.n	800a610 <osSemaphoreNew+0xc>
 800a656:	b1ce      	cbz	r6, 800a68c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a658:	2300      	movs	r3, #0
 800a65a:	461a      	mov	r2, r3
 800a65c:	4619      	mov	r1, r3
 800a65e:	f000 fdea 	bl	800b236 <xQueueGenericSend>
 800a662:	2801      	cmp	r0, #1
 800a664:	d012      	beq.n	800a68c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800a666:	4620      	mov	r0, r4
 800a668:	f001 f9c6 	bl	800b9f8 <vQueueDelete>
 800a66c:	e7d0      	b.n	800a610 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d1ce      	bne.n	800a610 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800a672:	2801      	cmp	r0, #1
 800a674:	d104      	bne.n	800a680 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800a676:	2203      	movs	r2, #3
 800a678:	2100      	movs	r1, #0
 800a67a:	f000 fd6b 	bl	800b154 <xQueueGenericCreate>
 800a67e:	e7e7      	b.n	800a650 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a680:	4631      	mov	r1, r6
 800a682:	f000 fdb6 	bl	800b1f2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a686:	4604      	mov	r4, r0
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0c1      	beq.n	800a610 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800a68c:	b95d      	cbnz	r5, 800a6a6 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800a68e:	4629      	mov	r1, r5
 800a690:	4620      	mov	r0, r4
 800a692:	f001 f98b 	bl	800b9ac <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a696:	e7bc      	b.n	800a612 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a698:	461a      	mov	r2, r3
 800a69a:	4631      	mov	r1, r6
 800a69c:	f000 fd83 	bl	800b1a6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d0b4      	beq.n	800a610 <osSemaphoreNew+0xc>
          name = attr->name;
 800a6a6:	682d      	ldr	r5, [r5, #0]
 800a6a8:	e7f1      	b.n	800a68e <osSemaphoreNew+0x8a>
 800a6aa:	bf00      	nop
 800a6ac:	2000f55c 	.word	0x2000f55c

0800a6b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a6b0:	b513      	push	{r0, r1, r4, lr}
 800a6b2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a6b4:	b918      	cbnz	r0, 800a6be <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800a6b6:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800a6ba:	b002      	add	sp, #8
 800a6bc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800a6c2:	b163      	cbz	r3, 800a6de <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800a6c4:	2c00      	cmp	r4, #0
 800a6c6:	d1f6      	bne.n	800a6b6 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a6c8:	aa01      	add	r2, sp, #4
 800a6ca:	4621      	mov	r1, r4
      yield = pdFALSE;
 800a6cc:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a6ce:	f001 f918 	bl	800b902 <xQueueReceiveFromISR>
 800a6d2:	2801      	cmp	r0, #1
 800a6d4:	d113      	bne.n	800a6fe <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	b9a3      	cbnz	r3, 800a704 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e7ed      	b.n	800a6ba <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6de:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800a6e2:	b913      	cbnz	r3, 800a6ea <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a6e8:	b11b      	cbz	r3, 800a6f2 <osSemaphoreAcquire+0x42>
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <osSemaphoreAcquire+0x70>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d0e8      	beq.n	800a6c4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	f001 f816 	bl	800b724 <xQueueSemaphoreTake>
 800a6f8:	2801      	cmp	r0, #1
 800a6fa:	d0ee      	beq.n	800a6da <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800a6fc:	b96c      	cbnz	r4, 800a71a <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800a6fe:	f06f 0002 	mvn.w	r0, #2
 800a702:	e7da      	b.n	800a6ba <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800a704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	e7df      	b.n	800a6da <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800a71a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a71e:	e7cc      	b.n	800a6ba <osSemaphoreAcquire+0xa>
 800a720:	2000f55c 	.word	0x2000f55c

0800a724 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a724:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a726:	b370      	cbz	r0, 800a786 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a728:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a72c:	b14b      	cbz	r3, 800a742 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800a72e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a730:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a732:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a734:	f000 fef5 	bl	800b522 <xQueueGiveFromISR>
 800a738:	2801      	cmp	r0, #1
 800a73a:	d014      	beq.n	800a766 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800a73c:	f06f 0002 	mvn.w	r0, #2
 800a740:	e014      	b.n	800a76c <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a742:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800a746:	b913      	cbnz	r3, 800a74e <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a748:	f3ef 8311 	mrs	r3, BASEPRI
 800a74c:	b11b      	cbz	r3, 800a756 <osSemaphoreRelease+0x32>
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <osSemaphoreRelease+0x68>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d0eb      	beq.n	800a72e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a756:	2300      	movs	r3, #0
 800a758:	461a      	mov	r2, r3
 800a75a:	4619      	mov	r1, r3
 800a75c:	f000 fd6b 	bl	800b236 <xQueueGenericSend>
 800a760:	2801      	cmp	r0, #1
 800a762:	d002      	beq.n	800a76a <osSemaphoreRelease+0x46>
 800a764:	e7ea      	b.n	800a73c <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	b913      	cbnz	r3, 800a770 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800a76a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800a76c:	b002      	add	sp, #8
 800a76e:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a770:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	e7f1      	b.n	800a76a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800a786:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a78a:	e7ef      	b.n	800a76c <osSemaphoreRelease+0x48>
 800a78c:	2000f55c 	.word	0x2000f55c

0800a790 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a790:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a792:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a794:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a798:	b11b      	cbz	r3, 800a7a2 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800a79a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a79c:	4628      	mov	r0, r5
 800a79e:	b002      	add	sp, #8
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a2:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a7a6:	b913      	cbnz	r3, 800a7ae <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7a8:	f3ef 8311 	mrs	r3, BASEPRI
 800a7ac:	b11b      	cbz	r3, 800a7b6 <osMessageQueueNew+0x26>
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	; (800a818 <osMessageQueueNew+0x88>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d0f1      	beq.n	800a79a <osMessageQueueNew+0xa>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d0ef      	beq.n	800a79a <osMessageQueueNew+0xa>
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d0ed      	beq.n	800a79a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800a7be:	b1ec      	cbz	r4, 800a7fc <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a7c0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800a7c4:	b193      	cbz	r3, 800a7ec <osMessageQueueNew+0x5c>
 800a7c6:	2a4f      	cmp	r2, #79	; 0x4f
 800a7c8:	d9e7      	bls.n	800a79a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a7ca:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a7cc:	2a00      	cmp	r2, #0
 800a7ce:	d0e4      	beq.n	800a79a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a7d0:	fb01 f500 	mul.w	r5, r1, r0
 800a7d4:	6966      	ldr	r6, [r4, #20]
 800a7d6:	42ae      	cmp	r6, r5
 800a7d8:	d3df      	bcc.n	800a79a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a7da:	2500      	movs	r5, #0
 800a7dc:	9500      	str	r5, [sp, #0]
 800a7de:	f000 fca5 	bl	800b12c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0d8      	beq.n	800a79a <osMessageQueueNew+0xa>
        name = attr->name;
 800a7e8:	6824      	ldr	r4, [r4, #0]
 800a7ea:	e00f      	b.n	800a80c <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7ec:	2a00      	cmp	r2, #0
 800a7ee:	d1d4      	bne.n	800a79a <osMessageQueueNew+0xa>
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1d1      	bne.n	800a79a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7f6:	6963      	ldr	r3, [r4, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1ce      	bne.n	800a79a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f000 fca9 	bl	800b154 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a802:	4605      	mov	r5, r0
 800a804:	2800      	cmp	r0, #0
 800a806:	d0c8      	beq.n	800a79a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800a808:	2c00      	cmp	r4, #0
 800a80a:	d1ed      	bne.n	800a7e8 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800a80c:	4621      	mov	r1, r4
 800a80e:	4628      	mov	r0, r5
 800a810:	f001 f8cc 	bl	800b9ac <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800a814:	e7c2      	b.n	800a79c <osMessageQueueNew+0xc>
 800a816:	bf00      	nop
 800a818:	2000f55c 	.word	0x2000f55c

0800a81c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a81c:	b513      	push	{r0, r1, r4, lr}
 800a81e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a820:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a824:	b123      	cbz	r3, 800a830 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a826:	b9d8      	cbnz	r0, 800a860 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800a828:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800a82c:	b002      	add	sp, #8
 800a82e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a830:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800a834:	b913      	cbnz	r3, 800a83c <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a836:	f3ef 8311 	mrs	r3, BASEPRI
 800a83a:	b11b      	cbz	r3, 800a844 <osMessageQueuePut+0x28>
 800a83c:	4b17      	ldr	r3, [pc, #92]	; (800a89c <osMessageQueuePut+0x80>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d0f0      	beq.n	800a826 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a844:	2800      	cmp	r0, #0
 800a846:	d0ef      	beq.n	800a828 <osMessageQueuePut+0xc>
 800a848:	2900      	cmp	r1, #0
 800a84a:	d0ed      	beq.n	800a828 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a84c:	2300      	movs	r3, #0
 800a84e:	4622      	mov	r2, r4
 800a850:	f000 fcf1 	bl	800b236 <xQueueGenericSend>
 800a854:	2801      	cmp	r0, #1
 800a856:	d010      	beq.n	800a87a <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800a858:	b9e4      	cbnz	r4, 800a894 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800a85a:	f06f 0002 	mvn.w	r0, #2
 800a85e:	e7e5      	b.n	800a82c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a860:	2900      	cmp	r1, #0
 800a862:	d0e1      	beq.n	800a828 <osMessageQueuePut+0xc>
 800a864:	2c00      	cmp	r4, #0
 800a866:	d1df      	bne.n	800a828 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a868:	4623      	mov	r3, r4
 800a86a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a86c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a86e:	f000 fdef 	bl	800b450 <xQueueGenericSendFromISR>
 800a872:	2801      	cmp	r0, #1
 800a874:	d1f1      	bne.n	800a85a <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	b90b      	cbnz	r3, 800a87e <osMessageQueuePut+0x62>
  stat = osOK;
 800a87a:	2000      	movs	r0, #0
 800a87c:	e7d6      	b.n	800a82c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800a87e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a886:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	e7f2      	b.n	800a87a <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800a894:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a898:	e7c8      	b.n	800a82c <osMessageQueuePut+0x10>
 800a89a:	bf00      	nop
 800a89c:	2000f55c 	.word	0x2000f55c

0800a8a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a8a0:	b513      	push	{r0, r1, r4, lr}
 800a8a2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8a4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a8a8:	b123      	cbz	r3, 800a8b4 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a8aa:	b9d0      	cbnz	r0, 800a8e2 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800a8ac:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800a8b0:	b002      	add	sp, #8
 800a8b2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800a8b8:	b913      	cbnz	r3, 800a8c0 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a8be:	b11b      	cbz	r3, 800a8c8 <osMessageQueueGet+0x28>
 800a8c0:	4b16      	ldr	r3, [pc, #88]	; (800a91c <osMessageQueueGet+0x7c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d0f0      	beq.n	800a8aa <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d0ef      	beq.n	800a8ac <osMessageQueueGet+0xc>
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d0ed      	beq.n	800a8ac <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	f000 fe82 	bl	800b5da <xQueueReceive>
 800a8d6:	2801      	cmp	r0, #1
 800a8d8:	d00f      	beq.n	800a8fa <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800a8da:	b9dc      	cbnz	r4, 800a914 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800a8dc:	f06f 0002 	mvn.w	r0, #2
 800a8e0:	e7e6      	b.n	800a8b0 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d0e2      	beq.n	800a8ac <osMessageQueueGet+0xc>
 800a8e6:	2c00      	cmp	r4, #0
 800a8e8:	d1e0      	bne.n	800a8ac <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a8ea:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a8ec:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a8ee:	f001 f808 	bl	800b902 <xQueueReceiveFromISR>
 800a8f2:	2801      	cmp	r0, #1
 800a8f4:	d1f2      	bne.n	800a8dc <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	b90b      	cbnz	r3, 800a8fe <osMessageQueueGet+0x5e>
  stat = osOK;
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e7d8      	b.n	800a8b0 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800a8fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a906:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	e7f2      	b.n	800a8fa <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800a914:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a918:	e7ca      	b.n	800a8b0 <osMessageQueueGet+0x10>
 800a91a:	bf00      	nop
 800a91c:	2000f55c 	.word	0x2000f55c

0800a920 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a920:	4b03      	ldr	r3, [pc, #12]	; (800a930 <vApplicationGetIdleTaskMemory+0x10>)
 800a922:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a924:	4b03      	ldr	r3, [pc, #12]	; (800a934 <vApplicationGetIdleTaskMemory+0x14>)
 800a926:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a928:	2380      	movs	r3, #128	; 0x80
 800a92a:	6013      	str	r3, [r2, #0]
}
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	2000f4fc 	.word	0x2000f4fc
 800a934:	2000f2fc 	.word	0x2000f2fc

0800a938 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a938:	4b03      	ldr	r3, [pc, #12]	; (800a948 <vApplicationGetTimerTaskMemory+0x10>)
 800a93a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a93c:	4b03      	ldr	r3, [pc, #12]	; (800a94c <vApplicationGetTimerTaskMemory+0x14>)
 800a93e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a940:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a944:	6013      	str	r3, [r2, #0]
}
 800a946:	4770      	bx	lr
 800a948:	2000f960 	.word	0x2000f960
 800a94c:	2000f560 	.word	0x2000f560

0800a950 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvInsertBlockIntoFreeList+0x40>)
{
 800a952:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a954:	461a      	mov	r2, r3
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4283      	cmp	r3, r0
 800a95a:	d3fb      	bcc.n	800a954 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a95c:	6854      	ldr	r4, [r2, #4]
 800a95e:	1911      	adds	r1, r2, r4
 800a960:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a962:	bf01      	itttt	eq
 800a964:	6841      	ldreq	r1, [r0, #4]
 800a966:	4610      	moveq	r0, r2
 800a968:	1909      	addeq	r1, r1, r4
 800a96a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a96c:	6844      	ldr	r4, [r0, #4]
 800a96e:	1901      	adds	r1, r0, r4
 800a970:	428b      	cmp	r3, r1
 800a972:	d107      	bne.n	800a984 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a974:	4907      	ldr	r1, [pc, #28]	; (800a994 <prvInsertBlockIntoFreeList+0x44>)
 800a976:	6809      	ldr	r1, [r1, #0]
 800a978:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a97a:	bf1f      	itttt	ne
 800a97c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a97e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a980:	1909      	addne	r1, r1, r4
 800a982:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a984:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a986:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a988:	bf18      	it	ne
 800a98a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a98c:	bd10      	pop	{r4, pc}
 800a98e:	bf00      	nop
 800a990:	20023250 	.word	0x20023250
 800a994:	2000f9c0 	.word	0x2000f9c0

0800a998 <pvPortMalloc>:
{
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800a99c:	4f41      	ldr	r7, [pc, #260]	; (800aaa4 <pvPortMalloc+0x10c>)
{
 800a99e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a9a0:	f001 fa38 	bl	800be14 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a9a4:	4840      	ldr	r0, [pc, #256]	; (800aaa8 <pvPortMalloc+0x110>)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	b9f3      	cbnz	r3, 800a9e8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800a9aa:	4940      	ldr	r1, [pc, #256]	; (800aaac <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800a9ac:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9ae:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9b0:	4d3f      	ldr	r5, [pc, #252]	; (800aab0 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9b2:	bf1b      	ittet	ne
 800a9b4:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9b6:	4a3f      	ldrne	r2, [pc, #252]	; (800aab4 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9b8:	4a3f      	ldreq	r2, [pc, #252]	; (800aab8 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9ba:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800a9be:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9c0:	bf18      	it	ne
 800a9c2:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9c4:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9c6:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800a9c8:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9ca:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a9ce:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9d2:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800a9d4:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9d6:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9da:	4a38      	ldr	r2, [pc, #224]	; (800aabc <pvPortMalloc+0x124>)
 800a9dc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9de:	4a38      	ldr	r2, [pc, #224]	; (800aac0 <pvPortMalloc+0x128>)
 800a9e0:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9e6:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9e8:	f8d0 8000 	ldr.w	r8, [r0]
 800a9ec:	ea18 0f04 	tst.w	r8, r4
 800a9f0:	d152      	bne.n	800aa98 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	d041      	beq.n	800aa7a <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800a9f6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9fa:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9fc:	bf1c      	itt	ne
 800a9fe:	f023 0307 	bicne.w	r3, r3, #7
 800aa02:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d047      	beq.n	800aa98 <pvPortMalloc+0x100>
 800aa08:	4c2d      	ldr	r4, [pc, #180]	; (800aac0 <pvPortMalloc+0x128>)
 800aa0a:	6826      	ldr	r6, [r4, #0]
 800aa0c:	429e      	cmp	r6, r3
 800aa0e:	d343      	bcc.n	800aa98 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800aa10:	4a27      	ldr	r2, [pc, #156]	; (800aab0 <pvPortMalloc+0x118>)
 800aa12:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa14:	6869      	ldr	r1, [r5, #4]
 800aa16:	4299      	cmp	r1, r3
 800aa18:	d201      	bcs.n	800aa1e <pvPortMalloc+0x86>
 800aa1a:	6828      	ldr	r0, [r5, #0]
 800aa1c:	b9b0      	cbnz	r0, 800aa4c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800aa1e:	6838      	ldr	r0, [r7, #0]
 800aa20:	42a8      	cmp	r0, r5
 800aa22:	d039      	beq.n	800aa98 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa24:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa26:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa28:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa2a:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa2c:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa2e:	d914      	bls.n	800aa5a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa30:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa32:	0742      	lsls	r2, r0, #29
 800aa34:	d00d      	beq.n	800aa52 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	b672      	cpsid	i
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	b662      	cpsie	i
 800aa4a:	e7fe      	b.n	800aa4a <pvPortMalloc+0xb2>
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4605      	mov	r5, r0
 800aa50:	e7e0      	b.n	800aa14 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa52:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa54:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa56:	f7ff ff7b 	bl	800a950 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa5a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa5c:	4917      	ldr	r1, [pc, #92]	; (800aabc <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa5e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa60:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa64:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa66:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa68:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa6c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa6e:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa70:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa74:	bf38      	it	cc
 800aa76:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800aa78:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800aa7a:	f001 fa71 	bl	800bf60 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa7e:	0763      	lsls	r3, r4, #29
 800aa80:	d00c      	beq.n	800aa9c <pvPortMalloc+0x104>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	b672      	cpsid	i
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	b662      	cpsie	i
 800aa96:	e7fe      	b.n	800aa96 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800aa98:	2400      	movs	r4, #0
 800aa9a:	e7ee      	b.n	800aa7a <pvPortMalloc+0xe2>
}
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa2:	bf00      	nop
 800aaa4:	2000f9c0 	.word	0x2000f9c0
 800aaa8:	20023244 	.word	0x20023244
 800aaac:	2000f9c4 	.word	0x2000f9c4
 800aab0:	20023250 	.word	0x20023250
 800aab4:	20023244 	.word	0x20023244
 800aab8:	00013880 	.word	0x00013880
 800aabc:	2002324c 	.word	0x2002324c
 800aac0:	20023248 	.word	0x20023248

0800aac4 <vPortFree>:
{
 800aac4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800aac6:	4604      	mov	r4, r0
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d032      	beq.n	800ab32 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aacc:	4a19      	ldr	r2, [pc, #100]	; (800ab34 <vPortFree+0x70>)
 800aace:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800aad2:	6812      	ldr	r2, [r2, #0]
 800aad4:	4213      	tst	r3, r2
 800aad6:	d10a      	bne.n	800aaee <vPortFree+0x2a>
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	b672      	cpsid	i
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	b662      	cpsie	i
 800aaec:	e7fe      	b.n	800aaec <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaee:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800aaf2:	b151      	cbz	r1, 800ab0a <vPortFree+0x46>
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	b672      	cpsid	i
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	b662      	cpsie	i
 800ab08:	e7fe      	b.n	800ab08 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab0a:	ea23 0302 	bic.w	r3, r3, r2
 800ab0e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ab12:	f001 f97f 	bl	800be14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab16:	4a08      	ldr	r2, [pc, #32]	; (800ab38 <vPortFree+0x74>)
 800ab18:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab1c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab20:	6811      	ldr	r1, [r2, #0]
 800ab22:	440b      	add	r3, r1
 800ab24:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab26:	f7ff ff13 	bl	800a950 <prvInsertBlockIntoFreeList>
}
 800ab2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800ab2e:	f001 ba17 	b.w	800bf60 <xTaskResumeAll>
}
 800ab32:	bd10      	pop	{r4, pc}
 800ab34:	20023244 	.word	0x20023244
 800ab38:	20023248 	.word	0x20023248

0800ab3c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab3c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab40:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab44:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab46:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab48:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab50:	4770      	bx	lr

0800ab52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab56:	4770      	bx	lr

0800ab58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab58:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab5a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ab5c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab5e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab64:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ab66:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ab68:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	6003      	str	r3, [r0, #0]
}
 800ab6e:	4770      	bx	lr

0800ab70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab70:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab72:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab74:	1c63      	adds	r3, r4, #1
 800ab76:	d10a      	bne.n	800ab8e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab78:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab7e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab80:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab82:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ab84:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ab86:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ab88:	3301      	adds	r3, #1
 800ab8a:	6003      	str	r3, [r0, #0]
}
 800ab8c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab8e:	f100 0208 	add.w	r2, r0, #8
 800ab92:	4613      	mov	r3, r2
 800ab94:	6852      	ldr	r2, [r2, #4]
 800ab96:	6815      	ldr	r5, [r2, #0]
 800ab98:	42a5      	cmp	r5, r4
 800ab9a:	d9fa      	bls.n	800ab92 <vListInsert+0x22>
 800ab9c:	e7ed      	b.n	800ab7a <vListInsert+0xa>

0800ab9e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab9e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aba0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800aba4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aba6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aba8:	6859      	ldr	r1, [r3, #4]
 800abaa:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abac:	bf08      	it	eq
 800abae:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abb0:	2200      	movs	r2, #0
 800abb2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	3a01      	subs	r2, #1
 800abb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abba:	6818      	ldr	r0, [r3, #0]
}
 800abbc:	4770      	bx	lr
	...

0800abc0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abc0:	4808      	ldr	r0, [pc, #32]	; (800abe4 <prvPortStartFirstTask+0x24>)
 800abc2:	6800      	ldr	r0, [r0, #0]
 800abc4:	6800      	ldr	r0, [r0, #0]
 800abc6:	f380 8808 	msr	MSP, r0
 800abca:	f04f 0000 	mov.w	r0, #0
 800abce:	f380 8814 	msr	CONTROL, r0
 800abd2:	b662      	cpsie	i
 800abd4:	b661      	cpsie	f
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	df00      	svc	0
 800abe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abe2:	0000      	.short	0x0000
 800abe4:	e000ed08 	.word	0xe000ed08

0800abe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abf8 <vPortEnableVFP+0x10>
 800abec:	6801      	ldr	r1, [r0, #0]
 800abee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abf2:	6001      	str	r1, [r0, #0]
 800abf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abf6:	0000      	.short	0x0000
 800abf8:	e000ed88 	.word	0xe000ed88

0800abfc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800abfc:	2300      	movs	r3, #0
{
 800abfe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ac00:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800ac02:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <prvTaskExitError+0x44>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	3301      	adds	r3, #1
 800ac08:	d00a      	beq.n	800ac20 <prvTaskExitError+0x24>
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	b672      	cpsid	i
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	b662      	cpsie	i
 800ac1e:	e7fe      	b.n	800ac1e <prvTaskExitError+0x22>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	b672      	cpsid	i
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	b662      	cpsie	i
	while( ulDummy == 0 )
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0fc      	beq.n	800ac34 <prvTaskExitError+0x38>
}
 800ac3a:	b002      	add	sp, #8
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	2000006c 	.word	0x2000006c

0800ac44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac48:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac4c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800ac50:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac52:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac54:	4b03      	ldr	r3, [pc, #12]	; (800ac64 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac56:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac58:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac5a:	f06f 0302 	mvn.w	r3, #2
 800ac5e:	6203      	str	r3, [r0, #32]
}
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	0800abfd 	.word	0x0800abfd
	...

0800ac70 <SVC_Handler>:
	__asm volatile (
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <pxCurrentTCBConst2>)
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	f380 8809 	msr	PSP, r0
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8811 	msr	BASEPRI, r0
 800ac8a:	4770      	bx	lr
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst2>:
 800ac90:	200232a0 	.word	0x200232a0

0800ac94 <vPortEnterCritical>:
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	b672      	cpsid	i
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	b662      	cpsie	i
	uxCriticalNesting++;
 800aca8:	4a0b      	ldr	r2, [pc, #44]	; (800acd8 <vPortEnterCritical+0x44>)
 800acaa:	6813      	ldr	r3, [r2, #0]
 800acac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800acae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800acb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800acb2:	d110      	bne.n	800acd6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800acb8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	b153      	cbz	r3, 800acd6 <vPortEnterCritical+0x42>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	e7fe      	b.n	800acd4 <vPortEnterCritical+0x40>
}
 800acd6:	4770      	bx	lr
 800acd8:	2000006c 	.word	0x2000006c

0800acdc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800acdc:	4a09      	ldr	r2, [pc, #36]	; (800ad04 <vPortExitCritical+0x28>)
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	b953      	cbnz	r3, 800acf8 <vPortExitCritical+0x1c>
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	b672      	cpsid	i
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	b662      	cpsie	i
 800acf6:	e7fe      	b.n	800acf6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800acf8:	3b01      	subs	r3, #1
 800acfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acfc:	b90b      	cbnz	r3, 800ad02 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acfe:	f383 8811 	msr	BASEPRI, r3
}
 800ad02:	4770      	bx	lr
 800ad04:	2000006c 	.word	0x2000006c
	...

0800ad10 <PendSV_Handler>:
	__asm volatile
 800ad10:	f3ef 8009 	mrs	r0, PSP
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <pxCurrentTCBConst>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f01e 0f10 	tst.w	lr, #16
 800ad20:	bf08      	it	eq
 800ad22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad34:	b672      	cpsid	i
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	b662      	cpsie	i
 800ad44:	f001 fa16 	bl	800c174 <vTaskSwitchContext>
 800ad48:	f04f 0000 	mov.w	r0, #0
 800ad4c:	f380 8811 	msr	BASEPRI, r0
 800ad50:	bc09      	pop	{r0, r3}
 800ad52:	6819      	ldr	r1, [r3, #0]
 800ad54:	6808      	ldr	r0, [r1, #0]
 800ad56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	f01e 0f10 	tst.w	lr, #16
 800ad5e:	bf08      	it	eq
 800ad60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad64:	f380 8809 	msr	PSP, r0
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop

0800ad70 <pxCurrentTCBConst>:
 800ad70:	200232a0 	.word	0x200232a0

0800ad74 <SysTick_Handler>:
{
 800ad74:	b508      	push	{r3, lr}
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	b672      	cpsid	i
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800ad8a:	f001 f851 	bl	800be30 <xTaskIncrementTick>
 800ad8e:	b128      	cbz	r0, 800ad9c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ad94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f383 8811 	msr	BASEPRI, r3
}
 800ada2:	bd08      	pop	{r3, pc}

0800ada4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ada4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800ada8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adae:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adb0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <vPortSetupTimerInterrupt+0x20>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800adba:	3b01      	subs	r3, #1
 800adbc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adbe:	2307      	movs	r3, #7
 800adc0:	6113      	str	r3, [r2, #16]
}
 800adc2:	4770      	bx	lr
 800adc4:	20000060 	.word	0x20000060

0800adc8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adc8:	4b2e      	ldr	r3, [pc, #184]	; (800ae84 <xPortStartScheduler+0xbc>)
{
 800adca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adcc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adce:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800add0:	b2d2      	uxtb	r2, r2
 800add2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800add4:	22ff      	movs	r2, #255	; 0xff
 800add6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800add8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adda:	4a2b      	ldr	r2, [pc, #172]	; (800ae88 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ade2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ade6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adec:	2307      	movs	r3, #7
 800adee:	4a27      	ldr	r2, [pc, #156]	; (800ae8c <xPortStartScheduler+0xc4>)
 800adf0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adf2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800adf6:	1e5c      	subs	r4, r3, #1
 800adf8:	0600      	lsls	r0, r0, #24
 800adfa:	d40e      	bmi.n	800ae1a <xPortStartScheduler+0x52>
 800adfc:	b111      	cbz	r1, 800ae04 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	d013      	beq.n	800ae2c <xPortStartScheduler+0x64>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	b672      	cpsid	i
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	b662      	cpsie	i
 800ae18:	e7fe      	b.n	800ae18 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae1e:	2101      	movs	r1, #1
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f88d 3003 	strb.w	r3, [sp, #3]
 800ae28:	4623      	mov	r3, r4
 800ae2a:	e7e2      	b.n	800adf2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae2c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae30:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800ae34:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae36:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae38:	9b01      	ldr	r3, [sp, #4]
 800ae3a:	4a12      	ldr	r2, [pc, #72]	; (800ae84 <xPortStartScheduler+0xbc>)
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae40:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800ae44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae48:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae4c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800ae50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae54:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800ae58:	f7ff ffa4 	bl	800ada4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ae5c:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <xPortStartScheduler+0xc8>)
 800ae5e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ae60:	f7ff fec2 	bl	800abe8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae64:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800ae68:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae6c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800ae70:	f7ff fea6 	bl	800abc0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ae74:	f001 f97e 	bl	800c174 <vTaskSwitchContext>
}
 800ae78:	4628      	mov	r0, r5
	prvTaskExitError();
 800ae7a:	f7ff febf 	bl	800abfc <prvTaskExitError>
}
 800ae7e:	b003      	add	sp, #12
 800ae80:	bd30      	pop	{r4, r5, pc}
 800ae82:	bf00      	nop
 800ae84:	e000e400 	.word	0xe000e400
 800ae88:	20023258 	.word	0x20023258
 800ae8c:	2002325c 	.word	0x2002325c
 800ae90:	2000006c 	.word	0x2000006c

0800ae94 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae94:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae98:	2b0f      	cmp	r3, #15
 800ae9a:	d910      	bls.n	800aebe <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae9c:	4a13      	ldr	r2, [pc, #76]	; (800aeec <vPortValidateInterruptPriority+0x58>)
 800ae9e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aea0:	4a13      	ldr	r2, [pc, #76]	; (800aef0 <vPortValidateInterruptPriority+0x5c>)
 800aea2:	7812      	ldrb	r2, [r2, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d90a      	bls.n	800aebe <vPortValidateInterruptPriority+0x2a>
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	b672      	cpsid	i
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	b662      	cpsie	i
 800aebc:	e7fe      	b.n	800aebc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aebe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aec2:	4a0c      	ldr	r2, [pc, #48]	; (800aef4 <vPortValidateInterruptPriority+0x60>)
 800aec4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aece:	4293      	cmp	r3, r2
 800aed0:	d90a      	bls.n	800aee8 <vPortValidateInterruptPriority+0x54>
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	e7fe      	b.n	800aee6 <vPortValidateInterruptPriority+0x52>
	}
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	e000e3f0 	.word	0xe000e3f0
 800aef0:	20023258 	.word	0x20023258
 800aef4:	2002325c 	.word	0x2002325c

0800aef8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aef8:	b510      	push	{r4, lr}
 800aefa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aefc:	f7ff feca 	bl	800ac94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800af02:	f7ff feeb 	bl	800acdc <vPortExitCritical>

	return xReturn;
}
 800af06:	fab4 f084 	clz	r0, r4
 800af0a:	0940      	lsrs	r0, r0, #5
 800af0c:	bd10      	pop	{r4, pc}

0800af0e <prvCopyDataToQueue>:
{
 800af0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af10:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af12:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800af14:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af16:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af18:	b952      	cbnz	r2, 800af30 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af1a:	6807      	ldr	r7, [r0, #0]
 800af1c:	bb47      	cbnz	r7, 800af70 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af1e:	6880      	ldr	r0, [r0, #8]
 800af20:	f001 fa98 	bl	800c454 <xTaskPriorityDisinherit>
 800af24:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af26:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af28:	3601      	adds	r6, #1
}
 800af2a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af2c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800af2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800af30:	b965      	cbnz	r5, 800af4c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af32:	6840      	ldr	r0, [r0, #4]
 800af34:	f014 fb28 	bl	801f588 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af3c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af3e:	68a2      	ldr	r2, [r4, #8]
 800af40:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af42:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af44:	d3f0      	bcc.n	800af28 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	6063      	str	r3, [r4, #4]
 800af4a:	e7ed      	b.n	800af28 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af4c:	68c0      	ldr	r0, [r0, #12]
 800af4e:	f014 fb1b 	bl	801f588 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af54:	68e3      	ldr	r3, [r4, #12]
 800af56:	4251      	negs	r1, r2
 800af58:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af5e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af60:	bf3e      	ittt	cc
 800af62:	68a3      	ldrcc	r3, [r4, #8]
 800af64:	185b      	addcc	r3, r3, r1
 800af66:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800af68:	2d02      	cmp	r5, #2
 800af6a:	d101      	bne.n	800af70 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af6c:	b116      	cbz	r6, 800af74 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800af6e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800af70:	2500      	movs	r5, #0
 800af72:	e7d9      	b.n	800af28 <prvCopyDataToQueue+0x1a>
 800af74:	4635      	mov	r5, r6
 800af76:	e7d7      	b.n	800af28 <prvCopyDataToQueue+0x1a>

0800af78 <prvCopyDataFromQueue>:
{
 800af78:	4603      	mov	r3, r0
 800af7a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800af7e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af80:	b162      	cbz	r2, 800af9c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af82:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af84:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af86:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af88:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af8a:	60dc      	str	r4, [r3, #12]
}
 800af8c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af90:	bf24      	itt	cs
 800af92:	6819      	ldrcs	r1, [r3, #0]
 800af94:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af96:	68d9      	ldr	r1, [r3, #12]
 800af98:	f014 baf6 	b.w	801f588 <memcpy>
}
 800af9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <prvUnlockQueue>:
{
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800afa6:	f7ff fe75 	bl	800ac94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800afaa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afae:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800afb2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	dc14      	bgt.n	800afe2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800afb8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afba:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800afbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800afc2:	f7ff fe8b 	bl	800acdc <vPortExitCritical>
	taskENTER_CRITICAL();
 800afc6:	f7ff fe65 	bl	800ac94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800afca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800afce:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	dc12      	bgt.n	800affa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800afd4:	23ff      	movs	r3, #255	; 0xff
 800afd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800afda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800afde:	f7ff be7d 	b.w	800acdc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0e7      	beq.n	800afb8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afe8:	4630      	mov	r0, r6
 800afea:	f001 f945 	bl	800c278 <xTaskRemoveFromEventList>
 800afee:	b108      	cbz	r0, 800aff4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800aff0:	f001 f9d4 	bl	800c39c <vTaskMissedYield>
			--cTxLock;
 800aff4:	3d01      	subs	r5, #1
 800aff6:	b26d      	sxtb	r5, r5
 800aff8:	e7dc      	b.n	800afb4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0e9      	beq.n	800afd4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b000:	4630      	mov	r0, r6
 800b002:	f001 f939 	bl	800c278 <xTaskRemoveFromEventList>
 800b006:	b108      	cbz	r0, 800b00c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b008:	f001 f9c8 	bl	800c39c <vTaskMissedYield>
				--cRxLock;
 800b00c:	3d01      	subs	r5, #1
 800b00e:	b26d      	sxtb	r5, r5
 800b010:	e7de      	b.n	800afd0 <prvUnlockQueue+0x2e>

0800b012 <xQueueGenericReset>:
{
 800b012:	b538      	push	{r3, r4, r5, lr}
 800b014:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b016:	4604      	mov	r4, r0
 800b018:	b950      	cbnz	r0, 800b030 <xQueueGenericReset+0x1e>
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	b672      	cpsid	i
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	b662      	cpsie	i
 800b02e:	e7fe      	b.n	800b02e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800b030:	f7ff fe30 	bl	800ac94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b034:	6822      	ldr	r2, [r4, #0]
 800b036:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b03a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b03c:	434b      	muls	r3, r1
 800b03e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b040:	1a5b      	subs	r3, r3, r1
 800b042:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b044:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b046:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b048:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b04a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b04c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b04e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b056:	b9a5      	cbnz	r5, 800b082 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	b173      	cbz	r3, 800b07a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b05c:	f104 0010 	add.w	r0, r4, #16
 800b060:	f001 f90a 	bl	800c278 <xTaskRemoveFromEventList>
 800b064:	b148      	cbz	r0, 800b07a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800b066:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800b07a:	f7ff fe2f 	bl	800acdc <vPortExitCritical>
}
 800b07e:	2001      	movs	r0, #1
 800b080:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b082:	f104 0010 	add.w	r0, r4, #16
 800b086:	f7ff fd59 	bl	800ab3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b08a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b08e:	f7ff fd55 	bl	800ab3c <vListInitialise>
 800b092:	e7f2      	b.n	800b07a <xQueueGenericReset+0x68>

0800b094 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800b094:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800b096:	461c      	mov	r4, r3
 800b098:	b953      	cbnz	r3, 800b0b0 <xQueueGenericCreateStatic.part.0+0x1c>
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	b672      	cpsid	i
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	b662      	cpsie	i
 800b0ae:	e7fe      	b.n	800b0ae <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b0b0:	b15a      	cbz	r2, 800b0ca <xQueueGenericCreateStatic.part.0+0x36>
 800b0b2:	b9b1      	cbnz	r1, 800b0e2 <xQueueGenericCreateStatic.part.0+0x4e>
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	b672      	cpsid	i
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	b662      	cpsie	i
 800b0c8:	e7fe      	b.n	800b0c8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b0ca:	b151      	cbz	r1, 800b0e2 <xQueueGenericCreateStatic.part.0+0x4e>
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	b672      	cpsid	i
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	b662      	cpsie	i
 800b0e0:	e7fe      	b.n	800b0e0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0e2:	2350      	movs	r3, #80	; 0x50
 800b0e4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	2b50      	cmp	r3, #80	; 0x50
 800b0ea:	d00a      	beq.n	800b102 <xQueueGenericCreateStatic.part.0+0x6e>
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	b672      	cpsid	i
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	b662      	cpsie	i
 800b100:	e7fe      	b.n	800b100 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b102:	2900      	cmp	r1, #0
 800b104:	bf08      	it	eq
 800b106:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b108:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	6022      	str	r2, [r4, #0]
 800b10e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800b112:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b116:	4619      	mov	r1, r3
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff ff7a 	bl	800b012 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b11e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800b122:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800b124:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800b128:	b002      	add	sp, #8
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <xQueueGenericCreateStatic>:
	{
 800b12c:	b410      	push	{r4}
 800b12e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b132:	b950      	cbnz	r0, 800b14a <xQueueGenericCreateStatic+0x1e>
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	b672      	cpsid	i
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	b662      	cpsie	i
 800b148:	e7fe      	b.n	800b148 <xQueueGenericCreateStatic+0x1c>
 800b14a:	9401      	str	r4, [sp, #4]
	}
 800b14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b150:	f7ff bfa0 	b.w	800b094 <xQueueGenericCreateStatic.part.0>

0800b154 <xQueueGenericCreate>:
	{
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	460d      	mov	r5, r1
 800b158:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b15a:	4606      	mov	r6, r0
 800b15c:	b950      	cbnz	r0, 800b174 <xQueueGenericCreate+0x20>
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	b672      	cpsid	i
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	b662      	cpsie	i
 800b172:	e7fe      	b.n	800b172 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b174:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b176:	3050      	adds	r0, #80	; 0x50
 800b178:	f7ff fc0e 	bl	800a998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b17c:	4604      	mov	r4, r0
 800b17e:	b170      	cbz	r0, 800b19e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b186:	b165      	cbz	r5, 800b1a2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b188:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b18c:	2101      	movs	r1, #1
 800b18e:	4620      	mov	r0, r4
 800b190:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800b192:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b196:	f7ff ff3c 	bl	800b012 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b19a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800b19e:	4620      	mov	r0, r4
 800b1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	e7f2      	b.n	800b18c <xQueueGenericCreate+0x38>

0800b1a6 <xQueueCreateCountingSemaphoreStatic>:
	{
 800b1a6:	b513      	push	{r0, r1, r4, lr}
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b1ac:	b950      	cbnz	r0, 800b1c4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	b672      	cpsid	i
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	b662      	cpsie	i
 800b1c2:	e7fe      	b.n	800b1c2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b1c4:	4288      	cmp	r0, r1
 800b1c6:	d20a      	bcs.n	800b1de <xQueueCreateCountingSemaphoreStatic+0x38>
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	b672      	cpsid	i
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	b662      	cpsie	i
 800b1dc:	e7fe      	b.n	800b1dc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b1de:	2202      	movs	r2, #2
 800b1e0:	9200      	str	r2, [sp, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	f7ff ffa1 	bl	800b12c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800b1ea:	b100      	cbz	r0, 800b1ee <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1ec:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd10      	pop	{r4, pc}

0800b1f2 <xQueueCreateCountingSemaphore>:
	{
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b1f6:	b950      	cbnz	r0, 800b20e <xQueueCreateCountingSemaphore+0x1c>
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	b672      	cpsid	i
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	b662      	cpsie	i
 800b20c:	e7fe      	b.n	800b20c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b20e:	4288      	cmp	r0, r1
 800b210:	d20a      	bcs.n	800b228 <xQueueCreateCountingSemaphore+0x36>
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	b672      	cpsid	i
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	b662      	cpsie	i
 800b226:	e7fe      	b.n	800b226 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b228:	2202      	movs	r2, #2
 800b22a:	2100      	movs	r1, #0
 800b22c:	f7ff ff92 	bl	800b154 <xQueueGenericCreate>
		if( xHandle != NULL )
 800b230:	b100      	cbz	r0, 800b234 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b232:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b234:	bd10      	pop	{r4, pc}

0800b236 <xQueueGenericSend>:
{
 800b236:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b23a:	b085      	sub	sp, #20
 800b23c:	4688      	mov	r8, r1
 800b23e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b240:	4604      	mov	r4, r0
{
 800b242:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b244:	b950      	cbnz	r0, 800b25c <xQueueGenericSend+0x26>
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	b672      	cpsid	i
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	b662      	cpsie	i
 800b25a:	e7fe      	b.n	800b25a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b25c:	b961      	cbnz	r1, 800b278 <xQueueGenericSend+0x42>
 800b25e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b260:	b153      	cbz	r3, 800b278 <xQueueGenericSend+0x42>
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	b672      	cpsid	i
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	b662      	cpsie	i
 800b276:	e7fe      	b.n	800b276 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b278:	2f02      	cmp	r7, #2
 800b27a:	d10d      	bne.n	800b298 <xQueueGenericSend+0x62>
 800b27c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d00a      	beq.n	800b298 <xQueueGenericSend+0x62>
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	b672      	cpsid	i
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	b662      	cpsie	i
 800b296:	e7fe      	b.n	800b296 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b298:	f001 f88c 	bl	800c3b4 <xTaskGetSchedulerState>
 800b29c:	4606      	mov	r6, r0
 800b29e:	b960      	cbnz	r0, 800b2ba <xQueueGenericSend+0x84>
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	b15b      	cbz	r3, 800b2bc <xQueueGenericSend+0x86>
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	b672      	cpsid	i
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	b662      	cpsie	i
 800b2b8:	e7fe      	b.n	800b2b8 <xQueueGenericSend+0x82>
 800b2ba:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b2bc:	f04f 0900 	mov.w	r9, #0
 800b2c0:	e037      	b.n	800b332 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2c2:	9d01      	ldr	r5, [sp, #4]
 800b2c4:	b91d      	cbnz	r5, 800b2ce <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800b2c6:	f7ff fd09 	bl	800acdc <vPortExitCritical>
			return errQUEUE_FULL;
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e052      	b.n	800b374 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800b2ce:	b916      	cbnz	r6, 800b2d6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2d0:	a802      	add	r0, sp, #8
 800b2d2:	f001 f817 	bl	800c304 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b2d6:	f7ff fd01 	bl	800acdc <vPortExitCritical>
		vTaskSuspendAll();
 800b2da:	f000 fd9b 	bl	800be14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2de:	f7ff fcd9 	bl	800ac94 <vPortEnterCritical>
 800b2e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b2e6:	2bff      	cmp	r3, #255	; 0xff
 800b2e8:	d101      	bne.n	800b2ee <xQueueGenericSend+0xb8>
 800b2ea:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800b2ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b2f2:	2bff      	cmp	r3, #255	; 0xff
 800b2f4:	d101      	bne.n	800b2fa <xQueueGenericSend+0xc4>
 800b2f6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800b2fa:	f7ff fcef 	bl	800acdc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2fe:	a901      	add	r1, sp, #4
 800b300:	a802      	add	r0, sp, #8
 800b302:	f001 f80b 	bl	800c31c <xTaskCheckForTimeOut>
 800b306:	2800      	cmp	r0, #0
 800b308:	d14a      	bne.n	800b3a0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b30a:	f7ff fcc3 	bl	800ac94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b30e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b312:	429a      	cmp	r2, r3
 800b314:	d131      	bne.n	800b37a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b316:	f7ff fce1 	bl	800acdc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b31a:	9901      	ldr	r1, [sp, #4]
 800b31c:	f104 0010 	add.w	r0, r4, #16
 800b320:	f000 ff6e 	bl	800c200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b324:	4620      	mov	r0, r4
 800b326:	f7ff fe3c 	bl	800afa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b32a:	f000 fe19 	bl	800bf60 <xTaskResumeAll>
 800b32e:	b360      	cbz	r0, 800b38a <xQueueGenericSend+0x154>
 800b330:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b332:	f7ff fcaf 	bl	800ac94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b336:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d301      	bcc.n	800b342 <xQueueGenericSend+0x10c>
 800b33e:	2f02      	cmp	r7, #2
 800b340:	d1bf      	bne.n	800b2c2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b342:	463a      	mov	r2, r7
 800b344:	4641      	mov	r1, r8
 800b346:	4620      	mov	r0, r4
 800b348:	f7ff fde1 	bl	800af0e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34e:	b11b      	cbz	r3, 800b358 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b350:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b354:	f000 ff90 	bl	800c278 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800b358:	b148      	cbz	r0, 800b36e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800b35a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b362:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b36e:	f7ff fcb5 	bl	800acdc <vPortExitCritical>
				return pdPASS;
 800b372:	2001      	movs	r0, #1
}
 800b374:	b005      	add	sp, #20
 800b376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800b37a:	f7ff fcaf 	bl	800acdc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff fe0f 	bl	800afa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b384:	f000 fdec 	bl	800bf60 <xTaskResumeAll>
 800b388:	e7d2      	b.n	800b330 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800b38a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b392:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	e7c7      	b.n	800b330 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7ff fdfe 	bl	800afa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3a6:	f000 fddb 	bl	800bf60 <xTaskResumeAll>
 800b3aa:	e78e      	b.n	800b2ca <xQueueGenericSend+0x94>

0800b3ac <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b3ac:	2200      	movs	r2, #0
	{
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	b513      	push	{r0, r1, r4, lr}
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	9000      	str	r0, [sp, #0]
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	f7ff fe6c 	bl	800b094 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800b3bc:	4604      	mov	r4, r0
 800b3be:	b138      	cbz	r0, 800b3d0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3c0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3c6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b3c8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b3ca:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b3cc:	f7ff ff33 	bl	800b236 <xQueueGenericSend>
	}
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	b002      	add	sp, #8
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <xQueueGiveMutexRecursive>:
	{
 800b3d6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800b3d8:	4604      	mov	r4, r0
 800b3da:	b950      	cbnz	r0, 800b3f2 <xQueueGiveMutexRecursive+0x1c>
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	b672      	cpsid	i
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	b662      	cpsie	i
 800b3f0:	e7fe      	b.n	800b3f0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b3f2:	6885      	ldr	r5, [r0, #8]
 800b3f4:	f000 ffd8 	bl	800c3a8 <xTaskGetCurrentTaskHandle>
 800b3f8:	4285      	cmp	r5, r0
 800b3fa:	d10a      	bne.n	800b412 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b3fc:	68e3      	ldr	r3, [r4, #12]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b402:	b923      	cbnz	r3, 800b40e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b404:	461a      	mov	r2, r3
 800b406:	4619      	mov	r1, r3
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff ff14 	bl	800b236 <xQueueGenericSend>
			xReturn = pdPASS;
 800b40e:	2001      	movs	r0, #1
		return xReturn;
 800b410:	e000      	b.n	800b414 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800b412:	2000      	movs	r0, #0
	}
 800b414:	bd38      	pop	{r3, r4, r5, pc}

0800b416 <xQueueCreateMutex>:
	{
 800b416:	b570      	push	{r4, r5, r6, lr}
 800b418:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b41a:	2050      	movs	r0, #80	; 0x50
 800b41c:	f7ff fabc 	bl	800a998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b420:	4604      	mov	r4, r0
 800b422:	b198      	cbz	r0, 800b44c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b424:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800b426:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b428:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b42a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800b42e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b432:	f7ff fdee 	bl	800b012 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b436:	462b      	mov	r3, r5
 800b438:	462a      	mov	r2, r5
 800b43a:	4629      	mov	r1, r5
 800b43c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800b43e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b442:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b444:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b446:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b448:	f7ff fef5 	bl	800b236 <xQueueGenericSend>
	}
 800b44c:	4620      	mov	r0, r4
 800b44e:	bd70      	pop	{r4, r5, r6, pc}

0800b450 <xQueueGenericSendFromISR>:
{
 800b450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b454:	4689      	mov	r9, r1
 800b456:	4690      	mov	r8, r2
 800b458:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b45a:	4604      	mov	r4, r0
 800b45c:	b950      	cbnz	r0, 800b474 <xQueueGenericSendFromISR+0x24>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	b672      	cpsid	i
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	b662      	cpsie	i
 800b472:	e7fe      	b.n	800b472 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b474:	b961      	cbnz	r1, 800b490 <xQueueGenericSendFromISR+0x40>
 800b476:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b478:	b153      	cbz	r3, 800b490 <xQueueGenericSendFromISR+0x40>
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	b672      	cpsid	i
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	b662      	cpsie	i
 800b48e:	e7fe      	b.n	800b48e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b490:	2f02      	cmp	r7, #2
 800b492:	d10d      	bne.n	800b4b0 <xQueueGenericSendFromISR+0x60>
 800b494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b496:	2b01      	cmp	r3, #1
 800b498:	d00a      	beq.n	800b4b0 <xQueueGenericSendFromISR+0x60>
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	b672      	cpsid	i
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	b662      	cpsie	i
 800b4ae:	e7fe      	b.n	800b4ae <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4b0:	f7ff fcf0 	bl	800ae94 <vPortValidateInterruptPriority>
	__asm volatile
 800b4b4:	f3ef 8611 	mrs	r6, BASEPRI
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	b672      	cpsid	i
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b4ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d301      	bcc.n	800b4d8 <xQueueGenericSendFromISR+0x88>
 800b4d4:	2f02      	cmp	r7, #2
 800b4d6:	d122      	bne.n	800b51e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4dc:	463a      	mov	r2, r7
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4e2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4e4:	f7ff fd13 	bl	800af0e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b4e8:	1c6b      	adds	r3, r5, #1
 800b4ea:	d113      	bne.n	800b514 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ee:	b90b      	cbnz	r3, 800b4f4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	e00b      	b.n	800b50c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b4f8:	f000 febe 	bl	800c278 <xTaskRemoveFromEventList>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d0f7      	beq.n	800b4f0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800b500:	f1b8 0f00 	cmp.w	r8, #0
 800b504:	d0f4      	beq.n	800b4f0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b506:	2001      	movs	r0, #1
 800b508:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b50c:	f386 8811 	msr	BASEPRI, r6
}
 800b510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b514:	3501      	adds	r5, #1
 800b516:	b26d      	sxtb	r5, r5
 800b518:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b51c:	e7e8      	b.n	800b4f0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800b51e:	2000      	movs	r0, #0
 800b520:	e7f4      	b.n	800b50c <xQueueGenericSendFromISR+0xbc>

0800b522 <xQueueGiveFromISR>:
{
 800b522:	b570      	push	{r4, r5, r6, lr}
 800b524:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b526:	4604      	mov	r4, r0
 800b528:	b950      	cbnz	r0, 800b540 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	b672      	cpsid	i
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	b662      	cpsie	i
 800b53e:	e7fe      	b.n	800b53e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b540:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b542:	b153      	cbz	r3, 800b55a <xQueueGiveFromISR+0x38>
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	e7fe      	b.n	800b558 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b55a:	6803      	ldr	r3, [r0, #0]
 800b55c:	b963      	cbnz	r3, 800b578 <xQueueGiveFromISR+0x56>
 800b55e:	6883      	ldr	r3, [r0, #8]
 800b560:	b153      	cbz	r3, 800b578 <xQueueGiveFromISR+0x56>
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	b672      	cpsid	i
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	b662      	cpsie	i
 800b576:	e7fe      	b.n	800b576 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b578:	f7ff fc8c 	bl	800ae94 <vPortValidateInterruptPriority>
	__asm volatile
 800b57c:	f3ef 8611 	mrs	r6, BASEPRI
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	b672      	cpsid	i
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b594:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b598:	4293      	cmp	r3, r2
 800b59a:	d91c      	bls.n	800b5d6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b59c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5a0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b5a2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5a4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5a6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b5a8:	d110      	bne.n	800b5cc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ac:	b90b      	cbnz	r3, 800b5b2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e009      	b.n	800b5c6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b5b6:	f000 fe5f 	bl	800c278 <xTaskRemoveFromEventList>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d0f7      	beq.n	800b5ae <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	d0f5      	beq.n	800b5ae <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b5c6:	f386 8811 	msr	BASEPRI, r6
}
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	b25b      	sxtb	r3, r3
 800b5d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5d4:	e7eb      	b.n	800b5ae <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e7f5      	b.n	800b5c6 <xQueueGiveFromISR+0xa4>

0800b5da <xQueueReceive>:
{
 800b5da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b5de:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b5e0:	4604      	mov	r4, r0
{
 800b5e2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b5e4:	b950      	cbnz	r0, 800b5fc <xQueueReceive+0x22>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	b672      	cpsid	i
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	b662      	cpsie	i
 800b5fa:	e7fe      	b.n	800b5fa <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5fc:	b961      	cbnz	r1, 800b618 <xQueueReceive+0x3e>
 800b5fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b600:	b153      	cbz	r3, 800b618 <xQueueReceive+0x3e>
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	b672      	cpsid	i
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	b662      	cpsie	i
 800b616:	e7fe      	b.n	800b616 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b618:	f000 fecc 	bl	800c3b4 <xTaskGetSchedulerState>
 800b61c:	4606      	mov	r6, r0
 800b61e:	b960      	cbnz	r0, 800b63a <xQueueReceive+0x60>
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	b15b      	cbz	r3, 800b63c <xQueueReceive+0x62>
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	b672      	cpsid	i
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	b662      	cpsie	i
 800b638:	e7fe      	b.n	800b638 <xQueueReceive+0x5e>
 800b63a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b63c:	f04f 0800 	mov.w	r8, #0
 800b640:	e03d      	b.n	800b6be <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b642:	9d01      	ldr	r5, [sp, #4]
 800b644:	b91d      	cbnz	r5, 800b64e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800b646:	f7ff fb49 	bl	800acdc <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b64a:	2000      	movs	r0, #0
 800b64c:	e056      	b.n	800b6fc <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800b64e:	b916      	cbnz	r6, 800b656 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b650:	a802      	add	r0, sp, #8
 800b652:	f000 fe57 	bl	800c304 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b656:	f7ff fb41 	bl	800acdc <vPortExitCritical>
		vTaskSuspendAll();
 800b65a:	f000 fbdb 	bl	800be14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b65e:	f7ff fb19 	bl	800ac94 <vPortEnterCritical>
 800b662:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b666:	2bff      	cmp	r3, #255	; 0xff
 800b668:	d101      	bne.n	800b66e <xQueueReceive+0x94>
 800b66a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b66e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b672:	2bff      	cmp	r3, #255	; 0xff
 800b674:	d101      	bne.n	800b67a <xQueueReceive+0xa0>
 800b676:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b67a:	f7ff fb2f 	bl	800acdc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b67e:	a901      	add	r1, sp, #4
 800b680:	a802      	add	r0, sp, #8
 800b682:	f000 fe4b 	bl	800c31c <xTaskCheckForTimeOut>
 800b686:	2800      	cmp	r0, #0
 800b688:	d141      	bne.n	800b70e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b68a:	4620      	mov	r0, r4
 800b68c:	f7ff fc34 	bl	800aef8 <prvIsQueueEmpty>
 800b690:	b3b8      	cbz	r0, 800b702 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b692:	9901      	ldr	r1, [sp, #4]
 800b694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b698:	f000 fdb2 	bl	800c200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7ff fc80 	bl	800afa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6a2:	f000 fc5d 	bl	800bf60 <xTaskResumeAll>
 800b6a6:	b948      	cbnz	r0, 800b6bc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800b6a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b6be:	f7ff fae9 	bl	800ac94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6c2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	d0bc      	beq.n	800b642 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6c8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff fc53 	bl	800af78 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6d2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	b173      	cbz	r3, 800b6f6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6d8:	f104 0010 	add.w	r0, r4, #16
 800b6dc:	f000 fdcc 	bl	800c278 <xTaskRemoveFromEventList>
 800b6e0:	b148      	cbz	r0, 800b6f6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800b6e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b6e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b6f6:	f7ff faf1 	bl	800acdc <vPortExitCritical>
				return pdPASS;
 800b6fa:	2001      	movs	r0, #1
}
 800b6fc:	b004      	add	sp, #16
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b702:	4620      	mov	r0, r4
 800b704:	f7ff fc4d 	bl	800afa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b708:	f000 fc2a 	bl	800bf60 <xTaskResumeAll>
 800b70c:	e7d6      	b.n	800b6bc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800b70e:	4620      	mov	r0, r4
 800b710:	f7ff fc47 	bl	800afa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b714:	f000 fc24 	bl	800bf60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b718:	4620      	mov	r0, r4
 800b71a:	f7ff fbed 	bl	800aef8 <prvIsQueueEmpty>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0cc      	beq.n	800b6bc <xQueueReceive+0xe2>
 800b722:	e792      	b.n	800b64a <xQueueReceive+0x70>

0800b724 <xQueueSemaphoreTake>:
{
 800b724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b726:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800b728:	4604      	mov	r4, r0
{
 800b72a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b72c:	b950      	cbnz	r0, 800b744 <xQueueSemaphoreTake+0x20>
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	b672      	cpsid	i
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	b662      	cpsie	i
 800b742:	e7fe      	b.n	800b742 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b744:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b746:	b155      	cbz	r5, 800b75e <xQueueSemaphoreTake+0x3a>
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	b672      	cpsid	i
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	b662      	cpsie	i
 800b75c:	e7fe      	b.n	800b75c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b75e:	f000 fe29 	bl	800c3b4 <xTaskGetSchedulerState>
 800b762:	4606      	mov	r6, r0
 800b764:	b960      	cbnz	r0, 800b780 <xQueueSemaphoreTake+0x5c>
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	b16b      	cbz	r3, 800b786 <xQueueSemaphoreTake+0x62>
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	b672      	cpsid	i
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	b662      	cpsie	i
 800b77e:	e7fe      	b.n	800b77e <xQueueSemaphoreTake+0x5a>
 800b780:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b782:	2700      	movs	r7, #0
 800b784:	e055      	b.n	800b832 <xQueueSemaphoreTake+0x10e>
 800b786:	4605      	mov	r5, r0
 800b788:	e7fb      	b.n	800b782 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b78a:	9b01      	ldr	r3, [sp, #4]
 800b78c:	b973      	cbnz	r3, 800b7ac <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b78e:	b155      	cbz	r5, 800b7a6 <xQueueSemaphoreTake+0x82>
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	e7fe      	b.n	800b7a4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800b7a6:	f7ff fa99 	bl	800acdc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b7aa:	e062      	b.n	800b872 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800b7ac:	b916      	cbnz	r6, 800b7b4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7ae:	a802      	add	r0, sp, #8
 800b7b0:	f000 fda8 	bl	800c304 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b7b4:	f7ff fa92 	bl	800acdc <vPortExitCritical>
		vTaskSuspendAll();
 800b7b8:	f000 fb2c 	bl	800be14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7bc:	f7ff fa6a 	bl	800ac94 <vPortEnterCritical>
 800b7c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7c4:	2bff      	cmp	r3, #255	; 0xff
 800b7c6:	d101      	bne.n	800b7cc <xQueueSemaphoreTake+0xa8>
 800b7c8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b7cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b7d0:	2bff      	cmp	r3, #255	; 0xff
 800b7d2:	d101      	bne.n	800b7d8 <xQueueSemaphoreTake+0xb4>
 800b7d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7d8:	f7ff fa80 	bl	800acdc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7dc:	a901      	add	r1, sp, #4
 800b7de:	a802      	add	r0, sp, #8
 800b7e0:	f000 fd9c 	bl	800c31c <xTaskCheckForTimeOut>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d14d      	bne.n	800b884 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f7ff fb85 	bl	800aef8 <prvIsQueueEmpty>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d042      	beq.n	800b878 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	b93b      	cbnz	r3, 800b806 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800b7f6:	f7ff fa4d 	bl	800ac94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7fa:	68a0      	ldr	r0, [r4, #8]
 800b7fc:	f000 fdea 	bl	800c3d4 <xTaskPriorityInherit>
 800b800:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b802:	f7ff fa6b 	bl	800acdc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b80c:	f000 fcf8 	bl	800c200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fbc6 	bl	800afa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b816:	f000 fba3 	bl	800bf60 <xTaskResumeAll>
 800b81a:	b948      	cbnz	r0, 800b830 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800b81c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b824:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b832:	f7ff fa2f 	bl	800ac94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0a6      	beq.n	800b78a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b83c:	3b01      	subs	r3, #1
 800b83e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	b913      	cbnz	r3, 800b84a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b844:	f000 fea4 	bl	800c590 <pvTaskIncrementMutexHeldCount>
 800b848:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	b173      	cbz	r3, 800b86c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b84e:	f104 0010 	add.w	r0, r4, #16
 800b852:	f000 fd11 	bl	800c278 <xTaskRemoveFromEventList>
 800b856:	b148      	cbz	r0, 800b86c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800b858:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b860:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b86c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b86e:	f7ff fa35 	bl	800acdc <vPortExitCritical>
}
 800b872:	4628      	mov	r0, r5
 800b874:	b005      	add	sp, #20
 800b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800b878:	4620      	mov	r0, r4
 800b87a:	f7ff fb92 	bl	800afa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b87e:	f000 fb6f 	bl	800bf60 <xTaskResumeAll>
 800b882:	e7d5      	b.n	800b830 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff fb8c 	bl	800afa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b88a:	f000 fb69 	bl	800bf60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b88e:	4620      	mov	r0, r4
 800b890:	f7ff fb32 	bl	800aef8 <prvIsQueueEmpty>
 800b894:	2800      	cmp	r0, #0
 800b896:	d0cb      	beq.n	800b830 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800b898:	2d00      	cmp	r5, #0
 800b89a:	d0ea      	beq.n	800b872 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800b89c:	f7ff f9fa 	bl	800ac94 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b8a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8a2:	b119      	cbz	r1, 800b8ac <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b8a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b8a6:	6819      	ldr	r1, [r3, #0]
 800b8a8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8ac:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b8ae:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8b0:	f000 fe18 	bl	800c4e4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b8b4:	f7ff fa12 	bl	800acdc <vPortExitCritical>
 800b8b8:	e7db      	b.n	800b872 <xQueueSemaphoreTake+0x14e>

0800b8ba <xQueueTakeMutexRecursive>:
	{
 800b8ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800b8bc:	4604      	mov	r4, r0
 800b8be:	b950      	cbnz	r0, 800b8d6 <xQueueTakeMutexRecursive+0x1c>
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	b672      	cpsid	i
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	b662      	cpsie	i
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b8d6:	6885      	ldr	r5, [r0, #8]
 800b8d8:	9101      	str	r1, [sp, #4]
 800b8da:	f000 fd65 	bl	800c3a8 <xTaskGetCurrentTaskHandle>
 800b8de:	4285      	cmp	r5, r0
 800b8e0:	9901      	ldr	r1, [sp, #4]
 800b8e2:	d105      	bne.n	800b8f0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b8e4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800b8e6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60e3      	str	r3, [r4, #12]
	}
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7ff ff17 	bl	800b724 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d0f8      	beq.n	800b8ec <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800b900:	e7f4      	b.n	800b8ec <xQueueTakeMutexRecursive+0x32>

0800b902 <xQueueReceiveFromISR>:
{
 800b902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b906:	4689      	mov	r9, r1
 800b908:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b90a:	4605      	mov	r5, r0
 800b90c:	b950      	cbnz	r0, 800b924 <xQueueReceiveFromISR+0x22>
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	b672      	cpsid	i
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	b662      	cpsie	i
 800b922:	e7fe      	b.n	800b922 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b924:	b961      	cbnz	r1, 800b940 <xQueueReceiveFromISR+0x3e>
 800b926:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b928:	b153      	cbz	r3, 800b940 <xQueueReceiveFromISR+0x3e>
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	b672      	cpsid	i
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	b662      	cpsie	i
 800b93e:	e7fe      	b.n	800b93e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b940:	f7ff faa8 	bl	800ae94 <vPortValidateInterruptPriority>
	__asm volatile
 800b944:	f3ef 8711 	mrs	r7, BASEPRI
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	b672      	cpsid	i
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b95c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b95e:	b31c      	cbz	r4, 800b9a8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b960:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b964:	4649      	mov	r1, r9
 800b966:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b968:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b96a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b96c:	f7ff fb04 	bl	800af78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b970:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b972:	1c73      	adds	r3, r6, #1
 800b974:	d113      	bne.n	800b99e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b976:	692b      	ldr	r3, [r5, #16]
 800b978:	b90b      	cbnz	r3, 800b97e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800b97a:	2001      	movs	r0, #1
 800b97c:	e00b      	b.n	800b996 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b97e:	f105 0010 	add.w	r0, r5, #16
 800b982:	f000 fc79 	bl	800c278 <xTaskRemoveFromEventList>
 800b986:	2800      	cmp	r0, #0
 800b988:	d0f7      	beq.n	800b97a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800b98a:	f1b8 0f00 	cmp.w	r8, #0
 800b98e:	d0f4      	beq.n	800b97a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b990:	2001      	movs	r0, #1
 800b992:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b996:	f387 8811 	msr	BASEPRI, r7
}
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b99e:	3601      	adds	r6, #1
 800b9a0:	b276      	sxtb	r6, r6
 800b9a2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b9a6:	e7e8      	b.n	800b97a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	e7f4      	b.n	800b996 <xQueueReceiveFromISR+0x94>

0800b9ac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9ac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9ae:	4a07      	ldr	r2, [pc, #28]	; (800b9cc <vQueueAddToRegistry+0x20>)
	{
 800b9b0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9b2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800b9b6:	b92c      	cbnz	r4, 800b9c4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b9b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b9bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9c0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9c2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	2b08      	cmp	r3, #8
 800b9c8:	d1f3      	bne.n	800b9b2 <vQueueAddToRegistry+0x6>
 800b9ca:	e7fa      	b.n	800b9c2 <vQueueAddToRegistry+0x16>
 800b9cc:	20023260 	.word	0x20023260

0800b9d0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9d0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b9d2:	4a08      	ldr	r2, [pc, #32]	; (800b9f4 <vQueueUnregisterQueue+0x24>)
	{
 800b9d4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b9d6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b9da:	684c      	ldr	r4, [r1, #4]
 800b9dc:	4284      	cmp	r4, r0
 800b9de:	d104      	bne.n	800b9ea <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b9e6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b9e8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	2b08      	cmp	r3, #8
 800b9ee:	d1f2      	bne.n	800b9d6 <vQueueUnregisterQueue+0x6>
 800b9f0:	e7fa      	b.n	800b9e8 <vQueueUnregisterQueue+0x18>
 800b9f2:	bf00      	nop
 800b9f4:	20023260 	.word	0x20023260

0800b9f8 <vQueueDelete>:
{
 800b9f8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	b950      	cbnz	r0, 800ba14 <vQueueDelete+0x1c>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	b672      	cpsid	i
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	b662      	cpsie	i
 800ba12:	e7fe      	b.n	800ba12 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800ba14:	f7ff ffdc 	bl	800b9d0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba1c:	b923      	cbnz	r3, 800ba28 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800ba1e:	4620      	mov	r0, r4
}
 800ba20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800ba24:	f7ff b84e 	b.w	800aac4 <vPortFree>
}
 800ba28:	bd10      	pop	{r4, pc}

0800ba2a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba2a:	b570      	push	{r4, r5, r6, lr}
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba32:	f7ff f92f 	bl	800ac94 <vPortEnterCritical>
 800ba36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba3a:	2bff      	cmp	r3, #255	; 0xff
 800ba3c:	d102      	bne.n	800ba44 <vQueueWaitForMessageRestricted+0x1a>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ba44:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba48:	2bff      	cmp	r3, #255	; 0xff
 800ba4a:	d102      	bne.n	800ba52 <vQueueWaitForMessageRestricted+0x28>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba52:	f7ff f943 	bl	800acdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba58:	b92b      	cbnz	r3, 800ba66 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ba62:	f000 fbe9 	bl	800c238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba66:	4620      	mov	r0, r4
	}
 800ba68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800ba6c:	f7ff ba99 	b.w	800afa2 <prvUnlockQueue>

0800ba70 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba74:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba76:	f7ff f90d 	bl	800ac94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba7a:	4b2f      	ldr	r3, [pc, #188]	; (800bb38 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800ba7c:	4e2f      	ldr	r6, [pc, #188]	; (800bb3c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	4f2f      	ldr	r7, [pc, #188]	; (800bb40 <prvAddNewTaskToReadyList+0xd0>)
 800ba82:	3201      	adds	r2, #1
 800ba84:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ba86:	6835      	ldr	r5, [r6, #0]
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	d14a      	bne.n	800bb22 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba8c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d11f      	bne.n	800bad4 <prvAddNewTaskToReadyList+0x64>
 800ba94:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba96:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba98:	4640      	mov	r0, r8
 800ba9a:	f7ff f84f 	bl	800ab3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba9e:	f108 0814 	add.w	r8, r8, #20
 800baa2:	2d38      	cmp	r5, #56	; 0x38
 800baa4:	d1f7      	bne.n	800ba96 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800baa6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800bb68 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800baaa:	4d26      	ldr	r5, [pc, #152]	; (800bb44 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800baac:	4640      	mov	r0, r8
 800baae:	f7ff f845 	bl	800ab3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bab2:	4628      	mov	r0, r5
 800bab4:	f7ff f842 	bl	800ab3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bab8:	4823      	ldr	r0, [pc, #140]	; (800bb48 <prvAddNewTaskToReadyList+0xd8>)
 800baba:	f7ff f83f 	bl	800ab3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800babe:	4823      	ldr	r0, [pc, #140]	; (800bb4c <prvAddNewTaskToReadyList+0xdc>)
 800bac0:	f7ff f83c 	bl	800ab3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bac4:	4822      	ldr	r0, [pc, #136]	; (800bb50 <prvAddNewTaskToReadyList+0xe0>)
 800bac6:	f7ff f839 	bl	800ab3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800baca:	4b22      	ldr	r3, [pc, #136]	; (800bb54 <prvAddNewTaskToReadyList+0xe4>)
 800bacc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bad0:	4b21      	ldr	r3, [pc, #132]	; (800bb58 <prvAddNewTaskToReadyList+0xe8>)
 800bad2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800bad4:	4a21      	ldr	r2, [pc, #132]	; (800bb5c <prvAddNewTaskToReadyList+0xec>)
 800bad6:	6813      	ldr	r3, [r2, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800badc:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bade:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800bae0:	6811      	ldr	r1, [r2, #0]
 800bae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bae4:	428b      	cmp	r3, r1
 800bae6:	d900      	bls.n	800baea <prvAddNewTaskToReadyList+0x7a>
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	2014      	movs	r0, #20
 800baec:	1d21      	adds	r1, r4, #4
 800baee:	fb00 7003 	mla	r0, r0, r3, r7
 800baf2:	f7ff f831 	bl	800ab58 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800baf6:	f7ff f8f1 	bl	800acdc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800bafa:	4b1a      	ldr	r3, [pc, #104]	; (800bb64 <prvAddNewTaskToReadyList+0xf4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	b173      	cbz	r3, 800bb1e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb00:	6833      	ldr	r3, [r6, #0]
 800bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d209      	bcs.n	800bb1e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800bb0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	f3bf 8f6f 	isb	sy
}
 800bb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <prvAddNewTaskToReadyList+0xf4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1d4      	bne.n	800bad4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb2a:	6833      	ldr	r3, [r6, #0]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d8cf      	bhi.n	800bad4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800bb34:	6034      	str	r4, [r6, #0]
 800bb36:	e7cd      	b.n	800bad4 <prvAddNewTaskToReadyList+0x64>
 800bb38:	2002370c 	.word	0x2002370c
 800bb3c:	200232a0 	.word	0x200232a0
 800bb40:	200232ac 	.word	0x200232ac
 800bb44:	20023738 	.word	0x20023738
 800bb48:	20023754 	.word	0x20023754
 800bb4c:	20023780 	.word	0x20023780
 800bb50:	2002376c 	.word	0x2002376c
 800bb54:	200232a4 	.word	0x200232a4
 800bb58:	200232a8 	.word	0x200232a8
 800bb5c:	2002371c 	.word	0x2002371c
 800bb60:	20023720 	.word	0x20023720
 800bb64:	20023768 	.word	0x20023768
 800bb68:	20023724 	.word	0x20023724

0800bb6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb6e:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800bb70:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb72:	4e15      	ldr	r6, [pc, #84]	; (800bbc8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800bb74:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800bb76:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb78:	6830      	ldr	r0, [r6, #0]
 800bb7a:	3004      	adds	r0, #4
 800bb7c:	f7ff f80f 	bl	800ab9e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb80:	1c63      	adds	r3, r4, #1
 800bb82:	d107      	bne.n	800bb94 <prvAddCurrentTaskToDelayedList+0x28>
 800bb84:	b137      	cbz	r7, 800bb94 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb86:	6831      	ldr	r1, [r6, #0]
 800bb88:	4810      	ldr	r0, [pc, #64]	; (800bbcc <prvAddCurrentTaskToDelayedList+0x60>)
 800bb8a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb90:	f7fe bfe2 	b.w	800ab58 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb94:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb96:	6833      	ldr	r3, [r6, #0]
 800bb98:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb9a:	d307      	bcc.n	800bbac <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb9c:	4b0c      	ldr	r3, [pc, #48]	; (800bbd0 <prvAddCurrentTaskToDelayedList+0x64>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	6831      	ldr	r1, [r6, #0]
}
 800bba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bba6:	3104      	adds	r1, #4
 800bba8:	f7fe bfe2 	b.w	800ab70 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbac:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <prvAddCurrentTaskToDelayedList+0x68>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	6831      	ldr	r1, [r6, #0]
 800bbb2:	3104      	adds	r1, #4
 800bbb4:	f7fe ffdc 	bl	800ab70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	42a2      	cmp	r2, r4
 800bbbe:	d900      	bls.n	800bbc2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800bbc0:	601c      	str	r4, [r3, #0]
}
 800bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc4:	20023794 	.word	0x20023794
 800bbc8:	200232a0 	.word	0x200232a0
 800bbcc:	2002376c 	.word	0x2002376c
 800bbd0:	200232a8 	.word	0x200232a8
 800bbd4:	200232a4 	.word	0x200232a4
 800bbd8:	2002374c 	.word	0x2002374c

0800bbdc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbdc:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <prvResetNextTaskUnblockTime+0x1c>)
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	6819      	ldr	r1, [r3, #0]
 800bbe2:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <prvResetNextTaskUnblockTime+0x20>)
 800bbe4:	b919      	cbnz	r1, 800bbee <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800bbe6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bbea:	601a      	str	r2, [r3, #0]
}
 800bbec:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bbf2:	68d2      	ldr	r2, [r2, #12]
 800bbf4:	6852      	ldr	r2, [r2, #4]
 800bbf6:	e7f8      	b.n	800bbea <prvResetNextTaskUnblockTime+0xe>
 800bbf8:	200232a4 	.word	0x200232a4
 800bbfc:	2002374c 	.word	0x2002374c

0800bc00 <prvDeleteTCB>:
	{
 800bc00:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc02:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800bc06:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc08:	b93b      	cbnz	r3, 800bc1a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800bc0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bc0c:	f7fe ff5a 	bl	800aac4 <vPortFree>
				vPortFree( pxTCB );
 800bc10:	4620      	mov	r0, r4
	}
 800bc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800bc16:	f7fe bf55 	b.w	800aac4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d0f9      	beq.n	800bc12 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d00a      	beq.n	800bc38 <prvDeleteTCB+0x38>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	b672      	cpsid	i
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	b662      	cpsie	i
 800bc36:	e7fe      	b.n	800bc36 <prvDeleteTCB+0x36>
	}
 800bc38:	bd10      	pop	{r4, pc}
	...

0800bc3c <prvIdleTask>:
{
 800bc3c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc3e:	4c14      	ldr	r4, [pc, #80]	; (800bc90 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc40:	4f14      	ldr	r7, [pc, #80]	; (800bc94 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800bc42:	4d15      	ldr	r5, [pc, #84]	; (800bc98 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	b983      	cbnz	r3, 800bc6a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc48:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <prvIdleTask+0x60>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d909      	bls.n	800bc64 <prvIdleTask+0x28>
				taskYIELD();
 800bc50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800bc64:	f7f7 f8fc 	bl	8002e60 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bc68:	e7eb      	b.n	800bc42 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800bc6a:	f7ff f813 	bl	800ac94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc72:	1d30      	adds	r0, r6, #4
 800bc74:	f7fe ff93 	bl	800ab9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800bc84:	f7ff f82a 	bl	800acdc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f7ff ffb9 	bl	800bc00 <prvDeleteTCB>
 800bc8e:	e7d9      	b.n	800bc44 <prvIdleTask+0x8>
 800bc90:	20023710 	.word	0x20023710
 800bc94:	20023780 	.word	0x20023780
 800bc98:	2002370c 	.word	0x2002370c
 800bc9c:	200232ac 	.word	0x200232ac

0800bca0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bca4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bca8:	4606      	mov	r6, r0
 800bcaa:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcac:	21a5      	movs	r1, #165	; 0xa5
 800bcae:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bcb0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcb2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bcb6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bcbc:	f013 fc72 	bl	801f5a4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bcc2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcc4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800bcc8:	b3b5      	cbz	r5, 800bd38 <prvInitialiseNewTask.constprop.0+0x98>
 800bcca:	1e6b      	subs	r3, r5, #1
 800bccc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bcd0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcd2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800bcd6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800bcda:	b108      	cbz	r0, 800bce0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcdc:	42ab      	cmp	r3, r5
 800bcde:	d1f8      	bne.n	800bcd2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bce0:	2300      	movs	r3, #0
 800bce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bce6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800bce8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bcec:	1d20      	adds	r0, r4, #4
 800bcee:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bcf0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800bcf4:	bf28      	it	cs
 800bcf6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800bcf8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bcfa:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcfc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd00:	f7fe ff27 	bl	800ab52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd04:	f104 0018 	add.w	r0, r4, #24
 800bd08:	f7fe ff23 	bl	800ab52 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800bd0c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd10:	463a      	mov	r2, r7
 800bd12:	4631      	mov	r1, r6
 800bd14:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd16:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd18:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd1a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800bd1c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd20:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd24:	f7fe ff8e 	bl	800ac44 <pxPortInitialiseStack>
 800bd28:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800bd2a:	f1b8 0f00 	cmp.w	r8, #0
 800bd2e:	d001      	beq.n	800bd34 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd30:	f8c8 4000 	str.w	r4, [r8]
}
 800bd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd38:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800bd3c:	e7d3      	b.n	800bce6 <prvInitialiseNewTask.constprop.0+0x46>

0800bd3e <xTaskCreateStatic>:
	{
 800bd3e:	b570      	push	{r4, r5, r6, lr}
 800bd40:	b086      	sub	sp, #24
 800bd42:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800bd46:	b955      	cbnz	r5, 800bd5e <xTaskCreateStatic+0x20>
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	b672      	cpsid	i
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	b662      	cpsie	i
 800bd5c:	e7fe      	b.n	800bd5c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800bd5e:	b954      	cbnz	r4, 800bd76 <xTaskCreateStatic+0x38>
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	b672      	cpsid	i
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	b662      	cpsie	i
 800bd74:	e7fe      	b.n	800bd74 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd76:	2660      	movs	r6, #96	; 0x60
 800bd78:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd7a:	9e05      	ldr	r6, [sp, #20]
 800bd7c:	2e60      	cmp	r6, #96	; 0x60
 800bd7e:	d00a      	beq.n	800bd96 <xTaskCreateStatic+0x58>
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	b672      	cpsid	i
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	b662      	cpsie	i
 800bd94:	e7fe      	b.n	800bd94 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd96:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd98:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd9a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd9c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bda0:	ad04      	add	r5, sp, #16
 800bda2:	9402      	str	r4, [sp, #8]
 800bda4:	9501      	str	r5, [sp, #4]
 800bda6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bda8:	9500      	str	r5, [sp, #0]
 800bdaa:	f7ff ff79 	bl	800bca0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7ff fe5e 	bl	800ba70 <prvAddNewTaskToReadyList>
	}
 800bdb4:	9804      	ldr	r0, [sp, #16]
 800bdb6:	b006      	add	sp, #24
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}

0800bdba <xTaskCreate>:
	{
 800bdba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdbe:	4607      	mov	r7, r0
 800bdc0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdc2:	0090      	lsls	r0, r2, #2
	{
 800bdc4:	4688      	mov	r8, r1
 800bdc6:	4616      	mov	r6, r2
 800bdc8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdca:	f7fe fde5 	bl	800a998 <pvPortMalloc>
			if( pxStack != NULL )
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b1e8      	cbz	r0, 800be0e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdd2:	2060      	movs	r0, #96	; 0x60
 800bdd4:	f7fe fde0 	bl	800a998 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800bdd8:	4604      	mov	r4, r0
 800bdda:	b1a8      	cbz	r0, 800be08 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bddc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800bdde:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bde0:	4632      	mov	r2, r6
 800bde2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bde4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bde8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdea:	9002      	str	r0, [sp, #8]
 800bdec:	4638      	mov	r0, r7
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	f7ff ff53 	bl	800bca0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f7ff fe38 	bl	800ba70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be00:	2001      	movs	r0, #1
	}
 800be02:	b005      	add	sp, #20
 800be04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800be08:	4628      	mov	r0, r5
 800be0a:	f7fe fe5b 	bl	800aac4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be0e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800be12:	e7f6      	b.n	800be02 <xTaskCreate+0x48>

0800be14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800be14:	4a02      	ldr	r2, [pc, #8]	; (800be20 <vTaskSuspendAll+0xc>)
 800be16:	6813      	ldr	r3, [r2, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	6013      	str	r3, [r2, #0]
}
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20023718 	.word	0x20023718

0800be24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800be24:	4b01      	ldr	r3, [pc, #4]	; (800be2c <xTaskGetTickCount+0x8>)
 800be26:	6818      	ldr	r0, [r3, #0]
}
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	20023794 	.word	0x20023794

0800be30 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be30:	4b40      	ldr	r3, [pc, #256]	; (800bf34 <xTaskIncrementTick+0x104>)
 800be32:	681b      	ldr	r3, [r3, #0]
{
 800be34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d174      	bne.n	800bf26 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be3c:	4b3e      	ldr	r3, [pc, #248]	; (800bf38 <xTaskIncrementTick+0x108>)
 800be3e:	681d      	ldr	r5, [r3, #0]
 800be40:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800be42:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be44:	b9cd      	cbnz	r5, 800be7a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800be46:	4b3d      	ldr	r3, [pc, #244]	; (800bf3c <xTaskIncrementTick+0x10c>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	6812      	ldr	r2, [r2, #0]
 800be4c:	b152      	cbz	r2, 800be64 <xTaskIncrementTick+0x34>
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	b672      	cpsid	i
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	b662      	cpsie	i
 800be62:	e7fe      	b.n	800be62 <xTaskIncrementTick+0x32>
 800be64:	4a36      	ldr	r2, [pc, #216]	; (800bf40 <xTaskIncrementTick+0x110>)
 800be66:	6819      	ldr	r1, [r3, #0]
 800be68:	6810      	ldr	r0, [r2, #0]
 800be6a:	6018      	str	r0, [r3, #0]
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	4a35      	ldr	r2, [pc, #212]	; (800bf44 <xTaskIncrementTick+0x114>)
 800be70:	6813      	ldr	r3, [r2, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	f7ff feb1 	bl	800bbdc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be7a:	4e33      	ldr	r6, [pc, #204]	; (800bf48 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800be7c:	2400      	movs	r4, #0
 800be7e:	4f33      	ldr	r7, [pc, #204]	; (800bf4c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be80:	6833      	ldr	r3, [r6, #0]
 800be82:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800bf58 <xTaskIncrementTick+0x128>
 800be86:	42ab      	cmp	r3, r5
 800be88:	d911      	bls.n	800beae <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be8a:	f8d8 3000 	ldr.w	r3, [r8]
 800be8e:	2214      	movs	r2, #20
 800be90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be92:	4353      	muls	r3, r2
 800be94:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800be96:	2b02      	cmp	r3, #2
 800be98:	bf28      	it	cs
 800be9a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800be9c:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <xTaskIncrementTick+0x120>)
 800be9e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800bea0:	2b00      	cmp	r3, #0
}
 800bea2:	bf0c      	ite	eq
 800bea4:	4620      	moveq	r0, r4
 800bea6:	2001      	movne	r0, #1
 800bea8:	b003      	add	sp, #12
 800beaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bf3c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800beb2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800bf5c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb6:	f8d9 3000 	ldr.w	r3, [r9]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	b91b      	cbnz	r3, 800bec6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bebe:	f04f 33ff 	mov.w	r3, #4294967295
 800bec2:	6033      	str	r3, [r6, #0]
					break;
 800bec4:	e7e1      	b.n	800be8a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec6:	f8d9 3000 	ldr.w	r3, [r9]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bed0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800bed4:	4295      	cmp	r5, r2
 800bed6:	d201      	bcs.n	800bedc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800bed8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800beda:	e7d6      	b.n	800be8a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bedc:	f10b 0104 	add.w	r1, fp, #4
 800bee0:	4608      	mov	r0, r1
 800bee2:	9101      	str	r1, [sp, #4]
 800bee4:	f7fe fe5b 	bl	800ab9e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bee8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800beec:	9901      	ldr	r1, [sp, #4]
 800beee:	b122      	cbz	r2, 800befa <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bef0:	f10b 0018 	add.w	r0, fp, #24
 800bef4:	f7fe fe53 	bl	800ab9e <uxListRemove>
 800bef8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800befa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800befe:	f8da 2000 	ldr.w	r2, [sl]
 800bf02:	4290      	cmp	r0, r2
 800bf04:	d901      	bls.n	800bf0a <xTaskIncrementTick+0xda>
 800bf06:	f8ca 0000 	str.w	r0, [sl]
 800bf0a:	2314      	movs	r3, #20
 800bf0c:	fb03 7000 	mla	r0, r3, r0, r7
 800bf10:	f7fe fe22 	bl	800ab58 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf14:	f8d8 1000 	ldr.w	r1, [r8]
 800bf18:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800bf1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf28      	it	cs
 800bf22:	2401      	movcs	r4, #1
 800bf24:	e7c7      	b.n	800beb6 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800bf26:	4a0b      	ldr	r2, [pc, #44]	; (800bf54 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800bf28:	2400      	movs	r4, #0
		++uxPendedTicks;
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	e7b4      	b.n	800be9c <xTaskIncrementTick+0x6c>
 800bf32:	bf00      	nop
 800bf34:	20023718 	.word	0x20023718
 800bf38:	20023794 	.word	0x20023794
 800bf3c:	200232a4 	.word	0x200232a4
 800bf40:	200232a8 	.word	0x200232a8
 800bf44:	20023750 	.word	0x20023750
 800bf48:	2002374c 	.word	0x2002374c
 800bf4c:	200232ac 	.word	0x200232ac
 800bf50:	20023798 	.word	0x20023798
 800bf54:	20023714 	.word	0x20023714
 800bf58:	200232a0 	.word	0x200232a0
 800bf5c:	20023720 	.word	0x20023720

0800bf60 <xTaskResumeAll>:
{
 800bf60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800bf62:	4c32      	ldr	r4, [pc, #200]	; (800c02c <xTaskResumeAll+0xcc>)
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	b953      	cbnz	r3, 800bf7e <xTaskResumeAll+0x1e>
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	b672      	cpsid	i
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	b662      	cpsie	i
 800bf7c:	e7fe      	b.n	800bf7c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800bf7e:	f7fe fe89 	bl	800ac94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf88:	6824      	ldr	r4, [r4, #0]
 800bf8a:	b12c      	cbz	r4, 800bf98 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800bf8c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bf8e:	f7fe fea5 	bl	800acdc <vPortExitCritical>
}
 800bf92:	4620      	mov	r0, r4
 800bf94:	b003      	add	sp, #12
 800bf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf98:	4b25      	ldr	r3, [pc, #148]	; (800c030 <xTaskResumeAll+0xd0>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0f5      	beq.n	800bf8c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfa0:	4d24      	ldr	r5, [pc, #144]	; (800c034 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800bfa2:	4e25      	ldr	r6, [pc, #148]	; (800c038 <xTaskResumeAll+0xd8>)
 800bfa4:	4f25      	ldr	r7, [pc, #148]	; (800c03c <xTaskResumeAll+0xdc>)
 800bfa6:	e01e      	b.n	800bfe6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa8:	68eb      	ldr	r3, [r5, #12]
 800bfaa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfac:	f104 0018 	add.w	r0, r4, #24
 800bfb0:	f7fe fdf5 	bl	800ab9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfb4:	1d21      	adds	r1, r4, #4
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	9101      	str	r1, [sp, #4]
 800bfba:	f7fe fdf0 	bl	800ab9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfc0:	6832      	ldr	r2, [r6, #0]
 800bfc2:	9901      	ldr	r1, [sp, #4]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d900      	bls.n	800bfca <xTaskResumeAll+0x6a>
 800bfc8:	6033      	str	r3, [r6, #0]
 800bfca:	2014      	movs	r0, #20
 800bfcc:	fb00 7003 	mla	r0, r0, r3, r7
 800bfd0:	f7fe fdc2 	bl	800ab58 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <xTaskResumeAll+0xe0>)
 800bfd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d302      	bcc.n	800bfe6 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800bfe0:	4b18      	ldr	r3, [pc, #96]	; (800c044 <xTaskResumeAll+0xe4>)
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfe6:	682b      	ldr	r3, [r5, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1dd      	bne.n	800bfa8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800bfec:	b10c      	cbz	r4, 800bff2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800bfee:	f7ff fdf5 	bl	800bbdc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bff2:	4d15      	ldr	r5, [pc, #84]	; (800c048 <xTaskResumeAll+0xe8>)
 800bff4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bff6:	b144      	cbz	r4, 800c00a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800bff8:	4e12      	ldr	r6, [pc, #72]	; (800c044 <xTaskResumeAll+0xe4>)
 800bffa:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bffc:	f7ff ff18 	bl	800be30 <xTaskIncrementTick>
 800c000:	b100      	cbz	r0, 800c004 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800c002:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c004:	3c01      	subs	r4, #1
 800c006:	d1f9      	bne.n	800bffc <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800c008:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c00a:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <xTaskResumeAll+0xe4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0bc      	beq.n	800bf8c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800c012:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c026:	2401      	movs	r4, #1
 800c028:	e7b1      	b.n	800bf8e <xTaskResumeAll+0x2e>
 800c02a:	bf00      	nop
 800c02c:	20023718 	.word	0x20023718
 800c030:	2002370c 	.word	0x2002370c
 800c034:	20023754 	.word	0x20023754
 800c038:	20023720 	.word	0x20023720
 800c03c:	200232ac 	.word	0x200232ac
 800c040:	200232a0 	.word	0x200232a0
 800c044:	20023798 	.word	0x20023798
 800c048:	20023714 	.word	0x20023714

0800c04c <vTaskDelay>:
	{
 800c04c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c04e:	b950      	cbnz	r0, 800c066 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800c050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c058:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	f3bf 8f6f 	isb	sy
	}
 800c064:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800c066:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <vTaskDelay+0x48>)
 800c068:	6819      	ldr	r1, [r3, #0]
 800c06a:	b151      	cbz	r1, 800c082 <vTaskDelay+0x36>
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	b672      	cpsid	i
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	b662      	cpsie	i
 800c080:	e7fe      	b.n	800c080 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800c082:	f7ff fec7 	bl	800be14 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c086:	f7ff fd71 	bl	800bb6c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800c08a:	f7ff ff69 	bl	800bf60 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800c08e:	2800      	cmp	r0, #0
 800c090:	d0de      	beq.n	800c050 <vTaskDelay+0x4>
 800c092:	e7e7      	b.n	800c064 <vTaskDelay+0x18>
 800c094:	20023718 	.word	0x20023718

0800c098 <vTaskSetApplicationTaskTag>:
	{
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c09c:	4604      	mov	r4, r0
 800c09e:	b908      	cbnz	r0, 800c0a4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <vTaskSetApplicationTaskTag+0x1c>)
 800c0a2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c0a4:	f7fe fdf6 	bl	800ac94 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c0a8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800c0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c0ae:	f7fe be15 	b.w	800acdc <vPortExitCritical>
 800c0b2:	bf00      	nop
 800c0b4:	200232a0 	.word	0x200232a0

0800c0b8 <xTaskCallApplicationTaskHook>:
	{
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c0bc:	b90b      	cbnz	r3, 800c0c2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c0be:	4b03      	ldr	r3, [pc, #12]	; (800c0cc <xTaskCallApplicationTaskHook+0x14>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c0c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0c4:	b103      	cbz	r3, 800c0c8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c0c6:	4718      	bx	r3
	}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	4770      	bx	lr
 800c0cc:	200232a0 	.word	0x200232a0

0800c0d0 <vTaskStartScheduler>:
{
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0d4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0d6:	aa07      	add	r2, sp, #28
 800c0d8:	a906      	add	r1, sp, #24
 800c0da:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0e0:	f7fe fc1e 	bl	800a920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0e4:	9b05      	ldr	r3, [sp, #20]
 800c0e6:	9a07      	ldr	r2, [sp, #28]
 800c0e8:	9302      	str	r3, [sp, #8]
 800c0ea:	9b06      	ldr	r3, [sp, #24]
 800c0ec:	491b      	ldr	r1, [pc, #108]	; (800c15c <vTaskStartScheduler+0x8c>)
 800c0ee:	481c      	ldr	r0, [pc, #112]	; (800c160 <vTaskStartScheduler+0x90>)
 800c0f0:	e9cd 4300 	strd	r4, r3, [sp]
 800c0f4:	4623      	mov	r3, r4
 800c0f6:	f7ff fe22 	bl	800bd3e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c0fa:	b360      	cbz	r0, 800c156 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800c0fc:	f000 faa6 	bl	800c64c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c100:	2801      	cmp	r0, #1
 800c102:	d11b      	bne.n	800c13c <vTaskStartScheduler+0x6c>
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	b672      	cpsid	i
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800c118:	f04f 32ff 	mov.w	r2, #4294967295
 800c11c:	4b11      	ldr	r3, [pc, #68]	; (800c164 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800c11e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c122:	4b11      	ldr	r3, [pc, #68]	; (800c168 <vTaskStartScheduler+0x98>)
 800c124:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c126:	4b11      	ldr	r3, [pc, #68]	; (800c16c <vTaskStartScheduler+0x9c>)
 800c128:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c12a:	4b11      	ldr	r3, [pc, #68]	; (800c170 <vTaskStartScheduler+0xa0>)
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	f7ff ffc3 	bl	800c0b8 <xTaskCallApplicationTaskHook>
}
 800c132:	b008      	add	sp, #32
 800c134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c138:	f7fe be46 	b.w	800adc8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c13c:	3001      	adds	r0, #1
 800c13e:	d10a      	bne.n	800c156 <vTaskStartScheduler+0x86>
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	b672      	cpsid	i
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	b662      	cpsie	i
 800c154:	e7fe      	b.n	800c154 <vTaskStartScheduler+0x84>
}
 800c156:	b008      	add	sp, #32
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	bf00      	nop
 800c15c:	080237b1 	.word	0x080237b1
 800c160:	0800bc3d 	.word	0x0800bc3d
 800c164:	2002374c 	.word	0x2002374c
 800c168:	20023768 	.word	0x20023768
 800c16c:	20023794 	.word	0x20023794
 800c170:	200232a0 	.word	0x200232a0

0800c174 <vTaskSwitchContext>:
{
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c176:	4b1d      	ldr	r3, [pc, #116]	; (800c1ec <vTaskSwitchContext+0x78>)
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	4b1d      	ldr	r3, [pc, #116]	; (800c1f0 <vTaskSwitchContext+0x7c>)
 800c17c:	b112      	cbz	r2, 800c184 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c17e:	2201      	movs	r2, #1
 800c180:	601a      	str	r2, [r3, #0]
}
 800c182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c184:	4c1b      	ldr	r4, [pc, #108]	; (800c1f4 <vTaskSwitchContext+0x80>)
 800c186:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c188:	4e1b      	ldr	r6, [pc, #108]	; (800c1f8 <vTaskSwitchContext+0x84>)
 800c18a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800c18c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c18e:	6820      	ldr	r0, [r4, #0]
 800c190:	f7ff ff92 	bl	800c0b8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c194:	6832      	ldr	r2, [r6, #0]
 800c196:	4919      	ldr	r1, [pc, #100]	; (800c1fc <vTaskSwitchContext+0x88>)
 800c198:	fb07 f302 	mul.w	r3, r7, r2
 800c19c:	58cd      	ldr	r5, [r1, r3]
 800c19e:	18c8      	adds	r0, r1, r3
 800c1a0:	b1ad      	cbz	r5, 800c1ce <vTaskSwitchContext+0x5a>
 800c1a2:	6845      	ldr	r5, [r0, #4]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	686d      	ldr	r5, [r5, #4]
 800c1a8:	440b      	add	r3, r1
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	6045      	str	r5, [r0, #4]
 800c1ae:	bf04      	itt	eq
 800c1b0:	686b      	ldreq	r3, [r5, #4]
 800c1b2:	6043      	streq	r3, [r0, #4]
 800c1b4:	2314      	movs	r3, #20
 800c1b6:	fb03 1102 	mla	r1, r3, r2, r1
 800c1ba:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800c1bc:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800c1c4:	6820      	ldr	r0, [r4, #0]
}
 800c1c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800c1ca:	f7ff bf75 	b.w	800c0b8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ce:	b952      	cbnz	r2, 800c1e6 <vTaskSwitchContext+0x72>
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	b672      	cpsid	i
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	b662      	cpsie	i
 800c1e4:	e7fe      	b.n	800c1e4 <vTaskSwitchContext+0x70>
 800c1e6:	3a01      	subs	r2, #1
 800c1e8:	e7d6      	b.n	800c198 <vTaskSwitchContext+0x24>
 800c1ea:	bf00      	nop
 800c1ec:	20023718 	.word	0x20023718
 800c1f0:	20023798 	.word	0x20023798
 800c1f4:	200232a0 	.word	0x200232a0
 800c1f8:	20023720 	.word	0x20023720
 800c1fc:	200232ac 	.word	0x200232ac

0800c200 <vTaskPlaceOnEventList>:
{
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800c204:	b950      	cbnz	r0, 800c21c <vTaskPlaceOnEventList+0x1c>
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	b672      	cpsid	i
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	b662      	cpsie	i
 800c21a:	e7fe      	b.n	800c21a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <vTaskPlaceOnEventList+0x34>)
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	3118      	adds	r1, #24
 800c222:	f7fe fca5 	bl	800ab70 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c226:	4620      	mov	r0, r4
 800c228:	2101      	movs	r1, #1
}
 800c22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c22e:	f7ff bc9d 	b.w	800bb6c <prvAddCurrentTaskToDelayedList>
 800c232:	bf00      	nop
 800c234:	200232a0 	.word	0x200232a0

0800c238 <vTaskPlaceOnEventListRestricted>:
	{
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	460d      	mov	r5, r1
 800c23c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800c23e:	b950      	cbnz	r0, 800c256 <vTaskPlaceOnEventListRestricted+0x1e>
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	b672      	cpsid	i
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	b662      	cpsie	i
 800c254:	e7fe      	b.n	800c254 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c256:	4b07      	ldr	r3, [pc, #28]	; (800c274 <vTaskPlaceOnEventListRestricted+0x3c>)
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	3118      	adds	r1, #24
 800c25c:	f7fe fc7c 	bl	800ab58 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800c260:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c262:	4621      	mov	r1, r4
 800c264:	bf0c      	ite	eq
 800c266:	4628      	moveq	r0, r5
 800c268:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800c26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c270:	f7ff bc7c 	b.w	800bb6c <prvAddCurrentTaskToDelayedList>
 800c274:	200232a0 	.word	0x200232a0

0800c278 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c278:	68c3      	ldr	r3, [r0, #12]
{
 800c27a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c27c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c27e:	b954      	cbnz	r4, 800c296 <xTaskRemoveFromEventList+0x1e>
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	b672      	cpsid	i
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	b662      	cpsie	i
 800c294:	e7fe      	b.n	800c294 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c296:	f104 0118 	add.w	r1, r4, #24
 800c29a:	4608      	mov	r0, r1
 800c29c:	9101      	str	r1, [sp, #4]
 800c29e:	f7fe fc7e 	bl	800ab9e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a2:	4b12      	ldr	r3, [pc, #72]	; (800c2ec <xTaskRemoveFromEventList+0x74>)
 800c2a4:	9901      	ldr	r1, [sp, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	b9e3      	cbnz	r3, 800c2e4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2aa:	1d21      	adds	r1, r4, #4
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	9101      	str	r1, [sp, #4]
 800c2b0:	f7fe fc75 	bl	800ab9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2b4:	4a0e      	ldr	r2, [pc, #56]	; (800c2f0 <xTaskRemoveFromEventList+0x78>)
 800c2b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2b8:	6810      	ldr	r0, [r2, #0]
 800c2ba:	9901      	ldr	r1, [sp, #4]
 800c2bc:	4283      	cmp	r3, r0
 800c2be:	d900      	bls.n	800c2c2 <xTaskRemoveFromEventList+0x4a>
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	4a0c      	ldr	r2, [pc, #48]	; (800c2f4 <xTaskRemoveFromEventList+0x7c>)
 800c2c4:	2014      	movs	r0, #20
 800c2c6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2ca:	f7fe fc45 	bl	800ab58 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <xTaskRemoveFromEventList+0x80>)
 800c2d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d906      	bls.n	800c2e8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800c2da:	2001      	movs	r0, #1
 800c2dc:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <xTaskRemoveFromEventList+0x84>)
 800c2de:	6018      	str	r0, [r3, #0]
}
 800c2e0:	b002      	add	sp, #8
 800c2e2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2e4:	4806      	ldr	r0, [pc, #24]	; (800c300 <xTaskRemoveFromEventList+0x88>)
 800c2e6:	e7f0      	b.n	800c2ca <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800c2e8:	2000      	movs	r0, #0
	return xReturn;
 800c2ea:	e7f9      	b.n	800c2e0 <xTaskRemoveFromEventList+0x68>
 800c2ec:	20023718 	.word	0x20023718
 800c2f0:	20023720 	.word	0x20023720
 800c2f4:	200232ac 	.word	0x200232ac
 800c2f8:	200232a0 	.word	0x200232a0
 800c2fc:	20023798 	.word	0x20023798
 800c300:	20023754 	.word	0x20023754

0800c304 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c304:	4b03      	ldr	r3, [pc, #12]	; (800c314 <vTaskInternalSetTimeOutState+0x10>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c30a:	4b03      	ldr	r3, [pc, #12]	; (800c318 <vTaskInternalSetTimeOutState+0x14>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6043      	str	r3, [r0, #4]
}
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20023750 	.word	0x20023750
 800c318:	20023794 	.word	0x20023794

0800c31c <xTaskCheckForTimeOut>:
{
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800c320:	4605      	mov	r5, r0
 800c322:	b950      	cbnz	r0, 800c33a <xTaskCheckForTimeOut+0x1e>
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	b672      	cpsid	i
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	b662      	cpsie	i
 800c338:	e7fe      	b.n	800c338 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800c33a:	b951      	cbnz	r1, 800c352 <xTaskCheckForTimeOut+0x36>
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	b672      	cpsid	i
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	b662      	cpsie	i
 800c350:	e7fe      	b.n	800c350 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800c352:	f7fe fc9f 	bl	800ac94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c356:	4b0f      	ldr	r3, [pc, #60]	; (800c394 <xTaskCheckForTimeOut+0x78>)
 800c358:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	d010      	beq.n	800c382 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c360:	480d      	ldr	r0, [pc, #52]	; (800c398 <xTaskCheckForTimeOut+0x7c>)
 800c362:	682e      	ldr	r6, [r5, #0]
 800c364:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c366:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c368:	4286      	cmp	r6, r0
 800c36a:	d001      	beq.n	800c370 <xTaskCheckForTimeOut+0x54>
 800c36c:	428a      	cmp	r2, r1
 800c36e:	d90f      	bls.n	800c390 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c370:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c372:	4283      	cmp	r3, r0
 800c374:	d90a      	bls.n	800c38c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800c376:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c378:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800c37a:	4413      	add	r3, r2
 800c37c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c37e:	f7ff ffc1 	bl	800c304 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800c382:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c384:	f7fe fcaa 	bl	800acdc <vPortExitCritical>
}
 800c388:	4620      	mov	r0, r4
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800c390:	2401      	movs	r4, #1
 800c392:	e7f7      	b.n	800c384 <xTaskCheckForTimeOut+0x68>
 800c394:	20023794 	.word	0x20023794
 800c398:	20023750 	.word	0x20023750

0800c39c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c39c:	4b01      	ldr	r3, [pc, #4]	; (800c3a4 <vTaskMissedYield+0x8>)
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
}
 800c3a2:	4770      	bx	lr
 800c3a4:	20023798 	.word	0x20023798

0800c3a8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800c3a8:	4b01      	ldr	r3, [pc, #4]	; (800c3b0 <xTaskGetCurrentTaskHandle+0x8>)
 800c3aa:	6818      	ldr	r0, [r3, #0]
	}
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	200232a0 	.word	0x200232a0

0800c3b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <xTaskGetSchedulerState+0x18>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	b133      	cbz	r3, 800c3c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <xTaskGetSchedulerState+0x1c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bf0c      	ite	eq
 800c3c2:	2002      	moveq	r0, #2
 800c3c4:	2000      	movne	r0, #0
 800c3c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3c8:	2001      	movs	r0, #1
	}
 800c3ca:	4770      	bx	lr
 800c3cc:	20023768 	.word	0x20023768
 800c3d0:	20023718 	.word	0x20023718

0800c3d4 <xTaskPriorityInherit>:
	{
 800c3d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	b340      	cbz	r0, 800c42c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c3da:	4d1b      	ldr	r5, [pc, #108]	; (800c448 <xTaskPriorityInherit+0x74>)
 800c3dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c3de:	682a      	ldr	r2, [r5, #0]
 800c3e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d228      	bcs.n	800c438 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3e6:	6982      	ldr	r2, [r0, #24]
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	db04      	blt.n	800c3f6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ec:	682a      	ldr	r2, [r5, #0]
 800c3ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c3f0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c3f4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c3f6:	2214      	movs	r2, #20
 800c3f8:	4e14      	ldr	r6, [pc, #80]	; (800c44c <xTaskPriorityInherit+0x78>)
 800c3fa:	fb02 6303 	mla	r3, r2, r3, r6
 800c3fe:	6962      	ldr	r2, [r4, #20]
 800c400:	429a      	cmp	r2, r3
 800c402:	d115      	bne.n	800c430 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c404:	1d21      	adds	r1, r4, #4
 800c406:	4608      	mov	r0, r1
 800c408:	9101      	str	r1, [sp, #4]
 800c40a:	f7fe fbc8 	bl	800ab9e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c40e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c410:	4a0f      	ldr	r2, [pc, #60]	; (800c450 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c414:	6810      	ldr	r0, [r2, #0]
 800c416:	9901      	ldr	r1, [sp, #4]
 800c418:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c41a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c41c:	d900      	bls.n	800c420 <xTaskPriorityInherit+0x4c>
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	2014      	movs	r0, #20
 800c422:	fb00 6003 	mla	r0, r0, r3, r6
 800c426:	f7fe fb97 	bl	800ab58 <vListInsertEnd>
				xReturn = pdTRUE;
 800c42a:	2001      	movs	r0, #1
	}
 800c42c:	b002      	add	sp, #8
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c436:	e7f8      	b.n	800c42a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c43c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c43e:	42a0      	cmp	r0, r4
 800c440:	bf2c      	ite	cs
 800c442:	2000      	movcs	r0, #0
 800c444:	2001      	movcc	r0, #1
 800c446:	e7f1      	b.n	800c42c <xTaskPriorityInherit+0x58>
 800c448:	200232a0 	.word	0x200232a0
 800c44c:	200232ac 	.word	0x200232ac
 800c450:	20023720 	.word	0x20023720

0800c454 <xTaskPriorityDisinherit>:
	{
 800c454:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800c456:	b910      	cbnz	r0, 800c45e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800c458:	2000      	movs	r0, #0
	}
 800c45a:	b002      	add	sp, #8
 800c45c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800c45e:	4b1e      	ldr	r3, [pc, #120]	; (800c4d8 <xTaskPriorityDisinherit+0x84>)
 800c460:	681c      	ldr	r4, [r3, #0]
 800c462:	4284      	cmp	r4, r0
 800c464:	d00a      	beq.n	800c47c <xTaskPriorityDisinherit+0x28>
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	b672      	cpsid	i
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	b662      	cpsie	i
 800c47a:	e7fe      	b.n	800c47a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800c47c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c47e:	b953      	cbnz	r3, 800c496 <xTaskPriorityDisinherit+0x42>
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	b672      	cpsid	i
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	b662      	cpsie	i
 800c494:	e7fe      	b.n	800c494 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c496:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800c498:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c49a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c49c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c49e:	4291      	cmp	r1, r2
 800c4a0:	d0da      	beq.n	800c458 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1d8      	bne.n	800c458 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4a6:	1d21      	adds	r1, r4, #4
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	9101      	str	r1, [sp, #4]
 800c4ac:	f7fe fb77 	bl	800ab9e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800c4b2:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4b8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4bc:	4a07      	ldr	r2, [pc, #28]	; (800c4dc <xTaskPriorityDisinherit+0x88>)
 800c4be:	6810      	ldr	r0, [r2, #0]
 800c4c0:	4283      	cmp	r3, r0
 800c4c2:	d900      	bls.n	800c4c6 <xTaskPriorityDisinherit+0x72>
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	4a06      	ldr	r2, [pc, #24]	; (800c4e0 <xTaskPriorityDisinherit+0x8c>)
 800c4c8:	2014      	movs	r0, #20
 800c4ca:	fb00 2003 	mla	r0, r0, r3, r2
 800c4ce:	f7fe fb43 	bl	800ab58 <vListInsertEnd>
					xReturn = pdTRUE;
 800c4d2:	2001      	movs	r0, #1
		return xReturn;
 800c4d4:	e7c1      	b.n	800c45a <xTaskPriorityDisinherit+0x6>
 800c4d6:	bf00      	nop
 800c4d8:	200232a0 	.word	0x200232a0
 800c4dc:	20023720 	.word	0x20023720
 800c4e0:	200232ac 	.word	0x200232ac

0800c4e4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d048      	beq.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800c4ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c4ee:	b952      	cbnz	r2, 800c506 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	b672      	cpsid	i
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	b662      	cpsie	i
 800c504:	e7fe      	b.n	800c504 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c506:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c508:	4299      	cmp	r1, r3
 800c50a:	bf38      	it	cc
 800c50c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c50e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c510:	428b      	cmp	r3, r1
 800c512:	d034      	beq.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c514:	2a01      	cmp	r2, #1
 800c516:	d132      	bne.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800c518:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	4282      	cmp	r2, r0
 800c51e:	d10a      	bne.n	800c536 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	b672      	cpsid	i
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	b662      	cpsie	i
 800c534:	e7fe      	b.n	800c534 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c536:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c538:	4d13      	ldr	r5, [pc, #76]	; (800c588 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c53a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c53c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c540:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c542:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c546:	bfa8      	it	ge
 800c548:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c54c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c54e:	bfa8      	it	ge
 800c550:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c552:	429a      	cmp	r2, r3
 800c554:	d113      	bne.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c556:	1d01      	adds	r1, r0, #4
 800c558:	4608      	mov	r0, r1
 800c55a:	9101      	str	r1, [sp, #4]
 800c55c:	f7fe fb1f 	bl	800ab9e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c560:	4a0a      	ldr	r2, [pc, #40]	; (800c58c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800c562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c564:	6810      	ldr	r0, [r2, #0]
 800c566:	9901      	ldr	r1, [sp, #4]
 800c568:	4283      	cmp	r3, r0
 800c56a:	d900      	bls.n	800c56e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800c56c:	6013      	str	r3, [r2, #0]
 800c56e:	2014      	movs	r0, #20
 800c570:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c574:	b003      	add	sp, #12
 800c576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c57a:	f7fe baed 	b.w	800ab58 <vListInsertEnd>
	}
 800c57e:	b003      	add	sp, #12
 800c580:	bd30      	pop	{r4, r5, pc}
 800c582:	bf00      	nop
 800c584:	200232a0 	.word	0x200232a0
 800c588:	200232ac 	.word	0x200232ac
 800c58c:	20023720 	.word	0x20023720

0800c590 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <pvTaskIncrementMutexHeldCount+0x14>)
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	b11a      	cbz	r2, 800c59e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c596:	6819      	ldr	r1, [r3, #0]
 800c598:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c59a:	3201      	adds	r2, #1
 800c59c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c59e:	6818      	ldr	r0, [r3, #0]
	}
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	200232a0 	.word	0x200232a0

0800c5a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c5aa:	4c11      	ldr	r4, [pc, #68]	; (800c5f0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c5ac:	f7fe fb72 	bl	800ac94 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c5b0:	6825      	ldr	r5, [r4, #0]
 800c5b2:	b9bd      	cbnz	r5, 800c5e4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5b4:	4f0f      	ldr	r7, [pc, #60]	; (800c5f4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c5b6:	4e10      	ldr	r6, [pc, #64]	; (800c5f8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	f7fe fabf 	bl	800ab3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7fe fabc 	bl	800ab3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5c4:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5c6:	4a0e      	ldr	r2, [pc, #56]	; (800c600 <prvCheckForValidListAndQueue+0x58>)
 800c5c8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c5ca:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5cc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c5ce:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <prvCheckForValidListAndQueue+0x5c>)
 800c5d0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <prvCheckForValidListAndQueue+0x60>)
 800c5d4:	9500      	str	r5, [sp, #0]
 800c5d6:	f7fe fda9 	bl	800b12c <xQueueGenericCreateStatic>
 800c5da:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5dc:	b110      	cbz	r0, 800c5e4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5de:	490b      	ldr	r1, [pc, #44]	; (800c60c <prvCheckForValidListAndQueue+0x64>)
 800c5e0:	f7ff f9e4 	bl	800b9ac <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c5e4:	b003      	add	sp, #12
 800c5e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c5ea:	f7fe bb77 	b.w	800acdc <vPortExitCritical>
 800c5ee:	bf00      	nop
 800c5f0:	200238c0 	.word	0x200238c0
 800c5f4:	20023844 	.word	0x20023844
 800c5f8:	20023858 	.word	0x20023858
 800c5fc:	2002379c 	.word	0x2002379c
 800c600:	200237a4 	.word	0x200237a4
 800c604:	200237a0 	.word	0x200237a0
 800c608:	20023870 	.word	0x20023870
 800c60c:	080237b6 	.word	0x080237b6

0800c610 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c610:	4291      	cmp	r1, r2
{
 800c612:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c614:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c616:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c618:	d80a      	bhi.n	800c630 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	6983      	ldr	r3, [r0, #24]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d20d      	bcs.n	800c63e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c622:	1d01      	adds	r1, r0, #4
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c626:	6818      	ldr	r0, [r3, #0]
 800c628:	f7fe faa2 	bl	800ab70 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c62c:	2000      	movs	r0, #0
}
 800c62e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c630:	429a      	cmp	r2, r3
 800c632:	d201      	bcs.n	800c638 <prvInsertTimerInActiveList+0x28>
 800c634:	4299      	cmp	r1, r3
 800c636:	d202      	bcs.n	800c63e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c638:	1d01      	adds	r1, r0, #4
 800c63a:	4b03      	ldr	r3, [pc, #12]	; (800c648 <prvInsertTimerInActiveList+0x38>)
 800c63c:	e7f3      	b.n	800c626 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c63e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c640:	e7f5      	b.n	800c62e <prvInsertTimerInActiveList+0x1e>
 800c642:	bf00      	nop
 800c644:	200237a0 	.word	0x200237a0
 800c648:	2002379c 	.word	0x2002379c

0800c64c <xTimerCreateTimerTask>:
{
 800c64c:	b510      	push	{r4, lr}
 800c64e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c650:	f7ff ffaa 	bl	800c5a8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c654:	4b13      	ldr	r3, [pc, #76]	; (800c6a4 <xTimerCreateTimerTask+0x58>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	b1b3      	cbz	r3, 800c688 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c65a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c65c:	aa07      	add	r2, sp, #28
 800c65e:	a906      	add	r1, sp, #24
 800c660:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c662:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c666:	f7fe f967 	bl	800a938 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c66a:	9b05      	ldr	r3, [sp, #20]
 800c66c:	9a07      	ldr	r2, [sp, #28]
 800c66e:	9302      	str	r3, [sp, #8]
 800c670:	9b06      	ldr	r3, [sp, #24]
 800c672:	490d      	ldr	r1, [pc, #52]	; (800c6a8 <xTimerCreateTimerTask+0x5c>)
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	2302      	movs	r3, #2
 800c678:	480c      	ldr	r0, [pc, #48]	; (800c6ac <xTimerCreateTimerTask+0x60>)
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	4623      	mov	r3, r4
 800c67e:	f7ff fb5e 	bl	800bd3e <xTaskCreateStatic>
 800c682:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <xTimerCreateTimerTask+0x64>)
 800c684:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c686:	b950      	cbnz	r0, 800c69e <xTimerCreateTimerTask+0x52>
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	b672      	cpsid	i
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	b662      	cpsie	i
	configASSERT( xReturn );
 800c69c:	e7fe      	b.n	800c69c <xTimerCreateTimerTask+0x50>
}
 800c69e:	2001      	movs	r0, #1
 800c6a0:	b008      	add	sp, #32
 800c6a2:	bd10      	pop	{r4, pc}
 800c6a4:	200238c0 	.word	0x200238c0
 800c6a8:	080237bb 	.word	0x080237bb
 800c6ac:	0800c7bd 	.word	0x0800c7bd
 800c6b0:	200238c4 	.word	0x200238c4

0800c6b4 <xTimerGenericCommand>:
{
 800c6b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c6b6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c6b8:	4604      	mov	r4, r0
{
 800c6ba:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c6bc:	b950      	cbnz	r0, 800c6d4 <xTimerGenericCommand+0x20>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	b672      	cpsid	i
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	b662      	cpsie	i
 800c6d2:	e7fe      	b.n	800c6d2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800c6d4:	4d0c      	ldr	r5, [pc, #48]	; (800c708 <xTimerGenericCommand+0x54>)
 800c6d6:	6828      	ldr	r0, [r5, #0]
 800c6d8:	b178      	cbz	r0, 800c6fa <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6da:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6dc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6de:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6e2:	dc0c      	bgt.n	800c6fe <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6e4:	f7ff fe66 	bl	800c3b4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6e8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6ea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6ec:	4669      	mov	r1, sp
 800c6ee:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6f0:	bf0c      	ite	eq
 800c6f2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6f4:	461a      	movne	r2, r3
 800c6f6:	f7fe fd9e 	bl	800b236 <xQueueGenericSend>
}
 800c6fa:	b004      	add	sp, #16
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6fe:	2300      	movs	r3, #0
 800c700:	4669      	mov	r1, sp
 800c702:	f7fe fea5 	bl	800b450 <xQueueGenericSendFromISR>
 800c706:	e7f8      	b.n	800c6fa <xTimerGenericCommand+0x46>
 800c708:	200238c0 	.word	0x200238c0

0800c70c <prvSampleTimeNow>:
{
 800c70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800c710:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c7b8 <prvSampleTimeNow+0xac>
{
 800c714:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800c716:	f7ff fb85 	bl	800be24 <xTaskGetTickCount>
 800c71a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c71c:	f8d8 3000 	ldr.w	r3, [r8]
 800c720:	4283      	cmp	r3, r0
 800c722:	d942      	bls.n	800c7aa <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c724:	4f22      	ldr	r7, [pc, #136]	; (800c7b0 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c726:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	b95a      	cbnz	r2, 800c748 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800c730:	4a20      	ldr	r2, [pc, #128]	; (800c7b4 <prvSampleTimeNow+0xa8>)
 800c732:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c734:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800c736:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800c738:	6039      	str	r1, [r7, #0]
}
 800c73a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800c73c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800c73e:	f8c8 5000 	str.w	r5, [r8]
}
 800c742:	b004      	add	sp, #16
 800c744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c748:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c74c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c750:	1d21      	adds	r1, r4, #4
 800c752:	4608      	mov	r0, r1
 800c754:	9103      	str	r1, [sp, #12]
 800c756:	f7fe fa22 	bl	800ab9e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c75a:	6a23      	ldr	r3, [r4, #32]
 800c75c:	4620      	mov	r0, r4
 800c75e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c760:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c764:	9903      	ldr	r1, [sp, #12]
 800c766:	f013 0f04 	tst.w	r3, #4
 800c76a:	d0de      	beq.n	800c72a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c76c:	69a3      	ldr	r3, [r4, #24]
 800c76e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800c770:	459a      	cmp	sl, r3
 800c772:	d205      	bcs.n	800c780 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c774:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c776:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c778:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c77a:	f7fe f9f9 	bl	800ab70 <vListInsert>
 800c77e:	e7d4      	b.n	800c72a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c780:	2300      	movs	r3, #0
 800c782:	4652      	mov	r2, sl
 800c784:	4620      	mov	r0, r4
 800c786:	f8cd 9000 	str.w	r9, [sp]
 800c78a:	4619      	mov	r1, r3
 800c78c:	f7ff ff92 	bl	800c6b4 <xTimerGenericCommand>
				configASSERT( xResult );
 800c790:	2800      	cmp	r0, #0
 800c792:	d1ca      	bne.n	800c72a <prvSampleTimeNow+0x1e>
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	b672      	cpsid	i
 800c79a:	f383 8811 	msr	BASEPRI, r3
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	b662      	cpsie	i
 800c7a8:	e7fe      	b.n	800c7a8 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e7c5      	b.n	800c73a <prvSampleTimeNow+0x2e>
 800c7ae:	bf00      	nop
 800c7b0:	2002379c 	.word	0x2002379c
 800c7b4:	200237a0 	.word	0x200237a0
 800c7b8:	2002386c 	.word	0x2002386c

0800c7bc <prvTimerTask>:
{
 800c7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7c0:	4d71      	ldr	r5, [pc, #452]	; (800c988 <prvTimerTask+0x1cc>)
{
 800c7c2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7c4:	4e71      	ldr	r6, [pc, #452]	; (800c98c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7c6:	682b      	ldr	r3, [r5, #0]
 800c7c8:	f8d3 8000 	ldr.w	r8, [r3]
 800c7cc:	f1b8 0f00 	cmp.w	r8, #0
 800c7d0:	d037      	beq.n	800c842 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7d2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7d4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7d6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800c7da:	f7ff fb1b 	bl	800be14 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7de:	a804      	add	r0, sp, #16
 800c7e0:	f7ff ff94 	bl	800c70c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800c7e4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7e6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d16b      	bne.n	800c8c4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7ec:	2c00      	cmp	r4, #0
 800c7ee:	d14e      	bne.n	800c88e <prvTimerTask+0xd2>
 800c7f0:	4540      	cmp	r0, r8
 800c7f2:	d352      	bcc.n	800c89a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800c7f4:	f7ff fbb4 	bl	800bf60 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7fe:	1d38      	adds	r0, r7, #4
 800c800:	f7fe f9cd 	bl	800ab9e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c804:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c808:	0758      	lsls	r0, r3, #29
 800c80a:	d51c      	bpl.n	800c846 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c80c:	69b9      	ldr	r1, [r7, #24]
 800c80e:	4643      	mov	r3, r8
 800c810:	464a      	mov	r2, r9
 800c812:	4638      	mov	r0, r7
 800c814:	4441      	add	r1, r8
 800c816:	f7ff fefb 	bl	800c610 <prvInsertTimerInActiveList>
 800c81a:	b1c0      	cbz	r0, 800c84e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c81c:	4623      	mov	r3, r4
 800c81e:	4642      	mov	r2, r8
 800c820:	4621      	mov	r1, r4
 800c822:	4638      	mov	r0, r7
 800c824:	9400      	str	r4, [sp, #0]
 800c826:	f7ff ff45 	bl	800c6b4 <xTimerGenericCommand>
			configASSERT( xResult );
 800c82a:	b980      	cbnz	r0, 800c84e <prvTimerTask+0x92>
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	b672      	cpsid	i
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	b662      	cpsie	i
 800c840:	e7fe      	b.n	800c840 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c842:	2401      	movs	r4, #1
 800c844:	e7c9      	b.n	800c7da <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c846:	f023 0301 	bic.w	r3, r3, #1
 800c84a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	4638      	mov	r0, r7
 800c852:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c854:	2200      	movs	r2, #0
 800c856:	a904      	add	r1, sp, #16
 800c858:	6830      	ldr	r0, [r6, #0]
 800c85a:	f7fe febe 	bl	800b5da <xQueueReceive>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d0b1      	beq.n	800c7c6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c862:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c864:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c866:	2b00      	cmp	r3, #0
 800c868:	db2f      	blt.n	800c8ca <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c86a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c86c:	6963      	ldr	r3, [r4, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d132      	bne.n	800c8d8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c872:	a803      	add	r0, sp, #12
 800c874:	f7ff ff4a 	bl	800c70c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800c878:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c87a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	d8e9      	bhi.n	800c854 <prvTimerTask+0x98>
 800c880:	e8df f003 	tbb	[pc, r3]
 800c884:	592e2e2e 	.word	0x592e2e2e
 800c888:	2e2e7a60 	.word	0x2e2e7a60
 800c88c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c88e:	4b40      	ldr	r3, [pc, #256]	; (800c990 <prvTimerTask+0x1d4>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681c      	ldr	r4, [r3, #0]
 800c894:	fab4 f484 	clz	r4, r4
 800c898:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c89a:	4622      	mov	r2, r4
 800c89c:	eba8 0109 	sub.w	r1, r8, r9
 800c8a0:	6830      	ldr	r0, [r6, #0]
 800c8a2:	f7ff f8c2 	bl	800ba2a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f7ff fb5b 	bl	800bf60 <xTaskResumeAll>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d1d2      	bne.n	800c854 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800c8ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	e7c7      	b.n	800c854 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800c8c4:	f7ff fb4c 	bl	800bf60 <xTaskResumeAll>
}
 800c8c8:	e7c4      	b.n	800c854 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8ca:	9b05      	ldr	r3, [sp, #20]
 800c8cc:	9907      	ldr	r1, [sp, #28]
 800c8ce:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	dbbe      	blt.n	800c854 <prvTimerTask+0x98>
 800c8d6:	e7c8      	b.n	800c86a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8d8:	1d20      	adds	r0, r4, #4
 800c8da:	f7fe f960 	bl	800ab9e <uxListRemove>
 800c8de:	e7c8      	b.n	800c872 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8e8:	f043 0301 	orr.w	r3, r3, #1
 800c8ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8f0:	9b05      	ldr	r3, [sp, #20]
 800c8f2:	4419      	add	r1, r3
 800c8f4:	f7ff fe8c 	bl	800c610 <prvInsertTimerInActiveList>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d0ab      	beq.n	800c854 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8fc:	6a23      	ldr	r3, [r4, #32]
 800c8fe:	4620      	mov	r0, r4
 800c900:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c902:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c906:	0759      	lsls	r1, r3, #29
 800c908:	d5a4      	bpl.n	800c854 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c90a:	69a2      	ldr	r2, [r4, #24]
 800c90c:	2300      	movs	r3, #0
 800c90e:	9905      	ldr	r1, [sp, #20]
 800c910:	4620      	mov	r0, r4
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	440a      	add	r2, r1
 800c916:	4619      	mov	r1, r3
 800c918:	f7ff fecc 	bl	800c6b4 <xTimerGenericCommand>
							configASSERT( xResult );
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d199      	bne.n	800c854 <prvTimerTask+0x98>
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	e7fe      	b.n	800c934 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c936:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c93a:	f023 0301 	bic.w	r3, r3, #1
 800c93e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c942:	e787      	b.n	800c854 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c944:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c948:	f043 0301 	orr.w	r3, r3, #1
 800c94c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c950:	9905      	ldr	r1, [sp, #20]
 800c952:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c954:	b951      	cbnz	r1, 800c96c <prvTimerTask+0x1b0>
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	b672      	cpsid	i
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	b662      	cpsie	i
 800c96a:	e7fe      	b.n	800c96a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c96c:	4603      	mov	r3, r0
 800c96e:	4401      	add	r1, r0
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff fe4d 	bl	800c610 <prvInsertTimerInActiveList>
					break;
 800c976:	e76d      	b.n	800c854 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c978:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c97c:	079a      	lsls	r2, r3, #30
 800c97e:	d4dc      	bmi.n	800c93a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800c980:	4620      	mov	r0, r4
 800c982:	f7fe f89f 	bl	800aac4 <vPortFree>
 800c986:	e765      	b.n	800c854 <prvTimerTask+0x98>
 800c988:	2002379c 	.word	0x2002379c
 800c98c:	200238c0 	.word	0x200238c0
 800c990:	200237a0 	.word	0x200237a0

0800c994 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	b093      	sub	sp, #76	; 0x4c
 800c99a:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800c99c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800c9a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800c9a4:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800c9a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9aa:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800c9ac:	4b73      	ldr	r3, [pc, #460]	; (800cb7c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800c9ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9b0:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c9b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800c9b4:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c9b6:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800c9b8:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800c9ba:	0053      	lsls	r3, r2, #1
 800c9bc:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800c9be:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	455b      	cmp	r3, fp
 800c9c6:	d803      	bhi.n	800c9d0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800c9c8:	9808      	ldr	r0, [sp, #32]
 800c9ca:	b013      	add	sp, #76	; 0x4c
 800c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800c9d0:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800c9d4:	9b06      	ldr	r3, [sp, #24]
    currentMCU++;
 800c9d6:	f10b 0b01 	add.w	fp, fp, #1
    pLum = pInBuffer;
 800c9da:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 800c9dc:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800c9e0:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c9e4:	9b01      	ldr	r3, [sp, #4]
 800c9e6:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800c9f6:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800c9f8:	f500 7380 	add.w	r3, r0, #256	; 0x100
 800c9fc:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800c9fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca00:	9a00      	ldr	r2, [sp, #0]
 800ca02:	4293      	cmp	r3, r2
 800ca04:	f240 80ac 	bls.w	800cb60 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
        pOutAddr = pOutBuffer + refline;
 800ca08:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800ca0a:	f04f 0c00 	mov.w	ip, #0
 800ca0e:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800ca12:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800ca14:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800ca16:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800ca18:	4413      	add	r3, r2
 800ca1a:	930e      	str	r3, [sp, #56]	; 0x38
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800ca20:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800ca22:	2600      	movs	r6, #0
 800ca24:	9f03      	ldr	r7, [sp, #12]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca2c:	4463      	add	r3, ip
 800ca2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	4463      	add	r3, ip
 800ca34:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 800ca38:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800ca3a:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800ca3e:	4433      	add	r3, r6
 800ca40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca44:	4433      	add	r3, r6
 800ca46:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800ca48:	9b05      	ldr	r3, [sp, #20]
 800ca4a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ca4e:	9305      	str	r3, [sp, #20]
 800ca50:	4b4b      	ldr	r3, [pc, #300]	; (800cb80 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800ca52:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800ca56:	9b05      	ldr	r3, [sp, #20]
 800ca58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ca5c:	4b49      	ldr	r3, [pc, #292]	; (800cb84 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800ca5e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800ca62:	4b49      	ldr	r3, [pc, #292]	; (800cb88 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800ca64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca68:	4b48      	ldr	r3, [pc, #288]	; (800cb8c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800ca6a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ca6e:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800ca70:	4947      	ldr	r1, [pc, #284]	; (800cb90 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 800ca72:	440d      	add	r5, r1
 800ca74:	460b      	mov	r3, r1
 800ca76:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ca7a:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800ca7e:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 800ca80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800ca82:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800ca86:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ca8a:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800ca8e:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ca90:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800ca94:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 800ca98:	0889      	lsrs	r1, r1, #2
 800ca9a:	0149      	lsls	r1, r1, #5
 800ca9c:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800caa0:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800caa4:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800caa6:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800caaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800caac:	eb05 010e 	add.w	r1, r5, lr
 800cab0:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cab4:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cab8:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800caba:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cabe:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cac2:	0889      	lsrs	r1, r1, #2
 800cac4:	0149      	lsls	r1, r1, #5
 800cac6:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800caca:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800cace:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800cad2:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800cad4:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800cad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cada:	eb05 010e 	add.w	r1, r5, lr
 800cade:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cae2:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cae6:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cae8:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800caec:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800caf0:	0889      	lsrs	r1, r1, #2
 800caf2:	0149      	lsls	r1, r1, #5
 800caf4:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800caf8:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800cafc:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800cb00:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 800cb02:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800cb04:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800cb06:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cb08:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cb0a:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800cb0c:	4421      	add	r1, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cb0e:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cb12:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cb16:	ea4f 05d5 	mov.w	r5, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800cb1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cb1c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800cb20:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800cb24:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800cb28:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
 800cb2c:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800cb30:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800cb32:	d180      	bne.n	800ca36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
 800cb34:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 800cb36:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 800cb3a:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 800cb3c:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 800cb40:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800cb48:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800cb4a:	f47f af69 	bne.w	800ca20 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
            pChrom++;
 800cb4e:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800cb50:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800cb54:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800cb56:	3308      	adds	r3, #8
 800cb58:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800cb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb5c:	441a      	add	r2, r3
 800cb5e:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800cb60:	f108 0802 	add.w	r8, r8, #2
 800cb64:	f1b8 0f10 	cmp.w	r8, #16
 800cb68:	d102      	bne.n	800cb70 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800cb6a:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800cb6e:	e726      	b.n	800c9be <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 800cb70:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 800cb74:	bf08      	it	eq
 800cb76:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 800cb7a:	e740      	b.n	800c9fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 800cb7c:	200248c8 	.word	0x200248c8
 800cb80:	200238c8 	.word	0x200238c8
 800cb84:	200244c8 	.word	0x200244c8
 800cb88:	200240c8 	.word	0x200240c8
 800cb8c:	20023cc8 	.word	0x20023cc8
 800cb90:	080237c3 	.word	0x080237c3

0800cb94 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800cb98:	0a1b      	lsrs	r3, r3, #8
{  
 800cb9a:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800cb9c:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800cb9e:	4b4f      	ldr	r3, [pc, #316]	; (800ccdc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800cba0:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800cba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800cba4:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800cba8:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cbaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cbac:	691b      	ldr	r3, [r3, #16]
{  
 800cbae:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cbb0:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cbb2:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800cbb4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800cbb8:	4413      	add	r3, r2
 800cbba:	4573      	cmp	r3, lr
 800cbbc:	d803      	bhi.n	800cbc6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800cbbe:	9805      	ldr	r0, [sp, #20]
 800cbc0:	b00d      	add	sp, #52	; 0x34
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800cbc6:	ea4f 120e 	mov.w	r2, lr, lsl #4
 800cbca:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800cbcc:	f10e 0e01 	add.w	lr, lr, #1
 800cbd0:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800cbd4:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800cbd6:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800cbe0:	9b02      	ldr	r3, [sp, #8]
 800cbe2:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbec:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800cbee:	2308      	movs	r3, #8
 800cbf0:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cbf2:	9b07      	ldr	r3, [sp, #28]
 800cbf4:	9a00      	ldr	r2, [sp, #0]
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d969      	bls.n	800ccce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 800cbfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbfc:	46d0      	mov	r8, sl
 800cbfe:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800cc08:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 800cc0a:	2400      	movs	r4, #0
 800cc0c:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800cc0e:	f108 0301 	add.w	r3, r8, #1
 800cc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc14:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800cc18:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800cc1c:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800cc1e:	9b01      	ldr	r3, [sp, #4]
 800cc20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	4b2e      	ldr	r3, [pc, #184]	; (800cce0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800cc28:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800cc32:	4b2c      	ldr	r3, [pc, #176]	; (800cce4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800cc34:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cc38:	4b2b      	ldr	r3, [pc, #172]	; (800cce8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800cc3a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800cc3e:	4b2b      	ldr	r3, [pc, #172]	; (800ccec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800cc40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc44:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc46:	4a2a      	ldr	r2, [pc, #168]	; (800ccf0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800cc48:	4613      	mov	r3, r2
 800cc4a:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc4c:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc50:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cc54:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800cc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc58:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc5c:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cc60:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc62:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc66:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc6a:	0892      	lsrs	r2, r2, #2
 800cc6c:	0152      	lsls	r2, r2, #5
 800cc6e:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800cc72:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800cc76:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800cc7a:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800cc7e:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800cc82:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800cc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc86:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc88:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800cc8a:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800cc8c:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc8e:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc92:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc96:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc9a:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc9e:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800cca2:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800cca6:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800ccaa:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800ccae:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800ccb0:	d1b0      	bne.n	800cc14 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 800ccb2:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800ccb4:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800ccb6:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800ccba:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 800ccbe:	42bb      	cmp	r3, r7
 800ccc0:	d1a2      	bne.n	800cc08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800ccc2:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800ccc4:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800ccc8:	9b03      	ldr	r3, [sp, #12]
 800ccca:	441a      	add	r2, r3
 800cccc:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800ccce:	9b04      	ldr	r3, [sp, #16]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	9304      	str	r3, [sp, #16]
 800ccd4:	d18d      	bne.n	800cbf2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800ccd6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800ccda:	e76b      	b.n	800cbb4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800ccdc:	200248c8 	.word	0x200248c8
 800cce0:	200238c8 	.word	0x200238c8
 800cce4:	200244c8 	.word	0x200244c8
 800cce8:	200240c8 	.word	0x200240c8
 800ccec:	20023cc8 	.word	0x20023cc8
 800ccf0:	080237c3 	.word	0x080237c3

0800ccf4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800ccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800ccfa:	22c0      	movs	r2, #192	; 0xc0
{  
 800ccfc:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800ccfe:	4654      	mov	r4, sl
{  
 800cd00:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800cd02:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800cd06:	4a35      	ldr	r2, [pc, #212]	; (800cddc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800cd08:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800cd0a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cd0c:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cd0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cd10:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cd12:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cd14:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800cd16:	9b04      	ldr	r3, [sp, #16]
 800cd18:	eb03 020a 	add.w	r2, r3, sl
 800cd1c:	42a2      	cmp	r2, r4
 800cd1e:	d803      	bhi.n	800cd28 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	b009      	add	sp, #36	; 0x24
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800cd28:	00e1      	lsls	r1, r4, #3
 800cd2a:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800cd2c:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800cd2e:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800cd30:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cd34:	9a01      	ldr	r2, [sp, #4]
 800cd36:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800cd3a:	9a00      	ldr	r2, [sp, #0]
 800cd3c:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;   
 800cd40:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cd42:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800cd44:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cd46:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800cd4a:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cd4e:	9905      	ldr	r1, [sp, #20]
 800cd50:	4291      	cmp	r1, r2
 800cd52:	d93d      	bls.n	800cdd0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800cd54:	9907      	ldr	r1, [sp, #28]
 800cd56:	f106 3eff 	add.w	lr, r6, #4294967295
 800cd5a:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800cd5c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cd60:	9102      	str	r1, [sp, #8]
 800cd62:	f105 0110 	add.w	r1, r5, #16
 800cd66:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800cd68:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800cd6a:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800cd6e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800cd72:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd76:	4b1a      	ldr	r3, [pc, #104]	; (800cde0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800cd78:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd7a:	4f1a      	ldr	r7, [pc, #104]	; (800cde4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800cd7c:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800cd7e:	4b1a      	ldr	r3, [pc, #104]	; (800cde8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd80:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800cd84:	440f      	add	r7, r1
 800cd86:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800cd8a:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cd8e:	4b17      	ldr	r3, [pc, #92]	; (800cdec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd90:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800cd94:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cd96:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800cd9a:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cd9c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cda0:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cda4:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800cda6:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cda8:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cdaa:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800cdae:	eb01 4828 	add.w	r8, r1, r8, asr #16
 800cdb2:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800cdb6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800cdba:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800cdbe:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 800cdc2:	429d      	cmp	r5, r3
 800cdc4:	d1d0      	bne.n	800cd68 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800cdc6:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 800cdc8:	3608      	adds	r6, #8
          pLum += 8;
 800cdca:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800cdce:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800cdd0:	9b03      	ldr	r3, [sp, #12]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	9303      	str	r3, [sp, #12]
 800cdd6:	d1ba      	bne.n	800cd4e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800cdd8:	30c0      	adds	r0, #192	; 0xc0
 800cdda:	e79c      	b.n	800cd16 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800cddc:	200248c8 	.word	0x200248c8
 800cde0:	080237c3 	.word	0x080237c3
 800cde4:	200244c8 	.word	0x200244c8
 800cde8:	200238c8 	.word	0x200238c8
 800cdec:	200240c8 	.word	0x200240c8
 800cdf0:	20023cc8 	.word	0x20023cc8

0800cdf4 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800cdfc:	0998      	lsrs	r0, r3, #6
{
 800cdfe:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800ce00:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce04:	491a      	ldr	r1, [pc, #104]	; (800ce70 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800ce06:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ce08:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ce0c:	6909      	ldr	r1, [r1, #16]
 800ce0e:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d802      	bhi.n	800ce1c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800ce16:	b005      	add	sp, #20
 800ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce1c:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 800ce1e:	46a4      	mov	ip, r4
    currentMCU++;
 800ce20:	3201      	adds	r2, #1
 800ce22:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce24:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ce28:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800ce2c:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ce36:	9901      	ldr	r1, [sp, #4]
 800ce38:	4299      	cmp	r1, r3
 800ce3a:	d914      	bls.n	800ce66 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800ce3c:	9902      	ldr	r1, [sp, #8]
 800ce3e:	46e2      	mov	sl, ip
 800ce40:	4419      	add	r1, r3
 800ce42:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800ce46:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800ce4a:	08f5      	lsrs	r5, r6, #3
 800ce4c:	08b6      	lsrs	r6, r6, #2
 800ce4e:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800ce52:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800ce56:	432e      	orrs	r6, r5
 800ce58:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800ce5c:	4559      	cmp	r1, fp
 800ce5e:	d1f2      	bne.n	800ce46 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800ce60:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800ce64:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800ce66:	3f01      	subs	r7, #1
 800ce68:	d1e5      	bne.n	800ce36 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800ce6a:	3440      	adds	r4, #64	; 0x40
 800ce6c:	e7d0      	b.n	800ce10 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800ce6e:	bf00      	nop
 800ce70:	200248c8 	.word	0x200248c8

0800ce74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800ce7c:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800ce7e:	0a18      	lsrs	r0, r3, #8
{  
 800ce80:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800ce82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce86:	4928      	ldr	r1, [pc, #160]	; (800cf28 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 800ce88:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ce8a:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ce8e:	6909      	ldr	r1, [r1, #16]
 800ce90:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d802      	bhi.n	800ce9e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800ce98:	b005      	add	sp, #20
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce9e:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 800cea0:	46ae      	mov	lr, r5
    currentMCU++;
 800cea2:	3201      	adds	r2, #1
 800cea4:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800cea8:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ceac:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800ceb0:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ceb4:	0049      	lsls	r1, r1, #1
 800ceb6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	428b      	cmp	r3, r1
 800cebe:	d92c      	bls.n	800cf1a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;        
 800cec0:	9b02      	ldr	r3, [sp, #8]
 800cec2:	4674      	mov	r4, lr
 800cec4:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800cec6:	f106 0310 	add.w	r3, r6, #16
 800ceca:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800cecc:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800ced0:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800ced2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800ced6:	fb13 f308 	smulbb	r3, r3, r8
 800ceda:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800cede:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800cee2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800cee6:	fb13 f308 	smulbb	r3, r3, r8
 800ceea:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800ceee:	109b      	asrs	r3, r3, #2
 800cef0:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800cef2:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800cef6:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800cefa:	fb1b fb08 	smulbb	fp, fp, r8
 800cefe:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800cf02:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 800cf06:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800cf08:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr = 
 800cf0c:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 800cf10:	429e      	cmp	r6, r3
 800cf12:	d1db      	bne.n	800cecc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800cf14:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800cf18:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800cf1a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cf1e:	d1cc      	bne.n	800ceba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800cf20:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800cf24:	e7b5      	b.n	800ce92 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800cf26:	bf00      	nop
 800cf28:	200248c8 	.word	0x200248c8

0800cf2c <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800cf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800cf2e:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800cf30:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800cf32:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800cf34:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800cf38:	4b28      	ldr	r3, [pc, #160]	; (800cfdc <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800cf3a:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800cf3c:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800cf3e:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800cf42:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800cf44:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800cf46:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800cf48:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800cf4a:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800cf4c:	d13c      	bne.n	800cfc8 <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800cf4e:	2801      	cmp	r0, #1
 800cf50:	d122      	bne.n	800cf98 <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800cf52:	4823      	ldr	r0, [pc, #140]	; (800cfe0 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800cf54:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800cf56:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800cf5a:	bf18      	it	ne
 800cf5c:	f1c1 0110 	rsbne	r1, r1, #16
 800cf60:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800cf62:	2110      	movs	r1, #16
 800cf64:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800cf66:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800cf68:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800cf6a:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800cf6c:	4421      	add	r1, r4
 800cf6e:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800cf70:	0061      	lsls	r1, r4, #1
 800cf72:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800cf74:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800cf78:	fb00 4411 	mls	r4, r0, r1, r4
 800cf7c:	b104      	cbz	r4, 800cf80 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800cf7e:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800cf80:	6a1c      	ldr	r4, [r3, #32]
 800cf82:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800cf86:	fb04 5510 	mls	r5, r4, r0, r5
 800cf8a:	b105      	cbz	r5, 800cf8e <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800cf8c:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800cf8e:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800cf90:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800cf92:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800cf94:	6011      	str	r1, [r2, #0]
}
 800cf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800cf98:	2802      	cmp	r0, #2
 800cf9a:	d10b      	bne.n	800cfb4 <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800cf9c:	4811      	ldr	r0, [pc, #68]	; (800cfe4 <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800cf9e:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800cfa0:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800cfa4:	bf18      	it	ne
 800cfa6:	f1c1 0110 	rsbne	r1, r1, #16
 800cfaa:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800cfac:	2110      	movs	r1, #16
 800cfae:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800cfb0:	2108      	movs	r1, #8
 800cfb2:	e7d8      	b.n	800cf66 <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800cfb4:	480c      	ldr	r0, [pc, #48]	; (800cfe8 <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800cfb6:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800cfb8:	f014 0107 	ands.w	r1, r4, #7
 800cfbc:	d001      	beq.n	800cfc2 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800cfbe:	f1c1 0108 	rsb	r1, r1, #8
 800cfc2:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800cfc4:	2108      	movs	r1, #8
 800cfc6:	e7cd      	b.n	800cf64 <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800cfc8:	b90e      	cbnz	r6, 800cfce <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800cfca:	4808      	ldr	r0, [pc, #32]	; (800cfec <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800cfcc:	e7f3      	b.n	800cfb6 <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800cfce:	2e30      	cmp	r6, #48	; 0x30
 800cfd0:	d101      	bne.n	800cfd6 <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800cfd2:	4807      	ldr	r0, [pc, #28]	; (800cff0 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800cfd4:	e7ef      	b.n	800cfb6 <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7dd      	b.n	800cf96 <JPEG_GetDecodeColorConvertFunc+0x6a>
 800cfda:	bf00      	nop
 800cfdc:	200248c8 	.word	0x200248c8
 800cfe0:	0800c995 	.word	0x0800c995
 800cfe4:	0800cb95 	.word	0x0800cb95
 800cfe8:	0800ccf5 	.word	0x0800ccf5
 800cfec:	0800cdf5 	.word	0x0800cdf5
 800cff0:	0800ce75 	.word	0x0800ce75

0800cff4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800cff4:	8880      	ldrh	r0, [r0, #4]
 800cff6:	4770      	bx	lr

0800cff8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	6803      	ldr	r3, [r0, #0]
 800cffc:	460c      	mov	r4, r1
 800cffe:	2100      	movs	r1, #0
 800d000:	4605      	mov	r5, r0
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	4798      	blx	r3
 800d006:	4606      	mov	r6, r0
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	4628      	mov	r0, r5
 800d00c:	1ba4      	subs	r4, r4, r6
 800d00e:	6a1b      	ldr	r3, [r3, #32]
 800d010:	b2a4      	uxth	r4, r4
 800d012:	4798      	blx	r3
 800d014:	fbb4 f0f0 	udiv	r0, r4, r0
 800d018:	bd70      	pop	{r4, r5, r6, pc}

0800d01a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d01a:	2300      	movs	r3, #0
 800d01c:	8083      	strh	r3, [r0, #4]
 800d01e:	4770      	bx	lr

0800d020 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d020:	b510      	push	{r4, lr}
 800d022:	6803      	ldr	r3, [r0, #0]
 800d024:	4604      	mov	r4, r0
 800d026:	8881      	ldrh	r1, [r0, #4]
 800d028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02a:	4798      	blx	r3
 800d02c:	88a3      	ldrh	r3, [r4, #4]
 800d02e:	3301      	adds	r3, #1
 800d030:	80a3      	strh	r3, [r4, #4]
 800d032:	bd10      	pop	{r4, pc}

0800d034 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d034:	6803      	ldr	r3, [r0, #0]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	4718      	bx	r3

0800d03a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d03a:	4770      	bx	lr

0800d03c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d03c:	4a02      	ldr	r2, [pc, #8]	; (800d048 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d03e:	6002      	str	r2, [r0, #0]
 800d040:	2200      	movs	r2, #0
 800d042:	8082      	strh	r2, [r0, #4]
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	08023acc 	.word	0x08023acc

0800d04c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d04c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d04e:	2000      	movs	r0, #0
 800d050:	b12b      	cbz	r3, 800d05e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d052:	b920      	cbnz	r0, 800d05e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d054:	1a5a      	subs	r2, r3, r1
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	4250      	negs	r0, r2
 800d05a:	4150      	adcs	r0, r2
 800d05c:	e7f8      	b.n	800d050 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d05e:	4770      	bx	lr

0800d060 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d060:	2300      	movs	r3, #0
 800d062:	6148      	str	r0, [r1, #20]
 800d064:	618b      	str	r3, [r1, #24]
 800d066:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d068:	b913      	cbnz	r3, 800d070 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d06a:	6281      	str	r1, [r0, #40]	; 0x28
 800d06c:	4770      	bx	lr
 800d06e:	4613      	mov	r3, r2
 800d070:	699a      	ldr	r2, [r3, #24]
 800d072:	2a00      	cmp	r2, #0
 800d074:	d1fb      	bne.n	800d06e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d076:	6199      	str	r1, [r3, #24]
 800d078:	4770      	bx	lr

0800d07a <_ZN8touchgfx9Container9removeAllEv>:
 800d07a:	2200      	movs	r2, #0
 800d07c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d07e:	b123      	cbz	r3, 800d08a <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d080:	6999      	ldr	r1, [r3, #24]
 800d082:	6281      	str	r1, [r0, #40]	; 0x28
 800d084:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d088:	e7f8      	b.n	800d07c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d08a:	4770      	bx	lr

0800d08c <_ZN8touchgfx9Container6unlinkEv>:
 800d08c:	2300      	movs	r3, #0
 800d08e:	6283      	str	r3, [r0, #40]	; 0x28
 800d090:	4770      	bx	lr

0800d092 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d092:	2200      	movs	r2, #0
 800d094:	8002      	strh	r2, [r0, #0]
 800d096:	8042      	strh	r2, [r0, #2]
 800d098:	8082      	strh	r2, [r0, #4]
 800d09a:	80c2      	strh	r2, [r0, #6]
 800d09c:	4770      	bx	lr

0800d09e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d09e:	b570      	push	{r4, r5, r6, lr}
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	4616      	mov	r6, r2
 800d0a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d0a6:	b13c      	cbz	r4, 800d0b8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	4632      	mov	r2, r6
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0b2:	4798      	blx	r3
 800d0b4:	69a4      	ldr	r4, [r4, #24]
 800d0b6:	e7f6      	b.n	800d0a6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d0b8:	bd70      	pop	{r4, r5, r6, pc}

0800d0ba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d0ba:	b538      	push	{r3, r4, r5, lr}
 800d0bc:	460d      	mov	r5, r1
 800d0be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d0c0:	b134      	cbz	r4, 800d0d0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d0c2:	682b      	ldr	r3, [r5, #0]
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	4798      	blx	r3
 800d0cc:	69a4      	ldr	r4, [r4, #24]
 800d0ce:	e7f7      	b.n	800d0c0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d0d0:	bd38      	pop	{r3, r4, r5, pc}

0800d0d2 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800d0d2:	b510      	push	{r4, lr}
 800d0d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d0d6:	b12c      	cbz	r4, 800d0e4 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	699b      	ldr	r3, [r3, #24]
 800d0de:	4798      	blx	r3
 800d0e0:	69a4      	ldr	r4, [r4, #24]
 800d0e2:	e7f8      	b.n	800d0d6 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800d0e4:	bd10      	pop	{r4, pc}

0800d0e6 <_ZN8touchgfx9ContainerD1Ev>:
 800d0e6:	4770      	bx	lr

0800d0e8 <_ZN8touchgfx9ContainerD0Ev>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	212c      	movs	r1, #44	; 0x2c
 800d0ee:	f012 f99a 	bl	801f426 <_ZdlPvj>
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	bd10      	pop	{r4, pc}

0800d0f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d0f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d0f8:	b19b      	cbz	r3, 800d122 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d0fa:	428b      	cmp	r3, r1
 800d0fc:	d109      	bne.n	800d112 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d0fe:	699a      	ldr	r2, [r3, #24]
 800d100:	2100      	movs	r1, #0
 800d102:	6159      	str	r1, [r3, #20]
 800d104:	6282      	str	r2, [r0, #40]	; 0x28
 800d106:	b902      	cbnz	r2, 800d10a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d108:	4770      	bx	lr
 800d10a:	6199      	str	r1, [r3, #24]
 800d10c:	4770      	bx	lr
 800d10e:	4613      	mov	r3, r2
 800d110:	b13a      	cbz	r2, 800d122 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d112:	699a      	ldr	r2, [r3, #24]
 800d114:	428a      	cmp	r2, r1
 800d116:	d1fa      	bne.n	800d10e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d118:	698a      	ldr	r2, [r1, #24]
 800d11a:	619a      	str	r2, [r3, #24]
 800d11c:	2300      	movs	r3, #0
 800d11e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d122:	4770      	bx	lr

0800d124 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d124:	b410      	push	{r4}
 800d126:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d128:	4604      	mov	r4, r0
 800d12a:	b92b      	cbnz	r3, 800d138 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d12c:	6803      	ldr	r3, [r0, #0]
 800d12e:	4611      	mov	r1, r2
 800d130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d136:	4718      	bx	r3
 800d138:	b941      	cbnz	r1, 800d14c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d13a:	6193      	str	r3, [r2, #24]
 800d13c:	6282      	str	r2, [r0, #40]	; 0x28
 800d13e:	6154      	str	r4, [r2, #20]
 800d140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	4603      	mov	r3, r0
 800d148:	2800      	cmp	r0, #0
 800d14a:	d0f9      	beq.n	800d140 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d14c:	4299      	cmp	r1, r3
 800d14e:	6998      	ldr	r0, [r3, #24]
 800d150:	d1f9      	bne.n	800d146 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d152:	6190      	str	r0, [r2, #24]
 800d154:	618a      	str	r2, [r1, #24]
 800d156:	e7f2      	b.n	800d13e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d158 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15c:	461f      	mov	r7, r3
 800d15e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d162:	460d      	mov	r5, r1
 800d164:	4616      	mov	r6, r2
 800d166:	b103      	cbz	r3, 800d16a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d168:	6038      	str	r0, [r7, #0]
 800d16a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d16c:	b314      	cbz	r4, 800d1b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d16e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d172:	b1eb      	cbz	r3, 800d1b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d174:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d178:	428d      	cmp	r5, r1
 800d17a:	db19      	blt.n	800d1b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d17c:	b289      	uxth	r1, r1
 800d17e:	8923      	ldrh	r3, [r4, #8]
 800d180:	440b      	add	r3, r1
 800d182:	b21b      	sxth	r3, r3
 800d184:	429d      	cmp	r5, r3
 800d186:	da13      	bge.n	800d1b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d188:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d18c:	4296      	cmp	r6, r2
 800d18e:	db0f      	blt.n	800d1b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d190:	b292      	uxth	r2, r2
 800d192:	8963      	ldrh	r3, [r4, #10]
 800d194:	4413      	add	r3, r2
 800d196:	b21b      	sxth	r3, r3
 800d198:	429e      	cmp	r6, r3
 800d19a:	da09      	bge.n	800d1b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	1ab2      	subs	r2, r6, r2
 800d1a0:	1a69      	subs	r1, r5, r1
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800d1a8:	b212      	sxth	r2, r2
 800d1aa:	463b      	mov	r3, r7
 800d1ac:	b209      	sxth	r1, r1
 800d1ae:	47c0      	blx	r8
 800d1b0:	69a4      	ldr	r4, [r4, #24]
 800d1b2:	e7db      	b.n	800d16c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	4c6d      	ldr	r4, [pc, #436]	; (800d374 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d1be:	b0a1      	sub	sp, #132	; 0x84
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	6824      	ldr	r4, [r4, #0]
 800d1c4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d1c6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800d1ca:	2400      	movs	r4, #0
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	802c      	strh	r4, [r5, #0]
 800d1d0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d1d2:	802c      	strh	r4, [r5, #0]
 800d1d4:	601c      	str	r4, [r3, #0]
 800d1d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d1da:	f7ff ffbd 	bl	800d158 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d1de:	f1b9 0f03 	cmp.w	r9, #3
 800d1e2:	f340 80c1 	ble.w	800d368 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	a80c      	add	r0, sp, #48	; 0x30
 800d1ea:	f004 fbe1 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d1ee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d1f2:	9306      	str	r3, [sp, #24]
 800d1f4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800d1f8:	9307      	str	r3, [sp, #28]
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	f8d3 a000 	ldr.w	sl, [r3]
 800d200:	f1ba 0f00 	cmp.w	sl, #0
 800d204:	f000 80b3 	beq.w	800d36e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d208:	4651      	mov	r1, sl
 800d20a:	a810      	add	r0, sp, #64	; 0x40
 800d20c:	f004 fbd0 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d210:	2002      	movs	r0, #2
 800d212:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	9a06      	ldr	r2, [sp, #24]
 800d21a:	fb91 f1f0 	sdiv	r1, r1, r0
 800d21e:	189d      	adds	r5, r3, r2
 800d220:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800d224:	9a07      	ldr	r2, [sp, #28]
 800d226:	4419      	add	r1, r3
 800d228:	9b02      	ldr	r3, [sp, #8]
 800d22a:	4413      	add	r3, r2
 800d22c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d230:	1a6d      	subs	r5, r5, r1
 800d232:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d236:	fb92 f2f0 	sdiv	r2, r2, r0
 800d23a:	440a      	add	r2, r1
 800d23c:	1a9b      	subs	r3, r3, r2
 800d23e:	435b      	muls	r3, r3
 800d240:	fb05 3505 	mla	r5, r5, r5, r3
 800d244:	4f4c      	ldr	r7, [pc, #304]	; (800d378 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d246:	ac10      	add	r4, sp, #64	; 0x40
 800d248:	f1b9 0f0c 	cmp.w	r9, #12
 800d24c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d24e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d250:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d254:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d258:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d25c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d260:	f04f 0303 	mov.w	r3, #3
 800d264:	bfd8      	it	le
 800d266:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d26a:	f04f 0400 	mov.w	r4, #0
 800d26e:	f8cd 9000 	str.w	r9, [sp]
 800d272:	bfcc      	ite	gt
 800d274:	4698      	movgt	r8, r3
 800d276:	fb92 f8f3 	sdivle	r8, r2, r3
 800d27a:	1c63      	adds	r3, r4, #1
 800d27c:	aa10      	add	r2, sp, #64	; 0x40
 800d27e:	f004 0401 	and.w	r4, r4, #1
 800d282:	f04f 0b00 	mov.w	fp, #0
 800d286:	9308      	str	r3, [sp, #32]
 800d288:	9b00      	ldr	r3, [sp, #0]
 800d28a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d28e:	fb93 f3f8 	sdiv	r3, r3, r8
 800d292:	3404      	adds	r4, #4
 800d294:	b29b      	uxth	r3, r3
 800d296:	9304      	str	r3, [sp, #16]
 800d298:	9a04      	ldr	r2, [sp, #16]
 800d29a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d29e:	fb13 f302 	smulbb	r3, r3, r2
 800d2a2:	9a01      	ldr	r2, [sp, #4]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	1899      	adds	r1, r3, r2
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d2ae:	b209      	sxth	r1, r1
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	db4d      	blt.n	800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2b4:	8932      	ldrh	r2, [r6, #8]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	b21b      	sxth	r3, r3
 800d2ba:	4299      	cmp	r1, r3
 800d2bc:	da48      	bge.n	800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2be:	9b04      	ldr	r3, [sp, #16]
 800d2c0:	6827      	ldr	r7, [r4, #0]
 800d2c2:	fb17 f703 	smulbb	r7, r7, r3
 800d2c6:	9b02      	ldr	r3, [sp, #8]
 800d2c8:	b2bf      	uxth	r7, r7
 800d2ca:	18fa      	adds	r2, r7, r3
 800d2cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d2d0:	b212      	sxth	r2, r2
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	db3c      	blt.n	800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2d6:	8970      	ldrh	r0, [r6, #10]
 800d2d8:	4403      	add	r3, r0
 800d2da:	b21b      	sxth	r3, r3
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	da37      	bge.n	800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2e6:	ab0b      	add	r3, sp, #44	; 0x2c
 800d2e8:	f7ff ff36 	bl	800d158 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d2ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2ee:	b37a      	cbz	r2, 800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2f0:	4552      	cmp	r2, sl
 800d2f2:	d02d      	beq.n	800d350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	a80e      	add	r0, sp, #56	; 0x38
 800d2f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d2fa:	f004 fb59 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d2fe:	f04f 0e02 	mov.w	lr, #2
 800d302:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800d306:	9a06      	ldr	r2, [sp, #24]
 800d308:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800d312:	4413      	add	r3, r2
 800d314:	9a07      	ldr	r2, [sp, #28]
 800d316:	fb91 f1fe 	sdiv	r1, r1, lr
 800d31a:	fb9c fcfe 	sdiv	ip, ip, lr
 800d31e:	4401      	add	r1, r0
 800d320:	1a58      	subs	r0, r3, r1
 800d322:	9b02      	ldr	r3, [sp, #8]
 800d324:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800d328:	4413      	add	r3, r2
 800d32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d32c:	448c      	add	ip, r1
 800d32e:	eba3 030c 	sub.w	r3, r3, ip
 800d332:	435b      	muls	r3, r3
 800d334:	fb00 3300 	mla	r3, r0, r0, r3
 800d338:	42ab      	cmp	r3, r5
 800d33a:	d208      	bcs.n	800d34e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d33e:	461d      	mov	r5, r3
 800d340:	9803      	ldr	r0, [sp, #12]
 800d342:	6001      	str	r1, [r0, #0]
 800d344:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d346:	9805      	ldr	r0, [sp, #20]
 800d348:	8008      	strh	r0, [r1, #0]
 800d34a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d34c:	800f      	strh	r7, [r1, #0]
 800d34e:	4692      	mov	sl, r2
 800d350:	f10b 0b01 	add.w	fp, fp, #1
 800d354:	3408      	adds	r4, #8
 800d356:	f1bb 0f04 	cmp.w	fp, #4
 800d35a:	d19d      	bne.n	800d298 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d35c:	9b00      	ldr	r3, [sp, #0]
 800d35e:	9c08      	ldr	r4, [sp, #32]
 800d360:	444b      	add	r3, r9
 800d362:	4544      	cmp	r4, r8
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	d188      	bne.n	800d27a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d368:	b021      	add	sp, #132	; 0x84
 800d36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36e:	f04f 35ff 	mov.w	r5, #4294967295
 800d372:	e767      	b.n	800d244 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d374:	20024914 	.word	0x20024914
 800d378:	08020624 	.word	0x08020624

0800d37c <_ZN8touchgfx4RectaNERKS0_>:
 800d37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d380:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d384:	888c      	ldrh	r4, [r1, #4]
 800d386:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d38a:	443c      	add	r4, r7
 800d38c:	b2a4      	uxth	r4, r4
 800d38e:	fa0f f884 	sxth.w	r8, r4
 800d392:	45c1      	cmp	r9, r8
 800d394:	da2f      	bge.n	800d3f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d396:	8882      	ldrh	r2, [r0, #4]
 800d398:	444a      	add	r2, r9
 800d39a:	b292      	uxth	r2, r2
 800d39c:	fa0f fe82 	sxth.w	lr, r2
 800d3a0:	4577      	cmp	r7, lr
 800d3a2:	da28      	bge.n	800d3f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d3a4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d3a8:	88cb      	ldrh	r3, [r1, #6]
 800d3aa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d3ae:	442b      	add	r3, r5
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	429e      	cmp	r6, r3
 800d3b4:	da1f      	bge.n	800d3f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d3b6:	88c3      	ldrh	r3, [r0, #6]
 800d3b8:	4433      	add	r3, r6
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	fa0f fc83 	sxth.w	ip, r3
 800d3c0:	4565      	cmp	r5, ip
 800d3c2:	da18      	bge.n	800d3f6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d3c4:	454f      	cmp	r7, r9
 800d3c6:	bfb8      	it	lt
 800d3c8:	464f      	movlt	r7, r9
 800d3ca:	42b5      	cmp	r5, r6
 800d3cc:	bfb8      	it	lt
 800d3ce:	4635      	movlt	r5, r6
 800d3d0:	45f0      	cmp	r8, lr
 800d3d2:	bfd8      	it	le
 800d3d4:	4622      	movle	r2, r4
 800d3d6:	1bd2      	subs	r2, r2, r7
 800d3d8:	8082      	strh	r2, [r0, #4]
 800d3da:	884a      	ldrh	r2, [r1, #2]
 800d3dc:	88c9      	ldrh	r1, [r1, #6]
 800d3de:	8007      	strh	r7, [r0, #0]
 800d3e0:	440a      	add	r2, r1
 800d3e2:	8045      	strh	r5, [r0, #2]
 800d3e4:	b292      	uxth	r2, r2
 800d3e6:	b211      	sxth	r1, r2
 800d3e8:	458c      	cmp	ip, r1
 800d3ea:	bfa8      	it	ge
 800d3ec:	4613      	movge	r3, r2
 800d3ee:	1b5b      	subs	r3, r3, r5
 800d3f0:	80c3      	strh	r3, [r0, #6]
 800d3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	8003      	strh	r3, [r0, #0]
 800d3fa:	8043      	strh	r3, [r0, #2]
 800d3fc:	8083      	strh	r3, [r0, #4]
 800d3fe:	80c3      	strh	r3, [r0, #6]
 800d400:	e7f7      	b.n	800d3f2 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d402 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d402:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	dd06      	ble.n	800d418 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d40a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d40e:	2800      	cmp	r0, #0
 800d410:	bfcc      	ite	gt
 800d412:	2000      	movgt	r0, #0
 800d414:	2001      	movle	r0, #1
 800d416:	4770      	bx	lr
 800d418:	2001      	movs	r0, #1
 800d41a:	4770      	bx	lr

0800d41c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800d426:	8003      	strh	r3, [r0, #0]
 800d428:	8043      	strh	r3, [r0, #2]
 800d42a:	8083      	strh	r3, [r0, #4]
 800d42c:	80c3      	strh	r3, [r0, #6]
 800d42e:	2d00      	cmp	r5, #0
 800d430:	d040      	beq.n	800d4b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d432:	1d28      	adds	r0, r5, #4
 800d434:	f7ff ffe5 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d438:	b988      	cbnz	r0, 800d45e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d43a:	4620      	mov	r0, r4
 800d43c:	f7ff ffe1 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d440:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d444:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d448:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d44c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d450:	b138      	cbz	r0, 800d462 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d452:	8022      	strh	r2, [r4, #0]
 800d454:	8063      	strh	r3, [r4, #2]
 800d456:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d45a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d45e:	69ad      	ldr	r5, [r5, #24]
 800d460:	e7e5      	b.n	800d42e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d462:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d466:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d46a:	4290      	cmp	r0, r2
 800d46c:	4607      	mov	r7, r0
 800d46e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d472:	460e      	mov	r6, r1
 800d474:	bfa8      	it	ge
 800d476:	4617      	movge	r7, r2
 800d478:	4299      	cmp	r1, r3
 800d47a:	4472      	add	r2, lr
 800d47c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d480:	bfa8      	it	ge
 800d482:	461e      	movge	r6, r3
 800d484:	4440      	add	r0, r8
 800d486:	4471      	add	r1, lr
 800d488:	4463      	add	r3, ip
 800d48a:	b200      	sxth	r0, r0
 800d48c:	8027      	strh	r7, [r4, #0]
 800d48e:	b212      	sxth	r2, r2
 800d490:	8066      	strh	r6, [r4, #2]
 800d492:	b209      	sxth	r1, r1
 800d494:	b21b      	sxth	r3, r3
 800d496:	4290      	cmp	r0, r2
 800d498:	bfac      	ite	ge
 800d49a:	ebc7 0200 	rsbge	r2, r7, r0
 800d49e:	ebc7 0202 	rsblt	r2, r7, r2
 800d4a2:	4299      	cmp	r1, r3
 800d4a4:	bfac      	ite	ge
 800d4a6:	ebc6 0301 	rsbge	r3, r6, r1
 800d4aa:	ebc6 0303 	rsblt	r3, r6, r3
 800d4ae:	80a2      	strh	r2, [r4, #4]
 800d4b0:	80e3      	strh	r3, [r4, #6]
 800d4b2:	e7d4      	b.n	800d45e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d4ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4be:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d4c2:	b383      	cbz	r3, 800d526 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d4c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d4c6:	b374      	cbz	r4, 800d526 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d4c8:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d4cc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d4d0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d4d4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d4d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d4dc:	b303      	cbz	r3, 800d520 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d4de:	4668      	mov	r0, sp
 800d4e0:	1d21      	adds	r1, r4, #4
 800d4e2:	f8ad 5000 	strh.w	r5, [sp]
 800d4e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d4ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d4ee:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d4f2:	f7ff ff43 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800d4f6:	4668      	mov	r0, sp
 800d4f8:	f7ff ff83 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d4fc:	b980      	cbnz	r0, 800d520 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d4fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800d502:	4669      	mov	r1, sp
 800d504:	88a2      	ldrh	r2, [r4, #4]
 800d506:	4620      	mov	r0, r4
 800d508:	1a9b      	subs	r3, r3, r2
 800d50a:	88e2      	ldrh	r2, [r4, #6]
 800d50c:	f8ad 3000 	strh.w	r3, [sp]
 800d510:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	4798      	blx	r3
 800d520:	69a4      	ldr	r4, [r4, #24]
 800d522:	2c00      	cmp	r4, #0
 800d524:	d1d8      	bne.n	800d4d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d526:	b002      	add	sp, #8
 800d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d52c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d52c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d52e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d532:	460d      	mov	r5, r1
 800d534:	4616      	mov	r6, r2
 800d536:	b323      	cbz	r3, 800d582 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d538:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d53a:	b314      	cbz	r4, 800d582 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d53c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d540:	b1eb      	cbz	r3, 800d57e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d542:	6828      	ldr	r0, [r5, #0]
 800d544:	466b      	mov	r3, sp
 800d546:	6869      	ldr	r1, [r5, #4]
 800d548:	c303      	stmia	r3!, {r0, r1}
 800d54a:	4668      	mov	r0, sp
 800d54c:	1d21      	adds	r1, r4, #4
 800d54e:	f7ff ff15 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800d552:	4668      	mov	r0, sp
 800d554:	f7ff ff55 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d558:	b988      	cbnz	r0, 800d57e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d55a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d55e:	4669      	mov	r1, sp
 800d560:	88a2      	ldrh	r2, [r4, #4]
 800d562:	4620      	mov	r0, r4
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	88e2      	ldrh	r2, [r4, #6]
 800d568:	f8ad 3000 	strh.w	r3, [sp]
 800d56c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d570:	1a9b      	subs	r3, r3, r2
 800d572:	4632      	mov	r2, r6
 800d574:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d57c:	4798      	blx	r3
 800d57e:	69a4      	ldr	r4, [r4, #24]
 800d580:	e7db      	b.n	800d53a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d582:	b002      	add	sp, #8
 800d584:	bd70      	pop	{r4, r5, r6, pc}

0800d586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	b513      	push	{r0, r1, r4, lr}
 800d58a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800d58e:	2300      	movs	r3, #0
 800d590:	e9cd 3300 	strd	r3, r3, [sp]
 800d594:	466b      	mov	r3, sp
 800d596:	47a0      	blx	r4
 800d598:	b002      	add	sp, #8
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d59c:	2301      	movs	r3, #1
 800d59e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d5a2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d5a6:	4770      	bx	lr

0800d5a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d5ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d5b4:	6843      	ldr	r3, [r0, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	725a      	strb	r2, [r3, #9]
 800d5ba:	6840      	ldr	r0, [r0, #4]
 800d5bc:	6803      	ldr	r3, [r0, #0]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	4718      	bx	r3

0800d5c2 <_ZN8touchgfx3HAL8flushDMAEv>:
 800d5c2:	6840      	ldr	r0, [r0, #4]
 800d5c4:	6803      	ldr	r3, [r0, #0]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	4718      	bx	r3

0800d5ca <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d5ca:	b530      	push	{r4, r5, lr}
 800d5cc:	b08b      	sub	sp, #44	; 0x2c
 800d5ce:	6804      	ldr	r4, [r0, #0]
 800d5d0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800d5d4:	9509      	str	r5, [sp, #36]	; 0x24
 800d5d6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800d5da:	9508      	str	r5, [sp, #32]
 800d5dc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800d5e0:	9507      	str	r5, [sp, #28]
 800d5e2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800d5e6:	9506      	str	r5, [sp, #24]
 800d5e8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800d5ec:	9505      	str	r5, [sp, #20]
 800d5ee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800d5f2:	9504      	str	r5, [sp, #16]
 800d5f4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800d5f8:	9503      	str	r5, [sp, #12]
 800d5fa:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d5fe:	9502      	str	r5, [sp, #8]
 800d600:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800d604:	e9cd 3500 	strd	r3, r5, [sp]
 800d608:	4613      	mov	r3, r2
 800d60a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800d60c:	2200      	movs	r2, #0
 800d60e:	47a0      	blx	r4
 800d610:	b00b      	add	sp, #44	; 0x2c
 800d612:	bd30      	pop	{r4, r5, pc}

0800d614 <_ZN8touchgfx3HAL10beginFrameEv>:
 800d614:	4b04      	ldr	r3, [pc, #16]	; (800d628 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	b123      	cbz	r3, 800d624 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d61a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800d61e:	f080 0001 	eor.w	r0, r0, #1
 800d622:	4770      	bx	lr
 800d624:	2001      	movs	r0, #1
 800d626:	4770      	bx	lr
 800d628:	20024912 	.word	0x20024912

0800d62c <_ZN8touchgfx3HAL8endFrameEv>:
 800d62c:	b510      	push	{r4, lr}
 800d62e:	4604      	mov	r4, r0
 800d630:	6840      	ldr	r0, [r0, #4]
 800d632:	6803      	ldr	r3, [r0, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	4798      	blx	r3
 800d638:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800d63c:	b113      	cbz	r3, 800d644 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d63e:	2301      	movs	r3, #1
 800d640:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d644:	bd10      	pop	{r4, pc}

0800d646 <_ZN8touchgfx3HAL10initializeEv>:
 800d646:	b510      	push	{r4, lr}
 800d648:	4604      	mov	r4, r0
 800d64a:	f7f4 f9f1 	bl	8001a30 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d64e:	6860      	ldr	r0, [r4, #4]
 800d650:	6803      	ldr	r3, [r0, #0]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	4798      	blx	r3
 800d656:	68e0      	ldr	r0, [r4, #12]
 800d658:	6803      	ldr	r3, [r0, #0]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	4798      	blx	r3
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	4620      	mov	r0, r4
 800d662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d668:	4718      	bx	r3
	...

0800d66c <_ZN8touchgfx3HAL4tickEv>:
 800d66c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d66e:	6803      	ldr	r3, [r0, #0]
 800d670:	4604      	mov	r4, r0
 800d672:	4d5b      	ldr	r5, [pc, #364]	; (800d7e0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800d674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d678:	4798      	blx	r3
 800d67a:	2800      	cmp	r0, #0
 800d67c:	f000 8095 	beq.w	800d7aa <_ZN8touchgfx3HAL4tickEv+0x13e>
 800d680:	2001      	movs	r0, #1
 800d682:	2600      	movs	r6, #0
 800d684:	f7f3 f9ce 	bl	8000a24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d688:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800d68c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800d690:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d694:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800d698:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800d69c:	b133      	cbz	r3, 800d6ac <_ZN8touchgfx3HAL4tickEv+0x40>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d6a6:	4798      	blx	r3
 800d6a8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800d6ac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800d6b0:	2601      	movs	r6, #1
 800d6b2:	6862      	ldr	r2, [r4, #4]
 800d6b4:	f083 0301 	eor.w	r3, r3, #1
 800d6b8:	702e      	strb	r6, [r5, #0]
 800d6ba:	7253      	strb	r3, [r2, #9]
 800d6bc:	f003 f908 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 800d6c0:	6803      	ldr	r3, [r0, #0]
 800d6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c4:	4798      	blx	r3
 800d6c6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d6ca:	b90b      	cbnz	r3, 800d6d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 800d6cc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800d6d0:	f003 f8fe 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 800d6d4:	6803      	ldr	r3, [r0, #0]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	4798      	blx	r3
 800d6da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6dc:	6803      	ldr	r3, [r0, #0]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	4798      	blx	r3
 800d6e2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d6e6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d6f2:	b10a      	cbz	r2, 800d6f8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1eb      	bne.n	800d6d0 <_ZN8touchgfx3HAL4tickEv+0x64>
 800d6f8:	4a3a      	ldr	r2, [pc, #232]	; (800d7e4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800d6fa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800d6fe:	7813      	ldrb	r3, [r2, #0]
 800d700:	3301      	adds	r3, #1
 800d702:	b25b      	sxtb	r3, r3
 800d704:	4299      	cmp	r1, r3
 800d706:	7013      	strb	r3, [r2, #0]
 800d708:	dc10      	bgt.n	800d72c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d70a:	2300      	movs	r3, #0
 800d70c:	68e0      	ldr	r0, [r4, #12]
 800d70e:	a902      	add	r1, sp, #8
 800d710:	7013      	strb	r3, [r2, #0]
 800d712:	aa03      	add	r2, sp, #12
 800d714:	6803      	ldr	r3, [r0, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	4798      	blx	r3
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d050      	beq.n	800d7c2 <_ZN8touchgfx3HAL4tickEv+0x156>
 800d720:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d724:	4620      	mov	r0, r4
 800d726:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d72a:	4798      	blx	r3
 800d72c:	2300      	movs	r3, #0
 800d72e:	6960      	ldr	r0, [r4, #20]
 800d730:	f88d 3007 	strb.w	r3, [sp, #7]
 800d734:	b158      	cbz	r0, 800d74e <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d736:	6803      	ldr	r3, [r0, #0]
 800d738:	f10d 0107 	add.w	r1, sp, #7
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	4798      	blx	r3
 800d740:	b128      	cbz	r0, 800d74e <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d744:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d748:	6803      	ldr	r3, [r0, #0]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	4798      	blx	r3
 800d74e:	f104 001c 	add.w	r0, r4, #28
 800d752:	f011 fdb3 	bl	801f2bc <_ZN8touchgfx8Gestures4tickEv>
 800d756:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d75a:	b30b      	cbz	r3, 800d7a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 800d75c:	6920      	ldr	r0, [r4, #16]
 800d75e:	6803      	ldr	r3, [r0, #0]
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	4798      	blx	r3
 800d764:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d766:	4606      	mov	r6, r0
 800d768:	b903      	cbnz	r3, 800d76c <_ZN8touchgfx3HAL4tickEv+0x100>
 800d76a:	6720      	str	r0, [r4, #112]	; 0x70
 800d76c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d76e:	4a1e      	ldr	r2, [pc, #120]	; (800d7e8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800d770:	1af3      	subs	r3, r6, r3
 800d772:	4293      	cmp	r3, r2
 800d774:	d914      	bls.n	800d7a0 <_ZN8touchgfx3HAL4tickEv+0x134>
 800d776:	6920      	ldr	r0, [r4, #16]
 800d778:	6803      	ldr	r3, [r0, #0]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	4798      	blx	r3
 800d77e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d780:	2264      	movs	r2, #100	; 0x64
 800d782:	1af3      	subs	r3, r6, r3
 800d784:	fbb3 f3f2 	udiv	r3, r3, r2
 800d788:	fbb0 f0f3 	udiv	r0, r0, r3
 800d78c:	2800      	cmp	r0, #0
 800d78e:	dc1d      	bgt.n	800d7cc <_ZN8touchgfx3HAL4tickEv+0x160>
 800d790:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800d794:	6920      	ldr	r0, [r4, #16]
 800d796:	2100      	movs	r1, #0
 800d798:	6803      	ldr	r3, [r0, #0]
 800d79a:	69db      	ldr	r3, [r3, #28]
 800d79c:	4798      	blx	r3
 800d79e:	6726      	str	r6, [r4, #112]	; 0x70
 800d7a0:	f003 f896 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 800d7a4:	6803      	ldr	r3, [r0, #0]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	4798      	blx	r3
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d7b2:	4798      	blx	r3
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	f7f3 f965 	bl	8000a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	702b      	strb	r3, [r5, #0]
 800d7be:	b004      	add	sp, #16
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	4798      	blx	r3
 800d7ca:	e7af      	b.n	800d72c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d7cc:	2863      	cmp	r0, #99	; 0x63
 800d7ce:	bfcb      	itete	gt
 800d7d0:	2300      	movgt	r3, #0
 800d7d2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800d7d6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800d7da:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800d7de:	e7d9      	b.n	800d794 <_ZN8touchgfx3HAL4tickEv+0x128>
 800d7e0:	20024918 	.word	0x20024918
 800d7e4:	20024919 	.word	0x20024919
 800d7e8:	05f5e100 	.word	0x05f5e100

0800d7ec <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d7ec:	f7f4 b950 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d7f0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d7f0:	6581      	str	r1, [r0, #88]	; 0x58
 800d7f2:	301c      	adds	r0, #28
 800d7f4:	f011 bd60 	b.w	801f2b8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d7f8 <_ZN8touchgfx3HAL5touchEll>:
 800d7f8:	b530      	push	{r4, r5, lr}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	a804      	add	r0, sp, #16
 800d800:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d804:	f002 fde0 	bl	80103c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d808:	9b04      	ldr	r3, [sp, #16]
 800d80a:	a906      	add	r1, sp, #24
 800d80c:	a803      	add	r0, sp, #12
 800d80e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d812:	9b05      	ldr	r3, [sp, #20]
 800d814:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d818:	f002 fe28 	bl	801046c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d81c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800d820:	f104 001c 	add.w	r0, r4, #28
 800d824:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d828:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d82c:	b189      	cbz	r1, 800d852 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d82e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4613      	mov	r3, r2
 800d836:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d83a:	462a      	mov	r2, r5
 800d83c:	f011 fd4c 	bl	801f2d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d840:	b128      	cbz	r0, 800d84e <_ZN8touchgfx3HAL5touchEll+0x56>
 800d842:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d846:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d848:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d84c:	6623      	str	r3, [r4, #96]	; 0x60
 800d84e:	b007      	add	sp, #28
 800d850:	bd30      	pop	{r4, r5, pc}
 800d852:	f011 fd81 	bl	801f358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d856:	2301      	movs	r3, #1
 800d858:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d85c:	e7f1      	b.n	800d842 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d85e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d85e:	b510      	push	{r4, lr}
 800d860:	2b00      	cmp	r3, #0
 800d862:	d046      	beq.n	800d8f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d864:	ea81 0002 	eor.w	r0, r1, r2
 800d868:	07c4      	lsls	r4, r0, #31
 800d86a:	d508      	bpl.n	800d87e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d86c:	440b      	add	r3, r1
 800d86e:	3a01      	subs	r2, #1
 800d870:	428b      	cmp	r3, r1
 800d872:	d93e      	bls.n	800d8f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d874:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d878:	f801 0b01 	strb.w	r0, [r1], #1
 800d87c:	e7f8      	b.n	800d870 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d87e:	07d0      	lsls	r0, r2, #31
 800d880:	bf42      	ittt	mi
 800d882:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d886:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d88a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d911      	bls.n	800d8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d892:	ea81 0402 	eor.w	r4, r1, r2
 800d896:	4610      	mov	r0, r2
 800d898:	07a4      	lsls	r4, r4, #30
 800d89a:	d022      	beq.n	800d8e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d89c:	f023 0401 	bic.w	r4, r3, #1
 800d8a0:	440c      	add	r4, r1
 800d8a2:	428c      	cmp	r4, r1
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	d904      	bls.n	800d8b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d8a8:	8812      	ldrh	r2, [r2, #0]
 800d8aa:	3002      	adds	r0, #2
 800d8ac:	f821 2b02 	strh.w	r2, [r1], #2
 800d8b0:	e7f7      	b.n	800d8a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	f023 0003 	bic.w	r0, r3, #3
 800d8ba:	4408      	add	r0, r1
 800d8bc:	4288      	cmp	r0, r1
 800d8be:	4614      	mov	r4, r2
 800d8c0:	d904      	bls.n	800d8cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d8c2:	6824      	ldr	r4, [r4, #0]
 800d8c4:	3204      	adds	r2, #4
 800d8c6:	f841 4b04 	str.w	r4, [r1], #4
 800d8ca:	e7f7      	b.n	800d8bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d8cc:	f003 0303 	and.w	r3, r3, #3
 800d8d0:	3a01      	subs	r2, #1
 800d8d2:	440b      	add	r3, r1
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	d90c      	bls.n	800d8f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d8d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d8dc:	f801 0b01 	strb.w	r0, [r1], #1
 800d8e0:	e7f8      	b.n	800d8d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d8e2:	0790      	lsls	r0, r2, #30
 800d8e4:	d0e7      	beq.n	800d8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d8e6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d8ea:	3b02      	subs	r3, #2
 800d8ec:	f821 0b02 	strh.w	r0, [r1], #2
 800d8f0:	e7e1      	b.n	800d8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	bd10      	pop	{r4, pc}

0800d8f6 <_ZN8touchgfx3HAL7noTouchEv>:
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	b153      	cbz	r3, 800d916 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d900:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d904:	2101      	movs	r1, #1
 800d906:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800d90a:	301c      	adds	r0, #28
 800d90c:	f011 fd24 	bl	801f358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d910:	2300      	movs	r3, #0
 800d912:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d916:	bd10      	pop	{r4, pc}

0800d918 <_ZN8touchgfx3HAL3lcdEv>:
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d920:	b10a      	cbz	r2, 800d926 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800d922:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d924:	b900      	cbnz	r0, 800d928 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800d926:	6898      	ldr	r0, [r3, #8]
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	20024914 	.word	0x20024914

0800d930 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d934:	b085      	sub	sp, #20
 800d936:	4604      	mov	r4, r0
 800d938:	2000      	movs	r0, #0
 800d93a:	4699      	mov	r9, r3
 800d93c:	ad04      	add	r5, sp, #16
 800d93e:	460f      	mov	r7, r1
 800d940:	4690      	mov	r8, r2
 800d942:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d946:	69a0      	ldr	r0, [r4, #24]
 800d948:	6806      	ldr	r6, [r0, #0]
 800d94a:	9501      	str	r5, [sp, #4]
 800d94c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d950:	9500      	str	r5, [sp, #0]
 800d952:	6835      	ldr	r5, [r6, #0]
 800d954:	47a8      	blx	r5
 800d956:	4d10      	ldr	r5, [pc, #64]	; (800d998 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800d958:	4606      	mov	r6, r0
 800d95a:	f8a5 9000 	strh.w	r9, [r5]
 800d95e:	f7ff ffdb 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800d962:	6803      	ldr	r3, [r0, #0]
 800d964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d966:	4798      	blx	r3
 800d968:	b128      	cbz	r0, 800d976 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800d96a:	2801      	cmp	r0, #1
 800d96c:	d00b      	beq.n	800d986 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800d96e:	4630      	mov	r0, r6
 800d970:	b005      	add	sp, #20
 800d972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d976:	882b      	ldrh	r3, [r5, #0]
 800d978:	fb08 7203 	mla	r2, r8, r3, r7
 800d97c:	9b03      	ldr	r3, [sp, #12]
 800d97e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d982:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d984:	e7f3      	b.n	800d96e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d986:	882a      	ldrh	r2, [r5, #0]
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	fb08 7202 	mla	r2, r8, r2, r7
 800d98e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d992:	1a9a      	subs	r2, r3, r2
 800d994:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d996:	e7ea      	b.n	800d96e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d998:	2002490e 	.word	0x2002490e

0800d99c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d99e:	b08b      	sub	sp, #44	; 0x2c
 800d9a0:	4617      	mov	r7, r2
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	460e      	mov	r6, r1
 800d9a6:	461d      	mov	r5, r3
 800d9a8:	f7ff ffb6 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800d9ac:	6803      	ldr	r3, [r0, #0]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	4798      	blx	r3
 800d9b2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d9b6:	9007      	str	r0, [sp, #28]
 800d9b8:	4631      	mov	r1, r6
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d9c0:	4b0c      	ldr	r3, [pc, #48]	; (800d9f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	9306      	str	r3, [sp, #24]
 800d9c8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d9cc:	9305      	str	r3, [sp, #20]
 800d9ce:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d9d8:	9303      	str	r3, [sp, #12]
 800d9da:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d9de:	9302      	str	r3, [sp, #8]
 800d9e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d9e4:	e9cd 5300 	strd	r5, r3, [sp]
 800d9e8:	463b      	mov	r3, r7
 800d9ea:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	47a8      	blx	r5
 800d9f0:	b00b      	add	sp, #44	; 0x2c
 800d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f4:	2002490e 	.word	0x2002490e

0800d9f8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9fc:	4698      	mov	r8, r3
 800d9fe:	6803      	ldr	r3, [r0, #0]
 800da00:	b08b      	sub	sp, #44	; 0x2c
 800da02:	4617      	mov	r7, r2
 800da04:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800da06:	460e      	mov	r6, r1
 800da08:	4b13      	ldr	r3, [pc, #76]	; (800da58 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800da0a:	4604      	mov	r4, r0
 800da0c:	f8b3 9000 	ldrh.w	r9, [r3]
 800da10:	f7ff ff82 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800da14:	6803      	ldr	r3, [r0, #0]
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	4798      	blx	r3
 800da1a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800da1e:	2200      	movs	r2, #0
 800da20:	4631      	mov	r1, r6
 800da22:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800da26:	2302      	movs	r3, #2
 800da28:	4620      	mov	r0, r4
 800da2a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800da2e:	2301      	movs	r3, #1
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800da36:	9304      	str	r3, [sp, #16]
 800da38:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800da3c:	9303      	str	r3, [sp, #12]
 800da3e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800da48:	e9cd 8300 	strd	r8, r3, [sp]
 800da4c:	463b      	mov	r3, r7
 800da4e:	47a8      	blx	r5
 800da50:	b00b      	add	sp, #44	; 0x2c
 800da52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da56:	bf00      	nop
 800da58:	2002490e 	.word	0x2002490e

0800da5c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800da5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da60:	4698      	mov	r8, r3
 800da62:	6803      	ldr	r3, [r0, #0]
 800da64:	b087      	sub	sp, #28
 800da66:	460e      	mov	r6, r1
 800da68:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800da6a:	4617      	mov	r7, r2
 800da6c:	4b0f      	ldr	r3, [pc, #60]	; (800daac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800da6e:	4604      	mov	r4, r0
 800da70:	f8b3 9000 	ldrh.w	r9, [r3]
 800da74:	f7ff ff50 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800da78:	6803      	ldr	r3, [r0, #0]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	4798      	blx	r3
 800da7e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800da82:	463a      	mov	r2, r7
 800da84:	4631      	mov	r1, r6
 800da86:	f8cd 900c 	str.w	r9, [sp, #12]
 800da8a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800da8e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800da92:	4620      	mov	r0, r4
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	4643      	mov	r3, r8
 800daa4:	47a8      	blx	r5
 800daa6:	b007      	add	sp, #28
 800daa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daac:	2002490e 	.word	0x2002490e

0800dab0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	4604      	mov	r4, r0
 800dab6:	b08f      	sub	sp, #60	; 0x3c
 800dab8:	4610      	mov	r0, r2
 800daba:	460d      	mov	r5, r1
 800dabc:	4691      	mov	r9, r2
 800dabe:	461e      	mov	r6, r3
 800dac0:	f005 fe3a 	bl	8013738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	f000 809d 	beq.w	800dc04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800daca:	6823      	ldr	r3, [r4, #0]
 800dacc:	4620      	mov	r0, r4
 800dace:	f8df b198 	ldr.w	fp, [pc, #408]	; 800dc68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800dad2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad8:	4798      	blx	r3
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	4620      	mov	r0, r4
 800dade:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800dc6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	4798      	blx	r3
 800dae6:	f8bb 3000 	ldrh.w	r3, [fp]
 800daea:	4f5c      	ldr	r7, [pc, #368]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	f8ba 3000 	ldrh.w	r3, [sl]
 800daf2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800daf6:	4640      	mov	r0, r8
 800daf8:	9302      	str	r3, [sp, #8]
 800dafa:	883b      	ldrh	r3, [r7, #0]
 800dafc:	9303      	str	r3, [sp, #12]
 800dafe:	4b58      	ldr	r3, [pc, #352]	; (800dc60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800db00:	881a      	ldrh	r2, [r3, #0]
 800db02:	9305      	str	r3, [sp, #20]
 800db04:	9204      	str	r2, [sp, #16]
 800db06:	f005 feab 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800db0a:	8038      	strh	r0, [r7, #0]
 800db0c:	4640      	mov	r0, r8
 800db0e:	f005 fedb 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800db12:	9b05      	ldr	r3, [sp, #20]
 800db14:	b280      	uxth	r0, r0
 800db16:	8018      	strh	r0, [r3, #0]
 800db18:	4b52      	ldr	r3, [pc, #328]	; (800dc64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d174      	bne.n	800dc0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800db20:	883b      	ldrh	r3, [r7, #0]
 800db22:	f8aa 0000 	strh.w	r0, [sl]
 800db26:	f8ab 3000 	strh.w	r3, [fp]
 800db2a:	4648      	mov	r0, r9
 800db2c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800db30:	f005 fe02 	bl	8013738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800db34:	2200      	movs	r2, #0
 800db36:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800db3a:	4611      	mov	r1, r2
 800db3c:	4628      	mov	r0, r5
 800db3e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800db42:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800db46:	f7f6 ff42 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 800db4a:	2301      	movs	r3, #1
 800db4c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800db50:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800db54:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dd5c      	ble.n	800dc16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800db5c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800db60:	2b00      	cmp	r3, #0
 800db62:	dd58      	ble.n	800dc16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800db64:	462a      	mov	r2, r5
 800db66:	ab0a      	add	r3, sp, #40	; 0x28
 800db68:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800db6c:	6851      	ldr	r1, [r2, #4]
 800db6e:	c303      	stmia	r3!, {r0, r1}
 800db70:	4631      	mov	r1, r6
 800db72:	a80a      	add	r0, sp, #40	; 0x28
 800db74:	f7ff fc02 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800db78:	4b38      	ldr	r3, [pc, #224]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800db7a:	2100      	movs	r1, #0
 800db7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db80:	4b37      	ldr	r3, [pc, #220]	; (800dc60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800db82:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800db86:	aa0a      	add	r2, sp, #40	; 0x28
 800db88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db8c:	910c      	str	r1, [sp, #48]	; 0x30
 800db8e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800db92:	ab08      	add	r3, sp, #32
 800db94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db98:	e883 0003 	stmia.w	r3, {r0, r1}
 800db9c:	4618      	mov	r0, r3
 800db9e:	a90c      	add	r1, sp, #48	; 0x30
 800dba0:	f7ff fbec 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800dba4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d13c      	bne.n	800dc24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800dbaa:	2000      	movs	r0, #0
 800dbac:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800dbb0:	2600      	movs	r6, #0
 800dbb2:	696b      	ldr	r3, [r5, #20]
 800dbb4:	a908      	add	r1, sp, #32
 800dbb6:	682a      	ldr	r2, [r5, #0]
 800dbb8:	4628      	mov	r0, r5
 800dbba:	9305      	str	r3, [sp, #20]
 800dbbc:	616e      	str	r6, [r5, #20]
 800dbbe:	6892      	ldr	r2, [r2, #8]
 800dbc0:	4790      	blx	r2
 800dbc2:	9b05      	ldr	r3, [sp, #20]
 800dbc4:	4652      	mov	r2, sl
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	616b      	str	r3, [r5, #20]
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800dbd0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800dbd4:	f7f6 fefb 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 800dbd8:	9a01      	ldr	r2, [sp, #4]
 800dbda:	4b23      	ldr	r3, [pc, #140]	; (800dc68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800dbdc:	4620      	mov	r0, r4
 800dbde:	801a      	strh	r2, [r3, #0]
 800dbe0:	9a02      	ldr	r2, [sp, #8]
 800dbe2:	4b22      	ldr	r3, [pc, #136]	; (800dc6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800dbe4:	801a      	strh	r2, [r3, #0]
 800dbe6:	9a03      	ldr	r2, [sp, #12]
 800dbe8:	4b1c      	ldr	r3, [pc, #112]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800dbea:	801a      	strh	r2, [r3, #0]
 800dbec:	4b1c      	ldr	r3, [pc, #112]	; (800dc60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800dbee:	9a04      	ldr	r2, [sp, #16]
 800dbf0:	801a      	strh	r2, [r3, #0]
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800dbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfa:	4798      	blx	r3
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	4620      	mov	r0, r4
 800dc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc02:	4798      	blx	r3
 800dc04:	b00f      	add	sp, #60	; 0x3c
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	883b      	ldrh	r3, [r7, #0]
 800dc0c:	f8ab 0000 	strh.w	r0, [fp]
 800dc10:	f8aa 3000 	strh.w	r3, [sl]
 800dc14:	e789      	b.n	800db2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800dc16:	462a      	mov	r2, r5
 800dc18:	ab0a      	add	r3, sp, #40	; 0x28
 800dc1a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dc1e:	6851      	ldr	r1, [r2, #4]
 800dc20:	c303      	stmia	r3!, {r0, r1}
 800dc22:	e7a9      	b.n	800db78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800dc24:	a807      	add	r0, sp, #28
 800dc26:	f005 ff8b 	bl	8013b40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dc2e:	6803      	ldr	r3, [r0, #0]
 800dc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc32:	4798      	blx	r3
 800dc34:	4286      	cmp	r6, r0
 800dc36:	d1b8      	bne.n	800dbaa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800dc38:	f7ff fe6e 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800dc3c:	6803      	ldr	r3, [r0, #0]
 800dc3e:	4606      	mov	r6, r0
 800dc40:	a807      	add	r0, sp, #28
 800dc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	f005 ff7b 	bl	8013b40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	4630      	mov	r0, r6
 800dc50:	4798      	blx	r3
 800dc52:	f080 0001 	eor.w	r0, r0, #1
 800dc56:	b2c0      	uxtb	r0, r0
 800dc58:	e7a8      	b.n	800dbac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800dc5a:	bf00      	nop
 800dc5c:	20024908 	.word	0x20024908
 800dc60:	2002490a 	.word	0x2002490a
 800dc64:	2002490c 	.word	0x2002490c
 800dc68:	2002490e 	.word	0x2002490e
 800dc6c:	20024910 	.word	0x20024910

0800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800dc70:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800dc72:	b510      	push	{r4, lr}
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	4604      	mov	r4, r0
 800dc78:	b13b      	cbz	r3, 800dc8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dc7a:	6803      	ldr	r3, [r0, #0]
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	4798      	blx	r3
 800dc80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc82:	4283      	cmp	r3, r0
 800dc84:	d101      	bne.n	800dc8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dc86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800dc88:	bd10      	pop	{r4, pc}
 800dc8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dc8c:	e7fc      	b.n	800dc88 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800dc8e:	bf00      	nop
 800dc90:	20024912 	.word	0x20024912

0800dc94 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	461d      	mov	r5, r3
 800dc9a:	b08a      	sub	sp, #40	; 0x28
 800dc9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca0:	4690      	mov	r8, r2
 800dca2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800dca6:	2400      	movs	r4, #0
 800dca8:	4607      	mov	r7, r0
 800dcaa:	fb06 8505 	mla	r5, r6, r5, r8
 800dcae:	9404      	str	r4, [sp, #16]
 800dcb0:	f88d 4020 	strb.w	r4, [sp, #32]
 800dcb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dcb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800dcbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dcc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800dcc4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dcc8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dccc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dcd0:	f7ff ffce 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dcd4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dcde:	a901      	add	r1, sp, #4
 800dce0:	9505      	str	r5, [sp, #20]
 800dce2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800dce6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800dcea:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800dcee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800dcf2:	6803      	ldr	r3, [r0, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	4798      	blx	r3
 800dcf8:	b00a      	add	sp, #40	; 0x28
 800dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcfe <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800dcfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd02:	b08b      	sub	sp, #44	; 0x2c
 800dd04:	2400      	movs	r4, #0
 800dd06:	4691      	mov	r9, r2
 800dd08:	461d      	mov	r5, r3
 800dd0a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800dd0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd12:	4688      	mov	r8, r1
 800dd14:	4607      	mov	r7, r0
 800dd16:	9404      	str	r4, [sp, #16]
 800dd18:	fb06 9505 	mla	r5, r6, r5, r9
 800dd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd20:	f7ff ffa6 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dd24:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dd28:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dd32:	a901      	add	r1, sp, #4
 800dd34:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800dd38:	9505      	str	r5, [sp, #20]
 800dd3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dd3e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800dd42:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dd46:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd4a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800dd4e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800dd52:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800dd56:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800dd5a:	6803      	ldr	r3, [r0, #0]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	4798      	blx	r3
 800dd60:	b00b      	add	sp, #44	; 0x2c
 800dd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800dd68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800dd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6c:	b08a      	sub	sp, #40	; 0x28
 800dd6e:	4698      	mov	r8, r3
 800dd70:	2300      	movs	r3, #0
 800dd72:	4606      	mov	r6, r0
 800dd74:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800dd78:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800dd7c:	2d0b      	cmp	r5, #11
 800dd7e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800dd82:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800dd86:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	d137      	bne.n	800ddfe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800dd8e:	2380      	movs	r3, #128	; 0x80
 800dd90:	f88d 0020 	strb.w	r0, [sp, #32]
 800dd94:	4630      	mov	r0, r6
 800dd96:	9203      	str	r2, [sp, #12]
 800dd98:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dd9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800dda0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dda4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dda8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ddac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ddb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ddb4:	f7ff ff5c 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ddb8:	2c0b      	cmp	r4, #11
 800ddba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ddbe:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ddc2:	bf94      	ite	ls
 800ddc4:	4b19      	ldrls	r3, [pc, #100]	; (800de2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ddc6:	2100      	movhi	r1, #0
 800ddc8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ddcc:	bf98      	it	ls
 800ddce:	5d19      	ldrbls	r1, [r3, r4]
 800ddd0:	fb02 8307 	mla	r3, r2, r7, r8
 800ddd4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ddd8:	10c9      	asrs	r1, r1, #3
 800ddda:	fb01 0003 	mla	r0, r1, r3, r0
 800ddde:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800dde2:	a901      	add	r1, sp, #4
 800dde4:	9005      	str	r0, [sp, #20]
 800dde6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800ddea:	2300      	movs	r3, #0
 800ddec:	6870      	ldr	r0, [r6, #4]
 800ddee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	4798      	blx	r3
 800ddf8:	b00a      	add	sp, #40	; 0x28
 800ddfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfe:	2d02      	cmp	r5, #2
 800de00:	d109      	bne.n	800de16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800de02:	28ff      	cmp	r0, #255	; 0xff
 800de04:	d105      	bne.n	800de12 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800de06:	f1bc 0f00 	cmp.w	ip, #0
 800de0a:	bf14      	ite	ne
 800de0c:	2340      	movne	r3, #64	; 0x40
 800de0e:	2320      	moveq	r3, #32
 800de10:	e7be      	b.n	800dd90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de12:	2340      	movs	r3, #64	; 0x40
 800de14:	e7bc      	b.n	800dd90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de16:	28ff      	cmp	r0, #255	; 0xff
 800de18:	d105      	bne.n	800de26 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800de1a:	f1bc 0f00 	cmp.w	ip, #0
 800de1e:	bf14      	ite	ne
 800de20:	2304      	movne	r3, #4
 800de22:	2301      	moveq	r3, #1
 800de24:	e7b4      	b.n	800dd90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de26:	2304      	movs	r3, #4
 800de28:	e7b2      	b.n	800dd90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de2a:	bf00      	nop
 800de2c:	08023b88 	.word	0x08023b88

0800de30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	b08b      	sub	sp, #44	; 0x2c
 800de36:	461d      	mov	r5, r3
 800de38:	2400      	movs	r4, #0
 800de3a:	4688      	mov	r8, r1
 800de3c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800de40:	4693      	mov	fp, r2
 800de42:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800de46:	4607      	mov	r7, r0
 800de48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800de4c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800de50:	9404      	str	r4, [sp, #16]
 800de52:	bf14      	ite	ne
 800de54:	2308      	movne	r3, #8
 800de56:	2302      	moveq	r3, #2
 800de58:	fb05 b50a 	mla	r5, r5, sl, fp
 800de5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de60:	f7ff ff06 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800de64:	2e0b      	cmp	r6, #11
 800de66:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800de6a:	a901      	add	r1, sp, #4
 800de6c:	bf98      	it	ls
 800de6e:	4b13      	ldrls	r3, [pc, #76]	; (800debc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800de70:	f8ad a01e 	strh.w	sl, [sp, #30]
 800de74:	bf98      	it	ls
 800de76:	5d9c      	ldrbls	r4, [r3, r6]
 800de78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800de7c:	10e4      	asrs	r4, r4, #3
 800de7e:	f8cd 8010 	str.w	r8, [sp, #16]
 800de82:	f8ad 3018 	strh.w	r3, [sp, #24]
 800de86:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800de8a:	fb04 0405 	mla	r4, r4, r5, r0
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f8ad 301a 	strh.w	r3, [sp, #26]
 800de94:	2300      	movs	r3, #0
 800de96:	9405      	str	r4, [sp, #20]
 800de98:	f8ad 301c 	strh.w	r3, [sp, #28]
 800de9c:	f88d 9020 	strb.w	r9, [sp, #32]
 800dea0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800dea4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800dea8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800deac:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800deb0:	6803      	ldr	r3, [r0, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	4798      	blx	r3
 800deb6:	b00b      	add	sp, #44	; 0x2c
 800deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800debc:	08023b88 	.word	0x08023b88

0800dec0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800dec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec4:	461e      	mov	r6, r3
 800dec6:	4b0a      	ldr	r3, [pc, #40]	; (800def0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800dec8:	460f      	mov	r7, r1
 800deca:	4690      	mov	r8, r2
 800decc:	881d      	ldrh	r5, [r3, #0]
 800dece:	f7ff fd23 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800ded2:	6803      	ldr	r3, [r0, #0]
 800ded4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded6:	4798      	blx	r3
 800ded8:	280b      	cmp	r0, #11
 800deda:	bf96      	itet	ls
 800dedc:	4b05      	ldrls	r3, [pc, #20]	; (800def4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800dede:	2400      	movhi	r4, #0
 800dee0:	5c1c      	ldrbls	r4, [r3, r0]
 800dee2:	fb08 7005 	mla	r0, r8, r5, r7
 800dee6:	10e4      	asrs	r4, r4, #3
 800dee8:	fb04 6000 	mla	r0, r4, r0, r6
 800deec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def0:	2002490e 	.word	0x2002490e
 800def4:	08023b88 	.word	0x08023b88

0800def8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defa:	b08b      	sub	sp, #44	; 0x2c
 800defc:	461f      	mov	r7, r3
 800defe:	4604      	mov	r4, r0
 800df00:	4616      	mov	r6, r2
 800df02:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800df06:	2500      	movs	r5, #0
 800df08:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800df0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800df10:	9504      	str	r5, [sp, #16]
 800df12:	f8ad 3018 	strh.w	r3, [sp, #24]
 800df16:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800df1a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800df1e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800df22:	f8ad 301c 	strh.w	r3, [sp, #28]
 800df26:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800df2a:	f88d 3020 	strb.w	r3, [sp, #32]
 800df2e:	f7ff fe9f 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df32:	463a      	mov	r2, r7
 800df34:	4631      	mov	r1, r6
 800df36:	4603      	mov	r3, r0
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff ffc1 	bl	800dec0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800df3e:	4b0e      	ldr	r3, [pc, #56]	; (800df78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800df40:	9005      	str	r0, [sp, #20]
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	f8ad 301e 	strh.w	r3, [sp, #30]
 800df48:	f7ff fce6 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800df4c:	6803      	ldr	r3, [r0, #0]
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	4798      	blx	r3
 800df52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df54:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800df58:	a901      	add	r1, sp, #4
 800df5a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	6860      	ldr	r0, [r4, #4]
 800df62:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800df66:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800df6a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800df6e:	6803      	ldr	r3, [r0, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4798      	blx	r3
 800df74:	b00b      	add	sp, #44	; 0x2c
 800df76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df78:	2002490e 	.word	0x2002490e

0800df7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800df7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7e:	b08d      	sub	sp, #52	; 0x34
 800df80:	2501      	movs	r5, #1
 800df82:	4604      	mov	r4, r0
 800df84:	466b      	mov	r3, sp
 800df86:	9503      	str	r5, [sp, #12]
 800df88:	e883 0006 	stmia.w	r3, {r1, r2}
 800df8c:	2300      	movs	r3, #0
 800df8e:	f8bd 6000 	ldrh.w	r6, [sp]
 800df92:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800df96:	9306      	str	r3, [sp, #24]
 800df98:	6803      	ldr	r3, [r0, #0]
 800df9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9c:	4798      	blx	r3
 800df9e:	463a      	mov	r2, r7
 800dfa0:	4631      	mov	r1, r6
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7ff ff8b 	bl	800dec0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dfaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfac:	9004      	str	r0, [sp, #16]
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800dfb4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dfb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dfbc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800dfc0:	4b0e      	ldr	r3, [pc, #56]	; (800dffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800dfc8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800dfcc:	f7ff fca4 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800dfd0:	6803      	ldr	r3, [r0, #0]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	4798      	blx	r3
 800dfd6:	23ff      	movs	r3, #255	; 0xff
 800dfd8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800dfdc:	a903      	add	r1, sp, #12
 800dfde:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800dfe2:	6860      	ldr	r0, [r4, #4]
 800dfe4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800dfe8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800dfec:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800dff0:	6803      	ldr	r3, [r0, #0]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	4798      	blx	r3
 800dff6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dff8:	b00d      	add	sp, #52	; 0x34
 800dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffc:	2002490e 	.word	0x2002490e

0800e000 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e004:	b08c      	sub	sp, #48	; 0x30
 800e006:	461e      	mov	r6, r3
 800e008:	2300      	movs	r3, #0
 800e00a:	4604      	mov	r4, r0
 800e00c:	466d      	mov	r5, sp
 800e00e:	9306      	str	r3, [sp, #24]
 800e010:	6803      	ldr	r3, [r0, #0]
 800e012:	e885 0006 	stmia.w	r5, {r1, r2}
 800e016:	2501      	movs	r5, #1
 800e018:	f8bd 7000 	ldrh.w	r7, [sp]
 800e01c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e020:	9503      	str	r5, [sp, #12]
 800e022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e024:	4798      	blx	r3
 800e026:	4642      	mov	r2, r8
 800e028:	4639      	mov	r1, r7
 800e02a:	4603      	mov	r3, r0
 800e02c:	4620      	mov	r0, r4
 800e02e:	f7ff ff47 	bl	800dec0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e032:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e036:	9004      	str	r0, [sp, #16]
 800e038:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e03c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e040:	9607      	str	r6, [sp, #28]
 800e042:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e04e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e050:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e054:	f7ff fc60 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800e058:	6803      	ldr	r3, [r0, #0]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	4798      	blx	r3
 800e05e:	23ff      	movs	r3, #255	; 0xff
 800e060:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e064:	a903      	add	r1, sp, #12
 800e066:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e06a:	6860      	ldr	r0, [r4, #4]
 800e06c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e070:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e074:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e078:	6803      	ldr	r3, [r0, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	4798      	blx	r3
 800e07e:	4630      	mov	r0, r6
 800e080:	b00c      	add	sp, #48	; 0x30
 800e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e086:	bf00      	nop
 800e088:	2002490e 	.word	0x2002490e

0800e08c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08e:	b085      	sub	sp, #20
 800e090:	4605      	mov	r5, r0
 800e092:	ac02      	add	r4, sp, #8
 800e094:	e884 0006 	stmia.w	r4, {r1, r2}
 800e098:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e09c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e0a0:	f7ff fde6 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	463a      	mov	r2, r7
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f7ff ff08 	bl	800dec0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e0b0:	4a05      	ldr	r2, [pc, #20]	; (800e0c8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e0b2:	682b      	ldr	r3, [r5, #0]
 800e0b4:	8812      	ldrh	r2, [r2, #0]
 800e0b6:	9200      	str	r2, [sp, #0]
 800e0b8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	4628      	mov	r0, r5
 800e0be:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e0c2:	47b0      	blx	r6
 800e0c4:	b005      	add	sp, #20
 800e0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0c8:	2002490e 	.word	0x2002490e

0800e0cc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	b19b      	cbz	r3, 800e0fe <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e0d6:	2002      	movs	r0, #2
 800e0d8:	f7f2 fd04 	bl	8000ae4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e0e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800e0ee:	f7ff fdbf 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	462b      	mov	r3, r5
 800e0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0fc:	4718      	bx	r3
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}

0800e100 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e100:	b570      	push	{r4, r5, r6, lr}
 800e102:	4605      	mov	r5, r0
 800e104:	460c      	mov	r4, r1
 800e106:	2003      	movs	r0, #3
 800e108:	b149      	cbz	r1, 800e11e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e10a:	f7f2 fc8b 	bl	8000a24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e10e:	6928      	ldr	r0, [r5, #16]
 800e110:	b168      	cbz	r0, 800e12e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	2101      	movs	r1, #1
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e11c:	4718      	bx	r3
 800e11e:	f7f2 fcb1 	bl	8000a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e122:	6928      	ldr	r0, [r5, #16]
 800e124:	b118      	cbz	r0, 800e12e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e126:	6803      	ldr	r3, [r0, #0]
 800e128:	4621      	mov	r1, r4
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	e7f4      	b.n	800e118 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e12e:	bd70      	pop	{r4, r5, r6, pc}

0800e130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800e136:	4604      	mov	r4, r0
 800e138:	460d      	mov	r5, r1
 800e13a:	428b      	cmp	r3, r1
 800e13c:	d006      	beq.n	800e14c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e13e:	6803      	ldr	r3, [r0, #0]
 800e140:	b929      	cbnz	r1, 800e14e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e142:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e146:	4798      	blx	r3
 800e148:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800e14c:	bd38      	pop	{r3, r4, r5, pc}
 800e14e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e152:	e7f8      	b.n	800e146 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e154 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e154:	4b0d      	ldr	r3, [pc, #52]	; (800e18c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e156:	b510      	push	{r4, lr}
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	4604      	mov	r4, r0
 800e15c:	b95b      	cbnz	r3, 800e176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e15e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e162:	2b02      	cmp	r3, #2
 800e164:	d007      	beq.n	800e176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e166:	6840      	ldr	r0, [r0, #4]
 800e168:	f000 f912 	bl	800e390 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e16c:	b118      	cbz	r0, 800e176 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e16e:	6862      	ldr	r2, [r4, #4]
 800e170:	7a53      	ldrb	r3, [r2, #9]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0fc      	beq.n	800e170 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e176:	f7f3 fc83 	bl	8001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e17a:	4620      	mov	r0, r4
 800e17c:	2100      	movs	r1, #0
 800e17e:	f7ff ffd7 	bl	800e130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e182:	4620      	mov	r0, r4
 800e184:	f7ff fd74 	bl	800dc70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	bf00      	nop
 800e18c:	20024912 	.word	0x20024912

0800e190 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e190:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e194:	1a13      	subs	r3, r2, r0
 800e196:	4258      	negs	r0, r3
 800e198:	4158      	adcs	r0, r3
 800e19a:	4770      	bx	lr

0800e19c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e19c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e1a0:	1a9b      	subs	r3, r3, r2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	bfdc      	itt	le
 800e1a6:	6882      	ldrle	r2, [r0, #8]
 800e1a8:	189b      	addle	r3, r3, r2
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	bfcc      	ite	gt
 800e1ae:	2000      	movgt	r0, #0
 800e1b0:	2001      	movle	r0, #1
 800e1b2:	4770      	bx	lr

0800e1b4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e1b4:	6902      	ldr	r2, [r0, #16]
 800e1b6:	6843      	ldr	r3, [r0, #4]
 800e1b8:	2024      	movs	r0, #36	; 0x24
 800e1ba:	fb00 3002 	mla	r0, r0, r2, r3
 800e1be:	4770      	bx	lr

0800e1c0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e1c0:	6803      	ldr	r3, [r0, #0]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	4718      	bx	r3

0800e1c6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	7203      	strb	r3, [r0, #8]
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	6840      	ldr	r0, [r0, #4]
 800e1d0:	6803      	ldr	r3, [r0, #0]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	4798      	blx	r3
 800e1d6:	6803      	ldr	r3, [r0, #0]
 800e1d8:	4605      	mov	r5, r0
 800e1da:	2b40      	cmp	r3, #64	; 0x40
 800e1dc:	d00c      	beq.n	800e1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e1de:	d810      	bhi.n	800e202 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e1e0:	2b04      	cmp	r3, #4
 800e1e2:	d01d      	beq.n	800e220 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e1e4:	d804      	bhi.n	800e1f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d006      	beq.n	800e1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d02c      	beq.n	800e248 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}
 800e1f0:	2b08      	cmp	r3, #8
 800e1f2:	d01d      	beq.n	800e230 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e1f4:	2b20      	cmp	r3, #32
 800e1f6:	d1fa      	bne.n	800e1ee <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1fe:	4798      	blx	r3
 800e200:	e013      	b.n	800e22a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e206:	d0f7      	beq.n	800e1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e208:	d804      	bhi.n	800e214 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e20a:	2b80      	cmp	r3, #128	; 0x80
 800e20c:	d0f4      	beq.n	800e1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e212:	e7f0      	b.n	800e1f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e218:	d0ee      	beq.n	800e1f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e21a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e21e:	e7e5      	b.n	800e1ec <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	7f01      	ldrb	r1, [r0, #28]
 800e224:	4620      	mov	r0, r4
 800e226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e228:	4798      	blx	r3
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22e:	e006      	b.n	800e23e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	7f01      	ldrb	r1, [r0, #28]
 800e234:	4620      	mov	r0, r4
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	4798      	blx	r3
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	4629      	mov	r1, r5
 800e240:	4620      	mov	r0, r4
 800e242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e246:	4718      	bx	r3
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	4620      	mov	r0, r4
 800e24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24e:	4798      	blx	r3
 800e250:	e7f3      	b.n	800e23a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e252 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e252:	4770      	bx	lr

0800e254 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e254:	4770      	bx	lr

0800e256 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e256:	4770      	bx	lr

0800e258 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e258:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e25c:	b510      	push	{r4, lr}
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	2a00      	cmp	r2, #0
 800e262:	bfdc      	itt	le
 800e264:	6884      	ldrle	r4, [r0, #8]
 800e266:	1912      	addle	r2, r2, r4
 800e268:	2a01      	cmp	r2, #1
 800e26a:	dd16      	ble.n	800e29a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e26c:	6842      	ldr	r2, [r0, #4]
 800e26e:	2424      	movs	r4, #36	; 0x24
 800e270:	fb04 2303 	mla	r3, r4, r3, r2
 800e274:	f101 0220 	add.w	r2, r1, #32
 800e278:	f851 4b04 	ldr.w	r4, [r1], #4
 800e27c:	4291      	cmp	r1, r2
 800e27e:	f843 4b04 	str.w	r4, [r3], #4
 800e282:	d1f9      	bne.n	800e278 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e284:	780a      	ldrb	r2, [r1, #0]
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	68c3      	ldr	r3, [r0, #12]
 800e28a:	6882      	ldr	r2, [r0, #8]
 800e28c:	f3bf 8f5b 	dmb	ish
 800e290:	3301      	adds	r3, #1
 800e292:	429a      	cmp	r2, r3
 800e294:	bfd8      	it	le
 800e296:	1a9b      	suble	r3, r3, r2
 800e298:	60c3      	str	r3, [r0, #12]
 800e29a:	bd10      	pop	{r4, pc}

0800e29c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e29c:	6903      	ldr	r3, [r0, #16]
 800e29e:	6882      	ldr	r2, [r0, #8]
 800e2a0:	f3bf 8f5b 	dmb	ish
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	bfd8      	it	le
 800e2aa:	1a9b      	suble	r3, r3, r2
 800e2ac:	6103      	str	r3, [r0, #16]
 800e2ae:	4770      	bx	lr

0800e2b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	6860      	ldr	r0, [r4, #4]
 800e2b8:	6803      	ldr	r3, [r0, #0]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	4798      	blx	r3
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d1f9      	bne.n	800e2b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e2c2:	4d0d      	ldr	r5, [pc, #52]	; (800e2f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e2c4:	6828      	ldr	r0, [r5, #0]
 800e2c6:	6803      	ldr	r3, [r0, #0]
 800e2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ca:	4798      	blx	r3
 800e2cc:	f7f3 fbe6 	bl	8001a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e2d0:	6828      	ldr	r0, [r5, #0]
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	f7ff ff2c 	bl	800e130 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e2d8:	6860      	ldr	r0, [r4, #4]
 800e2da:	4631      	mov	r1, r6
 800e2dc:	6803      	ldr	r3, [r0, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	4798      	blx	r3
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e8:	4798      	blx	r3
 800e2ea:	6828      	ldr	r0, [r5, #0]
 800e2ec:	6803      	ldr	r3, [r0, #0]
 800e2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2f4:	4718      	bx	r3
 800e2f6:	bf00      	nop
 800e2f8:	20024914 	.word	0x20024914

0800e2fc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e2fc:	b508      	push	{r3, lr}
 800e2fe:	f7f3 fbbf 	bl	8001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e306:	f7f3 bbc3 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e30a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e30a:	b510      	push	{r4, lr}
 800e30c:	4604      	mov	r4, r0
 800e30e:	2114      	movs	r1, #20
 800e310:	f011 f889 	bl	801f426 <_ZdlPvj>
 800e314:	4620      	mov	r0, r4
 800e316:	bd10      	pop	{r4, pc}

0800e318 <_ZN8touchgfx13DMA_Interface5startEv>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	4604      	mov	r4, r0
 800e31c:	6840      	ldr	r0, [r0, #4]
 800e31e:	6803      	ldr	r3, [r0, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4798      	blx	r3
 800e324:	b948      	cbnz	r0, 800e33a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e326:	7a63      	ldrb	r3, [r4, #9]
 800e328:	b13b      	cbz	r3, 800e33a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e32a:	7a23      	ldrb	r3, [r4, #8]
 800e32c:	b92b      	cbnz	r3, 800e33a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	4620      	mov	r0, r4
 800e332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e338:	4718      	bx	r3
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	4604      	mov	r4, r0
 800e340:	6840      	ldr	r0, [r0, #4]
 800e342:	6803      	ldr	r3, [r0, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4798      	blx	r3
 800e348:	4605      	mov	r5, r0
 800e34a:	b930      	cbnz	r0, 800e35a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e34c:	7a23      	ldrb	r3, [r4, #8]
 800e34e:	b123      	cbz	r3, 800e35a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e350:	6860      	ldr	r0, [r4, #4]
 800e352:	6803      	ldr	r3, [r0, #0]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	4798      	blx	r3
 800e358:	7225      	strb	r5, [r4, #8]
 800e35a:	6860      	ldr	r0, [r4, #4]
 800e35c:	6803      	ldr	r3, [r0, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4798      	blx	r3
 800e362:	b928      	cbnz	r0, 800e370 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	4620      	mov	r0, r4
 800e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e36e:	4718      	bx	r3
 800e370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e374:	f7f3 bb9a 	b.w	8001aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e378 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e378:	b510      	push	{r4, lr}
 800e37a:	6082      	str	r2, [r0, #8]
 800e37c:	2200      	movs	r2, #0
 800e37e:	4c03      	ldr	r4, [pc, #12]	; (800e38c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e380:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e384:	e9c0 4100 	strd	r4, r1, [r0]
 800e388:	bd10      	pop	{r4, pc}
 800e38a:	bf00      	nop
 800e38c:	08023b9c 	.word	0x08023b9c

0800e390 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e390:	6840      	ldr	r0, [r0, #4]
 800e392:	6803      	ldr	r3, [r0, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4718      	bx	r3

0800e398 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800e398:	2000      	movs	r0, #0
 800e39a:	4770      	bx	lr

0800e39c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800e39c:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800e39e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	bf81      	itttt	hi
 800e3a6:	4b06      	ldrhi	r3, [pc, #24]	; (800e3c0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800e3a8:	681b      	ldrhi	r3, [r3, #0]
 800e3aa:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800e3ae:	7858      	ldrbhi	r0, [r3, #1]
 800e3b0:	bf8c      	ite	hi
 800e3b2:	f000 0003 	andhi.w	r0, r0, #3
 800e3b6:	2000      	movls	r0, #0
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	20024968 	.word	0x20024968
 800e3c0:	20024964 	.word	0x20024964

0800e3c4 <_ZN8touchgfx8TextAreaD1Ev>:
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800e3c8:	4b11      	ldr	r3, [pc, #68]	; (800e410 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800e3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	428b      	cmp	r3, r1
 800e3d6:	d918      	bls.n	800e40a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800e3d8:	6803      	ldr	r3, [r0, #0]
 800e3da:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800e3dc:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800e3de:	6818      	ldr	r0, [r3, #0]
 800e3e0:	f7f7 fa58 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ec:	4798      	blx	r3
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3f8:	4798      	blx	r3
 800e3fa:	463a      	mov	r2, r7
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4631      	mov	r1, r6
 800e400:	4620      	mov	r0, r4
 800e402:	46ac      	mov	ip, r5
 800e404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	4760      	bx	ip
 800e40a:	2000      	movs	r0, #0
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	20024968 	.word	0x20024968
 800e414:	20024970 	.word	0x20024970

0800e418 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800e418:	4b18      	ldr	r3, [pc, #96]	; (800e47c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800e41a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e41e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e420:	4604      	mov	r4, r0
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	428b      	cmp	r3, r1
 800e426:	d926      	bls.n	800e476 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800e428:	4b15      	ldr	r3, [pc, #84]	; (800e480 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e430:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e434:	4b13      	ldr	r3, [pc, #76]	; (800e484 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800e436:	7855      	ldrb	r5, [r2, #1]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800e43e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e442:	6833      	ldr	r3, [r6, #0]
 800e444:	69df      	ldr	r7, [r3, #28]
 800e446:	4b10      	ldr	r3, [pc, #64]	; (800e488 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	f7f7 fa23 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	4680      	mov	r8, r0
 800e452:	4620      	mov	r0, r4
 800e454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e456:	4798      	blx	r3
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	4681      	mov	r9, r0
 800e45c:	4620      	mov	r0, r4
 800e45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e462:	4798      	blx	r3
 800e464:	464b      	mov	r3, r9
 800e466:	9000      	str	r0, [sp, #0]
 800e468:	4642      	mov	r2, r8
 800e46a:	4629      	mov	r1, r5
 800e46c:	4630      	mov	r0, r6
 800e46e:	47b8      	blx	r7
 800e470:	b003      	add	sp, #12
 800e472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e476:	2000      	movs	r0, #0
 800e478:	e7fa      	b.n	800e470 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800e47a:	bf00      	nop
 800e47c:	20024968 	.word	0x20024968
 800e480:	20024964 	.word	0x20024964
 800e484:	2002496c 	.word	0x2002496c
 800e488:	20024970 	.word	0x20024970

0800e48c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800e48c:	b40e      	push	{r1, r2, r3}
 800e48e:	4b30      	ldr	r3, [pc, #192]	; (800e550 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e494:	881a      	ldrh	r2, [r3, #0]
 800e496:	b09d      	sub	sp, #116	; 0x74
 800e498:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e49a:	4604      	mov	r4, r0
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d954      	bls.n	800e54a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800e4a0:	aa26      	add	r2, sp, #152	; 0x98
 800e4a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800e554 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800e4a6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e558 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800e4aa:	9202      	str	r2, [sp, #8]
 800e4ac:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	4628      	mov	r0, r5
 800e4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c2:	4798      	blx	r3
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	b207      	sxth	r7, r0
 800e4c8:	a803      	add	r0, sp, #12
 800e4ca:	f003 fe29 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d4:	4798      	blx	r3
 800e4d6:	682b      	ldr	r3, [r5, #0]
 800e4d8:	4682      	mov	sl, r0
 800e4da:	4628      	mov	r0, r5
 800e4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4de:	4798      	blx	r3
 800e4e0:	4653      	mov	r3, sl
 800e4e2:	9000      	str	r0, [sp, #0]
 800e4e4:	a803      	add	r0, sp, #12
 800e4e6:	9a02      	ldr	r2, [sp, #8]
 800e4e8:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e4ea:	f003 fe74 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e4ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e4f0:	f8d9 3000 	ldr.w	r3, [r9]
 800e4f4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800e4f8:	8925      	ldrh	r5, [r4, #8]
 800e4fa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800e4fe:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800e502:	eba5 050c 	sub.w	r5, r5, ip
 800e506:	784a      	ldrb	r2, [r1, #1]
 800e508:	f8d8 3000 	ldr.w	r3, [r8]
 800e50c:	b22d      	sxth	r5, r5
 800e50e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800e512:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800e516:	9500      	str	r5, [sp, #0]
 800e518:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e51c:	a803      	add	r0, sp, #12
 800e51e:	f001 fce8 	bl	800fef2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800e522:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800e526:	b203      	sxth	r3, r0
 800e528:	18b9      	adds	r1, r7, r2
 800e52a:	2900      	cmp	r1, #0
 800e52c:	dd0b      	ble.n	800e546 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800e52e:	3b01      	subs	r3, #1
 800e530:	fb13 f302 	smulbb	r3, r3, r2
 800e534:	fb16 3300 	smlabb	r3, r6, r0, r3
 800e538:	b21f      	sxth	r7, r3
 800e53a:	4638      	mov	r0, r7
 800e53c:	b01d      	add	sp, #116	; 0x74
 800e53e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e542:	b003      	add	sp, #12
 800e544:	4770      	bx	lr
 800e546:	2b00      	cmp	r3, #0
 800e548:	dcf7      	bgt.n	800e53a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800e54a:	2700      	movs	r7, #0
 800e54c:	e7f5      	b.n	800e53a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800e54e:	bf00      	nop
 800e550:	20024968 	.word	0x20024968
 800e554:	20024964 	.word	0x20024964
 800e558:	2002496c 	.word	0x2002496c

0800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800e55c:	4bbc      	ldr	r3, [pc, #752]	; (800e850 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 800e55e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e562:	460c      	mov	r4, r1
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800e568:	b0a9      	sub	sp, #164	; 0xa4
 800e56a:	4681      	mov	r9, r0
 800e56c:	428b      	cmp	r3, r1
 800e56e:	d809      	bhi.n	800e584 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800e570:	2300      	movs	r3, #0
 800e572:	f04f 32ff 	mov.w	r2, #4294967295
 800e576:	6083      	str	r3, [r0, #8]
 800e578:	e9c0 3200 	strd	r3, r2, [r0]
 800e57c:	4648      	mov	r0, r9
 800e57e:	b029      	add	sp, #164	; 0xa4
 800e580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e584:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 800e858 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800e588:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 800e58c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800e85c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 800e590:	f8db 3000 	ldr.w	r3, [fp]
 800e594:	f8d8 0000 	ldr.w	r0, [r8]
 800e598:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800e59c:	4bad      	ldr	r3, [pc, #692]	; (800e854 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e5a4:	f7f7 f976 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e5a8:	4607      	mov	r7, r0
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b0:	4798      	blx	r3
 800e5b2:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 800e5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5b8:	4430      	add	r0, r6
 800e5ba:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 800e5be:	b283      	uxth	r3, r0
 800e5c0:	4650      	mov	r0, sl
 800e5c2:	9302      	str	r3, [sp, #8]
 800e5c4:	2e00      	cmp	r6, #0
 800e5c6:	f040 8090 	bne.w	800e6ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800e5ca:	f003 fda9 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800e5ce:	682b      	ldr	r3, [r5, #0]
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d4:	4798      	blx	r3
 800e5d6:	682b      	ldr	r3, [r5, #0]
 800e5d8:	9005      	str	r0, [sp, #20]
 800e5da:	4628      	mov	r0, r5
 800e5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5de:	4798      	blx	r3
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	4680      	mov	r8, r0
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e8:	4798      	blx	r3
 800e5ea:	6822      	ldr	r2, [r4, #0]
 800e5ec:	9004      	str	r0, [sp, #16]
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e5f4:	4790      	blx	r2
 800e5f6:	9905      	ldr	r1, [sp, #20]
 800e5f8:	9b04      	ldr	r3, [sp, #16]
 800e5fa:	460a      	mov	r2, r1
 800e5fc:	4639      	mov	r1, r7
 800e5fe:	4637      	mov	r7, r6
 800e600:	9001      	str	r0, [sp, #4]
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	4650      	mov	r0, sl
 800e606:	4643      	mov	r3, r8
 800e608:	f003 fdfa 	bl	8012200 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800e60c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e60e:	4629      	mov	r1, r5
 800e610:	f8db 3000 	ldr.w	r3, [fp]
 800e614:	4650      	mov	r0, sl
 800e616:	3601      	adds	r6, #1
 800e618:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e61c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e620:	b2b6      	uxth	r6, r6
 800e622:	785b      	ldrb	r3, [r3, #1]
 800e624:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e628:	f001 f9b4 	bl	800f994 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800e62c:	4287      	cmp	r7, r0
 800e62e:	bfb8      	it	lt
 800e630:	b207      	sxthlt	r7, r0
 800e632:	4650      	mov	r0, sl
 800e634:	f003 fd9b 	bl	801216e <_ZN8touchgfx12TextProvider11endOfStringEv>
 800e638:	2800      	cmp	r0, #0
 800e63a:	d0e7      	beq.n	800e60c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 800e63c:	9b02      	ldr	r3, [sp, #8]
 800e63e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 800e642:	fb13 f606 	smulbb	r6, r3, r6
 800e646:	eba6 0608 	sub.w	r6, r6, r8
 800e64a:	b2b6      	uxth	r6, r6
 800e64c:	fa0f f886 	sxth.w	r8, r6
 800e650:	f1b8 0f00 	cmp.w	r8, #0
 800e654:	dd06      	ble.n	800e664 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 800e656:	682b      	ldr	r3, [r5, #0]
 800e658:	4628      	mov	r0, r5
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	4798      	blx	r3
 800e65e:	4430      	add	r0, r6
 800e660:	fa0f f880 	sxth.w	r8, r0
 800e664:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e668:	4620      	mov	r0, r4
 800e66a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e672:	bf0c      	ite	eq
 800e674:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 800e678:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 800e67c:	4798      	blx	r3
 800e67e:	2801      	cmp	r0, #1
 800e680:	b2ba      	uxth	r2, r7
 800e682:	f000 80d2 	beq.w	800e82a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 800e686:	2802      	cmp	r0, #2
 800e688:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800e68c:	f000 80d3 	beq.w	800e836 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 800e690:	b21e      	sxth	r6, r3
 800e692:	7a29      	ldrb	r1, [r5, #8]
 800e694:	7a6d      	ldrb	r5, [r5, #9]
 800e696:	1a76      	subs	r6, r6, r1
 800e698:	4429      	add	r1, r5
 800e69a:	b2b3      	uxth	r3, r6
 800e69c:	440a      	add	r2, r1
 800e69e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800e6a2:	b21f      	sxth	r7, r3
 800e6a4:	b292      	uxth	r2, r2
 800e6a6:	2902      	cmp	r1, #2
 800e6a8:	b216      	sxth	r6, r2
 800e6aa:	f000 80c7 	beq.w	800e83c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 800e6ae:	2903      	cmp	r1, #3
 800e6b0:	f000 80d6 	beq.w	800e860 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 800e6b4:	2901      	cmp	r1, #1
 800e6b6:	f040 80dc 	bne.w	800e872 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 800e6ba:	8923      	ldrh	r3, [r4, #8]
 800e6bc:	4632      	mov	r2, r6
 800e6be:	463d      	mov	r5, r7
 800e6c0:	4646      	mov	r6, r8
 800e6c2:	eba3 0308 	sub.w	r3, r3, r8
 800e6c6:	4690      	mov	r8, r2
 800e6c8:	b21f      	sxth	r7, r3
 800e6ca:	9b03      	ldr	r3, [sp, #12]
 800e6cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e6ce:	6818      	ldr	r0, [r3, #0]
 800e6d0:	f7f7 f8e0 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e6d4:	f8a9 7000 	strh.w	r7, [r9]
 800e6d8:	f8a9 5002 	strh.w	r5, [r9, #2]
 800e6dc:	f8a9 6004 	strh.w	r6, [r9, #4]
 800e6e0:	f8a9 8006 	strh.w	r8, [r9, #6]
 800e6e4:	f8c9 0008 	str.w	r0, [r9, #8]
 800e6e8:	e748      	b.n	800e57c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800e6ea:	f003 fd19 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800e6ee:	682b      	ldr	r3, [r5, #0]
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6f4:	4798      	blx	r3
 800e6f6:	682b      	ldr	r3, [r5, #0]
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6fe:	4798      	blx	r3
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	4680      	mov	r8, r0
 800e704:	4620      	mov	r0, r4
 800e706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e708:	4798      	blx	r3
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	9004      	str	r0, [sp, #16]
 800e70e:	4620      	mov	r0, r4
 800e710:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e714:	4790      	blx	r2
 800e716:	9b04      	ldr	r3, [sp, #16]
 800e718:	4632      	mov	r2, r6
 800e71a:	9001      	str	r0, [sp, #4]
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	4639      	mov	r1, r7
 800e720:	4643      	mov	r3, r8
 800e722:	4650      	mov	r0, sl
 800e724:	f003 fd6c 	bl	8012200 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800e728:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e72c:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 800e730:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e734:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e738:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e73a:	bf0a      	itet	eq
 800e73c:	4642      	moveq	r2, r8
 800e73e:	461a      	movne	r2, r3
 800e740:	4698      	moveq	r8, r3
 800e742:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800e746:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	f8db 3000 	ldr.w	r3, [fp]
 800e750:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800e754:	7859      	ldrb	r1, [r3, #1]
 800e756:	2300      	movs	r3, #0
 800e758:	f8cd a020 	str.w	sl, [sp, #32]
 800e75c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800e760:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e764:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800e768:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800e76c:	950a      	str	r5, [sp, #40]	; 0x28
 800e76e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e772:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e776:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800e77a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800e77e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e782:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e786:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800e78a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800e78e:	b350      	cbz	r0, 800e7e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	4628      	mov	r0, r5
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	4798      	blx	r3
 800e798:	4607      	mov	r7, r0
 800e79a:	b320      	cbz	r0, 800e7e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 800e79c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e79e:	4639      	mov	r1, r7
 800e7a0:	6803      	ldr	r3, [r0, #0]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4798      	blx	r3
 800e7a6:	4606      	mov	r6, r0
 800e7a8:	b1e8      	cbz	r0, 800e7e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 800e7aa:	7b43      	ldrb	r3, [r0, #13]
 800e7ac:	7a82      	ldrb	r2, [r0, #10]
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800e7ba:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e7be:	2b04      	cmp	r3, #4
 800e7c0:	d111      	bne.n	800e7e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 800e7c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	4639      	mov	r1, r7
 800e7c8:	6803      	ldr	r3, [r0, #0]
 800e7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7cc:	4798      	blx	r3
 800e7ce:	7b73      	ldrb	r3, [r6, #13]
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800e7d6:	7ab3      	ldrb	r3, [r6, #10]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	4418      	add	r0, r3
 800e7dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e7e0:	4418      	add	r0, r3
 800e7e2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800e7e6:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 800e7ea:	2600      	movs	r6, #0
 800e7ec:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800e7f0:	4637      	mov	r7, r6
 800e7f2:	45c3      	cmp	fp, r8
 800e7f4:	a807      	add	r0, sp, #28
 800e7f6:	f106 0601 	add.w	r6, r6, #1
 800e7fa:	bfd4      	ite	le
 800e7fc:	2100      	movle	r1, #0
 800e7fe:	2101      	movgt	r1, #1
 800e800:	f001 faa8 	bl	800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800e804:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800e808:	b2b6      	uxth	r6, r6
 800e80a:	429f      	cmp	r7, r3
 800e80c:	bfb8      	it	lt
 800e80e:	b21f      	sxthlt	r7, r3
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	eba8 0803 	sub.w	r8, r8, r3
 800e816:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800e81a:	fa0f f888 	sxth.w	r8, r8
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f43f af0c 	beq.w	800e63c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 800e824:	45c2      	cmp	sl, r8
 800e826:	dbe4      	blt.n	800e7f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 800e828:	e708      	b.n	800e63c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 800e82a:	1bf6      	subs	r6, r6, r7
 800e82c:	2702      	movs	r7, #2
 800e82e:	fb96 f6f7 	sdiv	r6, r6, r7
 800e832:	b236      	sxth	r6, r6
 800e834:	e72d      	b.n	800e692 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 800e836:	4413      	add	r3, r2
 800e838:	1af6      	subs	r6, r6, r3
 800e83a:	e7fa      	b.n	800e832 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 800e83c:	8925      	ldrh	r5, [r4, #8]
 800e83e:	1aad      	subs	r5, r5, r2
 800e840:	1aed      	subs	r5, r5, r3
 800e842:	b22f      	sxth	r7, r5
 800e844:	8965      	ldrh	r5, [r4, #10]
 800e846:	eba5 0508 	sub.w	r5, r5, r8
 800e84a:	b22d      	sxth	r5, r5
 800e84c:	e73d      	b.n	800e6ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 800e84e:	bf00      	nop
 800e850:	20024968 	.word	0x20024968
 800e854:	2002496c 	.word	0x2002496c
 800e858:	20024964 	.word	0x20024964
 800e85c:	20024970 	.word	0x20024970
 800e860:	8965      	ldrh	r5, [r4, #10]
 800e862:	2700      	movs	r7, #0
 800e864:	1aad      	subs	r5, r5, r2
 800e866:	1aed      	subs	r5, r5, r3
 800e868:	4633      	mov	r3, r6
 800e86a:	4646      	mov	r6, r8
 800e86c:	b22d      	sxth	r5, r5
 800e86e:	4698      	mov	r8, r3
 800e870:	e72b      	b.n	800e6ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 800e872:	2500      	movs	r5, #0
 800e874:	e729      	b.n	800e6ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 800e876:	bf00      	nop

0800e878 <_ZN8touchgfx8TextAreaD0Ev>:
 800e878:	b510      	push	{r4, lr}
 800e87a:	4604      	mov	r4, r0
 800e87c:	2148      	movs	r1, #72	; 0x48
 800e87e:	f010 fdd2 	bl	801f426 <_ZdlPvj>
 800e882:	4620      	mov	r0, r4
 800e884:	bd10      	pop	{r4, pc}
	...

0800e888 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800e888:	b513      	push	{r0, r1, r4, lr}
 800e88a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800e88e:	4604      	mov	r4, r0
 800e890:	b1fb      	cbz	r3, 800e8d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800e892:	4b16      	ldr	r3, [pc, #88]	; (800e8ec <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800e894:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e896:	881b      	ldrh	r3, [r3, #0]
 800e898:	428b      	cmp	r3, r1
 800e89a:	d91a      	bls.n	800e8d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800e89c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dd16      	ble.n	800e8d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800e8a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	dd12      	ble.n	800e8d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800e8ac:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800e8ae:	6818      	ldr	r0, [r3, #0]
 800e8b0:	f7f6 fff0 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e8b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	db06      	blt.n	800e8cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800e8be:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	db02      	blt.n	800e8cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800e8c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8c8:	4298      	cmp	r0, r3
 800e8ca:	d004      	beq.n	800e8d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800e8cc:	6953      	ldr	r3, [r2, #20]
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4798      	blx	r3
 800e8d2:	b002      	add	sp, #8
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800e8da:	466b      	mov	r3, sp
 800e8dc:	6912      	ldr	r2, [r2, #16]
 800e8de:	c903      	ldmia	r1, {r0, r1}
 800e8e0:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4790      	blx	r2
 800e8ea:	e7f2      	b.n	800e8d2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800e8ec:	20024968 	.word	0x20024968
 800e8f0:	20024970 	.word	0x20024970

0800e8f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800e8f4:	4b45      	ldr	r3, [pc, #276]	; (800ea0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800e8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e8fc:	b08e      	sub	sp, #56	; 0x38
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	4604      	mov	r4, r0
 800e902:	4293      	cmp	r3, r2
 800e904:	d97e      	bls.n	800ea04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800e906:	6808      	ldr	r0, [r1, #0]
 800e908:	ab05      	add	r3, sp, #20
 800e90a:	6849      	ldr	r1, [r1, #4]
 800e90c:	4d40      	ldr	r5, [pc, #256]	; (800ea10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800e90e:	c303      	stmia	r3!, {r0, r1}
 800e910:	4611      	mov	r1, r2
 800e912:	6828      	ldr	r0, [r5, #0]
 800e914:	f7f6 ffbe 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e918:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	db11      	blt.n	800e944 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800e920:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800e924:	2b00      	cmp	r3, #0
 800e926:	db0d      	blt.n	800e944 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800e928:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e92a:	4298      	cmp	r0, r3
 800e92c:	d10a      	bne.n	800e944 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800e92e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800e932:	ab09      	add	r3, sp, #36	; 0x24
 800e934:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e938:	e883 0003 	stmia.w	r3, {r0, r1}
 800e93c:	4619      	mov	r1, r3
 800e93e:	a805      	add	r0, sp, #20
 800e940:	f7fe fd1c 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800e944:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	dd5b      	ble.n	800ea04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800e94c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800e950:	2b00      	cmp	r3, #0
 800e952:	dd57      	ble.n	800ea04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800e954:	4f2f      	ldr	r7, [pc, #188]	; (800ea14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800e956:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800e95e:	4b2e      	ldr	r3, [pc, #184]	; (800ea18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e966:	2e00      	cmp	r6, #0
 800e968:	d04c      	beq.n	800ea04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	4620      	mov	r0, r4
 800e96e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 800e972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e974:	4798      	blx	r3
 800e976:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 800e97e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e982:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 800e986:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 800e990:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e994:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e996:	9609      	str	r6, [sp, #36]	; 0x24
 800e998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e99c:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800e99e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 800e9a8:	910b      	str	r1, [sp, #44]	; 0x2c
 800e9aa:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 800e9ae:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 800e9b2:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 800e9b6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800e9ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e9be:	b10a      	cbz	r2, 800e9c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800e9c0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800e9c2:	b906      	cbnz	r6, 800e9c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800e9c4:	689e      	ldr	r6, [r3, #8]
 800e9c6:	af07      	add	r7, sp, #28
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	f002 fff0 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e9d0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e9d2:	6828      	ldr	r0, [r5, #0]
 800e9d4:	f7f6 ff5e 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800e9d8:	6823      	ldr	r3, [r4, #0]
 800e9da:	4605      	mov	r5, r0
 800e9dc:	4620      	mov	r0, r4
 800e9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e0:	4798      	blx	r3
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ec:	4798      	blx	r3
 800e9ee:	ab09      	add	r3, sp, #36	; 0x24
 800e9f0:	9501      	str	r5, [sp, #4]
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	ab05      	add	r3, sp, #20
 800e9f6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	e897 0006 	ldmia.w	r7, {r1, r2}
 800ea00:	f7f6 fefa 	bl	80057f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ea04:	b00e      	add	sp, #56	; 0x38
 800ea06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20024968 	.word	0x20024968
 800ea10:	20024970 	.word	0x20024970
 800ea14:	20024964 	.word	0x20024964
 800ea18:	2002496c 	.word	0x2002496c
 800ea1c:	20024914 	.word	0x20024914

0800ea20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4b0e      	ldr	r3, [pc, #56]	; (800ea5c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800ea24:	4604      	mov	r4, r0
 800ea26:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d214      	bcs.n	800ea58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800ea2e:	6803      	ldr	r3, [r0, #0]
 800ea30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea32:	4798      	blx	r3
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	4605      	mov	r5, r0
 800ea38:	4620      	mov	r0, r4
 800ea3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea3c:	4798      	blx	r3
 800ea3e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ea42:	b22d      	sxth	r5, r5
 800ea44:	4601      	mov	r1, r0
 800ea46:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800ea4a:	bf06      	itte	eq
 800ea4c:	4602      	moveq	r2, r0
 800ea4e:	4629      	moveq	r1, r5
 800ea50:	462a      	movne	r2, r5
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7f6 f82c 	bl	8004ab0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20024968 	.word	0x20024968

0800ea60 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800ea60:	b530      	push	{r4, r5, lr}
 800ea62:	888b      	ldrh	r3, [r1, #4]
 800ea64:	b085      	sub	sp, #20
 800ea66:	4604      	mov	r4, r0
 800ea68:	8583      	strh	r3, [r0, #44]	; 0x2c
 800ea6a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ea6e:	b923      	cbnz	r3, 800ea7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ea70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ea74:	b90b      	cbnz	r3, 800ea7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ea76:	f7ff ffd3 	bl	800ea20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	466d      	mov	r5, sp
 800ea7e:	4621      	mov	r1, r4
 800ea80:	343c      	adds	r4, #60	; 0x3c
 800ea82:	4628      	mov	r0, r5
 800ea84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea88:	4798      	blx	r3
 800ea8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ea8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ea92:	b005      	add	sp, #20
 800ea94:	bd30      	pop	{r4, r5, pc}

0800ea96 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ea96:	2300      	movs	r3, #0
 800ea98:	8083      	strh	r3, [r0, #4]
 800ea9a:	80c3      	strh	r3, [r0, #6]
 800ea9c:	8003      	strh	r3, [r0, #0]
 800ea9e:	8043      	strh	r3, [r0, #2]
 800eaa0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800eaa4:	2bff      	cmp	r3, #255	; 0xff
 800eaa6:	bf01      	itttt	eq
 800eaa8:	890b      	ldrheq	r3, [r1, #8]
 800eaaa:	8083      	strheq	r3, [r0, #4]
 800eaac:	894b      	ldrheq	r3, [r1, #10]
 800eaae:	80c3      	strheq	r3, [r0, #6]
 800eab0:	4770      	bx	lr
	...

0800eab4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800eab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eab6:	4604      	mov	r4, r0
 800eab8:	466b      	mov	r3, sp
 800eaba:	6808      	ldr	r0, [r1, #0]
 800eabc:	6849      	ldr	r1, [r1, #4]
 800eabe:	c303      	stmia	r3!, {r0, r1}
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	4669      	mov	r1, sp
 800eac4:	4620      	mov	r0, r4
 800eac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac8:	4798      	blx	r3
 800eaca:	4b08      	ldr	r3, [pc, #32]	; (800eaec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ead2:	b10a      	cbz	r2, 800ead8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800ead4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ead6:	b900      	cbnz	r0, 800eada <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800ead8:	6898      	ldr	r0, [r3, #8]
 800eada:	6803      	ldr	r3, [r0, #0]
 800eadc:	4669      	mov	r1, sp
 800eade:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eae0:	6a1d      	ldr	r5, [r3, #32]
 800eae2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800eae6:	47a8      	blx	r5
 800eae8:	b003      	add	sp, #12
 800eaea:	bd30      	pop	{r4, r5, pc}
 800eaec:	20024914 	.word	0x20024914

0800eaf0 <_ZN8touchgfx3BoxD1Ev>:
 800eaf0:	4770      	bx	lr

0800eaf2 <_ZN8touchgfx3BoxD0Ev>:
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	212c      	movs	r1, #44	; 0x2c
 800eaf8:	f010 fc95 	bl	801f426 <_ZdlPvj>
 800eafc:	4620      	mov	r0, r4
 800eafe:	bd10      	pop	{r4, pc}

0800eb00 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800eb00:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800eb04:	b12a      	cbz	r2, 800eb12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800eb06:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800eb0a:	b112      	cbz	r2, 800eb12 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800eb0c:	6803      	ldr	r3, [r0, #0]
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	4718      	bx	r3
 800eb12:	4770      	bx	lr

0800eb14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800eb14:	4b30      	ldr	r3, [pc, #192]	; (800ebd8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800eb16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb1a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800eb1c:	b08d      	sub	sp, #52	; 0x34
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	4604      	mov	r4, r0
 800eb22:	460f      	mov	r7, r1
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d954      	bls.n	800ebd2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800eb28:	4b2c      	ldr	r3, [pc, #176]	; (800ebdc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800eb2a:	6819      	ldr	r1, [r3, #0]
 800eb2c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800eb30:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800eb34:	4a2a      	ldr	r2, [pc, #168]	; (800ebe0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800eb36:	6812      	ldr	r2, [r2, #0]
 800eb38:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	d048      	beq.n	800ebd2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800eb40:	785a      	ldrb	r2, [r3, #1]
 800eb42:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800eb46:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800eb4a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800eb4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800eb52:	4b24      	ldr	r3, [pc, #144]	; (800ebe4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800eb54:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 800eb5e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 800eb62:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 800eb66:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800eb68:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800eb6c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 800eb70:	9107      	str	r1, [sp, #28]
 800eb72:	f88d 8020 	strb.w	r8, [sp, #32]
 800eb76:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 800eb7a:	9609      	str	r6, [sp, #36]	; 0x24
 800eb7c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 800eb80:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800eb84:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 800eb88:	b10b      	cbz	r3, 800eb8e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800eb8a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800eb8c:	b905      	cbnz	r5, 800eb90 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800eb8e:	6895      	ldr	r5, [r2, #8]
 800eb90:	ae05      	add	r6, sp, #20
 800eb92:	4621      	mov	r1, r4
 800eb94:	4630      	mov	r0, r6
 800eb96:	f002 ff0b 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eb9a:	4b13      	ldr	r3, [pc, #76]	; (800ebe8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800eb9c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800eb9e:	6818      	ldr	r0, [r3, #0]
 800eba0:	f7f6 fe78 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	4680      	mov	r8, r0
 800eba8:	4620      	mov	r0, r4
 800ebaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebac:	4798      	blx	r3
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	4681      	mov	r9, r0
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebb8:	4798      	blx	r3
 800ebba:	ab07      	add	r3, sp, #28
 800ebbc:	f8cd 8004 	str.w	r8, [sp, #4]
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800ebc8:	4628      	mov	r0, r5
 800ebca:	e896 0006 	ldmia.w	r6, {r1, r2}
 800ebce:	f7f6 fe13 	bl	80057f8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ebd2:	b00d      	add	sp, #52	; 0x34
 800ebd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd8:	20024968 	.word	0x20024968
 800ebdc:	20024964 	.word	0x20024964
 800ebe0:	2002496c 	.word	0x2002496c
 800ebe4:	20024914 	.word	0x20024914
 800ebe8:	20024970 	.word	0x20024970

0800ebec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 800ebec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800ebf4:	b0a0      	sub	sp, #128	; 0x80
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	b193      	cbz	r3, 800ec20 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 800ebfa:	4b30      	ldr	r3, [pc, #192]	; (800ecbc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 800ebfc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	428b      	cmp	r3, r1
 800ec02:	d90d      	bls.n	800ec20 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 800ec04:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dd09      	ble.n	800ec20 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 800ec0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	dd05      	ble.n	800ec20 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 800ec14:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ec18:	b12b      	cbz	r3, 800ec26 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 800ec1a:	6803      	ldr	r3, [r0, #0]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	4798      	blx	r3
 800ec20:	b020      	add	sp, #128	; 0x80
 800ec22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec26:	4b26      	ldr	r3, [pc, #152]	; (800ecc0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800ec2e:	4b25      	ldr	r3, [pc, #148]	; (800ecc4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ec36:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 800ec38:	6818      	ldr	r0, [r3, #0]
 800ec3a:	f7f6 fe2b 	bl	8005894 <_ZNK8touchgfx5Texts7getTextEt>
 800ec3e:	4606      	mov	r6, r0
 800ec40:	a807      	add	r0, sp, #28
 800ec42:	f003 fa6d 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800ec46:	682b      	ldr	r3, [r5, #0]
 800ec48:	4628      	mov	r0, r5
 800ec4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec4c:	4798      	blx	r3
 800ec4e:	682b      	ldr	r3, [r5, #0]
 800ec50:	4607      	mov	r7, r0
 800ec52:	4628      	mov	r0, r5
 800ec54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec56:	4798      	blx	r3
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec60:	4798      	blx	r3
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	4680      	mov	r8, r0
 800ec66:	4620      	mov	r0, r4
 800ec68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec6c:	4798      	blx	r3
 800ec6e:	462b      	mov	r3, r5
 800ec70:	463a      	mov	r2, r7
 800ec72:	4631      	mov	r1, r6
 800ec74:	e9cd 8000 	strd	r8, r0, [sp]
 800ec78:	a807      	add	r0, sp, #28
 800ec7a:	f003 fac1 	bl	8012200 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800ec7e:	a807      	add	r0, sp, #28
 800ec80:	f003 fe7a 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ec84:	280a      	cmp	r0, #10
 800ec86:	d103      	bne.n	800ec90 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	e7c6      	b.n	800ec1e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 800ec90:	a807      	add	r0, sp, #28
 800ec92:	f003 fe71 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d1f4      	bne.n	800ec84 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 800ec9a:	ad04      	add	r5, sp, #16
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f7ff fc5c 	bl	800e55c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800eca4:	ab02      	add	r3, sp, #8
 800eca6:	6822      	ldr	r2, [r4, #0]
 800eca8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ecac:	6912      	ldr	r2, [r2, #16]
 800ecae:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	4790      	blx	r2
 800ecb8:	e7b2      	b.n	800ec20 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 800ecba:	bf00      	nop
 800ecbc:	20024968 	.word	0x20024968
 800ecc0:	20024964 	.word	0x20024964
 800ecc4:	2002496c 	.word	0x2002496c
 800ecc8:	20024970 	.word	0x20024970

0800eccc <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800eccc:	4770      	bx	lr

0800ecce <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2134      	movs	r1, #52	; 0x34
 800ecd4:	f010 fba7 	bl	801f426 <_ZdlPvj>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	bd10      	pop	{r4, pc}

0800ecdc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800ece2:	4604      	mov	r4, r0
 800ece4:	460e      	mov	r6, r1
 800ece6:	b08e      	sub	sp, #56	; 0x38
 800ece8:	b218      	sxth	r0, r3
 800ecea:	8921      	ldrh	r1, [r4, #8]
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	8962      	ldrh	r2, [r4, #10]
 800ecf0:	f8ad 0000 	strh.w	r0, [sp]
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f8ad 0002 	strh.w	r0, [sp, #2]
 800ecfa:	1ac9      	subs	r1, r1, r3
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	b209      	sxth	r1, r1
 800ed00:	b21b      	sxth	r3, r3
 800ed02:	2900      	cmp	r1, #0
 800ed04:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ed08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ed0c:	dd5e      	ble.n	800edcc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dd5c      	ble.n	800edcc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800ed12:	6830      	ldr	r0, [r6, #0]
 800ed14:	ab02      	add	r3, sp, #8
 800ed16:	6871      	ldr	r1, [r6, #4]
 800ed18:	c303      	stmia	r3!, {r0, r1}
 800ed1a:	4669      	mov	r1, sp
 800ed1c:	a802      	add	r0, sp, #8
 800ed1e:	f7fe fb2d 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800ed22:	4620      	mov	r0, r4
 800ed24:	a902      	add	r1, sp, #8
 800ed26:	f7ff fec5 	bl	800eab4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800ed2a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d05f      	beq.n	800edf0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800ed30:	8963      	ldrh	r3, [r4, #10]
 800ed32:	b202      	sxth	r2, r0
 800ed34:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800ed38:	2500      	movs	r5, #0
 800ed3a:	1a1f      	subs	r7, r3, r0
 800ed3c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800ed40:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ed44:	b21b      	sxth	r3, r3
 800ed46:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800ed4a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800ed4e:	af04      	add	r7, sp, #16
 800ed50:	1a09      	subs	r1, r1, r0
 800ed52:	9506      	str	r5, [sp, #24]
 800ed54:	f8ad 201e 	strh.w	r2, [sp, #30]
 800ed58:	f8ad 5020 	strh.w	r5, [sp, #32]
 800ed5c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800ed60:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800ed64:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800ed68:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800ed6c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800ed70:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800ed74:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800ed78:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800ed7c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800ed80:	ab06      	add	r3, sp, #24
 800ed82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ed86:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed8a:	e887 0003 	stmia.w	r7, {r0, r1}
 800ed8e:	4631      	mov	r1, r6
 800ed90:	4638      	mov	r0, r7
 800ed92:	f7fe faf3 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800ed96:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	dd12      	ble.n	800edc4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800ed9e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dd0e      	ble.n	800edc4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	4639      	mov	r1, r7
 800edaa:	4620      	mov	r0, r4
 800edac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edae:	4798      	blx	r3
 800edb0:	f7fe fdb2 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800edb4:	6803      	ldr	r3, [r0, #0]
 800edb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800edb8:	4639      	mov	r1, r7
 800edba:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800edbe:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800edc2:	47c0      	blx	r8
 800edc4:	3501      	adds	r5, #1
 800edc6:	2d04      	cmp	r5, #4
 800edc8:	d1da      	bne.n	800ed80 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800edca:	e011      	b.n	800edf0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800edcc:	6830      	ldr	r0, [r6, #0]
 800edce:	ab06      	add	r3, sp, #24
 800edd0:	6871      	ldr	r1, [r6, #4]
 800edd2:	c303      	stmia	r3!, {r0, r1}
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	a906      	add	r1, sp, #24
 800edd8:	4620      	mov	r0, r4
 800edda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eddc:	4798      	blx	r3
 800edde:	f7fe fd9b 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 800ede2:	6803      	ldr	r3, [r0, #0]
 800ede4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ede6:	a906      	add	r1, sp, #24
 800ede8:	6a1d      	ldr	r5, [r3, #32]
 800edea:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800edee:	47a8      	blx	r5
 800edf0:	b00e      	add	sp, #56	; 0x38
 800edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edf6 <_ZN8touchgfx5ImageD1Ev>:
 800edf6:	4770      	bx	lr

0800edf8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800edf8:	b570      	push	{r4, r5, r6, lr}
 800edfa:	880b      	ldrh	r3, [r1, #0]
 800edfc:	460d      	mov	r5, r1
 800edfe:	4604      	mov	r4, r0
 800ee00:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ee02:	4608      	mov	r0, r1
 800ee04:	f004 fd2c 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ee08:	4606      	mov	r6, r0
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	f004 fd5c 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ee10:	6823      	ldr	r3, [r4, #0]
 800ee12:	4605      	mov	r5, r0
 800ee14:	4631      	mov	r1, r6
 800ee16:	4620      	mov	r0, r4
 800ee18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1a:	4798      	blx	r3
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	4629      	mov	r1, r5
 800ee20:	4620      	mov	r0, r4
 800ee22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee28:	4718      	bx	r3

0800ee2a <_ZN8touchgfx5ImageD0Ev>:
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	212c      	movs	r1, #44	; 0x2c
 800ee30:	f010 faf9 	bl	801f426 <_ZdlPvj>
 800ee34:	4620      	mov	r0, r4
 800ee36:	bd10      	pop	{r4, pc}

0800ee38 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800ee3e:	4604      	mov	r4, r0
 800ee40:	2bff      	cmp	r3, #255	; 0xff
 800ee42:	d006      	beq.n	800ee52 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800ee44:	2300      	movs	r3, #0
 800ee46:	8003      	strh	r3, [r0, #0]
 800ee48:	8043      	strh	r3, [r0, #2]
 800ee4a:	8083      	strh	r3, [r0, #4]
 800ee4c:	80c3      	strh	r3, [r0, #6]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	bd10      	pop	{r4, pc}
 800ee52:	3126      	adds	r1, #38	; 0x26
 800ee54:	f004 fd6c 	bl	8013930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ee58:	e7f9      	b.n	800ee4e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800ee5a <_ZNK8touchgfx5Image17invalidateContentEv>:
 800ee5a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800ee5e:	b12a      	cbz	r2, 800ee6c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800ee60:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800ee64:	b112      	cbz	r2, 800ee6c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	695b      	ldr	r3, [r3, #20]
 800ee6a:	4718      	bx	r3
 800ee6c:	4770      	bx	lr
	...

0800ee70 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	4604      	mov	r4, r0
 800ee76:	b088      	sub	sp, #32
 800ee78:	2500      	movs	r5, #0
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	f854 3b26 	ldr.w	r3, [r4], #38
 800ee80:	a904      	add	r1, sp, #16
 800ee82:	4606      	mov	r6, r0
 800ee84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee8a:	4798      	blx	r3
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f004 fce7 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ee92:	4680      	mov	r8, r0
 800ee94:	4620      	mov	r0, r4
 800ee96:	f004 fd17 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ee9a:	9506      	str	r5, [sp, #24]
 800ee9c:	ad06      	add	r5, sp, #24
 800ee9e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800eea2:	4639      	mov	r1, r7
 800eea4:	f8ad 801c 	strh.w	r8, [sp, #28]
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7fe fa67 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 800eeae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	dd19      	ble.n	800eeea <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eeb6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	dd15      	ble.n	800eeea <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800eebe:	4b0c      	ldr	r3, [pc, #48]	; (800eef0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800eec6:	b10a      	cbz	r2, 800eecc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800eec8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eeca:	b900      	cbnz	r0, 800eece <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800eecc:	6898      	ldr	r0, [r3, #8]
 800eece:	2701      	movs	r7, #1
 800eed0:	6801      	ldr	r1, [r0, #0]
 800eed2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800eed6:	9702      	str	r7, [sp, #8]
 800eed8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800eedc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800eee0:	e9cd 5600 	strd	r5, r6, [sp]
 800eee4:	688d      	ldr	r5, [r1, #8]
 800eee6:	4621      	mov	r1, r4
 800eee8:	47a8      	blx	r5
 800eeea:	b008      	add	sp, #32
 800eeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef0:	20024914 	.word	0x20024914

0800eef4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	6803      	ldr	r3, [r0, #0]
 800eef8:	460c      	mov	r4, r1
 800eefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefc:	4798      	blx	r3
 800eefe:	1b03      	subs	r3, r0, r4
 800ef00:	4258      	negs	r0, r3
 800ef02:	4158      	adcs	r0, r3
 800ef04:	bd10      	pop	{r4, pc}
	...

0800ef08 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800ef08:	4b01      	ldr	r3, [pc, #4]	; (800ef10 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800ef0a:	6019      	str	r1, [r3, #0]
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	2002491c 	.word	0x2002491c

0800ef14 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ef14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef18:	4696      	mov	lr, r2
 800ef1a:	b097      	sub	sp, #92	; 0x5c
 800ef1c:	4605      	mov	r5, r0
 800ef1e:	4614      	mov	r4, r2
 800ef20:	460e      	mov	r6, r1
 800ef22:	461f      	mov	r7, r3
 800ef24:	f10d 0c1c 	add.w	ip, sp, #28
 800ef28:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800ef2c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800ef30:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800ef34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef3c:	f8de 3000 	ldr.w	r3, [lr]
 800ef40:	f104 0e14 	add.w	lr, r4, #20
 800ef44:	f8cc 3000 	str.w	r3, [ip]
 800ef48:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ef4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef54:	f8de 3000 	ldr.w	r3, [lr]
 800ef58:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ef5c:	f8cc 3000 	str.w	r3, [ip]
 800ef60:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ef64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef6c:	f8de 3000 	ldr.w	r3, [lr]
 800ef70:	4631      	mov	r1, r6
 800ef72:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef74:	4628      	mov	r0, r5
 800ef76:	f8cc 3000 	str.w	r3, [ip]
 800ef7a:	682b      	ldr	r3, [r5, #0]
 800ef7c:	9201      	str	r2, [sp, #4]
 800ef7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef80:	f8cd 8008 	str.w	r8, [sp, #8]
 800ef84:	9200      	str	r2, [sp, #0]
 800ef86:	aa07      	add	r2, sp, #28
 800ef88:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ef8c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800ef90:	463b      	mov	r3, r7
 800ef92:	47d8      	blx	fp
 800ef94:	46a6      	mov	lr, r4
 800ef96:	f10d 0c1c 	add.w	ip, sp, #28
 800ef9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efa2:	f8de 3000 	ldr.w	r3, [lr]
 800efa6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800efaa:	343c      	adds	r4, #60	; 0x3c
 800efac:	f8cc 3000 	str.w	r3, [ip]
 800efb0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800efb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800efb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efbc:	f8de 3000 	ldr.w	r3, [lr]
 800efc0:	f8cc 3000 	str.w	r3, [ip]
 800efc4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800efc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	4631      	mov	r1, r6
 800efd2:	4628      	mov	r0, r5
 800efd4:	f8cc 3000 	str.w	r3, [ip]
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800efde:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efe0:	f8cd 8008 	str.w	r8, [sp, #8]
 800efe4:	9201      	str	r2, [sp, #4]
 800efe6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efe8:	9200      	str	r2, [sp, #0]
 800efea:	aa07      	add	r2, sp, #28
 800efec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800efee:	463b      	mov	r3, r7
 800eff0:	47a0      	blx	r4
 800eff2:	b017      	add	sp, #92	; 0x5c
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eff8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	b08d      	sub	sp, #52	; 0x34
 800effe:	4688      	mov	r8, r1
 800f000:	f8d3 c000 	ldr.w	ip, [r3]
 800f004:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f006:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800f00a:	680f      	ldr	r7, [r1, #0]
 800f00c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800f010:	eba7 070c 	sub.w	r7, r7, ip
 800f014:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800f018:	edd3 6a07 	vldr	s13, [r3, #28]
 800f01c:	42bc      	cmp	r4, r7
 800f01e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f020:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800f024:	bfa8      	it	ge
 800f026:	463c      	movge	r4, r7
 800f028:	f9b1 9000 	ldrsh.w	r9, [r1]
 800f02c:	f9ba 1000 	ldrsh.w	r1, [sl]
 800f030:	ee07 4a90 	vmov	s15, r4
 800f034:	eb09 0e0c 	add.w	lr, r9, ip
 800f038:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800f03c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f040:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f044:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800f048:	4571      	cmp	r1, lr
 800f04a:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f04e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f052:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f056:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f05a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800f05e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800f062:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f066:	ee36 0a84 	vadd.f32	s0, s13, s8
 800f06a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f06e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f072:	f340 808c 	ble.w	800f18e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800f076:	eba1 060e 	sub.w	r6, r1, lr
 800f07a:	fb96 f5f4 	sdiv	r5, r6, r4
 800f07e:	ee07 5a10 	vmov	s14, r5
 800f082:	2d00      	cmp	r5, #0
 800f084:	fb04 6615 	mls	r6, r4, r5, r6
 800f088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f08c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800f090:	eee7 0a24 	vfma.f32	s1, s14, s9
 800f094:	eea7 1a05 	vfma.f32	s2, s14, s10
 800f098:	dd12      	ble.n	800f0c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800f09a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800f09e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800f0a2:	ee31 2a45 	vsub.f32	s4, s2, s10
 800f0a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ae:	bf14      	ite	ne
 800f0b0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800f0b4:	eeb0 7a67 	vmoveq.f32	s14, s15
 800f0b8:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f0bc:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f0c0:	fb05 f204 	mul.w	r2, r5, r4
 800f0c4:	1abf      	subs	r7, r7, r2
 800f0c6:	4494      	add	ip, r2
 800f0c8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800f0cc:	4411      	add	r1, r2
 800f0ce:	eb09 020c 	add.w	r2, r9, ip
 800f0d2:	b209      	sxth	r1, r1
 800f0d4:	443a      	add	r2, r7
 800f0d6:	428a      	cmp	r2, r1
 800f0d8:	bfc4      	itt	gt
 800f0da:	eba1 0209 	subgt.w	r2, r1, r9
 800f0de:	eba2 070c 	subgt.w	r7, r2, ip
 800f0e2:	2f00      	cmp	r7, #0
 800f0e4:	dd50      	ble.n	800f188 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800f0e6:	fb97 f1f4 	sdiv	r1, r7, r4
 800f0ea:	fb04 7211 	mls	r2, r4, r1, r7
 800f0ee:	b90a      	cbnz	r2, 800f0f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f0f0:	3901      	subs	r1, #1
 800f0f2:	4622      	mov	r2, r4
 800f0f4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f0f8:	6840      	ldr	r0, [r0, #4]
 800f0fa:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800f0fe:	44b6      	add	lr, r6
 800f100:	f8d0 a000 	ldr.w	sl, [r0]
 800f104:	2900      	cmp	r1, #0
 800f106:	bfcc      	ite	gt
 800f108:	46a1      	movgt	r9, r4
 800f10a:	4691      	movle	r9, r2
 800f10c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f10e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f110:	fb04 e505 	mla	r5, r4, r5, lr
 800f114:	eef0 6a42 	vmov.f32	s13, s4
 800f118:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f11c:	9008      	str	r0, [sp, #32]
 800f11e:	eeb0 7a61 	vmov.f32	s14, s3
 800f122:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f124:	695b      	ldr	r3, [r3, #20]
 800f126:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f12a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800f12e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f132:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f134:	445b      	add	r3, fp
 800f136:	9307      	str	r3, [sp, #28]
 800f138:	ee16 3a90 	vmov	r3, s13
 800f13c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800f140:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f144:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f148:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f14c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f150:	ee17 7a90 	vmov	r7, s15
 800f154:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f158:	fb97 f7f4 	sdiv	r7, r7, r4
 800f15c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f160:	ee17 ca90 	vmov	ip, s15
 800f164:	fb9c fcf4 	sdiv	ip, ip, r4
 800f168:	fb0c 3306 	mla	r3, ip, r6, r3
 800f16c:	9302      	str	r3, [sp, #8]
 800f16e:	ee17 3a10 	vmov	r3, s14
 800f172:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800f176:	fb07 3706 	mla	r7, r7, r6, r3
 800f17a:	eba9 0306 	sub.w	r3, r9, r6
 800f17e:	e9cd 4700 	strd	r4, r7, [sp]
 800f182:	f8da 4008 	ldr.w	r4, [sl, #8]
 800f186:	47a0      	blx	r4
 800f188:	b00d      	add	sp, #52	; 0x34
 800f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18e:	2500      	movs	r5, #0
 800f190:	462e      	mov	r6, r5
 800f192:	e799      	b.n	800f0c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800f194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f198:	b0db      	sub	sp, #364	; 0x16c
 800f19a:	461d      	mov	r5, r3
 800f19c:	4614      	mov	r4, r2
 800f19e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800f1a2:	910f      	str	r1, [sp, #60]	; 0x3c
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800f1ac:	9009      	str	r0, [sp, #36]	; 0x24
 800f1ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1b0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800f1b4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f1b8:	9310      	str	r3, [sp, #64]	; 0x40
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800f1be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f1c2:	47b8      	blx	r7
 800f1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c6:	6058      	str	r0, [r3, #4]
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f000 83a1 	beq.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f1ce:	682b      	ldr	r3, [r5, #0]
 800f1d0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f1d4:	ed94 7a02 	vldr	s14, [r4, #8]
 800f1d8:	9314      	str	r3, [sp, #80]	; 0x50
 800f1da:	686b      	ldr	r3, [r5, #4]
 800f1dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f1e0:	9315      	str	r3, [sp, #84]	; 0x54
 800f1e2:	4bc1      	ldr	r3, [pc, #772]	; (800f4e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f1e4:	7819      	ldrb	r1, [r3, #0]
 800f1e6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	bf16      	itet	ne
 800f1ee:	4619      	movne	r1, r3
 800f1f0:	4611      	moveq	r1, r2
 800f1f2:	4613      	movne	r3, r2
 800f1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f8:	9116      	str	r1, [sp, #88]	; 0x58
 800f1fa:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f1fe:	f240 8387 	bls.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f202:	ed94 7a07 	vldr	s14, [r4, #28]
 800f206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20e:	f240 837f 	bls.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f212:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21e:	f240 8377 	bls.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f222:	6822      	ldr	r2, [r4, #0]
 800f224:	4bb1      	ldr	r3, [pc, #708]	; (800f4ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f226:	429a      	cmp	r2, r3
 800f228:	f2c0 8372 	blt.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f22c:	49b0      	ldr	r1, [pc, #704]	; (800f4f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f22e:	6963      	ldr	r3, [r4, #20]
 800f230:	428a      	cmp	r2, r1
 800f232:	f300 836d 	bgt.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f236:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f23a:	48ae      	ldr	r0, [pc, #696]	; (800f4f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f23c:	33ff      	adds	r3, #255	; 0xff
 800f23e:	4283      	cmp	r3, r0
 800f240:	f200 8366 	bhi.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f244:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f246:	4dac      	ldr	r5, [pc, #688]	; (800f4f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f248:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f24c:	33ff      	adds	r3, #255	; 0xff
 800f24e:	42ab      	cmp	r3, r5
 800f250:	f200 835e 	bhi.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f254:	6862      	ldr	r2, [r4, #4]
 800f256:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f25a:	33ff      	adds	r3, #255	; 0xff
 800f25c:	4283      	cmp	r3, r0
 800f25e:	f200 8357 	bhi.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f262:	69a1      	ldr	r1, [r4, #24]
 800f264:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f268:	33ff      	adds	r3, #255	; 0xff
 800f26a:	4283      	cmp	r3, r0
 800f26c:	f200 8350 	bhi.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f272:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f276:	30ff      	adds	r0, #255	; 0xff
 800f278:	42a8      	cmp	r0, r5
 800f27a:	f200 8349 	bhi.w	800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f27e:	428a      	cmp	r2, r1
 800f280:	f280 8110 	bge.w	800f4a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f284:	429a      	cmp	r2, r3
 800f286:	f300 8119 	bgt.w	800f4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f28a:	4299      	cmp	r1, r3
 800f28c:	f280 811d 	bge.w	800f4ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f290:	2502      	movs	r5, #2
 800f292:	2701      	movs	r7, #1
 800f294:	46a9      	mov	r9, r5
 800f296:	46b8      	mov	r8, r7
 800f298:	f04f 0a00 	mov.w	sl, #0
 800f29c:	4621      	mov	r1, r4
 800f29e:	a849      	add	r0, sp, #292	; 0x124
 800f2a0:	f003 fc88 	bl	8012bb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f2a4:	4622      	mov	r2, r4
 800f2a6:	4653      	mov	r3, sl
 800f2a8:	a949      	add	r1, sp, #292	; 0x124
 800f2aa:	f8cd 9000 	str.w	r9, [sp]
 800f2ae:	a819      	add	r0, sp, #100	; 0x64
 800f2b0:	f003 fdb0 	bl	8012e14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	4653      	mov	r3, sl
 800f2b8:	a949      	add	r1, sp, #292	; 0x124
 800f2ba:	f8cd 8000 	str.w	r8, [sp]
 800f2be:	a829      	add	r0, sp, #164	; 0xa4
 800f2c0:	f003 fda8 	bl	8012e14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f2c4:	4643      	mov	r3, r8
 800f2c6:	4622      	mov	r2, r4
 800f2c8:	a949      	add	r1, sp, #292	; 0x124
 800f2ca:	f8cd 9000 	str.w	r9, [sp]
 800f2ce:	a839      	add	r0, sp, #228	; 0xe4
 800f2d0:	f003 fda0 	bl	8012e14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f2d4:	42af      	cmp	r7, r5
 800f2d6:	af12      	add	r7, sp, #72	; 0x48
 800f2d8:	bfb7      	itett	lt
 800f2da:	2300      	movlt	r3, #0
 800f2dc:	2301      	movge	r3, #1
 800f2de:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f2e0:	ac19      	addlt	r4, sp, #100	; 0x64
 800f2e2:	bfb1      	iteee	lt
 800f2e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2e6:	ad19      	addge	r5, sp, #100	; 0x64
 800f2e8:	930e      	strge	r3, [sp, #56]	; 0x38
 800f2ea:	ac29      	addge	r4, sp, #164	; 0xa4
 800f2ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2f2:	e887 0003 	stmia.w	r7, {r0, r1}
 800f2f6:	b928      	cbnz	r0, 800f304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f2f8:	4b80      	ldr	r3, [pc, #512]	; (800f4fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f2fa:	6818      	ldr	r0, [r3, #0]
 800f2fc:	6803      	ldr	r3, [r0, #0]
 800f2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f300:	4798      	blx	r3
 800f302:	6038      	str	r0, [r7, #0]
 800f304:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f306:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f30a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f30e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f310:	930c      	str	r3, [sp, #48]	; 0x30
 800f312:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f314:	6963      	ldr	r3, [r4, #20]
 800f316:	440b      	add	r3, r1
 800f318:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f31c:	4408      	add	r0, r1
 800f31e:	b200      	sxth	r0, r0
 800f320:	4283      	cmp	r3, r0
 800f322:	900d      	str	r0, [sp, #52]	; 0x34
 800f324:	f280 80dd 	bge.w	800f4e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f328:	428b      	cmp	r3, r1
 800f32a:	da08      	bge.n	800f33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	dd06      	ble.n	800f33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f330:	1acb      	subs	r3, r1, r3
 800f332:	429a      	cmp	r2, r3
 800f334:	f2c0 80e4 	blt.w	800f500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f300 80e2 	bgt.w	800f502 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f33e:	6967      	ldr	r7, [r4, #20]
 800f340:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f346:	443b      	add	r3, r7
 800f348:	461f      	mov	r7, r3
 800f34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f34c:	1bdf      	subs	r7, r3, r7
 800f34e:	4297      	cmp	r7, r2
 800f350:	bfa8      	it	ge
 800f352:	4617      	movge	r7, r2
 800f354:	2f00      	cmp	r7, #0
 800f356:	f340 8166 	ble.w	800f626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f35a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f35c:	6829      	ldr	r1, [r5, #0]
 800f35e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f362:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f366:	4411      	add	r1, r2
 800f368:	6820      	ldr	r0, [r4, #0]
 800f36a:	4299      	cmp	r1, r3
 800f36c:	dd1a      	ble.n	800f3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f36e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f372:	4402      	add	r2, r0
 800f374:	440b      	add	r3, r1
 800f376:	b21b      	sxth	r3, r3
 800f378:	429a      	cmp	r2, r3
 800f37a:	dc13      	bgt.n	800f3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f37c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f37e:	a912      	add	r1, sp, #72	; 0x48
 800f380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f382:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	9206      	str	r2, [sp, #24]
 800f388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f38a:	9500      	str	r5, [sp, #0]
 800f38c:	9205      	str	r2, [sp, #20]
 800f38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f390:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f394:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f396:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f39a:	aa49      	add	r2, sp, #292	; 0x124
 800f39c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800f3a0:	4623      	mov	r3, r4
 800f3a2:	47c8      	blx	r9
 800f3a4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f3a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f3ac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f3b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3b4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f3b8:	68a1      	ldr	r1, [r4, #8]
 800f3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3be:	ed94 6a08 	vldr	s12, [r4, #32]
 800f3c2:	edd4 6a07 	vldr	s13, [r4, #28]
 800f3c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f3ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f3ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f3d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f3d6:	edc4 6a07 	vstr	s13, [r4, #28]
 800f3da:	441a      	add	r2, r3
 800f3dc:	6963      	ldr	r3, [r4, #20]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	6022      	str	r2, [r4, #0]
 800f3e2:	6163      	str	r3, [r4, #20]
 800f3e4:	69a3      	ldr	r3, [r4, #24]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	61a3      	str	r3, [r4, #24]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	440b      	add	r3, r1
 800f3ee:	68e1      	ldr	r1, [r4, #12]
 800f3f0:	428b      	cmp	r3, r1
 800f3f2:	6123      	str	r3, [r4, #16]
 800f3f4:	db15      	blt.n	800f422 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f3f6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	1a5b      	subs	r3, r3, r1
 800f3fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f402:	6022      	str	r2, [r4, #0]
 800f404:	6123      	str	r3, [r4, #16]
 800f406:	edc4 6a07 	vstr	s13, [r4, #28]
 800f40a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f40e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f412:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f416:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f41a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f41e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f422:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f426:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f42a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f42e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f432:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f436:	68a9      	ldr	r1, [r5, #8]
 800f438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f43c:	ed95 6a08 	vldr	s12, [r5, #32]
 800f440:	edd5 6a07 	vldr	s13, [r5, #28]
 800f444:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f448:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f44c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f450:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f454:	edc5 6a07 	vstr	s13, [r5, #28]
 800f458:	441a      	add	r2, r3
 800f45a:	696b      	ldr	r3, [r5, #20]
 800f45c:	3301      	adds	r3, #1
 800f45e:	602a      	str	r2, [r5, #0]
 800f460:	616b      	str	r3, [r5, #20]
 800f462:	69ab      	ldr	r3, [r5, #24]
 800f464:	3b01      	subs	r3, #1
 800f466:	61ab      	str	r3, [r5, #24]
 800f468:	692b      	ldr	r3, [r5, #16]
 800f46a:	440b      	add	r3, r1
 800f46c:	68e9      	ldr	r1, [r5, #12]
 800f46e:	428b      	cmp	r3, r1
 800f470:	612b      	str	r3, [r5, #16]
 800f472:	db15      	blt.n	800f4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f474:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f478:	3201      	adds	r2, #1
 800f47a:	1a5b      	subs	r3, r3, r1
 800f47c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f480:	602a      	str	r2, [r5, #0]
 800f482:	612b      	str	r3, [r5, #16]
 800f484:	edc5 6a07 	vstr	s13, [r5, #28]
 800f488:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f48c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f490:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f494:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f49c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f4a0:	3f01      	subs	r7, #1
 800f4a2:	e757      	b.n	800f354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f4a4:	4299      	cmp	r1, r3
 800f4a6:	dc13      	bgt.n	800f4d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	da14      	bge.n	800f4d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f4ac:	2502      	movs	r5, #2
 800f4ae:	2703      	movs	r7, #3
 800f4b0:	f04f 0800 	mov.w	r8, #0
 800f4b4:	46a9      	mov	r9, r5
 800f4b6:	f04f 0a01 	mov.w	sl, #1
 800f4ba:	e6ef      	b.n	800f29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f4bc:	2501      	movs	r5, #1
 800f4be:	2700      	movs	r7, #0
 800f4c0:	46a9      	mov	r9, r5
 800f4c2:	46b8      	mov	r8, r7
 800f4c4:	f04f 0a02 	mov.w	sl, #2
 800f4c8:	e6e8      	b.n	800f29c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f4ca:	2501      	movs	r5, #1
 800f4cc:	2702      	movs	r7, #2
 800f4ce:	e6e1      	b.n	800f294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	2701      	movs	r7, #1
 800f4d4:	e7f4      	b.n	800f4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f4d6:	2702      	movs	r7, #2
 800f4d8:	2503      	movs	r5, #3
 800f4da:	f04f 0900 	mov.w	r9, #0
 800f4de:	46b8      	mov	r8, r7
 800f4e0:	e7e9      	b.n	800f4b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	e728      	b.n	800f338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f4e6:	bf00      	nop
 800f4e8:	2002490c 	.word	0x2002490c
 800f4ec:	fffd8f01 	.word	0xfffd8f01
 800f4f0:	00027100 	.word	0x00027100
 800f4f4:	0004e1ff 	.word	0x0004e1ff
 800f4f8:	0004e1fe 	.word	0x0004e1fe
 800f4fc:	20024914 	.word	0x20024914
 800f500:	4613      	mov	r3, r2
 800f502:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f504:	469e      	mov	lr, r3
 800f506:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f508:	469c      	mov	ip, r3
 800f50a:	9111      	str	r1, [sp, #68]	; 0x44
 800f50c:	f04f 0900 	mov.w	r9, #0
 800f510:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f514:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f518:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f51c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f520:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f524:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f528:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f52c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f530:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f534:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f538:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f53c:	f1bc 0f00 	cmp.w	ip, #0
 800f540:	d147      	bne.n	800f5d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f542:	eb03 0c07 	add.w	ip, r3, r7
 800f546:	1ad7      	subs	r7, r2, r3
 800f548:	f1b9 0f00 	cmp.w	r9, #0
 800f54c:	d009      	beq.n	800f562 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f54e:	9029      	str	r0, [sp, #164]	; 0xa4
 800f550:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f554:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f558:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f55c:	912d      	str	r1, [sp, #180]	; 0xb4
 800f55e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f562:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f564:	f04f 0800 	mov.w	r8, #0
 800f568:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f56c:	9111      	str	r1, [sp, #68]	; 0x44
 800f56e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f572:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f576:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f57a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f57e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f582:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f586:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f58a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f58e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f592:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f596:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f59a:	f1be 0f00 	cmp.w	lr, #0
 800f59e:	d031      	beq.n	800f604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f5a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f5a2:	4450      	add	r0, sl
 800f5a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f5a8:	4431      	add	r1, r6
 800f5aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f5ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f5b2:	4549      	cmp	r1, r9
 800f5b4:	db08      	blt.n	800f5c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f5b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f5c0:	eba1 0109 	sub.w	r1, r1, r9
 800f5c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f5c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f5cc:	f04f 0801 	mov.w	r8, #1
 800f5d0:	e7e3      	b.n	800f59a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f5d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f5d4:	4450      	add	r0, sl
 800f5d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f5da:	4431      	add	r1, r6
 800f5dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f5e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f5e4:	4541      	cmp	r1, r8
 800f5e6:	db08      	blt.n	800f5fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f5e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f5f2:	eba1 0108 	sub.w	r1, r1, r8
 800f5f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f5fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f5fe:	f04f 0901 	mov.w	r9, #1
 800f602:	e79b      	b.n	800f53c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f604:	449c      	add	ip, r3
 800f606:	1aff      	subs	r7, r7, r3
 800f608:	f1b8 0f00 	cmp.w	r8, #0
 800f60c:	d009      	beq.n	800f622 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f60e:	9019      	str	r0, [sp, #100]	; 0x64
 800f610:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f614:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f618:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f61c:	911d      	str	r1, [sp, #116]	; 0x74
 800f61e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	e68b      	b.n	800f33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f628:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 80d1 	beq.w	800f7d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f630:	ad19      	add	r5, sp, #100	; 0x64
 800f632:	ac39      	add	r4, sp, #228	; 0xe4
 800f634:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f636:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f63a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f63e:	930c      	str	r3, [sp, #48]	; 0x30
 800f640:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f642:	6963      	ldr	r3, [r4, #20]
 800f644:	440b      	add	r3, r1
 800f646:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f64a:	4408      	add	r0, r1
 800f64c:	b200      	sxth	r0, r0
 800f64e:	4283      	cmp	r3, r0
 800f650:	900d      	str	r0, [sp, #52]	; 0x34
 800f652:	f280 80c1 	bge.w	800f7d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f656:	428b      	cmp	r3, r1
 800f658:	da08      	bge.n	800f66c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f65a:	2a00      	cmp	r2, #0
 800f65c:	dd06      	ble.n	800f66c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f65e:	1acb      	subs	r3, r1, r3
 800f660:	429a      	cmp	r2, r3
 800f662:	f2c0 80bb 	blt.w	800f7dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f666:	2b00      	cmp	r3, #0
 800f668:	f300 80b9 	bgt.w	800f7de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f66c:	6967      	ldr	r7, [r4, #20]
 800f66e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f674:	443b      	add	r3, r7
 800f676:	461f      	mov	r7, r3
 800f678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f67a:	1bdf      	subs	r7, r3, r7
 800f67c:	4297      	cmp	r7, r2
 800f67e:	bfa8      	it	ge
 800f680:	4617      	movge	r7, r2
 800f682:	2f00      	cmp	r7, #0
 800f684:	f340 813c 	ble.w	800f900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f688:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f68a:	6829      	ldr	r1, [r5, #0]
 800f68c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f690:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f694:	4411      	add	r1, r2
 800f696:	6820      	ldr	r0, [r4, #0]
 800f698:	4299      	cmp	r1, r3
 800f69a:	dd1a      	ble.n	800f6d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f69c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f6a0:	4402      	add	r2, r0
 800f6a2:	440b      	add	r3, r1
 800f6a4:	b21b      	sxth	r3, r3
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	dc13      	bgt.n	800f6d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f6aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f6ac:	a912      	add	r1, sp, #72	; 0x48
 800f6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	9206      	str	r2, [sp, #24]
 800f6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6b8:	9500      	str	r5, [sp, #0]
 800f6ba:	9205      	str	r2, [sp, #20]
 800f6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6be:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f6c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f6c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f6c8:	aa49      	add	r2, sp, #292	; 0x124
 800f6ca:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800f6ce:	4623      	mov	r3, r4
 800f6d0:	47c8      	blx	r9
 800f6d2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f6d6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f6da:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f6de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6e2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f6e6:	68a1      	ldr	r1, [r4, #8]
 800f6e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ec:	ed94 6a08 	vldr	s12, [r4, #32]
 800f6f0:	edd4 6a07 	vldr	s13, [r4, #28]
 800f6f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f6f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f6fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f700:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f704:	edc4 6a07 	vstr	s13, [r4, #28]
 800f708:	441a      	add	r2, r3
 800f70a:	6963      	ldr	r3, [r4, #20]
 800f70c:	3301      	adds	r3, #1
 800f70e:	6022      	str	r2, [r4, #0]
 800f710:	6163      	str	r3, [r4, #20]
 800f712:	69a3      	ldr	r3, [r4, #24]
 800f714:	3b01      	subs	r3, #1
 800f716:	61a3      	str	r3, [r4, #24]
 800f718:	6923      	ldr	r3, [r4, #16]
 800f71a:	440b      	add	r3, r1
 800f71c:	68e1      	ldr	r1, [r4, #12]
 800f71e:	428b      	cmp	r3, r1
 800f720:	6123      	str	r3, [r4, #16]
 800f722:	db15      	blt.n	800f750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f724:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f728:	3201      	adds	r2, #1
 800f72a:	1a5b      	subs	r3, r3, r1
 800f72c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f730:	6022      	str	r2, [r4, #0]
 800f732:	6123      	str	r3, [r4, #16]
 800f734:	edc4 6a07 	vstr	s13, [r4, #28]
 800f738:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f73c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f740:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f744:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f74c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f750:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f754:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f758:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f75c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f760:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f764:	68a9      	ldr	r1, [r5, #8]
 800f766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f76a:	ed95 6a08 	vldr	s12, [r5, #32]
 800f76e:	edd5 6a07 	vldr	s13, [r5, #28]
 800f772:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f776:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f77a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f77e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f782:	edc5 6a07 	vstr	s13, [r5, #28]
 800f786:	441a      	add	r2, r3
 800f788:	696b      	ldr	r3, [r5, #20]
 800f78a:	3301      	adds	r3, #1
 800f78c:	602a      	str	r2, [r5, #0]
 800f78e:	616b      	str	r3, [r5, #20]
 800f790:	69ab      	ldr	r3, [r5, #24]
 800f792:	3b01      	subs	r3, #1
 800f794:	61ab      	str	r3, [r5, #24]
 800f796:	692b      	ldr	r3, [r5, #16]
 800f798:	440b      	add	r3, r1
 800f79a:	68e9      	ldr	r1, [r5, #12]
 800f79c:	428b      	cmp	r3, r1
 800f79e:	612b      	str	r3, [r5, #16]
 800f7a0:	db15      	blt.n	800f7ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f7a2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f7a6:	3201      	adds	r2, #1
 800f7a8:	1a5b      	subs	r3, r3, r1
 800f7aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f7ae:	602a      	str	r2, [r5, #0]
 800f7b0:	612b      	str	r3, [r5, #16]
 800f7b2:	edc5 6a07 	vstr	s13, [r5, #28]
 800f7b6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f7ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f7be:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f7c2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f7ce:	3f01      	subs	r7, #1
 800f7d0:	e757      	b.n	800f682 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f7d2:	ad39      	add	r5, sp, #228	; 0xe4
 800f7d4:	ac19      	add	r4, sp, #100	; 0x64
 800f7d6:	e72d      	b.n	800f634 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f7d8:	4613      	mov	r3, r2
 800f7da:	e744      	b.n	800f666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f7dc:	4613      	mov	r3, r2
 800f7de:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f7e6:	461f      	mov	r7, r3
 800f7e8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f7ec:	f04f 0900 	mov.w	r9, #0
 800f7f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f7f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f7f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f7fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f800:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f804:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f806:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f80a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f80e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f812:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f816:	960e      	str	r6, [sp, #56]	; 0x38
 800f818:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f81c:	2f00      	cmp	r7, #0
 800f81e:	d146      	bne.n	800f8ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f820:	449c      	add	ip, r3
 800f822:	1ad7      	subs	r7, r2, r3
 800f824:	f1b9 0f00 	cmp.w	r9, #0
 800f828:	d009      	beq.n	800f83e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f82a:	9039      	str	r0, [sp, #228]	; 0xe4
 800f82c:	913d      	str	r1, [sp, #244]	; 0xf4
 800f82e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f832:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f836:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f83a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f83e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f840:	f04f 0800 	mov.w	r8, #0
 800f844:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f848:	910e      	str	r1, [sp, #56]	; 0x38
 800f84a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f84e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f852:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f856:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f85a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f85e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f862:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f866:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f86a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f86e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f872:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f876:	f1be 0f00 	cmp.w	lr, #0
 800f87a:	d030      	beq.n	800f8de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f87c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f87e:	4450      	add	r0, sl
 800f880:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f884:	4431      	add	r1, r6
 800f886:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f88a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f88e:	4549      	cmp	r1, r9
 800f890:	db08      	blt.n	800f8a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f892:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f896:	3001      	adds	r0, #1
 800f898:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f89c:	eba1 0109 	sub.w	r1, r1, r9
 800f8a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f8a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f8a8:	f04f 0801 	mov.w	r8, #1
 800f8ac:	e7e3      	b.n	800f876 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f8ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f8b0:	4450      	add	r0, sl
 800f8b2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f8b6:	4431      	add	r1, r6
 800f8b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f8bc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f8c0:	4541      	cmp	r1, r8
 800f8c2:	db08      	blt.n	800f8d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f8c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f8c8:	3001      	adds	r0, #1
 800f8ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f8ce:	eba1 0108 	sub.w	r1, r1, r8
 800f8d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f8d6:	3f01      	subs	r7, #1
 800f8d8:	f04f 0901 	mov.w	r9, #1
 800f8dc:	e79e      	b.n	800f81c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f8de:	449c      	add	ip, r3
 800f8e0:	1aff      	subs	r7, r7, r3
 800f8e2:	f1b8 0f00 	cmp.w	r8, #0
 800f8e6:	d009      	beq.n	800f8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f8e8:	9019      	str	r0, [sp, #100]	; 0x64
 800f8ea:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f8ee:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f8f2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f8f6:	911d      	str	r1, [sp, #116]	; 0x74
 800f8f8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f8fc:	1ad2      	subs	r2, r2, r3
 800f8fe:	e6b5      	b.n	800f66c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	b923      	cbnz	r3, 800f910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f906:	4b04      	ldr	r3, [pc, #16]	; (800f918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f908:	6818      	ldr	r0, [r3, #0]
 800f90a:	6803      	ldr	r3, [r0, #0]
 800f90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90e:	4798      	blx	r3
 800f910:	b05b      	add	sp, #364	; 0x16c
 800f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f916:	bf00      	nop
 800f918:	20024914 	.word	0x20024914

0800f91c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	4604      	mov	r4, r0
 800f920:	2500      	movs	r5, #0
 800f922:	9804      	ldr	r0, [sp, #16]
 800f924:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800f928:	8025      	strh	r5, [r4, #0]
 800f92a:	6061      	str	r1, [r4, #4]
 800f92c:	7223      	strb	r3, [r4, #8]
 800f92e:	7266      	strb	r6, [r4, #9]
 800f930:	60e0      	str	r0, [r4, #12]
 800f932:	8222      	strh	r2, [r4, #16]
 800f934:	8265      	strh	r5, [r4, #18]
 800f936:	82a5      	strh	r5, [r4, #20]
 800f938:	82e5      	strh	r5, [r4, #22]
 800f93a:	8325      	strh	r5, [r4, #24]
 800f93c:	8365      	strh	r5, [r4, #26]
 800f93e:	83a5      	strh	r5, [r4, #28]
 800f940:	77a5      	strb	r5, [r4, #30]
 800f942:	b32e      	cbz	r6, 800f990 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800f944:	6803      	ldr	r3, [r0, #0]
 800f946:	695b      	ldr	r3, [r3, #20]
 800f948:	4798      	blx	r3
 800f94a:	4606      	mov	r6, r0
 800f94c:	b300      	cbz	r0, 800f990 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800f94e:	68e0      	ldr	r0, [r4, #12]
 800f950:	4631      	mov	r1, r6
 800f952:	6803      	ldr	r3, [r0, #0]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	4798      	blx	r3
 800f958:	4605      	mov	r5, r0
 800f95a:	b1c8      	cbz	r0, 800f990 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800f95c:	7b43      	ldrb	r3, [r0, #13]
 800f95e:	7a82      	ldrb	r2, [r0, #10]
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f966:	4313      	orrs	r3, r2
 800f968:	83a3      	strh	r3, [r4, #28]
 800f96a:	7a63      	ldrb	r3, [r4, #9]
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d10f      	bne.n	800f990 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800f970:	68e0      	ldr	r0, [r4, #12]
 800f972:	462a      	mov	r2, r5
 800f974:	4631      	mov	r1, r6
 800f976:	6803      	ldr	r3, [r0, #0]
 800f978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f97a:	4798      	blx	r3
 800f97c:	7b6b      	ldrb	r3, [r5, #13]
 800f97e:	005b      	lsls	r3, r3, #1
 800f980:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f984:	7aab      	ldrb	r3, [r5, #10]
 800f986:	4313      	orrs	r3, r2
 800f988:	4418      	add	r0, r3
 800f98a:	8ba3      	ldrh	r3, [r4, #28]
 800f98c:	4418      	add	r0, r3
 800f98e:	83a0      	strh	r0, [r4, #28]
 800f990:	4620      	mov	r0, r4
 800f992:	bd70      	pop	{r4, r5, r6, pc}

0800f994 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f998:	2400      	movs	r4, #0
 800f99a:	b085      	sub	sp, #20
 800f99c:	4681      	mov	r9, r0
 800f99e:	4688      	mov	r8, r1
 800f9a0:	4692      	mov	sl, r2
 800f9a2:	469b      	mov	fp, r3
 800f9a4:	4627      	mov	r7, r4
 800f9a6:	4625      	mov	r5, r4
 800f9a8:	4626      	mov	r6, r4
 800f9aa:	4554      	cmp	r4, sl
 800f9ac:	da2a      	bge.n	800fa04 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	9303      	str	r3, [sp, #12]
 800f9b2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f9b6:	429d      	cmp	r5, r3
 800f9b8:	d004      	beq.n	800f9c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f9ba:	f242 030b 	movw	r3, #8203	; 0x200b
 800f9be:	429d      	cmp	r5, r3
 800f9c0:	bf18      	it	ne
 800f9c2:	462f      	movne	r7, r5
 800f9c4:	ab03      	add	r3, sp, #12
 800f9c6:	4642      	mov	r2, r8
 800f9c8:	4659      	mov	r1, fp
 800f9ca:	4648      	mov	r0, r9
 800f9cc:	f002 ff08 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	b1b8      	cbz	r0, 800fa04 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f9d4:	280a      	cmp	r0, #10
 800f9d6:	d015      	beq.n	800fa04 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f9d8:	9a03      	ldr	r2, [sp, #12]
 800f9da:	b18a      	cbz	r2, 800fa00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f9dc:	7b50      	ldrb	r0, [r2, #13]
 800f9de:	4639      	mov	r1, r7
 800f9e0:	7a93      	ldrb	r3, [r2, #10]
 800f9e2:	0040      	lsls	r0, r0, #1
 800f9e4:	8895      	ldrh	r5, [r2, #4]
 800f9e6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f9ea:	4303      	orrs	r3, r0
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	9301      	str	r3, [sp, #4]
 800f9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9f6:	4798      	blx	r3
 800f9f8:	9b01      	ldr	r3, [sp, #4]
 800f9fa:	4418      	add	r0, r3
 800f9fc:	4406      	add	r6, r0
 800f9fe:	b2b6      	uxth	r6, r6
 800fa00:	3401      	adds	r4, #1
 800fa02:	e7d2      	b.n	800f9aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800fa04:	4630      	mov	r0, r6
 800fa06:	b005      	add	sp, #20
 800fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa0c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800fa0c:	2a02      	cmp	r2, #2
 800fa0e:	b530      	push	{r4, r5, lr}
 800fa10:	d011      	beq.n	800fa36 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800fa12:	2a03      	cmp	r2, #3
 800fa14:	d01c      	beq.n	800fa50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800fa16:	2a01      	cmp	r2, #1
 800fa18:	d10c      	bne.n	800fa34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800fa1a:	888b      	ldrh	r3, [r1, #4]
 800fa1c:	8801      	ldrh	r1, [r0, #0]
 800fa1e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800fa22:	1a5b      	subs	r3, r3, r1
 800fa24:	8844      	ldrh	r4, [r0, #2]
 800fa26:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800fa2a:	1a9b      	subs	r3, r3, r2
 800fa2c:	8004      	strh	r4, [r0, #0]
 800fa2e:	8081      	strh	r1, [r0, #4]
 800fa30:	8043      	strh	r3, [r0, #2]
 800fa32:	80c2      	strh	r2, [r0, #6]
 800fa34:	bd30      	pop	{r4, r5, pc}
 800fa36:	88cb      	ldrh	r3, [r1, #6]
 800fa38:	8842      	ldrh	r2, [r0, #2]
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	88c2      	ldrh	r2, [r0, #6]
 800fa3e:	1a9b      	subs	r3, r3, r2
 800fa40:	888a      	ldrh	r2, [r1, #4]
 800fa42:	8801      	ldrh	r1, [r0, #0]
 800fa44:	8043      	strh	r3, [r0, #2]
 800fa46:	1a52      	subs	r2, r2, r1
 800fa48:	8881      	ldrh	r1, [r0, #4]
 800fa4a:	1a52      	subs	r2, r2, r1
 800fa4c:	8002      	strh	r2, [r0, #0]
 800fa4e:	e7f1      	b.n	800fa34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800fa50:	88cb      	ldrh	r3, [r1, #6]
 800fa52:	8841      	ldrh	r1, [r0, #2]
 800fa54:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fa58:	1a5b      	subs	r3, r3, r1
 800fa5a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800fa5e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800fa62:	1a9b      	subs	r3, r3, r2
 800fa64:	8045      	strh	r5, [r0, #2]
 800fa66:	8082      	strh	r2, [r0, #4]
 800fa68:	8003      	strh	r3, [r0, #0]
 800fa6a:	80c4      	strh	r4, [r0, #6]
 800fa6c:	e7e2      	b.n	800fa34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800fa6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800fa6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa72:	b09f      	sub	sp, #124	; 0x7c
 800fa74:	9116      	str	r1, [sp, #88]	; 0x58
 800fa76:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa78:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fa7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fa7c:	8809      	ldrh	r1, [r1, #0]
 800fa7e:	889b      	ldrh	r3, [r3, #4]
 800fa80:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800fa84:	440b      	add	r3, r1
 800fa86:	9212      	str	r2, [sp, #72]	; 0x48
 800fa88:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800fa8c:	b21b      	sxth	r3, r3
 800fa8e:	9011      	str	r0, [sp, #68]	; 0x44
 800fa90:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800fa94:	9310      	str	r3, [sp, #64]	; 0x40
 800fa96:	f8d8 3000 	ldr.w	r3, [r8]
 800fa9a:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 800fa9e:	7a59      	ldrb	r1, [r3, #9]
 800faa0:	7a1b      	ldrb	r3, [r3, #8]
 800faa2:	9114      	str	r1, [sp, #80]	; 0x50
 800faa4:	9315      	str	r3, [sp, #84]	; 0x54
 800faa6:	2a00      	cmp	r2, #0
 800faa8:	d06a      	beq.n	800fb80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800faaa:	f898 3010 	ldrb.w	r3, [r8, #16]
 800faae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800fab0:	2b04      	cmp	r3, #4
 800fab2:	bf14      	ite	ne
 800fab4:	2301      	movne	r3, #1
 800fab6:	2302      	moveq	r3, #2
 800fab8:	4413      	add	r3, r2
 800faba:	f04f 0900 	mov.w	r9, #0
 800fabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fac0:	464c      	mov	r4, r9
 800fac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fac6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800faca:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800face:	4293      	cmp	r3, r2
 800fad0:	f280 808f 	bge.w	800fbf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800fad4:	2300      	movs	r3, #0
 800fad6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 800fada:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800fade:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fae2:	429c      	cmp	r4, r3
 800fae4:	d006      	beq.n	800faf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 800fae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fae8:	f242 020b 	movw	r2, #8203	; 0x200b
 800faec:	4294      	cmp	r4, r2
 800faee:	bf18      	it	ne
 800faf0:	4623      	movne	r3, r4
 800faf2:	930d      	str	r3, [sp, #52]	; 0x34
 800faf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faf6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800faf8:	f8d8 2000 	ldr.w	r2, [r8]
 800fafc:	428b      	cmp	r3, r1
 800fafe:	db41      	blt.n	800fb84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800fb00:	6813      	ldr	r3, [r2, #0]
 800fb02:	4610      	mov	r0, r2
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	4798      	blx	r3
 800fb08:	4604      	mov	r4, r0
 800fb0a:	f8d8 0000 	ldr.w	r0, [r8]
 800fb0e:	aa1d      	add	r2, sp, #116	; 0x74
 800fb10:	4621      	mov	r1, r4
 800fb12:	6803      	ldr	r3, [r0, #0]
 800fb14:	689e      	ldr	r6, [r3, #8]
 800fb16:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fb1a:	47b0      	blx	r6
 800fb1c:	901c      	str	r0, [sp, #112]	; 0x70
 800fb1e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fb22:	429c      	cmp	r4, r3
 800fb24:	f000 80ea 	beq.w	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fb28:	f242 030b 	movw	r3, #8203	; 0x200b
 800fb2c:	429c      	cmp	r4, r3
 800fb2e:	f000 80e5 	beq.w	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	f000 80f7 	beq.w	800fd26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fb38:	2c0a      	cmp	r4, #10
 800fb3a:	d060      	beq.n	800fbfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800fb3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fb3e:	b36a      	cbz	r2, 800fb9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800fb40:	8894      	ldrh	r4, [r2, #4]
 800fb42:	f1bb 0f00 	cmp.w	fp, #0
 800fb46:	d03b      	beq.n	800fbc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800fb48:	f892 900d 	ldrb.w	r9, [r2, #13]
 800fb4c:	f1bb 0f01 	cmp.w	fp, #1
 800fb50:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800fb54:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800fb58:	f892 900a 	ldrb.w	r9, [r2, #10]
 800fb5c:	ea49 0903 	orr.w	r9, r9, r3
 800fb60:	d134      	bne.n	800fbcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 800fb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb64:	eba5 0509 	sub.w	r5, r5, r9
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d14f      	bne.n	800fc0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800fb6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb6e:	eb09 0305 	add.w	r3, r9, r5
 800fb72:	4413      	add	r3, r2
 800fb74:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800fb76:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	da51      	bge.n	800fc22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800fb7e:	e038      	b.n	800fbf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 800fb80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb82:	e79a      	b.n	800faba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 800fb84:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800fb88:	4659      	mov	r1, fp
 800fb8a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fb8c:	9301      	str	r3, [sp, #4]
 800fb8e:	ab1d      	add	r3, sp, #116	; 0x74
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	ab1c      	add	r3, sp, #112	; 0x70
 800fb94:	f002 fe6d 	bl	8012872 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800fb98:	4604      	mov	r4, r0
 800fb9a:	e7c0      	b.n	800fb1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800fb9c:	f8d8 0000 	ldr.w	r0, [r8]
 800fba0:	6803      	ldr	r3, [r0, #0]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	4798      	blx	r3
 800fba6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fbaa:	4298      	cmp	r0, r3
 800fbac:	f000 80a6 	beq.w	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fbb0:	f242 030b 	movw	r3, #8203	; 0x200b
 800fbb4:	4298      	cmp	r0, r3
 800fbb6:	f000 80a1 	beq.w	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fbba:	f1bb 0f00 	cmp.w	fp, #0
 800fbbe:	d100      	bne.n	800fbc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800fbc0:	444d      	add	r5, r9
 800fbc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fbc4:	2a00      	cmp	r2, #0
 800fbc6:	d1bf      	bne.n	800fb48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800fbc8:	4691      	mov	r9, r2
 800fbca:	e097      	b.n	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fbcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f000 80ab 	beq.w	800fd2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 800fbd4:	f1bb 0f00 	cmp.w	fp, #0
 800fbd8:	d118      	bne.n	800fc0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 800fbda:	f8d8 0000 	ldr.w	r0, [r8]
 800fbde:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fbe0:	6803      	ldr	r3, [r0, #0]
 800fbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbe4:	4798      	blx	r3
 800fbe6:	4405      	add	r5, r0
 800fbe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fbec:	1aeb      	subs	r3, r5, r3
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	dd17      	ble.n	800fc22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 800fbf2:	2c00      	cmp	r4, #0
 800fbf4:	f000 8097 	beq.w	800fd26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fbf8:	2c0a      	cmp	r4, #10
 800fbfa:	f040 8085 	bne.w	800fd08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800fbfe:	240a      	movs	r4, #10
 800fc00:	fab4 f084 	clz	r0, r4
 800fc04:	0940      	lsrs	r0, r0, #5
 800fc06:	b01f      	add	sp, #124	; 0x7c
 800fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0c:	f8d8 0000 	ldr.w	r0, [r8]
 800fc10:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fc12:	6803      	ldr	r3, [r0, #0]
 800fc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc16:	4798      	blx	r3
 800fc18:	f1bb 0f01 	cmp.w	fp, #1
 800fc1c:	eba5 0500 	sub.w	r5, r5, r0
 800fc20:	d0a4      	beq.n	800fb6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800fc22:	981c      	ldr	r0, [sp, #112]	; 0x70
 800fc24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fc26:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800fc2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc2e:	7b43      	ldrb	r3, [r0, #13]
 800fc30:	4429      	add	r1, r5
 800fc32:	015b      	lsls	r3, r3, #5
 800fc34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fc38:	7983      	ldrb	r3, [r0, #6]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	440b      	add	r3, r1
 800fc3e:	42b3      	cmp	r3, r6
 800fc40:	db5c      	blt.n	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fc42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc44:	4299      	cmp	r1, r3
 800fc46:	da59      	bge.n	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fc48:	f8d8 0000 	ldr.w	r0, [r8]
 800fc4c:	42ae      	cmp	r6, r5
 800fc4e:	6803      	ldr	r3, [r0, #0]
 800fc50:	bfcc      	ite	gt
 800fc52:	1b76      	subgt	r6, r6, r5
 800fc54:	2600      	movle	r6, #0
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	bfc8      	it	gt
 800fc5a:	b2b6      	uxthgt	r6, r6
 800fc5c:	4798      	blx	r3
 800fc5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fc60:	7b5a      	ldrb	r2, [r3, #13]
 800fc62:	00d1      	lsls	r1, r2, #3
 800fc64:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800fc68:	7a19      	ldrb	r1, [r3, #8]
 800fc6a:	4339      	orrs	r1, r7
 800fc6c:	0657      	lsls	r7, r2, #25
 800fc6e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fc70:	bf48      	it	mi
 800fc72:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800fc76:	4407      	add	r7, r0
 800fc78:	bf48      	it	mi
 800fc7a:	b209      	sxthmi	r1, r1
 800fc7c:	1a7f      	subs	r7, r7, r1
 800fc7e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800fc80:	b2bf      	uxth	r7, r7
 800fc82:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800fc86:	fa0f fa87 	sxth.w	sl, r7
 800fc8a:	4551      	cmp	r1, sl
 800fc8c:	dd3a      	ble.n	800fd04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800fc8e:	0112      	lsls	r2, r2, #4
 800fc90:	79d8      	ldrb	r0, [r3, #7]
 800fc92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fc96:	4302      	orrs	r2, r0
 800fc98:	4492      	add	sl, r2
 800fc9a:	4551      	cmp	r1, sl
 800fc9c:	dc2e      	bgt.n	800fcfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800fc9e:	1bcf      	subs	r7, r1, r7
 800fca0:	468a      	mov	sl, r1
 800fca2:	b2bf      	uxth	r7, r7
 800fca4:	9319      	str	r3, [sp, #100]	; 0x64
 800fca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fca8:	f8d8 0000 	ldr.w	r0, [r8]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	6801      	ldr	r1, [r0, #0]
 800fcb0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fcb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fcb4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fcb6:	9218      	str	r2, [sp, #96]	; 0x60
 800fcb8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800fcba:	4788      	blx	r1
 800fcbc:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fcc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcc2:	910b      	str	r1, [sp, #44]	; 0x2c
 800fcc4:	f898 100e 	ldrb.w	r1, [r8, #14]
 800fcc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fcca:	910a      	str	r1, [sp, #40]	; 0x28
 800fccc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800fcd0:	9109      	str	r1, [sp, #36]	; 0x24
 800fcd2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fcd6:	9305      	str	r3, [sp, #20]
 800fcd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fcda:	9206      	str	r2, [sp, #24]
 800fcdc:	e9cd a601 	strd	sl, r6, [sp, #4]
 800fce0:	442e      	add	r6, r5
 800fce2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800fce6:	b236      	sxth	r6, r6
 800fce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcea:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800fcee:	9600      	str	r6, [sp, #0]
 800fcf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fcfa:	47b0      	blx	r6
 800fcfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcfe:	3301      	adds	r3, #1
 800fd00:	930e      	str	r3, [sp, #56]	; 0x38
 800fd02:	e6e2      	b.n	800faca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 800fd04:	2700      	movs	r7, #0
 800fd06:	e7cd      	b.n	800fca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 800fd08:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fd0a:	3501      	adds	r5, #1
 800fd0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd0e:	429d      	cmp	r5, r3
 800fd10:	f6bf af76 	bge.w	800fc00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800fd14:	4659      	mov	r1, fp
 800fd16:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800fd18:	f7f5 fd2a 	bl	8005770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	b110      	cbz	r0, 800fd26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800fd20:	280a      	cmp	r0, #10
 800fd22:	d1f2      	bne.n	800fd0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 800fd24:	e76b      	b.n	800fbfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 800fd26:	2400      	movs	r4, #0
 800fd28:	e76a      	b.n	800fc00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 800fd2a:	f1bb 0f00 	cmp.w	fp, #0
 800fd2e:	f43f af5b 	beq.w	800fbe8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 800fd32:	e776      	b.n	800fc22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0800fd34 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800fd34:	b530      	push	{r4, r5, lr}
 800fd36:	8a44      	ldrh	r4, [r0, #18]
 800fd38:	8ac5      	ldrh	r5, [r0, #22]
 800fd3a:	82c3      	strh	r3, [r0, #22]
 800fd3c:	442c      	add	r4, r5
 800fd3e:	1ae4      	subs	r4, r4, r3
 800fd40:	8b03      	ldrh	r3, [r0, #24]
 800fd42:	8244      	strh	r4, [r0, #18]
 800fd44:	8a84      	ldrh	r4, [r0, #20]
 800fd46:	4422      	add	r2, r4
 800fd48:	440c      	add	r4, r1
 800fd4a:	1a59      	subs	r1, r3, r1
 800fd4c:	8342      	strh	r2, [r0, #26]
 800fd4e:	8284      	strh	r4, [r0, #20]
 800fd50:	8301      	strh	r1, [r0, #24]
 800fd52:	bd30      	pop	{r4, r5, pc}

0800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd58:	7a43      	ldrb	r3, [r0, #9]
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	460f      	mov	r7, r1
 800fd60:	1eda      	subs	r2, r3, #3
 800fd62:	b2d2      	uxtb	r2, r2
 800fd64:	2900      	cmp	r1, #0
 800fd66:	d036      	beq.n	800fdd6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800fd68:	2a01      	cmp	r2, #1
 800fd6a:	d932      	bls.n	800fdd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800fd6c:	1e58      	subs	r0, r3, #1
 800fd6e:	f1d0 0b00 	rsbs	fp, r0, #0
 800fd72:	eb4b 0b00 	adc.w	fp, fp, r0
 800fd76:	1e99      	subs	r1, r3, #2
 800fd78:	424b      	negs	r3, r1
 800fd7a:	414b      	adcs	r3, r1
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fd84:	2500      	movs	r5, #0
 800fd86:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800fd8a:	46a9      	mov	r9, r5
 800fd8c:	8265      	strh	r5, [r4, #18]
 800fd8e:	82a5      	strh	r5, [r4, #20]
 800fd90:	2300      	movs	r3, #0
 800fd92:	9305      	str	r3, [sp, #20]
 800fd94:	8823      	ldrh	r3, [r4, #0]
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	d02b      	beq.n	800fdf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800fd9a:	eba3 020a 	sub.w	r2, r3, sl
 800fd9e:	4256      	negs	r6, r2
 800fda0:	4156      	adcs	r6, r2
 800fda2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d004      	beq.n	800fdb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fdaa:	4553      	cmp	r3, sl
 800fdac:	bf16      	itet	ne
 800fdae:	4699      	movne	r9, r3
 800fdb0:	2601      	moveq	r6, #1
 800fdb2:	2600      	movne	r6, #0
 800fdb4:	ab05      	add	r3, sp, #20
 800fdb6:	68e2      	ldr	r2, [r4, #12]
 800fdb8:	7a21      	ldrb	r1, [r4, #8]
 800fdba:	6860      	ldr	r0, [r4, #4]
 800fdbc:	f002 fd10 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fdc0:	8020      	strh	r0, [r4, #0]
 800fdc2:	b9c8      	cbnz	r0, 800fdf8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800fdc4:	8b22      	ldrh	r2, [r4, #24]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7ff ffb2 	bl	800fd34 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fdd0:	e066      	b.n	800fea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fdd2:	468b      	mov	fp, r1
 800fdd4:	e7cf      	b.n	800fd76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	2a01      	cmp	r2, #1
 800fdda:	9103      	str	r1, [sp, #12]
 800fddc:	468b      	mov	fp, r1
 800fdde:	bf8c      	ite	hi
 800fde0:	2200      	movhi	r2, #0
 800fde2:	2201      	movls	r2, #1
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	9202      	str	r2, [sp, #8]
 800fde8:	bf8c      	ite	hi
 800fdea:	2300      	movhi	r3, #0
 800fdec:	2301      	movls	r3, #1
 800fdee:	9301      	str	r3, [sp, #4]
 800fdf0:	e7c8      	b.n	800fd84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800fdf2:	4699      	mov	r9, r3
 800fdf4:	2601      	movs	r6, #1
 800fdf6:	e7dd      	b.n	800fdb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800fdf8:	8ae3      	ldrh	r3, [r4, #22]
 800fdfa:	280a      	cmp	r0, #10
 800fdfc:	f103 0301 	add.w	r3, r3, #1
 800fe00:	82e3      	strh	r3, [r4, #22]
 800fe02:	d0df      	beq.n	800fdc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800fe04:	9a05      	ldr	r2, [sp, #20]
 800fe06:	bb42      	cbnz	r2, 800fe5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800fe08:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800fe0c:	4298      	cmp	r0, r3
 800fe0e:	d001      	beq.n	800fe14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fe10:	4550      	cmp	r0, sl
 800fe12:	d1bd      	bne.n	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe14:	8823      	ldrh	r3, [r4, #0]
 800fe16:	8b21      	ldrh	r1, [r4, #24]
 800fe18:	2b20      	cmp	r3, #32
 800fe1a:	d001      	beq.n	800fe20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800fe1c:	4553      	cmp	r3, sl
 800fe1e:	d131      	bne.n	800fe84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800fe20:	2e00      	cmp	r6, #0
 800fe22:	bf0a      	itet	eq
 800fe24:	460d      	moveq	r5, r1
 800fe26:	4630      	movne	r0, r6
 800fe28:	2001      	moveq	r0, #1
 800fe2a:	440a      	add	r2, r1
 800fe2c:	8aa3      	ldrh	r3, [r4, #20]
 800fe2e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800fe32:	b292      	uxth	r2, r2
 800fe34:	8322      	strh	r2, [r4, #24]
 800fe36:	4413      	add	r3, r2
 800fe38:	2f00      	cmp	r7, #0
 800fe3a:	d03a      	beq.n	800feb2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800fe3c:	f1bb 0f00 	cmp.w	fp, #0
 800fe40:	d102      	bne.n	800fe48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800fe42:	9903      	ldr	r1, [sp, #12]
 800fe44:	b301      	cbz	r1, 800fe88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fe46:	b1f8      	cbz	r0, 800fe88 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800fe48:	8ba1      	ldrh	r1, [r4, #28]
 800fe4a:	4419      	add	r1, r3
 800fe4c:	458c      	cmp	ip, r1
 800fe4e:	da2a      	bge.n	800fea6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fe50:	8a61      	ldrh	r1, [r4, #18]
 800fe52:	b341      	cbz	r1, 800fea6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800fe54:	4563      	cmp	r3, ip
 800fe56:	dd9b      	ble.n	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe58:	e01c      	b.n	800fe94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800fe5a:	8893      	ldrh	r3, [r2, #4]
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	8023      	strh	r3, [r4, #0]
 800fe60:	f892 800d 	ldrb.w	r8, [r2, #13]
 800fe64:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800fe68:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800fe6c:	f892 800a 	ldrb.w	r8, [r2, #10]
 800fe70:	ea48 0800 	orr.w	r8, r8, r0
 800fe74:	68e0      	ldr	r0, [r4, #12]
 800fe76:	6803      	ldr	r3, [r0, #0]
 800fe78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe7a:	4798      	blx	r3
 800fe7c:	eb08 0200 	add.w	r2, r8, r0
 800fe80:	b292      	uxth	r2, r2
 800fe82:	e7c7      	b.n	800fe14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800fe84:	2000      	movs	r0, #0
 800fe86:	e7d0      	b.n	800fe2a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800fe88:	4563      	cmp	r3, ip
 800fe8a:	dd81      	ble.n	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe8c:	8a63      	ldrh	r3, [r4, #18]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f43f af7e 	beq.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fe94:	2301      	movs	r3, #1
 800fe96:	8ba2      	ldrh	r2, [r4, #28]
 800fe98:	77a3      	strb	r3, [r4, #30]
 800fe9a:	8b63      	ldrh	r3, [r4, #26]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	8363      	strh	r3, [r4, #26]
 800fea0:	b007      	add	sp, #28
 800fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea6:	2300      	movs	r3, #0
 800fea8:	4611      	mov	r1, r2
 800feaa:	4620      	mov	r0, r4
 800feac:	f7ff ff42 	bl	800fd34 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800feb0:	e76e      	b.n	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800feb2:	4563      	cmp	r3, ip
 800feb4:	dd14      	ble.n	800fee0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800feb6:	9b02      	ldr	r3, [sp, #8]
 800feb8:	b113      	cbz	r3, 800fec0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800feba:	2301      	movs	r3, #1
 800febc:	460a      	mov	r2, r1
 800febe:	e783      	b.n	800fdc8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800fec0:	9b01      	ldr	r3, [sp, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f43f af64 	beq.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fec8:	2800      	cmp	r0, #0
 800feca:	f47f af61 	bne.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fece:	b116      	cbz	r6, 800fed6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800fed0:	2301      	movs	r3, #1
 800fed2:	462a      	mov	r2, r5
 800fed4:	e779      	b.n	800fdca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800fed6:	8a63      	ldrh	r3, [r4, #18]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f43f af59 	beq.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fede:	e7df      	b.n	800fea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	f47f af55 	bne.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800fee6:	2e00      	cmp	r6, #0
 800fee8:	f43f af52 	beq.w	800fd90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800feec:	2301      	movs	r3, #1
 800feee:	462a      	mov	r2, r5
 800fef0:	e7db      	b.n	800feaa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800fef2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800fef2:	b530      	push	{r4, r5, lr}
 800fef4:	4605      	mov	r5, r0
 800fef6:	b08b      	sub	sp, #44	; 0x2c
 800fef8:	b191      	cbz	r1, 800ff20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800fefa:	2401      	movs	r4, #1
 800fefc:	e9cd 3100 	strd	r3, r1, [sp]
 800ff00:	4613      	mov	r3, r2
 800ff02:	4601      	mov	r1, r0
 800ff04:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800ff08:	a802      	add	r0, sp, #8
 800ff0a:	f7ff fd07 	bl	800f91c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800ff0e:	2100      	movs	r1, #0
 800ff10:	a802      	add	r0, sp, #8
 800ff12:	f7ff ff1f 	bl	800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800ff16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ff1a:	b163      	cbz	r3, 800ff36 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800ff1c:	3401      	adds	r4, #1
 800ff1e:	e7f6      	b.n	800ff0e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800ff20:	2401      	movs	r4, #1
 800ff22:	f002 fd29 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ff26:	280a      	cmp	r0, #10
 800ff28:	4628      	mov	r0, r5
 800ff2a:	bf08      	it	eq
 800ff2c:	3401      	addeq	r4, #1
 800ff2e:	f002 fd23 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d1f7      	bne.n	800ff26 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800ff36:	b2a0      	uxth	r0, r4
 800ff38:	b00b      	add	sp, #44	; 0x2c
 800ff3a:	bd30      	pop	{r4, r5, pc}

0800ff3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800ff3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff40:	b0e5      	sub	sp, #404	; 0x194
 800ff42:	4689      	mov	r9, r1
 800ff44:	461c      	mov	r4, r3
 800ff46:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800ff4a:	900a      	str	r0, [sp, #40]	; 0x28
 800ff4c:	f1ba 0f00 	cmp.w	sl, #0
 800ff50:	f000 80b4 	beq.w	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 80b0 	beq.w	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ff5c:	7ba3      	ldrb	r3, [r4, #14]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f000 80ac 	beq.w	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800ff64:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800ff68:	6810      	ldr	r0, [r2, #0]
 800ff6a:	6851      	ldr	r1, [r2, #4]
 800ff6c:	2500      	movs	r5, #0
 800ff6e:	4643      	mov	r3, r8
 800ff70:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800ff74:	950f      	str	r5, [sp, #60]	; 0x3c
 800ff76:	af19      	add	r7, sp, #100	; 0x64
 800ff78:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ff7c:	79a2      	ldrb	r2, [r4, #6]
 800ff7e:	c303      	stmia	r3!, {r0, r1}
 800ff80:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800ff84:	a90f      	add	r1, sp, #60	; 0x3c
 800ff86:	4640      	mov	r0, r8
 800ff88:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ff8c:	f7ff fd3e 	bl	800fa0c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ff90:	a90f      	add	r1, sp, #60	; 0x3c
 800ff92:	79a2      	ldrb	r2, [r4, #6]
 800ff94:	4608      	mov	r0, r1
 800ff96:	f7ff fd39 	bl	800fa0c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	f002 f8c0 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800ffa0:	6820      	ldr	r0, [r4, #0]
 800ffa2:	6803      	ldr	r3, [r0, #0]
 800ffa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffa6:	4798      	blx	r3
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	6820      	ldr	r0, [r4, #0]
 800ffac:	6803      	ldr	r3, [r0, #0]
 800ffae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffb0:	4798      	blx	r3
 800ffb2:	4633      	mov	r3, r6
 800ffb4:	9000      	str	r0, [sp, #0]
 800ffb6:	4651      	mov	r1, sl
 800ffb8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800ffba:	4638      	mov	r0, r7
 800ffbc:	f002 f90b 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ffc0:	7923      	ldrb	r3, [r4, #4]
 800ffc2:	6820      	ldr	r0, [r4, #0]
 800ffc4:	9308      	str	r3, [sp, #32]
 800ffc6:	6803      	ldr	r3, [r0, #0]
 800ffc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffca:	4798      	blx	r3
 800ffcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffd0:	181e      	adds	r6, r3, r0
 800ffd2:	42ae      	cmp	r6, r5
 800ffd4:	dd06      	ble.n	800ffe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800ffd6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800ffda:	4282      	cmp	r2, r0
 800ffdc:	bfa4      	itt	ge
 800ffde:	189d      	addge	r5, r3, r2
 800ffe0:	fb95 f5f6 	sdivge	r5, r5, r6
 800ffe4:	a832      	add	r0, sp, #200	; 0xc8
 800ffe6:	f002 f89b 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 800ffea:	7c23      	ldrb	r3, [r4, #16]
 800ffec:	b17b      	cbz	r3, 801000e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800ffee:	6820      	ldr	r0, [r4, #0]
 800fff0:	6803      	ldr	r3, [r0, #0]
 800fff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fff4:	4798      	blx	r3
 800fff6:	4683      	mov	fp, r0
 800fff8:	6820      	ldr	r0, [r4, #0]
 800fffa:	6803      	ldr	r3, [r0, #0]
 800fffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fffe:	4798      	blx	r3
 8010000:	465b      	mov	r3, fp
 8010002:	9000      	str	r0, [sp, #0]
 8010004:	4651      	mov	r1, sl
 8010006:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8010008:	a832      	add	r0, sp, #200	; 0xc8
 801000a:	f002 f8e4 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801000e:	7be1      	ldrb	r1, [r4, #15]
 8010010:	a811      	add	r0, sp, #68	; 0x44
 8010012:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010016:	7963      	ldrb	r3, [r4, #5]
 8010018:	1a52      	subs	r2, r2, r1
 801001a:	7c21      	ldrb	r1, [r4, #16]
 801001c:	9101      	str	r1, [sp, #4]
 801001e:	b292      	uxth	r2, r2
 8010020:	6821      	ldr	r1, [r4, #0]
 8010022:	9100      	str	r1, [sp, #0]
 8010024:	a932      	add	r1, sp, #200	; 0xc8
 8010026:	f7ff fc79 	bl	800f91c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801002a:	7c23      	ldrb	r3, [r4, #16]
 801002c:	b9bb      	cbnz	r3, 801005e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801002e:	fa1f fa86 	uxth.w	sl, r6
 8010032:	2d00      	cmp	r5, #0
 8010034:	dd45      	ble.n	80100c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8010036:	4638      	mov	r0, r7
 8010038:	f002 fc9e 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801003c:	2800      	cmp	r0, #0
 801003e:	d03d      	beq.n	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010040:	280a      	cmp	r0, #10
 8010042:	d1f6      	bne.n	8010032 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8010044:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010048:	3d01      	subs	r5, #1
 801004a:	4453      	add	r3, sl
 801004c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010050:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8010054:	eba3 030a 	sub.w	r3, r3, sl
 8010058:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801005c:	e7e9      	b.n	8010032 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801005e:	0073      	lsls	r3, r6, #1
 8010060:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8010064:	fa1f fa86 	uxth.w	sl, r6
 8010068:	9309      	str	r3, [sp, #36]	; 0x24
 801006a:	2d00      	cmp	r5, #0
 801006c:	dd29      	ble.n	80100c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801006e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8010072:	a811      	add	r0, sp, #68	; 0x44
 8010074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010076:	428b      	cmp	r3, r1
 8010078:	bfd4      	ite	le
 801007a:	2100      	movle	r1, #0
 801007c:	2101      	movgt	r1, #1
 801007e:	f7ff fe69 	bl	800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8010082:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8010086:	3b01      	subs	r3, #1
 8010088:	b29b      	uxth	r3, r3
 801008a:	455b      	cmp	r3, fp
 801008c:	930b      	str	r3, [sp, #44]	; 0x2c
 801008e:	d005      	beq.n	801009c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8010090:	7961      	ldrb	r1, [r4, #5]
 8010092:	4638      	mov	r0, r7
 8010094:	f7f5 fb6c 	bl	8005770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801009a:	e7f4      	b.n	8010086 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801009c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80100a0:	3d01      	subs	r5, #1
 80100a2:	4453      	add	r3, sl
 80100a4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80100a8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80100ac:	eba3 030a 	sub.w	r3, r3, sl
 80100b0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80100b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1d6      	bne.n	801006a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80100bc:	b065      	add	sp, #404	; 0x194
 80100be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c2:	0075      	lsls	r5, r6, #1
 80100c4:	f04f 0a00 	mov.w	sl, #0
 80100c8:	7c23      	ldrb	r3, [r4, #16]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d066      	beq.n	801019c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80100ce:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80100d2:	a811      	add	r0, sp, #68	; 0x44
 80100d4:	428d      	cmp	r5, r1
 80100d6:	bfd4      	ite	le
 80100d8:	2100      	movle	r1, #0
 80100da:	2101      	movgt	r1, #1
 80100dc:	f7ff fe3a 	bl	800fd54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80100e0:	9b08      	ldr	r3, [sp, #32]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d055      	beq.n	8010192 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80100e6:	f894 b010 	ldrb.w	fp, [r4, #16]
 80100ea:	2264      	movs	r2, #100	; 0x64
 80100ec:	4639      	mov	r1, r7
 80100ee:	a84b      	add	r0, sp, #300	; 0x12c
 80100f0:	f00f fa4a 	bl	801f588 <memcpy>
 80100f4:	f1bb 0f00 	cmp.w	fp, #0
 80100f8:	d058      	beq.n	80101ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80100fa:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80100fe:	7922      	ldrb	r2, [r4, #4]
 8010100:	2a01      	cmp	r2, #1
 8010102:	d13c      	bne.n	801017e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8010104:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8010108:	1ac0      	subs	r0, r0, r3
 801010a:	2302      	movs	r3, #2
 801010c:	fb90 f0f3 	sdiv	r0, r0, r3
 8010110:	b200      	sxth	r0, r0
 8010112:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010116:	4418      	add	r0, r3
 8010118:	7c23      	ldrb	r3, [r4, #16]
 801011a:	b200      	sxth	r0, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d03a      	beq.n	8010196 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8010120:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8010124:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8010128:	9000      	str	r0, [sp, #0]
 801012a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801012e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010130:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8010134:	e9cd a703 	strd	sl, r7, [sp, #12]
 8010138:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801013c:	464a      	mov	r2, r9
 801013e:	2100      	movs	r1, #0
 8010140:	f7ff fc95 	bl	800fa6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8010144:	2800      	cmp	r0, #0
 8010146:	d1b9      	bne.n	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8010148:	b2b2      	uxth	r2, r6
 801014a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801014e:	4611      	mov	r1, r2
 8010150:	4413      	add	r3, r2
 8010152:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8010156:	b21b      	sxth	r3, r3
 8010158:	1a52      	subs	r2, r2, r1
 801015a:	7c21      	ldrb	r1, [r4, #16]
 801015c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010160:	b212      	sxth	r2, r2
 8010162:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8010166:	b109      	cbz	r1, 801016c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8010168:	42b2      	cmp	r2, r6
 801016a:	dba7      	blt.n	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801016c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8010170:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8010174:	440a      	add	r2, r1
 8010176:	b212      	sxth	r2, r2
 8010178:	4293      	cmp	r3, r2
 801017a:	dda5      	ble.n	80100c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801017c:	e79e      	b.n	80100bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801017e:	2a02      	cmp	r2, #2
 8010180:	d105      	bne.n	801018e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8010182:	7be2      	ldrb	r2, [r4, #15]
 8010184:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8010188:	1a80      	subs	r0, r0, r2
 801018a:	1ac0      	subs	r0, r0, r3
 801018c:	e7c0      	b.n	8010110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801018e:	2000      	movs	r0, #0
 8010190:	e7bf      	b.n	8010112 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8010192:	7be0      	ldrb	r0, [r4, #15]
 8010194:	e7bd      	b.n	8010112 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8010196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801019a:	e7c3      	b.n	8010124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801019c:	9b08      	ldr	r3, [sp, #32]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0f7      	beq.n	8010192 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80101a2:	2264      	movs	r2, #100	; 0x64
 80101a4:	4639      	mov	r1, r7
 80101a6:	a84b      	add	r0, sp, #300	; 0x12c
 80101a8:	f00f f9ee 	bl	801f588 <memcpy>
 80101ac:	2300      	movs	r3, #0
 80101ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80101b2:	6821      	ldr	r1, [r4, #0]
 80101b4:	a84b      	add	r0, sp, #300	; 0x12c
 80101b6:	f7ff fbed 	bl	800f994 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80101ba:	b203      	sxth	r3, r0
 80101bc:	e79f      	b.n	80100fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080101be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80101be:	2b03      	cmp	r3, #3
 80101c0:	d818      	bhi.n	80101f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80101c2:	e8df f003 	tbb	[pc, r3]
 80101c6:	0602      	.short	0x0602
 80101c8:	130d      	.short	0x130d
 80101ca:	f9b0 2000 	ldrsh.w	r2, [r0]
 80101ce:	1850      	adds	r0, r2, r1
 80101d0:	4770      	bx	lr
 80101d2:	8803      	ldrh	r3, [r0, #0]
 80101d4:	8880      	ldrh	r0, [r0, #4]
 80101d6:	4418      	add	r0, r3
 80101d8:	b200      	sxth	r0, r0
 80101da:	1a80      	subs	r0, r0, r2
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr
 80101e0:	8803      	ldrh	r3, [r0, #0]
 80101e2:	8880      	ldrh	r0, [r0, #4]
 80101e4:	4418      	add	r0, r3
 80101e6:	b200      	sxth	r0, r0
 80101e8:	1a40      	subs	r0, r0, r1
 80101ea:	e7f7      	b.n	80101dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80101ec:	f9b0 0000 	ldrsh.w	r0, [r0]
 80101f0:	4410      	add	r0, r2
 80101f2:	4770      	bx	lr
 80101f4:	2000      	movs	r0, #0
 80101f6:	4770      	bx	lr

080101f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80101f8:	2b03      	cmp	r3, #3
 80101fa:	d817      	bhi.n	801022c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80101fc:	e8df f003 	tbb	[pc, r3]
 8010200:	10090602 	.word	0x10090602
 8010204:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010208:	1850      	adds	r0, r2, r1
 801020a:	4770      	bx	lr
 801020c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010210:	e7fa      	b.n	8010208 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8010212:	8843      	ldrh	r3, [r0, #2]
 8010214:	88c0      	ldrh	r0, [r0, #6]
 8010216:	4418      	add	r0, r3
 8010218:	b200      	sxth	r0, r0
 801021a:	1a80      	subs	r0, r0, r2
 801021c:	3801      	subs	r0, #1
 801021e:	4770      	bx	lr
 8010220:	8843      	ldrh	r3, [r0, #2]
 8010222:	88c0      	ldrh	r0, [r0, #6]
 8010224:	4418      	add	r0, r3
 8010226:	b200      	sxth	r0, r0
 8010228:	1a40      	subs	r0, r0, r1
 801022a:	e7f7      	b.n	801021c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801022c:	2000      	movs	r0, #0
 801022e:	4770      	bx	lr

08010230 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8010230:	4b01      	ldr	r3, [pc, #4]	; (8010238 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8010232:	2200      	movs	r2, #0
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	4770      	bx	lr
 8010238:	2002491c 	.word	0x2002491c

0801023c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801023c:	4603      	mov	r3, r0
 801023e:	b1c8      	cbz	r0, 8010274 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8010240:	0c02      	lsrs	r2, r0, #16
 8010242:	0412      	lsls	r2, r2, #16
 8010244:	b9a2      	cbnz	r2, 8010270 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8010246:	0403      	lsls	r3, r0, #16
 8010248:	2010      	movs	r0, #16
 801024a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801024e:	bf04      	itt	eq
 8010250:	021b      	lsleq	r3, r3, #8
 8010252:	3008      	addeq	r0, #8
 8010254:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010258:	bf04      	itt	eq
 801025a:	011b      	lsleq	r3, r3, #4
 801025c:	3004      	addeq	r0, #4
 801025e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010262:	bf04      	itt	eq
 8010264:	009b      	lsleq	r3, r3, #2
 8010266:	3002      	addeq	r0, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	db04      	blt.n	8010276 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801026c:	3001      	adds	r0, #1
 801026e:	4770      	bx	lr
 8010270:	2000      	movs	r0, #0
 8010272:	e7ea      	b.n	801024a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8010274:	2020      	movs	r0, #32
 8010276:	4770      	bx	lr

08010278 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8010278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027c:	b087      	sub	sp, #28
 801027e:	4681      	mov	r9, r0
 8010280:	4698      	mov	r8, r3
 8010282:	4610      	mov	r0, r2
 8010284:	460d      	mov	r5, r1
 8010286:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801028a:	b981      	cbnz	r1, 80102ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801028c:	b14b      	cbz	r3, 80102a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801028e:	460b      	mov	r3, r1
 8010290:	464a      	mov	r2, r9
 8010292:	4641      	mov	r1, r8
 8010294:	e9cd 4700 	strd	r4, r7, [sp]
 8010298:	f7ff ffee 	bl	8010278 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801029c:	b007      	add	sp, #28
 801029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
 80102a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80102aa:	603b      	str	r3, [r7, #0]
 80102ac:	e7f6      	b.n	801029c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80102ae:	fa32 fa01 	lsrs.w	sl, r2, r1
 80102b2:	d107      	bne.n	80102c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80102b4:	fb09 f602 	mul.w	r6, r9, r2
 80102b8:	fbb6 f0f4 	udiv	r0, r6, r4
 80102bc:	fb04 6610 	mls	r6, r4, r0, r6
 80102c0:	603e      	str	r6, [r7, #0]
 80102c2:	e7eb      	b.n	801029c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80102c4:	2601      	movs	r6, #1
 80102c6:	fa09 fb01 	lsl.w	fp, r9, r1
 80102ca:	408e      	lsls	r6, r1
 80102cc:	fbbb f3f4 	udiv	r3, fp, r4
 80102d0:	3e01      	subs	r6, #1
 80102d2:	9302      	str	r3, [sp, #8]
 80102d4:	fb0a f303 	mul.w	r3, sl, r3
 80102d8:	4016      	ands	r6, r2
 80102da:	9303      	str	r3, [sp, #12]
 80102dc:	4630      	mov	r0, r6
 80102de:	f7ff ffad 	bl	801023c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80102e2:	464a      	mov	r2, r9
 80102e4:	460b      	mov	r3, r1
 80102e6:	4601      	mov	r1, r0
 80102e8:	4630      	mov	r0, r6
 80102ea:	e9cd 4700 	strd	r4, r7, [sp]
 80102ee:	f7ff ffc3 	bl	8010278 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80102f2:	9b02      	ldr	r3, [sp, #8]
 80102f4:	4606      	mov	r6, r0
 80102f6:	eb05 0108 	add.w	r1, r5, r8
 80102fa:	fb04 bb13 	mls	fp, r4, r3, fp
 80102fe:	4658      	mov	r0, fp
 8010300:	f7ff ff9c 	bl	801023c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010304:	ab05      	add	r3, sp, #20
 8010306:	465a      	mov	r2, fp
 8010308:	e9cd 4300 	strd	r4, r3, [sp]
 801030c:	4603      	mov	r3, r0
 801030e:	4650      	mov	r0, sl
 8010310:	f7ff ffb2 	bl	8010278 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	9a05      	ldr	r2, [sp, #20]
 8010318:	9b03      	ldr	r3, [sp, #12]
 801031a:	4411      	add	r1, r2
 801031c:	fbb1 f2f4 	udiv	r2, r1, r4
 8010320:	18d3      	adds	r3, r2, r3
 8010322:	fb04 1412 	mls	r4, r4, r2, r1
 8010326:	441e      	add	r6, r3
 8010328:	603c      	str	r4, [r7, #0]
 801032a:	4430      	add	r0, r6
 801032c:	e7b6      	b.n	801029c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801032e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801032e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010332:	b085      	sub	sp, #20
 8010334:	f1b0 0900 	subs.w	r9, r0, #0
 8010338:	461d      	mov	r5, r3
 801033a:	4617      	mov	r7, r2
 801033c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801033e:	bfbb      	ittet	lt
 8010340:	f1c9 0900 	rsblt	r9, r9, #0
 8010344:	f04f 36ff 	movlt.w	r6, #4294967295
 8010348:	2601      	movge	r6, #1
 801034a:	6823      	ldrlt	r3, [r4, #0]
 801034c:	bfbc      	itt	lt
 801034e:	425b      	neglt	r3, r3
 8010350:	6023      	strlt	r3, [r4, #0]
 8010352:	2a00      	cmp	r2, #0
 8010354:	da04      	bge.n	8010360 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	4257      	negs	r7, r2
 801035a:	4276      	negs	r6, r6
 801035c:	425b      	negs	r3, r3
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	2d00      	cmp	r5, #0
 8010362:	4638      	mov	r0, r7
 8010364:	bfba      	itte	lt
 8010366:	426d      	neglt	r5, r5
 8010368:	f04f 38ff 	movlt.w	r8, #4294967295
 801036c:	f04f 0801 	movge.w	r8, #1
 8010370:	f7ff ff64 	bl	801023c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010374:	ab03      	add	r3, sp, #12
 8010376:	463a      	mov	r2, r7
 8010378:	e9cd 5300 	strd	r5, r3, [sp]
 801037c:	4603      	mov	r3, r0
 801037e:	4648      	mov	r0, r9
 8010380:	f7ff ff7a 	bl	8010278 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010384:	6823      	ldr	r3, [r4, #0]
 8010386:	9a03      	ldr	r2, [sp, #12]
 8010388:	4546      	cmp	r6, r8
 801038a:	441a      	add	r2, r3
 801038c:	fb92 f3f5 	sdiv	r3, r2, r5
 8010390:	4418      	add	r0, r3
 8010392:	fb05 2313 	mls	r3, r5, r3, r2
 8010396:	bf18      	it	ne
 8010398:	4240      	negne	r0, r0
 801039a:	1c72      	adds	r2, r6, #1
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	d105      	bne.n	80103ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f1c3 0200 	rsb	r2, r3, #0
 80103a6:	db0b      	blt.n	80103c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80103a8:	6022      	str	r2, [r4, #0]
 80103aa:	e006      	b.n	80103ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80103ac:	2e01      	cmp	r6, #1
 80103ae:	d104      	bne.n	80103ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	da02      	bge.n	80103ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80103b4:	442b      	add	r3, r5
 80103b6:	3801      	subs	r0, #1
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	b005      	add	sp, #20
 80103bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c0:	3801      	subs	r0, #1
 80103c2:	1b52      	subs	r2, r2, r5
 80103c4:	e7f0      	b.n	80103a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080103c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80103c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80103cc:	4c1c      	ldr	r4, [pc, #112]	; (8010440 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80103ce:	4605      	mov	r5, r0
 80103d0:	6807      	ldr	r7, [r0, #0]
 80103d2:	69a3      	ldr	r3, [r4, #24]
 80103d4:	b92b      	cbnz	r3, 80103e2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80103d6:	6840      	ldr	r0, [r0, #4]
 80103d8:	e9c5 7000 	strd	r7, r0, [r5]
 80103dc:	b004      	add	sp, #16
 80103de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e2:	f04f 0802 	mov.w	r8, #2
 80103e6:	68a2      	ldr	r2, [r4, #8]
 80103e8:	ae04      	add	r6, sp, #16
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	fb93 f1f8 	sdiv	r1, r3, r8
 80103f0:	440a      	add	r2, r1
 80103f2:	69e1      	ldr	r1, [r4, #28]
 80103f4:	f846 2d04 	str.w	r2, [r6, #-4]!
 80103f8:	463a      	mov	r2, r7
 80103fa:	9600      	str	r6, [sp, #0]
 80103fc:	f7ff ff97 	bl	801032e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010400:	69a3      	ldr	r3, [r4, #24]
 8010402:	4607      	mov	r7, r0
 8010404:	686a      	ldr	r2, [r5, #4]
 8010406:	6a21      	ldr	r1, [r4, #32]
 8010408:	9600      	str	r6, [sp, #0]
 801040a:	6860      	ldr	r0, [r4, #4]
 801040c:	f7ff ff8f 	bl	801032e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8010410:	69a3      	ldr	r3, [r4, #24]
 8010412:	6962      	ldr	r2, [r4, #20]
 8010414:	4407      	add	r7, r0
 8010416:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010418:	9600      	str	r6, [sp, #0]
 801041a:	68e0      	ldr	r0, [r4, #12]
 801041c:	fb93 f8f8 	sdiv	r8, r3, r8
 8010420:	4442      	add	r2, r8
 8010422:	9203      	str	r2, [sp, #12]
 8010424:	682a      	ldr	r2, [r5, #0]
 8010426:	f7ff ff82 	bl	801032e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801042a:	4680      	mov	r8, r0
 801042c:	9600      	str	r6, [sp, #0]
 801042e:	69a3      	ldr	r3, [r4, #24]
 8010430:	686a      	ldr	r2, [r5, #4]
 8010432:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010434:	6920      	ldr	r0, [r4, #16]
 8010436:	f7ff ff7a 	bl	801032e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801043a:	4440      	add	r0, r8
 801043c:	e7cc      	b.n	80103d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801043e:	bf00      	nop
 8010440:	20024920 	.word	0x20024920

08010444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010444:	4b07      	ldr	r3, [pc, #28]	; (8010464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2b01      	cmp	r3, #1
 801044a:	d109      	bne.n	8010460 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801044c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010450:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010454:	8003      	strh	r3, [r0, #0]
 8010456:	4b04      	ldr	r3, [pc, #16]	; (8010468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	3b01      	subs	r3, #1
 801045c:	1a9b      	subs	r3, r3, r2
 801045e:	800b      	strh	r3, [r1, #0]
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	2002490c 	.word	0x2002490c
 8010468:	20024908 	.word	0x20024908

0801046c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801046c:	4b07      	ldr	r3, [pc, #28]	; (801048c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801046e:	b510      	push	{r4, lr}
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d108      	bne.n	8010488 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8010476:	4b06      	ldr	r3, [pc, #24]	; (8010490 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8010478:	880c      	ldrh	r4, [r1, #0]
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010480:	3b01      	subs	r3, #1
 8010482:	1b1b      	subs	r3, r3, r4
 8010484:	8003      	strh	r3, [r0, #0]
 8010486:	800a      	strh	r2, [r1, #0]
 8010488:	bd10      	pop	{r4, pc}
 801048a:	bf00      	nop
 801048c:	2002490c 	.word	0x2002490c
 8010490:	20024908 	.word	0x20024908

08010494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8010494:	4b0a      	ldr	r3, [pc, #40]	; (80104c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8010496:	b510      	push	{r4, lr}
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d10e      	bne.n	80104bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801049e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80104a2:	8843      	ldrh	r3, [r0, #2]
 80104a4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80104a8:	18ca      	adds	r2, r1, r3
 80104aa:	4b06      	ldr	r3, [pc, #24]	; (80104c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80104ac:	8044      	strh	r4, [r0, #2]
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	1a9b      	subs	r3, r3, r2
 80104b2:	8003      	strh	r3, [r0, #0]
 80104b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80104b8:	8081      	strh	r1, [r0, #4]
 80104ba:	80c3      	strh	r3, [r0, #6]
 80104bc:	bd10      	pop	{r4, pc}
 80104be:	bf00      	nop
 80104c0:	2002490c 	.word	0x2002490c
 80104c4:	20024908 	.word	0x20024908

080104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80104c8:	4b08      	ldr	r3, [pc, #32]	; (80104ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d10c      	bne.n	80104ea <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80104d0:	8803      	ldrh	r3, [r0, #0]
 80104d2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80104d6:	8842      	ldrh	r2, [r0, #2]
 80104d8:	8002      	strh	r2, [r0, #0]
 80104da:	185a      	adds	r2, r3, r1
 80104dc:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	1a9b      	subs	r3, r3, r2
 80104e2:	8043      	strh	r3, [r0, #2]
 80104e4:	88c3      	ldrh	r3, [r0, #6]
 80104e6:	80c1      	strh	r1, [r0, #6]
 80104e8:	8083      	strh	r3, [r0, #4]
 80104ea:	4770      	bx	lr
 80104ec:	2002490c 	.word	0x2002490c
 80104f0:	20024908 	.word	0x20024908

080104f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80104f4:	4b07      	ldr	r3, [pc, #28]	; (8010514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80104f6:	b510      	push	{r4, lr}
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d108      	bne.n	8010510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80104fe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010502:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010506:	8003      	strh	r3, [r0, #0]
 8010508:	8893      	ldrh	r3, [r2, #4]
 801050a:	3b01      	subs	r3, #1
 801050c:	1b1b      	subs	r3, r3, r4
 801050e:	800b      	strh	r3, [r1, #0]
 8010510:	bd10      	pop	{r4, pc}
 8010512:	bf00      	nop
 8010514:	2002490c 	.word	0x2002490c

08010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8010518:	4b0a      	ldr	r3, [pc, #40]	; (8010544 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801051a:	460a      	mov	r2, r1
 801051c:	b510      	push	{r4, lr}
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d10d      	bne.n	8010540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8010524:	8881      	ldrh	r1, [r0, #4]
 8010526:	8803      	ldrh	r3, [r0, #0]
 8010528:	440b      	add	r3, r1
 801052a:	4601      	mov	r1, r0
 801052c:	3b01      	subs	r3, #1
 801052e:	f821 3b02 	strh.w	r3, [r1], #2
 8010532:	f7ff ffdf 	bl	80104f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010536:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801053a:	88c2      	ldrh	r2, [r0, #6]
 801053c:	80c3      	strh	r3, [r0, #6]
 801053e:	8082      	strh	r2, [r0, #4]
 8010540:	bd10      	pop	{r4, pc}
 8010542:	bf00      	nop
 8010544:	2002490c 	.word	0x2002490c

08010548 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	2300      	movs	r3, #0
 801054c:	4c0a      	ldr	r4, [pc, #40]	; (8010578 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801054e:	4605      	mov	r5, r0
 8010550:	460e      	mov	r6, r1
 8010552:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010556:	6820      	ldr	r0, [r4, #0]
 8010558:	b110      	cbz	r0, 8010560 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801055a:	6803      	ldr	r3, [r0, #0]
 801055c:	695b      	ldr	r3, [r3, #20]
 801055e:	4798      	blx	r3
 8010560:	6026      	str	r6, [r4, #0]
 8010562:	4630      	mov	r0, r6
 8010564:	6833      	ldr	r3, [r6, #0]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	4798      	blx	r3
 801056a:	682b      	ldr	r3, [r5, #0]
 801056c:	4628      	mov	r0, r5
 801056e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010574:	4718      	bx	r3
 8010576:	bf00      	nop
 8010578:	20024950 	.word	0x20024950

0801057c <_ZN8touchgfx11Application13requestRedrawEv>:
 801057c:	4b06      	ldr	r3, [pc, #24]	; (8010598 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801057e:	2100      	movs	r1, #0
 8010580:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010584:	4b05      	ldr	r3, [pc, #20]	; (801059c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8010586:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801058a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801058e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8010592:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8010596:	4770      	bx	lr
 8010598:	20024908 	.word	0x20024908
 801059c:	2002490a 	.word	0x2002490a

080105a0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80105a0:	4b03      	ldr	r3, [pc, #12]	; (80105b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80105a2:	6818      	ldr	r0, [r3, #0]
 80105a4:	b110      	cbz	r0, 80105ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80105a6:	6803      	ldr	r3, [r0, #0]
 80105a8:	699b      	ldr	r3, [r3, #24]
 80105aa:	4718      	bx	r3
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	20024950 	.word	0x20024950

080105b4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80105b4:	4770      	bx	lr
	...

080105b8 <_ZN8touchgfx11Application4drawEv>:
 80105b8:	4b09      	ldr	r3, [pc, #36]	; (80105e0 <_ZN8touchgfx11Application4drawEv+0x28>)
 80105ba:	b507      	push	{r0, r1, r2, lr}
 80105bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105c0:	2100      	movs	r1, #0
 80105c2:	4b08      	ldr	r3, [pc, #32]	; (80105e4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80105c4:	9100      	str	r1, [sp, #0]
 80105c6:	4669      	mov	r1, sp
 80105c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80105d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80105d4:	6803      	ldr	r3, [r0, #0]
 80105d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d8:	4798      	blx	r3
 80105da:	b003      	add	sp, #12
 80105dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80105e0:	20024908 	.word	0x20024908
 80105e4:	2002490a 	.word	0x2002490a

080105e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80105e8:	4b03      	ldr	r3, [pc, #12]	; (80105f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80105ea:	6818      	ldr	r0, [r3, #0]
 80105ec:	b110      	cbz	r0, 80105f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80105ee:	6803      	ldr	r3, [r0, #0]
 80105f0:	69db      	ldr	r3, [r3, #28]
 80105f2:	4718      	bx	r3
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	20024950 	.word	0x20024950

080105fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80105fc:	4b03      	ldr	r3, [pc, #12]	; (801060c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80105fe:	6818      	ldr	r0, [r3, #0]
 8010600:	b110      	cbz	r0, 8010608 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8010602:	6803      	ldr	r3, [r0, #0]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	4718      	bx	r3
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	20024950 	.word	0x20024950

08010610 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8010610:	2300      	movs	r3, #0
 8010612:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010616:	4770      	bx	lr

08010618 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8010618:	4b03      	ldr	r3, [pc, #12]	; (8010628 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	b110      	cbz	r0, 8010624 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801061e:	6803      	ldr	r3, [r0, #0]
 8010620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010622:	4718      	bx	r3
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20024950 	.word	0x20024950

0801062c <_ZN8touchgfx11Application15handleTickEventEv>:
 801062c:	b570      	push	{r4, r5, r6, lr}
 801062e:	4d32      	ldr	r5, [pc, #200]	; (80106f8 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8010630:	4604      	mov	r4, r0
 8010632:	6828      	ldr	r0, [r5, #0]
 8010634:	b140      	cbz	r0, 8010648 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8010636:	7a03      	ldrb	r3, [r0, #8]
 8010638:	b933      	cbnz	r3, 8010648 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801063a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801063e:	6803      	ldr	r3, [r0, #0]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010646:	4718      	bx	r3
 8010648:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801064c:	b97b      	cbnz	r3, 801066e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801064e:	b170      	cbz	r0, 801066e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010650:	7a03      	ldrb	r3, [r0, #8]
 8010652:	b163      	cbz	r3, 801066e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8010654:	4b29      	ldr	r3, [pc, #164]	; (80106fc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8010656:	6818      	ldr	r0, [r3, #0]
 8010658:	b110      	cbz	r0, 8010660 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801065a:	6803      	ldr	r3, [r0, #0]
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	4798      	blx	r3
 8010660:	6828      	ldr	r0, [r5, #0]
 8010662:	6803      	ldr	r3, [r0, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	4798      	blx	r3
 8010668:	2301      	movs	r3, #1
 801066a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801066e:	2500      	movs	r5, #0
 8010670:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8010674:	42a8      	cmp	r0, r5
 8010676:	dd0c      	ble.n	8010692 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8010678:	1963      	adds	r3, r4, r5
 801067a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801067e:	b132      	cbz	r2, 801068e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8010680:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8010684:	4413      	add	r3, r2
 8010686:	6858      	ldr	r0, [r3, #4]
 8010688:	6803      	ldr	r3, [r0, #0]
 801068a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801068c:	4798      	blx	r3
 801068e:	3501      	adds	r5, #1
 8010690:	e7ee      	b.n	8010670 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010692:	2300      	movs	r3, #0
 8010694:	461a      	mov	r2, r3
 8010696:	4298      	cmp	r0, r3
 8010698:	d015      	beq.n	80106c6 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801069a:	18e1      	adds	r1, r4, r3
 801069c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80106a0:	b16d      	cbz	r5, 80106be <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d00a      	beq.n	80106bc <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 80106a6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80106aa:	4431      	add	r1, r6
 80106ac:	684e      	ldr	r6, [r1, #4]
 80106ae:	b291      	uxth	r1, r2
 80106b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80106b4:	604e      	str	r6, [r1, #4]
 80106b6:	18a1      	adds	r1, r4, r2
 80106b8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80106bc:	3201      	adds	r2, #1
 80106be:	3301      	adds	r3, #1
 80106c0:	e7e9      	b.n	8010696 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80106c2:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80106c6:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 80106ca:	4295      	cmp	r5, r2
 80106cc:	dd0d      	ble.n	80106ea <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80106ce:	1e6b      	subs	r3, r5, #1
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80106d6:	4618      	mov	r0, r3
 80106d8:	3104      	adds	r1, #4
 80106da:	4285      	cmp	r5, r0
 80106dc:	ddf1      	ble.n	80106c2 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80106de:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80106e2:	3001      	adds	r0, #1
 80106e4:	f841 6c04 	str.w	r6, [r1, #-4]
 80106e8:	e7f7      	b.n	80106da <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80106ea:	4b04      	ldr	r3, [pc, #16]	; (80106fc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80106ec:	6818      	ldr	r0, [r3, #0]
 80106ee:	b110      	cbz	r0, 80106f6 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	e7a5      	b.n	8010642 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80106f6:	bd70      	pop	{r4, r5, r6, pc}
 80106f8:	20024954 	.word	0x20024954
 80106fc:	20024950 	.word	0x20024950

08010700 <_ZN8touchgfx11ApplicationD1Ev>:
 8010700:	4770      	bx	lr

08010702 <_ZN8touchgfx11ApplicationD0Ev>:
 8010702:	b510      	push	{r4, lr}
 8010704:	4604      	mov	r4, r0
 8010706:	f44f 719c 	mov.w	r1, #312	; 0x138
 801070a:	f00e fe8c 	bl	801f426 <_ZdlPvj>
 801070e:	4620      	mov	r0, r4
 8010710:	bd10      	pop	{r4, pc}

08010712 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010712:	b510      	push	{r4, lr}
 8010714:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010718:	888a      	ldrh	r2, [r1, #4]
 801071a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801071e:	4422      	add	r2, r4
 8010720:	b212      	sxth	r2, r2
 8010722:	4293      	cmp	r3, r2
 8010724:	da15      	bge.n	8010752 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010726:	8882      	ldrh	r2, [r0, #4]
 8010728:	4413      	add	r3, r2
 801072a:	b21b      	sxth	r3, r3
 801072c:	429c      	cmp	r4, r3
 801072e:	da10      	bge.n	8010752 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010730:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010734:	88c9      	ldrh	r1, [r1, #6]
 8010736:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801073a:	4419      	add	r1, r3
 801073c:	b209      	sxth	r1, r1
 801073e:	428a      	cmp	r2, r1
 8010740:	da07      	bge.n	8010752 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010742:	88c0      	ldrh	r0, [r0, #6]
 8010744:	4410      	add	r0, r2
 8010746:	b200      	sxth	r0, r0
 8010748:	4283      	cmp	r3, r0
 801074a:	bfac      	ite	ge
 801074c:	2000      	movge	r0, #0
 801074e:	2001      	movlt	r0, #1
 8010750:	bd10      	pop	{r4, pc}
 8010752:	2000      	movs	r0, #0
 8010754:	e7fc      	b.n	8010750 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08010756 <_ZN8touchgfx4Rect10restrictToEss>:
 8010756:	f9b0 3000 	ldrsh.w	r3, [r0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	b510      	push	{r4, lr}
 801075e:	da04      	bge.n	801076a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8010760:	8884      	ldrh	r4, [r0, #4]
 8010762:	4423      	add	r3, r4
 8010764:	8083      	strh	r3, [r0, #4]
 8010766:	2300      	movs	r3, #0
 8010768:	8003      	strh	r3, [r0, #0]
 801076a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801076e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010772:	1b09      	subs	r1, r1, r4
 8010774:	428b      	cmp	r3, r1
 8010776:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801077a:	bfc8      	it	gt
 801077c:	8081      	strhgt	r1, [r0, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	da04      	bge.n	801078c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8010782:	88c1      	ldrh	r1, [r0, #6]
 8010784:	440b      	add	r3, r1
 8010786:	80c3      	strh	r3, [r0, #6]
 8010788:	2300      	movs	r3, #0
 801078a:	8043      	strh	r3, [r0, #2]
 801078c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010790:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010794:	1a52      	subs	r2, r2, r1
 8010796:	4293      	cmp	r3, r2
 8010798:	bfc8      	it	gt
 801079a:	80c2      	strhgt	r2, [r0, #6]
 801079c:	bd10      	pop	{r4, pc}
	...

080107a0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80107a0:	4b10      	ldr	r3, [pc, #64]	; (80107e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80107a2:	b510      	push	{r4, lr}
 80107a4:	460c      	mov	r4, r1
 80107a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107aa:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80107ac:	4620      	mov	r0, r4
 80107ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80107b2:	f7ff ffd0 	bl	8010756 <_ZN8touchgfx4Rect10restrictToEss>
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80107b8:	6818      	ldr	r0, [r3, #0]
 80107ba:	b190      	cbz	r0, 80107e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80107bc:	6803      	ldr	r3, [r0, #0]
 80107be:	4621      	mov	r1, r4
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	4798      	blx	r3
 80107c4:	4b0a      	ldr	r3, [pc, #40]	; (80107f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80107c6:	6818      	ldr	r0, [r3, #0]
 80107c8:	b118      	cbz	r0, 80107d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	4621      	mov	r1, r4
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	4798      	blx	r3
 80107d2:	4b08      	ldr	r3, [pc, #32]	; (80107f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80107d4:	4621      	mov	r1, r4
 80107d6:	6818      	ldr	r0, [r3, #0]
 80107d8:	6803      	ldr	r3, [r0, #0]
 80107da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107de:	69db      	ldr	r3, [r3, #28]
 80107e0:	4718      	bx	r3
 80107e2:	bd10      	pop	{r4, pc}
 80107e4:	2002490a 	.word	0x2002490a
 80107e8:	20024908 	.word	0x20024908
 80107ec:	20024950 	.word	0x20024950
 80107f0:	2002494c 	.word	0x2002494c
 80107f4:	20024914 	.word	0x20024914

080107f8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fa:	4606      	mov	r6, r0
 80107fc:	4608      	mov	r0, r1
 80107fe:	460f      	mov	r7, r1
 8010800:	f7fc fdff 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010804:	b9e8      	cbnz	r0, 8010842 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8010806:	f9b7 5000 	ldrsh.w	r5, [r7]
 801080a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801080e:	42a5      	cmp	r5, r4
 8010810:	db17      	blt.n	8010842 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8010812:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010816:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801081a:	429a      	cmp	r2, r3
 801081c:	db11      	blt.n	8010842 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801081e:	88b9      	ldrh	r1, [r7, #4]
 8010820:	440d      	add	r5, r1
 8010822:	88b1      	ldrh	r1, [r6, #4]
 8010824:	440c      	add	r4, r1
 8010826:	b22d      	sxth	r5, r5
 8010828:	b224      	sxth	r4, r4
 801082a:	42a5      	cmp	r5, r4
 801082c:	dc09      	bgt.n	8010842 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801082e:	88f8      	ldrh	r0, [r7, #6]
 8010830:	4410      	add	r0, r2
 8010832:	88f2      	ldrh	r2, [r6, #6]
 8010834:	4413      	add	r3, r2
 8010836:	b200      	sxth	r0, r0
 8010838:	b21b      	sxth	r3, r3
 801083a:	4298      	cmp	r0, r3
 801083c:	bfcc      	ite	gt
 801083e:	2000      	movgt	r0, #0
 8010840:	2001      	movle	r0, #1
 8010842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010844 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8010844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010846:	4604      	mov	r4, r0
 8010848:	4608      	mov	r0, r1
 801084a:	460d      	mov	r5, r1
 801084c:	f7fc fdd9 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010850:	b978      	cbnz	r0, 8010872 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8010852:	4620      	mov	r0, r4
 8010854:	f7fc fdd5 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010858:	f9b5 6000 	ldrsh.w	r6, [r5]
 801085c:	b150      	cbz	r0, 8010874 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801085e:	8026      	strh	r6, [r4, #0]
 8010860:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010864:	8063      	strh	r3, [r4, #2]
 8010866:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801086a:	80a3      	strh	r3, [r4, #4]
 801086c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010870:	80e3      	strh	r3, [r4, #6]
 8010872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010874:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010878:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801087c:	42b1      	cmp	r1, r6
 801087e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010882:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8010886:	460f      	mov	r7, r1
 8010888:	88ed      	ldrh	r5, [r5, #6]
 801088a:	bfa8      	it	ge
 801088c:	4637      	movge	r7, r6
 801088e:	4293      	cmp	r3, r2
 8010890:	4618      	mov	r0, r3
 8010892:	4466      	add	r6, ip
 8010894:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010898:	bfa8      	it	ge
 801089a:	4610      	movge	r0, r2
 801089c:	442a      	add	r2, r5
 801089e:	88e5      	ldrh	r5, [r4, #6]
 80108a0:	4461      	add	r1, ip
 80108a2:	b236      	sxth	r6, r6
 80108a4:	8027      	strh	r7, [r4, #0]
 80108a6:	442b      	add	r3, r5
 80108a8:	b209      	sxth	r1, r1
 80108aa:	b212      	sxth	r2, r2
 80108ac:	8060      	strh	r0, [r4, #2]
 80108ae:	b21b      	sxth	r3, r3
 80108b0:	428e      	cmp	r6, r1
 80108b2:	bfac      	ite	ge
 80108b4:	ebc7 0106 	rsbge	r1, r7, r6
 80108b8:	ebc7 0101 	rsblt	r1, r7, r1
 80108bc:	429a      	cmp	r2, r3
 80108be:	bfac      	ite	ge
 80108c0:	ebc0 0202 	rsbge	r2, r0, r2
 80108c4:	ebc0 0203 	rsblt	r2, r0, r3
 80108c8:	80a1      	strh	r1, [r4, #4]
 80108ca:	80e2      	strh	r2, [r4, #6]
 80108cc:	e7d1      	b.n	8010872 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080108d0 <_ZN8touchgfx11Application11getInstanceEv>:
 80108d0:	4b01      	ldr	r3, [pc, #4]	; (80108d8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80108d2:	6818      	ldr	r0, [r3, #0]
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	20024960 	.word	0x20024960

080108dc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80108dc:	b570      	push	{r4, r5, r6, lr}
 80108de:	2200      	movs	r2, #0
 80108e0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80108e4:	1d04      	adds	r4, r0, #4
 80108e6:	b295      	uxth	r5, r2
 80108e8:	429d      	cmp	r5, r3
 80108ea:	d20e      	bcs.n	801090a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80108ec:	f854 6b04 	ldr.w	r6, [r4], #4
 80108f0:	4615      	mov	r5, r2
 80108f2:	3201      	adds	r2, #1
 80108f4:	428e      	cmp	r6, r1
 80108f6:	d1f6      	bne.n	80108e6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 80108f8:	4428      	add	r0, r5
 80108fa:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80108fe:	2bff      	cmp	r3, #255	; 0xff
 8010900:	d002      	beq.n	8010908 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8010902:	3301      	adds	r3, #1
 8010904:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8010908:	bd70      	pop	{r4, r5, r6, pc}
 801090a:	18c2      	adds	r2, r0, r3
 801090c:	2b20      	cmp	r3, #32
 801090e:	f04f 0401 	mov.w	r4, #1
 8010912:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8010916:	bf1f      	itttt	ne
 8010918:	191a      	addne	r2, r3, r4
 801091a:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 801091e:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 8010922:	6041      	strne	r1, [r0, #4]
 8010924:	e7f0      	b.n	8010908 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

08010926 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8010926:	b570      	push	{r4, r5, r6, lr}
 8010928:	2300      	movs	r3, #0
 801092a:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801092e:	1d04      	adds	r4, r0, #4
 8010930:	b29a      	uxth	r2, r3
 8010932:	4296      	cmp	r6, r2
 8010934:	d90a      	bls.n	801094c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8010936:	f854 2b04 	ldr.w	r2, [r4], #4
 801093a:	428a      	cmp	r2, r1
 801093c:	d107      	bne.n	801094e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801093e:	18c5      	adds	r5, r0, r3
 8010940:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8010944:	b11a      	cbz	r2, 801094e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8010946:	3a01      	subs	r2, #1
 8010948:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801094c:	bd70      	pop	{r4, r5, r6, pc}
 801094e:	3301      	adds	r3, #1
 8010950:	e7ee      	b.n	8010930 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08010952 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010952:	2300      	movs	r3, #0
 8010954:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8010958:	30a8      	adds	r0, #168	; 0xa8
 801095a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801095e:	f802 3b01 	strb.w	r3, [r2], #1
 8010962:	4282      	cmp	r2, r0
 8010964:	d1fb      	bne.n	801095e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010966:	4770      	bx	lr

08010968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8010968:	4603      	mov	r3, r0
 801096a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801096e:	2200      	movs	r2, #0
 8010970:	801a      	strh	r2, [r3, #0]
 8010972:	3308      	adds	r3, #8
 8010974:	f823 2c06 	strh.w	r2, [r3, #-6]
 8010978:	f823 2c04 	strh.w	r2, [r3, #-4]
 801097c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010980:	428b      	cmp	r3, r1
 8010982:	d1f5      	bne.n	8010970 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8010984:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8010988:	4770      	bx	lr
	...

0801098c <_ZN8touchgfx11ApplicationC1Ev>:
 801098c:	b570      	push	{r4, r5, r6, lr}
 801098e:	4b19      	ldr	r3, [pc, #100]	; (80109f4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8010990:	2500      	movs	r5, #0
 8010992:	4604      	mov	r4, r0
 8010994:	30a8      	adds	r0, #168	; 0xa8
 8010996:	f840 3ca8 	str.w	r3, [r0, #-168]
 801099a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801099e:	f7ff ffe3 	bl	8010968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80109a2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80109a6:	f7ff ffdf 	bl	8010968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80109aa:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80109ae:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80109b2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80109b6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80109ba:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80109be:	490e      	ldr	r1, [pc, #56]	; (80109f8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80109c0:	480e      	ldr	r0, [pc, #56]	; (80109fc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80109c2:	f00e fc27 	bl	801f214 <CRC_Lock>
 80109c6:	4e0e      	ldr	r6, [pc, #56]	; (8010a00 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80109c8:	4b0e      	ldr	r3, [pc, #56]	; (8010a04 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80109ca:	b158      	cbz	r0, 80109e4 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80109cc:	801d      	strh	r5, [r3, #0]
 80109ce:	2300      	movs	r3, #0
 80109d0:	4a0d      	ldr	r2, [pc, #52]	; (8010a08 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80109d2:	4620      	mov	r0, r4
 80109d4:	6013      	str	r3, [r2, #0]
 80109d6:	4a0d      	ldr	r2, [pc, #52]	; (8010a0c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80109d8:	6033      	str	r3, [r6, #0]
 80109da:	6013      	str	r3, [r2, #0]
 80109dc:	f7ff ffb9 	bl	8010952 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80109e0:	4620      	mov	r0, r4
 80109e2:	bd70      	pop	{r4, r5, r6, pc}
 80109e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80109e8:	2002      	movs	r0, #2
 80109ea:	801a      	strh	r2, [r3, #0]
 80109ec:	6030      	str	r0, [r6, #0]
 80109ee:	f001 fa1d 	bl	8011e2c <_ZN8touchgfx6Screen4drawEv>
 80109f2:	e7ec      	b.n	80109ce <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80109f4:	08023d8c 	.word	0x08023d8c
 80109f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80109fc:	f407a5c2 	.word	0xf407a5c2
 8010a00:	20024950 	.word	0x20024950
 8010a04:	20000070 	.word	0x20000070
 8010a08:	20024960 	.word	0x20024960
 8010a0c:	20024954 	.word	0x20024954

08010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010a10:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8010a14:	3b01      	subs	r3, #1
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	428b      	cmp	r3, r1
 8010a1a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	d908      	bls.n	8010a34 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8010a22:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010a26:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	6062      	str	r2, [r4, #4]
 8010a34:	bd10      	pop	{r4, pc}
	...

08010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8010a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3c:	b08f      	sub	sp, #60	; 0x3c
 8010a3e:	4b94      	ldr	r3, [pc, #592]	; (8010c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8010a40:	4683      	mov	fp, r0
 8010a42:	ac0a      	add	r4, sp, #40	; 0x28
 8010a44:	e884 0006 	stmia.w	r4, {r1, r2}
 8010a48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	4b91      	ldr	r3, [pc, #580]	; (8010c94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8010a50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010a54:	f7ff fe7f 	bl	8010756 <_ZN8touchgfx4Rect10restrictToEss>
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f7fc fcd2 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d16a      	bne.n	8010b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8010a62:	9403      	str	r4, [sp, #12]
 8010a64:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8010a68:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010a6c:	2400      	movs	r4, #0
 8010a6e:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8010a72:	9301      	str	r3, [sp, #4]
 8010a74:	36a0      	adds	r6, #160	; 0xa0
 8010a76:	42a5      	cmp	r5, r4
 8010a78:	d00d      	beq.n	8010a96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8010a7a:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8010a7e:	9803      	ldr	r0, [sp, #12]
 8010a80:	f7ff feba 	bl	80107f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010a84:	b128      	cbz	r0, 8010a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8010a86:	1e69      	subs	r1, r5, #1
 8010a88:	9801      	ldr	r0, [sp, #4]
 8010a8a:	1b09      	subs	r1, r1, r4
 8010a8c:	b289      	uxth	r1, r1
 8010a8e:	f7ff ffbf 	bl	8010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010a92:	3401      	adds	r4, #1
 8010a94:	e7ef      	b.n	8010a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8010a96:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010a9a:	1e7b      	subs	r3, r7, #1
 8010a9c:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8010aa0:	9704      	str	r7, [sp, #16]
 8010aa2:	9302      	str	r3, [sp, #8]
 8010aa4:	2400      	movs	r4, #0
 8010aa6:	4655      	mov	r5, sl
 8010aa8:	9705      	str	r7, [sp, #20]
 8010aaa:	4626      	mov	r6, r4
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d078      	beq.n	8010ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8010ab2:	9903      	ldr	r1, [sp, #12]
 8010ab4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010ab8:	f7ff fe2b 	bl	8010712 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010abc:	b360      	cbz	r0, 8010b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8010abe:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8010ac2:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8010ac6:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8010aca:	45e6      	cmp	lr, ip
 8010acc:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8010ad0:	db35      	blt.n	8010b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8010ad2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8010ad6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010ada:	4472      	add	r2, lr
 8010adc:	4463      	add	r3, ip
 8010ade:	b212      	sxth	r2, r2
 8010ae0:	b21b      	sxth	r3, r3
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	dc2b      	bgt.n	8010b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8010ae6:	fa1f f288 	uxth.w	r2, r8
 8010aea:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010aee:	45c1      	cmp	r9, r8
 8010af0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010af4:	4413      	add	r3, r2
 8010af6:	fa1f fc89 	uxth.w	ip, r9
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	fa0f fe83 	sxth.w	lr, r3
 8010b00:	db0f      	blt.n	8010b22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8010b02:	eba3 030c 	sub.w	r3, r3, ip
 8010b06:	1ac9      	subs	r1, r1, r3
 8010b08:	b209      	sxth	r1, r1
 8010b0a:	2900      	cmp	r1, #0
 8010b0c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8010b10:	dd12      	ble.n	8010b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8010b12:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8010b16:	4604      	mov	r4, r0
 8010b18:	9b05      	ldr	r3, [sp, #20]
 8010b1a:	3d08      	subs	r5, #8
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	9305      	str	r3, [sp, #20]
 8010b20:	e7c4      	b.n	8010aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8010b22:	4461      	add	r1, ip
 8010b24:	b209      	sxth	r1, r1
 8010b26:	4571      	cmp	r1, lr
 8010b28:	dc3a      	bgt.n	8010ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8010b2a:	eba2 020c 	sub.w	r2, r2, ip
 8010b2e:	b212      	sxth	r2, r2
 8010b30:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8010b34:	2a00      	cmp	r2, #0
 8010b36:	dcee      	bgt.n	8010b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8010b38:	b00f      	add	sp, #60	; 0x3c
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	45c1      	cmp	r9, r8
 8010b40:	db2e      	blt.n	8010ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8010b42:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010b46:	4499      	add	r9, r3
 8010b48:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010b4c:	4498      	add	r8, r3
 8010b4e:	fa0f f989 	sxth.w	r9, r9
 8010b52:	fa0f f888 	sxth.w	r8, r8
 8010b56:	45c1      	cmp	r9, r8
 8010b58:	dc22      	bgt.n	8010ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8010b5a:	fa1f f28c 	uxth.w	r2, ip
 8010b5e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010b62:	45e6      	cmp	lr, ip
 8010b64:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8010b68:	4413      	add	r3, r2
 8010b6a:	fa1f f88e 	uxth.w	r8, lr
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	fa0f f983 	sxth.w	r9, r3
 8010b74:	db0a      	blt.n	8010b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8010b76:	eba3 0308 	sub.w	r3, r3, r8
 8010b7a:	1ac9      	subs	r1, r1, r3
 8010b7c:	b209      	sxth	r1, r1
 8010b7e:	2900      	cmp	r1, #0
 8010b80:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8010b84:	ddd8      	ble.n	8010b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8010b86:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8010b8a:	e7c4      	b.n	8010b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8010b8c:	4441      	add	r1, r8
 8010b8e:	b209      	sxth	r1, r1
 8010b90:	4549      	cmp	r1, r9
 8010b92:	dc05      	bgt.n	8010ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8010b94:	eba2 0208 	sub.w	r2, r2, r8
 8010b98:	b212      	sxth	r2, r2
 8010b9a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010b9e:	e7c9      	b.n	8010b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	e7b9      	b.n	8010b18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8010ba4:	2c00      	cmp	r4, #0
 8010ba6:	f47f af7d 	bne.w	8010aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8010baa:	2e00      	cmp	r6, #0
 8010bac:	f000 81e1 	beq.w	8010f72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8010bb0:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8010bb4:	4655      	mov	r5, sl
 8010bb6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8010bba:	b2b9      	uxth	r1, r7
 8010bbc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8010bc0:	b2b3      	uxth	r3, r6
 8010bc2:	9105      	str	r1, [sp, #20]
 8010bc4:	9805      	ldr	r0, [sp, #20]
 8010bc6:	441a      	add	r2, r3
 8010bc8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010bcc:	b292      	uxth	r2, r2
 8010bce:	4401      	add	r1, r0
 8010bd0:	fa0f f882 	sxth.w	r8, r2
 8010bd4:	b289      	uxth	r1, r1
 8010bd6:	9106      	str	r1, [sp, #24]
 8010bd8:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8010bdc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8010be0:	9b04      	ldr	r3, [sp, #16]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d058      	beq.n	8010c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8010be6:	9903      	ldr	r1, [sp, #12]
 8010be8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010bec:	f7ff fd91 	bl	8010712 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010bf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010bf4:	b1d8      	cbz	r0, 8010c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8010bf6:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010bfa:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010bfe:	4576      	cmp	r6, lr
 8010c00:	dc26      	bgt.n	8010c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8010c02:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8010c06:	44f4      	add	ip, lr
 8010c08:	fa0f fc8c 	sxth.w	ip, ip
 8010c0c:	45e0      	cmp	r8, ip
 8010c0e:	db1f      	blt.n	8010c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8010c10:	428f      	cmp	r7, r1
 8010c12:	fa1f fc81 	uxth.w	ip, r1
 8010c16:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010c1a:	dc0f      	bgt.n	8010c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8010c1c:	9806      	ldr	r0, [sp, #24]
 8010c1e:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010c22:	eba0 0c0c 	sub.w	ip, r0, ip
 8010c26:	eba1 010c 	sub.w	r1, r1, ip
 8010c2a:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010c2e:	4620      	mov	r0, r4
 8010c30:	9904      	ldr	r1, [sp, #16]
 8010c32:	3d08      	subs	r5, #8
 8010c34:	4604      	mov	r4, r0
 8010c36:	3901      	subs	r1, #1
 8010c38:	9104      	str	r1, [sp, #16]
 8010c3a:	e7cf      	b.n	8010bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8010c3c:	4461      	add	r1, ip
 8010c3e:	b209      	sxth	r1, r1
 8010c40:	4549      	cmp	r1, r9
 8010c42:	dcf5      	bgt.n	8010c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8010c44:	9905      	ldr	r1, [sp, #20]
 8010c46:	eba1 0c0c 	sub.w	ip, r1, ip
 8010c4a:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010c4e:	e7ee      	b.n	8010c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8010c50:	428f      	cmp	r7, r1
 8010c52:	dced      	bgt.n	8010c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8010c54:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8010c58:	4461      	add	r1, ip
 8010c5a:	b209      	sxth	r1, r1
 8010c5c:	4589      	cmp	r9, r1
 8010c5e:	dbe7      	blt.n	8010c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8010c60:	4576      	cmp	r6, lr
 8010c62:	fa1f fc8e 	uxth.w	ip, lr
 8010c66:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010c6a:	dc08      	bgt.n	8010c7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8010c6c:	eba2 0c0c 	sub.w	ip, r2, ip
 8010c70:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8010c74:	eba1 010c 	sub.w	r1, r1, ip
 8010c78:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8010c7c:	e7d7      	b.n	8010c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8010c7e:	4461      	add	r1, ip
 8010c80:	b209      	sxth	r1, r1
 8010c82:	4588      	cmp	r8, r1
 8010c84:	dbd4      	blt.n	8010c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8010c86:	eba3 0c0c 	sub.w	ip, r3, ip
 8010c8a:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8010c8e:	e7ce      	b.n	8010c2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8010c90:	2002490a 	.word	0x2002490a
 8010c94:	20024908 	.word	0x20024908
 8010c98:	2c00      	cmp	r4, #0
 8010c9a:	f000 816a 	beq.w	8010f72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8010c9e:	9b02      	ldr	r3, [sp, #8]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	f000 8166 	beq.w	8010f72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8010ca6:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8010caa:	9803      	ldr	r0, [sp, #12]
 8010cac:	4621      	mov	r1, r4
 8010cae:	f7ff fda3 	bl	80107f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010cb2:	b120      	cbz	r0, 8010cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8010cb4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010cb8:	9801      	ldr	r0, [sp, #4]
 8010cba:	f7ff fea9 	bl	8010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010cbe:	9903      	ldr	r1, [sp, #12]
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7ff fd26 	bl	8010712 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	f000 809b 	beq.w	8010e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8010ccc:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8010cd0:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8010cd4:	b281      	uxth	r1, r0
 8010cd6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8010cda:	9309      	str	r3, [sp, #36]	; 0x24
 8010cdc:	eb01 0c03 	add.w	ip, r1, r3
 8010ce0:	b2ab      	uxth	r3, r5
 8010ce2:	4285      	cmp	r5, r0
 8010ce4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8010ce8:	fa1f f98c 	uxth.w	r9, ip
 8010cec:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8010cf0:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8010cf4:	eb03 040c 	add.w	r4, r3, ip
 8010cf8:	b2a4      	uxth	r4, r4
 8010cfa:	9405      	str	r4, [sp, #20]
 8010cfc:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8010d00:	9404      	str	r4, [sp, #16]
 8010d02:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8010d06:	f340 809a 	ble.w	8010e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8010d0a:	1a5b      	subs	r3, r3, r1
 8010d0c:	4596      	cmp	lr, r2
 8010d0e:	fa0f f589 	sxth.w	r5, r9
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	b21e      	sxth	r6, r3
 8010d16:	dd2e      	ble.n	8010d76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8010d18:	9f02      	ldr	r7, [sp, #8]
 8010d1a:	fa1f fe8e 	uxth.w	lr, lr
 8010d1e:	b292      	uxth	r2, r2
 8010d20:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8010d24:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8010d28:	9f04      	ldr	r7, [sp, #16]
 8010d2a:	ebae 0102 	sub.w	r1, lr, r2
 8010d2e:	4486      	add	lr, r0
 8010d30:	1b7f      	subs	r7, r7, r5
 8010d32:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8010d36:	b289      	uxth	r1, r1
 8010d38:	442a      	add	r2, r5
 8010d3a:	fa0f fe8e 	sxth.w	lr, lr
 8010d3e:	b20c      	sxth	r4, r1
 8010d40:	b212      	sxth	r2, r2
 8010d42:	4367      	muls	r7, r4
 8010d44:	ebae 0202 	sub.w	r2, lr, r2
 8010d48:	4372      	muls	r2, r6
 8010d4a:	4297      	cmp	r7, r2
 8010d4c:	db09      	blt.n	8010d62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8010d4e:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8010d52:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010d56:	449c      	add	ip, r3
 8010d58:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8010d5c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8010d60:	e680      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010d62:	4401      	add	r1, r0
 8010d64:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8010d68:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8010d6c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8010d70:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8010d74:	e676      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010d76:	9f04      	ldr	r7, [sp, #16]
 8010d78:	42bd      	cmp	r5, r7
 8010d7a:	da27      	bge.n	8010dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8010d7c:	9902      	ldr	r1, [sp, #8]
 8010d7e:	1b7f      	subs	r7, r7, r5
 8010d80:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8010d84:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8010d88:	eb04 010e 	add.w	r1, r4, lr
 8010d8c:	fa1f f881 	uxth.w	r8, r1
 8010d90:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8010d94:	4411      	add	r1, r2
 8010d96:	fa0f f988 	sxth.w	r9, r8
 8010d9a:	eba2 020e 	sub.w	r2, r2, lr
 8010d9e:	eba1 0108 	sub.w	r1, r1, r8
 8010da2:	4372      	muls	r2, r6
 8010da4:	b289      	uxth	r1, r1
 8010da6:	fa0f f881 	sxth.w	r8, r1
 8010daa:	fb08 f707 	mul.w	r7, r8, r7
 8010dae:	42ba      	cmp	r2, r7
 8010db0:	dc06      	bgt.n	8010dc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8010db2:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8010db6:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8010dba:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8010dbe:	e7ca      	b.n	8010d56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8010dc0:	4421      	add	r1, r4
 8010dc2:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8010dc6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8010dca:	e64b      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010dcc:	9d05      	ldr	r5, [sp, #20]
 8010dce:	2c06      	cmp	r4, #6
 8010dd0:	eba9 0505 	sub.w	r5, r9, r5
 8010dd4:	b2ad      	uxth	r5, r5
 8010dd6:	fa0f fe85 	sxth.w	lr, r5
 8010dda:	d818      	bhi.n	8010e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8010ddc:	9b04      	ldr	r3, [sp, #16]
 8010dde:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8010de2:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010de6:	1c63      	adds	r3, r4, #1
 8010de8:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8010dec:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8010df0:	9b01      	ldr	r3, [sp, #4]
 8010df2:	9d01      	ldr	r5, [sp, #4]
 8010df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010df8:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8010dfc:	805a      	strh	r2, [r3, #2]
 8010dfe:	809e      	strh	r6, [r3, #4]
 8010e00:	80d9      	strh	r1, [r3, #6]
 8010e02:	9b02      	ldr	r3, [sp, #8]
 8010e04:	f1aa 0a08 	sub.w	sl, sl, #8
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	9302      	str	r3, [sp, #8]
 8010e0c:	e747      	b.n	8010c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8010e0e:	9a02      	ldr	r2, [sp, #8]
 8010e10:	45b6      	cmp	lr, r6
 8010e12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010e16:	db0d      	blt.n	8010e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8010e18:	449c      	add	ip, r3
 8010e1a:	445a      	add	r2, fp
 8010e1c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8010e20:	fa1f fc8c 	uxth.w	ip, ip
 8010e24:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8010e28:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8010e2c:	448c      	add	ip, r1
 8010e2e:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8010e32:	e617      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010e34:	445a      	add	r2, fp
 8010e36:	44ac      	add	ip, r5
 8010e38:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8010e3c:	e78e      	b.n	8010d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8010e3e:	fa1f f18e 	uxth.w	r1, lr
 8010e42:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8010e46:	b293      	uxth	r3, r2
 8010e48:	4596      	cmp	lr, r2
 8010e4a:	eb01 0806 	add.w	r8, r1, r6
 8010e4e:	9306      	str	r3, [sp, #24]
 8010e50:	fa1f f888 	uxth.w	r8, r8
 8010e54:	9f06      	ldr	r7, [sp, #24]
 8010e56:	fa0f f388 	sxth.w	r3, r8
 8010e5a:	9307      	str	r3, [sp, #28]
 8010e5c:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8010e60:	443b      	add	r3, r7
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	9308      	str	r3, [sp, #32]
 8010e66:	da25      	bge.n	8010eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8010e68:	9905      	ldr	r1, [sp, #20]
 8010e6a:	eba3 0308 	sub.w	r3, r3, r8
 8010e6e:	eba2 020e 	sub.w	r2, r2, lr
 8010e72:	1b40      	subs	r0, r0, r5
 8010e74:	eba9 0401 	sub.w	r4, r9, r1
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	b2a4      	uxth	r4, r4
 8010e7c:	b219      	sxth	r1, r3
 8010e7e:	fa0f f984 	sxth.w	r9, r4
 8010e82:	4348      	muls	r0, r1
 8010e84:	fb09 f202 	mul.w	r2, r9, r2
 8010e88:	4282      	cmp	r2, r0
 8010e8a:	9a02      	ldr	r2, [sp, #8]
 8010e8c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010e90:	445a      	add	r2, fp
 8010e92:	dc06      	bgt.n	8010ea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8010e94:	9b07      	ldr	r3, [sp, #28]
 8010e96:	44a4      	add	ip, r4
 8010e98:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8010e9c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8010ea0:	e75c      	b.n	8010d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8010ea2:	9904      	ldr	r1, [sp, #16]
 8010ea4:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8010ea8:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8010eac:	4433      	add	r3, r6
 8010eae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8010eb2:	e5d7      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010eb4:	9f06      	ldr	r7, [sp, #24]
 8010eb6:	9b04      	ldr	r3, [sp, #16]
 8010eb8:	1bc9      	subs	r1, r1, r7
 8010eba:	fa0f f789 	sxth.w	r7, r9
 8010ebe:	b289      	uxth	r1, r1
 8010ec0:	429f      	cmp	r7, r3
 8010ec2:	fa0f fe81 	sxth.w	lr, r1
 8010ec6:	dd22      	ble.n	8010f0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8010ec8:	9a05      	ldr	r2, [sp, #20]
 8010eca:	1b40      	subs	r0, r0, r5
 8010ecc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010ed0:	eba9 0202 	sub.w	r2, r9, r2
 8010ed4:	9d07      	ldr	r5, [sp, #28]
 8010ed6:	fb0e f000 	mul.w	r0, lr, r0
 8010eda:	b292      	uxth	r2, r2
 8010edc:	eba5 0a03 	sub.w	sl, r5, r3
 8010ee0:	9b02      	ldr	r3, [sp, #8]
 8010ee2:	b214      	sxth	r4, r2
 8010ee4:	00db      	lsls	r3, r3, #3
 8010ee6:	fb04 fa0a 	mul.w	sl, r4, sl
 8010eea:	445b      	add	r3, fp
 8010eec:	4550      	cmp	r0, sl
 8010eee:	db03      	blt.n	8010ef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8010ef0:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8010ef4:	4494      	add	ip, r2
 8010ef6:	e731      	b.n	8010d5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8010ef8:	9a04      	ldr	r2, [sp, #16]
 8010efa:	4431      	add	r1, r6
 8010efc:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8010f00:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010f04:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8010f08:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8010f0c:	e75b      	b.n	8010dc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8010f0e:	9b08      	ldr	r3, [sp, #32]
 8010f10:	2c06      	cmp	r4, #6
 8010f12:	eba3 0308 	sub.w	r3, r3, r8
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	b21d      	sxth	r5, r3
 8010f1a:	d813      	bhi.n	8010f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8010f1c:	9b07      	ldr	r3, [sp, #28]
 8010f1e:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8010f22:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8010f26:	1c63      	adds	r3, r4, #1
 8010f28:	9901      	ldr	r1, [sp, #4]
 8010f2a:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8010f34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f38:	805a      	strh	r2, [r3, #2]
 8010f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f3c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8010f40:	809a      	strh	r2, [r3, #4]
 8010f42:	e75e      	b.n	8010e02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8010f44:	9802      	ldr	r0, [sp, #8]
 8010f46:	4575      	cmp	r5, lr
 8010f48:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010f4c:	db0d      	blt.n	8010f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8010f4e:	4431      	add	r1, r6
 8010f50:	9b06      	ldr	r3, [sp, #24]
 8010f52:	4458      	add	r0, fp
 8010f54:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8010f58:	b289      	uxth	r1, r1
 8010f5a:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8010f5e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8010f62:	4419      	add	r1, r3
 8010f64:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8010f68:	e57c      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010f6a:	4458      	add	r0, fp
 8010f6c:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8010f70:	e79c      	b.n	8010eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8010f72:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8010f76:	2e07      	cmp	r6, #7
 8010f78:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8010f7c:	d812      	bhi.n	8010fa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8010f7e:	1c75      	adds	r5, r6, #1
 8010f80:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8010f84:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8010f88:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8010f8c:	9d01      	ldr	r5, [sp, #4]
 8010f8e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8010f92:	442c      	add	r4, r5
 8010f94:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8010f98:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8010f9c:	8061      	strh	r1, [r4, #2]
 8010f9e:	80a2      	strh	r2, [r4, #4]
 8010fa0:	80e3      	strh	r3, [r4, #6]
 8010fa2:	e5c9      	b.n	8010b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8010fa4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010fa8:	3e01      	subs	r6, #1
 8010faa:	445c      	add	r4, fp
 8010fac:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8010fb4:	2500      	movs	r5, #0
 8010fb6:	9305      	str	r3, [sp, #20]
 8010fb8:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8010fbc:	1e72      	subs	r2, r6, #1
 8010fbe:	9302      	str	r3, [sp, #8]
 8010fc0:	4691      	mov	r9, r2
 8010fc2:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8010fc6:	9304      	str	r3, [sp, #16]
 8010fc8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8010fcc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8010fd0:	6818      	ldr	r0, [r3, #0]
 8010fd2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010fd6:	9207      	str	r2, [sp, #28]
 8010fd8:	bf16      	itet	ne
 8010fda:	9905      	ldrne	r1, [sp, #20]
 8010fdc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8010fe0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8010fe4:	9306      	str	r3, [sp, #24]
 8010fe6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010fea:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8010fee:	fb18 f801 	smulbb	r8, r8, r1
 8010ff2:	6859      	ldr	r1, [r3, #4]
 8010ff4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010ff8:	4671      	mov	r1, lr
 8010ffa:	a80c      	add	r0, sp, #48	; 0x30
 8010ffc:	f7ff fc22 	bl	8010844 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011000:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8011004:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8011008:	f04f 0c08 	mov.w	ip, #8
 801100c:	9b04      	ldr	r3, [sp, #16]
 801100e:	9a02      	ldr	r2, [sp, #8]
 8011010:	fb10 f001 	smulbb	r0, r0, r1
 8011014:	fb02 8803 	mla	r8, r2, r3, r8
 8011018:	eba0 0108 	sub.w	r1, r0, r8
 801101c:	fb90 f0fc 	sdiv	r0, r0, ip
 8011020:	4288      	cmp	r0, r1
 8011022:	dc20      	bgt.n	8011066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8011024:	4551      	cmp	r1, sl
 8011026:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801102a:	da03      	bge.n	8011034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801102c:	b1d9      	cbz	r1, 8011066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801102e:	468a      	mov	sl, r1
 8011030:	464f      	mov	r7, r9
 8011032:	4635      	mov	r5, r6
 8011034:	f109 39ff 	add.w	r9, r9, #4294967295
 8011038:	f119 0f02 	cmn.w	r9, #2
 801103c:	d1c6      	bne.n	8010fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801103e:	4616      	mov	r6, r2
 8011040:	3201      	adds	r2, #1
 8011042:	f1a4 0408 	sub.w	r4, r4, #8
 8011046:	d1b7      	bne.n	8010fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8011048:	9b01      	ldr	r3, [sp, #4]
 801104a:	b2ac      	uxth	r4, r5
 801104c:	00ed      	lsls	r5, r5, #3
 801104e:	1958      	adds	r0, r3, r5
 8011050:	1c7b      	adds	r3, r7, #1
 8011052:	d10b      	bne.n	801106c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8011054:	4601      	mov	r1, r0
 8011056:	9803      	ldr	r0, [sp, #12]
 8011058:	f7ff fbf4 	bl	8010844 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801105c:	4621      	mov	r1, r4
 801105e:	9801      	ldr	r0, [sp, #4]
 8011060:	f7ff fcd6 	bl	8010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011064:	e4fe      	b.n	8010a64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011066:	464f      	mov	r7, r9
 8011068:	4635      	mov	r5, r6
 801106a:	e7ed      	b.n	8011048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801106c:	9b01      	ldr	r3, [sp, #4]
 801106e:	00ff      	lsls	r7, r7, #3
 8011070:	445d      	add	r5, fp
 8011072:	19d9      	adds	r1, r3, r7
 8011074:	445f      	add	r7, fp
 8011076:	f7ff fbe5 	bl	8010844 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801107a:	9b03      	ldr	r3, [sp, #12]
 801107c:	cb03      	ldmia	r3!, {r0, r1}
 801107e:	9b03      	ldr	r3, [sp, #12]
 8011080:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8011084:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8011088:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801108c:	6869      	ldr	r1, [r5, #4]
 801108e:	c303      	stmia	r3!, {r0, r1}
 8011090:	e7e4      	b.n	801105c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8011092:	bf00      	nop

08011094 <_ZN8touchgfx11Application10invalidateEv>:
 8011094:	4b09      	ldr	r3, [pc, #36]	; (80110bc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8011096:	b082      	sub	sp, #8
 8011098:	2100      	movs	r1, #0
 801109a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801109e:	4b08      	ldr	r3, [pc, #32]	; (80110c0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80110a0:	9100      	str	r1, [sp, #0]
 80110a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80110aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80110ae:	ab02      	add	r3, sp, #8
 80110b0:	e913 0006 	ldmdb	r3, {r1, r2}
 80110b4:	b002      	add	sp, #8
 80110b6:	f7ff bcbf 	b.w	8010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80110ba:	bf00      	nop
 80110bc:	20024908 	.word	0x20024908
 80110c0:	2002490a 	.word	0x2002490a

080110c4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80110c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c8:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80110cc:	b09b      	sub	sp, #108	; 0x6c
 80110ce:	4604      	mov	r4, r0
 80110d0:	4630      	mov	r0, r6
 80110d2:	f7fc f996 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110d6:	4605      	mov	r5, r0
 80110d8:	b940      	cbnz	r0, 80110ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80110da:	4620      	mov	r0, r4
 80110dc:	e896 0006 	ldmia.w	r6, {r1, r2}
 80110e0:	f7ff fcaa 	bl	8010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80110e4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80110e8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80110ec:	4bc8      	ldr	r3, [pc, #800]	; (8011410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d03e      	beq.n	8011172 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80110f4:	4dc7      	ldr	r5, [pc, #796]	; (8011414 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80110f6:	4628      	mov	r0, r5
 80110f8:	f7fc f983 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110fc:	4606      	mov	r6, r0
 80110fe:	2800      	cmp	r0, #0
 8011100:	d137      	bne.n	8011172 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8011102:	4628      	mov	r0, r5
 8011104:	f7ff f9c6 	bl	8010494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8011108:	6829      	ldr	r1, [r5, #0]
 801110a:	686a      	ldr	r2, [r5, #4]
 801110c:	4620      	mov	r0, r4
 801110e:	f7ff fc93 	bl	8010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011112:	802e      	strh	r6, [r5, #0]
 8011114:	806e      	strh	r6, [r5, #2]
 8011116:	80ae      	strh	r6, [r5, #4]
 8011118:	80ee      	strh	r6, [r5, #6]
 801111a:	ae09      	add	r6, sp, #36	; 0x24
 801111c:	4630      	mov	r0, r6
 801111e:	f7ff fc23 	bl	8010968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011122:	4abd      	ldr	r2, [pc, #756]	; (8011418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8011124:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8011128:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801112c:	8815      	ldrh	r5, [r2, #0]
 801112e:	9202      	str	r2, [sp, #8]
 8011130:	462b      	mov	r3, r5
 8011132:	429f      	cmp	r7, r3
 8011134:	d924      	bls.n	8011180 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8011136:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801113a:	2907      	cmp	r1, #7
 801113c:	d816      	bhi.n	801116c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801113e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8011142:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8011146:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801114a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801114e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8011152:	1c4a      	adds	r2, r1, #1
 8011154:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8011158:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801115c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8011160:	f8a2 9002 	strh.w	r9, [r2, #2]
 8011164:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011168:	f8a2 c006 	strh.w	ip, [r2, #6]
 801116c:	3301      	adds	r3, #1
 801116e:	b29b      	uxth	r3, r3
 8011170:	e7df      	b.n	8011132 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8011172:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1cf      	bne.n	801111a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801117a:	b01b      	add	sp, #108	; 0x6c
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	462f      	mov	r7, r5
 8011182:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8011186:	42bb      	cmp	r3, r7
 8011188:	d90b      	bls.n	80111a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801118a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801118e:	3701      	adds	r7, #1
 8011190:	4620      	mov	r0, r4
 8011192:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8011196:	b2bf      	uxth	r7, r7
 8011198:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801119c:	f7ff fc4c 	bl	8010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80111a0:	e7ef      	b.n	8011182 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80111a2:	4a9e      	ldr	r2, [pc, #632]	; (801141c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80111a4:	6813      	ldr	r3, [r2, #0]
 80111a6:	4690      	mov	r8, r2
 80111a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	f040 80e4 	bne.w	801137a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80111b2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80111b6:	4629      	mov	r1, r5
 80111b8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80111bc:	2500      	movs	r5, #0
 80111be:	33aa      	adds	r3, #170	; 0xaa
 80111c0:	428f      	cmp	r7, r1
 80111c2:	f103 0308 	add.w	r3, r3, #8
 80111c6:	dd0a      	ble.n	80111de <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80111c8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80111cc:	3101      	adds	r1, #1
 80111ce:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80111d2:	4402      	add	r2, r0
 80111d4:	b212      	sxth	r2, r2
 80111d6:	4295      	cmp	r5, r2
 80111d8:	bfb8      	it	lt
 80111da:	4615      	movlt	r5, r2
 80111dc:	e7f0      	b.n	80111c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80111de:	4b90      	ldr	r3, [pc, #576]	; (8011420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80111e0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801141c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80111e4:	881b      	ldrh	r3, [r3, #0]
 80111e6:	46d8      	mov	r8, fp
 80111e8:	2b0f      	cmp	r3, #15
 80111ea:	bf8c      	ite	hi
 80111ec:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80111f0:	f04f 0a01 	movls.w	sl, #1
 80111f4:	2300      	movs	r3, #0
 80111f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80111fa:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80111fe:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011202:	4438      	add	r0, r7
 8011204:	b207      	sxth	r7, r0
 8011206:	f8db 0000 	ldr.w	r0, [fp]
 801120a:	42bd      	cmp	r5, r7
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	f340 8084 	ble.w	801131a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8011212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011216:	4798      	blx	r3
 8011218:	eb07 030a 	add.w	r3, r7, sl
 801121c:	4298      	cmp	r0, r3
 801121e:	da07      	bge.n	8011230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8011220:	4285      	cmp	r5, r0
 8011222:	dd05      	ble.n	8011230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8011224:	4287      	cmp	r7, r0
 8011226:	dd6d      	ble.n	8011304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8011228:	2f00      	cmp	r7, #0
 801122a:	dd6b      	ble.n	8011304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801122c:	4628      	mov	r0, r5
 801122e:	e004      	b.n	801123a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8011230:	4287      	cmp	r7, r0
 8011232:	dcfb      	bgt.n	801122c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8011234:	42a8      	cmp	r0, r5
 8011236:	bfa8      	it	ge
 8011238:	4628      	movge	r0, r5
 801123a:	4b7a      	ldr	r3, [pc, #488]	; (8011424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801123c:	1bc0      	subs	r0, r0, r7
 801123e:	2200      	movs	r2, #0
 8011240:	f8ad 7016 	strh.w	r7, [sp, #22]
 8011244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011248:	f8ad 2014 	strh.w	r2, [sp, #20]
 801124c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011250:	9b02      	ldr	r3, [sp, #8]
 8011252:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011256:	881f      	ldrh	r7, [r3, #0]
 8011258:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801125c:	42bb      	cmp	r3, r7
 801125e:	d9cc      	bls.n	80111fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8011260:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8011264:	ab07      	add	r3, sp, #28
 8011266:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801126a:	6851      	ldr	r1, [r2, #4]
 801126c:	c303      	stmia	r3!, {r0, r1}
 801126e:	a905      	add	r1, sp, #20
 8011270:	a807      	add	r0, sp, #28
 8011272:	f7ff fa4e 	bl	8010712 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011276:	2800      	cmp	r0, #0
 8011278:	d04c      	beq.n	8011314 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801127a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801127e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8011282:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8011286:	4686      	mov	lr, r0
 8011288:	4290      	cmp	r0, r2
 801128a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801128e:	4448      	add	r0, r9
 8011290:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8011294:	bfb8      	it	lt
 8011296:	4696      	movlt	lr, r2
 8011298:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801129c:	444a      	add	r2, r9
 801129e:	b280      	uxth	r0, r0
 80112a0:	4299      	cmp	r1, r3
 80112a2:	468c      	mov	ip, r1
 80112a4:	b292      	uxth	r2, r2
 80112a6:	9303      	str	r3, [sp, #12]
 80112a8:	bfb8      	it	lt
 80112aa:	469c      	movlt	ip, r3
 80112ac:	b203      	sxth	r3, r0
 80112ae:	fa0f f982 	sxth.w	r9, r2
 80112b2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80112b6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80112ba:	454b      	cmp	r3, r9
 80112bc:	bfb8      	it	lt
 80112be:	4602      	movlt	r2, r0
 80112c0:	9b03      	ldr	r3, [sp, #12]
 80112c2:	eba2 020e 	sub.w	r2, r2, lr
 80112c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80112ca:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80112ce:	4411      	add	r1, r2
 80112d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80112d4:	4413      	add	r3, r2
 80112d6:	b289      	uxth	r1, r1
 80112d8:	b29b      	uxth	r3, r3
 80112da:	b208      	sxth	r0, r1
 80112dc:	b21a      	sxth	r2, r3
 80112de:	4290      	cmp	r0, r2
 80112e0:	bfb8      	it	lt
 80112e2:	460b      	movlt	r3, r1
 80112e4:	eba3 030c 	sub.w	r3, r3, ip
 80112e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80112ec:	a807      	add	r0, sp, #28
 80112ee:	f7fc f888 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 80112f2:	b920      	cbnz	r0, 80112fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80112f4:	6823      	ldr	r3, [r4, #0]
 80112f6:	a907      	add	r1, sp, #28
 80112f8:	4620      	mov	r0, r4
 80112fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fc:	4798      	blx	r3
 80112fe:	3701      	adds	r7, #1
 8011300:	b2bf      	uxth	r7, r7
 8011302:	e7a9      	b.n	8011258 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8011304:	f8d8 0000 	ldr.w	r0, [r8]
 8011308:	2101      	movs	r1, #1
 801130a:	6803      	ldr	r3, [r0, #0]
 801130c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011310:	4798      	blx	r3
 8011312:	e772      	b.n	80111fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8011314:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011318:	e7e8      	b.n	80112ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131c:	4798      	blx	r3
 801131e:	4b42      	ldr	r3, [pc, #264]	; (8011428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f43f af29 	beq.w	801117a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8011328:	2300      	movs	r3, #0
 801132a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801132e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8011332:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8011336:	9b02      	ldr	r3, [sp, #8]
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	429d      	cmp	r5, r3
 801133c:	f67f af1d 	bls.w	801117a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8011340:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8011344:	2907      	cmp	r1, #7
 8011346:	d815      	bhi.n	8011374 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8011348:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801134c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8011350:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8011354:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8011358:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801135c:	1c4a      	adds	r2, r1, #1
 801135e:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8011362:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8011366:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801136a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801136e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8011372:	80d7      	strh	r7, [r2, #6]
 8011374:	3301      	adds	r3, #1
 8011376:	b29b      	uxth	r3, r3
 8011378:	e7df      	b.n	801133a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801137a:	2b02      	cmp	r3, #2
 801137c:	f040 8135 	bne.w	80115ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8011380:	4b2a      	ldr	r3, [pc, #168]	; (801142c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8011382:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	2b01      	cmp	r3, #1
 801138a:	f000 809c 	beq.w	80114c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801138e:	9b02      	ldr	r3, [sp, #8]
 8011390:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8011394:	f8b3 b000 	ldrh.w	fp, [r3]
 8011398:	f10b 0b01 	add.w	fp, fp, #1
 801139c:	fa1f fb8b 	uxth.w	fp, fp
 80113a0:	2a00      	cmp	r2, #0
 80113a2:	d0bc      	beq.n	801131e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80113a4:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80113a8:	4659      	mov	r1, fp
 80113aa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80113ae:	f04f 0800 	mov.w	r8, #0
 80113b2:	441d      	add	r5, r3
 80113b4:	b22d      	sxth	r5, r5
 80113b6:	b28b      	uxth	r3, r1
 80113b8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80113bc:	429a      	cmp	r2, r3
 80113be:	f240 80c0 	bls.w	8011542 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80113c2:	4427      	add	r7, r4
 80113c4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80113c8:	4608      	mov	r0, r1
 80113ca:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80113ce:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80113d2:	4563      	cmp	r3, ip
 80113d4:	f340 80a2 	ble.w	801151c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80113d8:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80113dc:	4465      	add	r5, ip
 80113de:	b22d      	sxth	r5, r5
 80113e0:	429d      	cmp	r5, r3
 80113e2:	bfa8      	it	ge
 80113e4:	461d      	movge	r5, r3
 80113e6:	3101      	adds	r1, #1
 80113e8:	4680      	mov	r8, r0
 80113ea:	e7e4      	b.n	80113b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80113ec:	d10b      	bne.n	8011406 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80113ee:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80113f2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80113f6:	458c      	cmp	ip, r1
 80113f8:	bfb4      	ite	lt
 80113fa:	469c      	movlt	ip, r3
 80113fc:	46bc      	movge	ip, r7
 80113fe:	4572      	cmp	r2, lr
 8011400:	bfb8      	it	lt
 8011402:	4672      	movlt	r2, lr
 8011404:	e087      	b.n	8011516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8011406:	428a      	cmp	r2, r1
 8011408:	46bc      	mov	ip, r7
 801140a:	bfb8      	it	lt
 801140c:	460a      	movlt	r2, r1
 801140e:	e082      	b.n	8011516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8011410:	2002494c 	.word	0x2002494c
 8011414:	20024958 	.word	0x20024958
 8011418:	20000070 	.word	0x20000070
 801141c:	20024914 	.word	0x20024914
 8011420:	2002490a 	.word	0x2002490a
 8011424:	20024908 	.word	0x20024908
 8011428:	20024912 	.word	0x20024912
 801142c:	2002490c 	.word	0x2002490c
 8011430:	1961      	adds	r1, r4, r5
 8011432:	ab07      	add	r3, sp, #28
 8011434:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8011438:	6849      	ldr	r1, [r1, #4]
 801143a:	c303      	stmia	r3!, {r0, r1}
 801143c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011440:	a807      	add	r0, sp, #28
 8011442:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011446:	2b13      	cmp	r3, #19
 8011448:	440b      	add	r3, r1
 801144a:	bfd8      	it	le
 801144c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8011450:	1a9b      	subs	r3, r3, r2
 8011452:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011456:	f8ad 3020 	strh.w	r3, [sp, #32]
 801145a:	f7ff f835 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801145e:	a807      	add	r0, sp, #28
 8011460:	f7fb ffcf 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011464:	bb78      	cbnz	r0, 80114c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8011466:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801146a:	4425      	add	r5, r4
 801146c:	f8d8 0000 	ldr.w	r0, [r8]
 8011470:	f1bc 0f14 	cmp.w	ip, #20
 8011474:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011478:	f8d0 e000 	ldr.w	lr, [r0]
 801147c:	bfa8      	it	ge
 801147e:	f04f 0c14 	movge.w	ip, #20
 8011482:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8011486:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801148a:	fa1f fc8c 	uxth.w	ip, ip
 801148e:	f8cd c000 	str.w	ip, [sp]
 8011492:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8011496:	47d0      	blx	sl
 8011498:	4682      	mov	sl, r0
 801149a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801149e:	a807      	add	r0, sp, #28
 80114a0:	f7fe fff8 	bl	8010494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	4620      	mov	r0, r4
 80114a8:	a907      	add	r1, sp, #28
 80114aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ac:	4798      	blx	r3
 80114ae:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80114b2:	eba0 000a 	sub.w	r0, r0, sl
 80114b6:	b200      	sxth	r0, r0
 80114b8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80114bc:	b918      	cbnz	r0, 80114c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80114be:	b2b9      	uxth	r1, r7
 80114c0:	4648      	mov	r0, r9
 80114c2:	f7ff faa5 	bl	8010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80114c6:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80114ca:	f1bb 0f00 	cmp.w	fp, #0
 80114ce:	f43f af26 	beq.w	801131e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80114d2:	9b02      	ldr	r3, [sp, #8]
 80114d4:	2700      	movs	r7, #0
 80114d6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	3301      	adds	r3, #1
 80114de:	b29b      	uxth	r3, r3
 80114e0:	b299      	uxth	r1, r3
 80114e2:	00fd      	lsls	r5, r7, #3
 80114e4:	458b      	cmp	fp, r1
 80114e6:	d9a3      	bls.n	8011430 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80114e8:	4425      	add	r5, r4
 80114ea:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80114ee:	469c      	mov	ip, r3
 80114f0:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80114f4:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80114f8:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80114fc:	4408      	add	r0, r1
 80114fe:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8011502:	4471      	add	r1, lr
 8011504:	b200      	sxth	r0, r0
 8011506:	b209      	sxth	r1, r1
 8011508:	4288      	cmp	r0, r1
 801150a:	f6bf af6f 	bge.w	80113ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801150e:	4586      	cmp	lr, r0
 8011510:	4672      	mov	r2, lr
 8011512:	bfb8      	it	lt
 8011514:	4602      	movlt	r2, r0
 8011516:	3301      	adds	r3, #1
 8011518:	4667      	mov	r7, ip
 801151a:	e7e1      	b.n	80114e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801151c:	d10c      	bne.n	8011538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801151e:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8011522:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8011526:	4287      	cmp	r7, r0
 8011528:	bfb4      	ite	lt
 801152a:	4608      	movlt	r0, r1
 801152c:	4640      	movge	r0, r8
 801152e:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8011532:	443b      	add	r3, r7
 8011534:	b21b      	sxth	r3, r3
 8011536:	e753      	b.n	80113e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8011538:	4565      	cmp	r5, ip
 801153a:	4640      	mov	r0, r8
 801153c:	bfa8      	it	ge
 801153e:	4665      	movge	r5, ip
 8011540:	e751      	b.n	80113e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8011542:	eb09 0007 	add.w	r0, r9, r7
 8011546:	4427      	add	r7, r4
 8011548:	9203      	str	r2, [sp, #12]
 801154a:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801154e:	f1ba 0f13 	cmp.w	sl, #19
 8011552:	bfde      	ittt	le
 8011554:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8011558:	4455      	addle	r5, sl
 801155a:	b22d      	sxthle	r5, r5
 801155c:	f7fb ff51 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011560:	9a03      	ldr	r2, [sp, #12]
 8011562:	2800      	cmp	r0, #0
 8011564:	f47f af1c 	bne.w	80113a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8011568:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801156c:	fa1f fa8a 	uxth.w	sl, sl
 8011570:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8011574:	1aad      	subs	r5, r5, r2
 8011576:	4829      	ldr	r0, [pc, #164]	; (801161c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8011578:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801157c:	2d14      	cmp	r5, #20
 801157e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8011582:	6800      	ldr	r0, [r0, #0]
 8011584:	bfa8      	it	ge
 8011586:	2514      	movge	r5, #20
 8011588:	f8ad 101c 	strh.w	r1, [sp, #28]
 801158c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8011590:	b289      	uxth	r1, r1
 8011592:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011596:	b2ad      	uxth	r5, r5
 8011598:	f8d0 c000 	ldr.w	ip, [r0]
 801159c:	b292      	uxth	r2, r2
 801159e:	4555      	cmp	r5, sl
 80115a0:	bf94      	ite	ls
 80115a2:	9500      	strls	r5, [sp, #0]
 80115a4:	f8cd a000 	strhi.w	sl, [sp]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80115ae:	47a8      	blx	r5
 80115b0:	6823      	ldr	r3, [r4, #0]
 80115b2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80115b6:	a907      	add	r1, sp, #28
 80115b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ba:	4620      	mov	r0, r4
 80115bc:	4798      	blx	r3
 80115be:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80115c2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80115c6:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80115ca:	1a5b      	subs	r3, r3, r1
 80115cc:	440a      	add	r2, r1
 80115ce:	b21b      	sxth	r3, r3
 80115d0:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 80115d4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f47f aed8 	bne.w	801138e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80115de:	fa1f f188 	uxth.w	r1, r8
 80115e2:	4648      	mov	r0, r9
 80115e4:	f7ff fa14 	bl	8010a10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80115e8:	e6d1      	b.n	801138e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80115ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80115ee:	42ab      	cmp	r3, r5
 80115f0:	f67f ae95 	bls.w	801131e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80115f4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80115f8:	ab07      	add	r3, sp, #28
 80115fa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80115fe:	6851      	ldr	r1, [r2, #4]
 8011600:	c303      	stmia	r3!, {r0, r1}
 8011602:	a807      	add	r0, sp, #28
 8011604:	f7fb fefd 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011608:	b920      	cbnz	r0, 8011614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801160a:	6823      	ldr	r3, [r4, #0]
 801160c:	a907      	add	r1, sp, #28
 801160e:	4620      	mov	r0, r4
 8011610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011612:	4798      	blx	r3
 8011614:	3501      	adds	r5, #1
 8011616:	b2ad      	uxth	r5, r5
 8011618:	e7e7      	b.n	80115ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801161a:	bf00      	nop
 801161c:	20024914 	.word	0x20024914

08011620 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011620:	4b03      	ldr	r3, [pc, #12]	; (8011630 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011622:	2200      	movs	r2, #0
 8011624:	801a      	strh	r2, [r3, #0]
 8011626:	805a      	strh	r2, [r3, #2]
 8011628:	809a      	strh	r2, [r3, #4]
 801162a:	80da      	strh	r2, [r3, #6]
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	20024958 	.word	0x20024958

08011634 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011638:	b09d      	sub	sp, #116	; 0x74
 801163a:	4606      	mov	r6, r0
 801163c:	4614      	mov	r4, r2
 801163e:	468a      	mov	sl, r1
 8011640:	a803      	add	r0, sp, #12
 8011642:	461d      	mov	r5, r3
 8011644:	f000 fd6c 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 8011648:	6833      	ldr	r3, [r6, #0]
 801164a:	4630      	mov	r0, r6
 801164c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8011650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011652:	4798      	blx	r3
 8011654:	6833      	ldr	r3, [r6, #0]
 8011656:	4607      	mov	r7, r0
 8011658:	4630      	mov	r0, r6
 801165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801165c:	4798      	blx	r3
 801165e:	462a      	mov	r2, r5
 8011660:	2500      	movs	r5, #0
 8011662:	4621      	mov	r1, r4
 8011664:	9000      	str	r0, [sp, #0]
 8011666:	463b      	mov	r3, r7
 8011668:	462c      	mov	r4, r5
 801166a:	46a9      	mov	r9, r5
 801166c:	46a8      	mov	r8, r5
 801166e:	a803      	add	r0, sp, #12
 8011670:	f000 fdb1 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011674:	2300      	movs	r3, #0
 8011676:	9302      	str	r3, [sp, #8]
 8011678:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801167c:	429c      	cmp	r4, r3
 801167e:	d002      	beq.n	8011686 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8011680:	455c      	cmp	r4, fp
 8011682:	bf18      	it	ne
 8011684:	4625      	movne	r5, r4
 8011686:	ab02      	add	r3, sp, #8
 8011688:	4632      	mov	r2, r6
 801168a:	4651      	mov	r1, sl
 801168c:	a803      	add	r0, sp, #12
 801168e:	f001 f8a7 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011692:	4604      	mov	r4, r0
 8011694:	b108      	cbz	r0, 801169a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8011696:	280a      	cmp	r0, #10
 8011698:	d10a      	bne.n	80116b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801169a:	45c1      	cmp	r9, r8
 801169c:	bf38      	it	cc
 801169e:	46c1      	movcc	r9, r8
 80116a0:	f04f 0800 	mov.w	r8, #0
 80116a4:	2c00      	cmp	r4, #0
 80116a6:	d1e5      	bne.n	8011674 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80116a8:	4648      	mov	r0, r9
 80116aa:	b01d      	add	sp, #116	; 0x74
 80116ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b0:	9a02      	ldr	r2, [sp, #8]
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	d0de      	beq.n	8011674 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80116b6:	7b57      	ldrb	r7, [r2, #13]
 80116b8:	4629      	mov	r1, r5
 80116ba:	6833      	ldr	r3, [r6, #0]
 80116bc:	007f      	lsls	r7, r7, #1
 80116be:	8894      	ldrh	r4, [r2, #4]
 80116c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80116c6:	7a97      	ldrb	r7, [r2, #10]
 80116c8:	4307      	orrs	r7, r0
 80116ca:	4630      	mov	r0, r6
 80116cc:	4798      	blx	r3
 80116ce:	4438      	add	r0, r7
 80116d0:	4480      	add	r8, r0
 80116d2:	fa1f f888 	uxth.w	r8, r8
 80116d6:	e7e5      	b.n	80116a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080116d8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80116d8:	b508      	push	{r3, lr}
 80116da:	6803      	ldr	r3, [r0, #0]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	4798      	blx	r3
 80116e0:	b128      	cbz	r0, 80116ee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80116e2:	7b43      	ldrb	r3, [r0, #13]
 80116e4:	7a80      	ldrb	r0, [r0, #10]
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ec:	4318      	orrs	r0, r3
 80116ee:	bd08      	pop	{r3, pc}

080116f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80116f0:	b40e      	push	{r1, r2, r3}
 80116f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116f4:	b09e      	sub	sp, #120	; 0x78
 80116f6:	4605      	mov	r5, r0
 80116f8:	ab23      	add	r3, sp, #140	; 0x8c
 80116fa:	a805      	add	r0, sp, #20
 80116fc:	f853 4b04 	ldr.w	r4, [r3], #4
 8011700:	9303      	str	r3, [sp, #12]
 8011702:	f000 fd0d 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 8011706:	682b      	ldr	r3, [r5, #0]
 8011708:	4628      	mov	r0, r5
 801170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801170c:	4798      	blx	r3
 801170e:	682b      	ldr	r3, [r5, #0]
 8011710:	4606      	mov	r6, r0
 8011712:	4628      	mov	r0, r5
 8011714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011716:	4798      	blx	r3
 8011718:	4633      	mov	r3, r6
 801171a:	4621      	mov	r1, r4
 801171c:	ae1e      	add	r6, sp, #120	; 0x78
 801171e:	2400      	movs	r4, #0
 8011720:	9000      	str	r0, [sp, #0]
 8011722:	9a03      	ldr	r2, [sp, #12]
 8011724:	a805      	add	r0, sp, #20
 8011726:	f000 fd56 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801172a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801172e:	462a      	mov	r2, r5
 8011730:	4633      	mov	r3, r6
 8011732:	4621      	mov	r1, r4
 8011734:	a805      	add	r0, sp, #20
 8011736:	f001 f853 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801173a:	b300      	cbz	r0, 801177e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801173c:	280a      	cmp	r0, #10
 801173e:	d01a      	beq.n	8011776 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011740:	9f04      	ldr	r7, [sp, #16]
 8011742:	b1c7      	cbz	r7, 8011776 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8011744:	7b78      	ldrb	r0, [r7, #13]
 8011746:	7a3b      	ldrb	r3, [r7, #8]
 8011748:	00c1      	lsls	r1, r0, #3
 801174a:	88aa      	ldrh	r2, [r5, #4]
 801174c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011750:	4319      	orrs	r1, r3
 8011752:	0643      	lsls	r3, r0, #25
 8011754:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011758:	bf48      	it	mi
 801175a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801175e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011762:	bf48      	it	mi
 8011764:	b219      	sxthmi	r1, r3
 8011766:	79fb      	ldrb	r3, [r7, #7]
 8011768:	4303      	orrs	r3, r0
 801176a:	4413      	add	r3, r2
 801176c:	1a5b      	subs	r3, r3, r1
 801176e:	b29b      	uxth	r3, r3
 8011770:	42a3      	cmp	r3, r4
 8011772:	bfc8      	it	gt
 8011774:	b21c      	sxthgt	r4, r3
 8011776:	4633      	mov	r3, r6
 8011778:	462a      	mov	r2, r5
 801177a:	2100      	movs	r1, #0
 801177c:	e7da      	b.n	8011734 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801177e:	b2a0      	uxth	r0, r4
 8011780:	b01e      	add	sp, #120	; 0x78
 8011782:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011786:	b003      	add	sp, #12
 8011788:	4770      	bx	lr

0801178a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801178a:	b40e      	push	{r1, r2, r3}
 801178c:	b570      	push	{r4, r5, r6, lr}
 801178e:	b09d      	sub	sp, #116	; 0x74
 8011790:	4604      	mov	r4, r0
 8011792:	ab21      	add	r3, sp, #132	; 0x84
 8011794:	a803      	add	r0, sp, #12
 8011796:	f853 5b04 	ldr.w	r5, [r3], #4
 801179a:	9302      	str	r3, [sp, #8]
 801179c:	f000 fcc0 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 80117a0:	6823      	ldr	r3, [r4, #0]
 80117a2:	4620      	mov	r0, r4
 80117a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117a6:	4798      	blx	r3
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	4606      	mov	r6, r0
 80117ac:	4620      	mov	r0, r4
 80117ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117b0:	2401      	movs	r4, #1
 80117b2:	4798      	blx	r3
 80117b4:	4633      	mov	r3, r6
 80117b6:	9000      	str	r0, [sp, #0]
 80117b8:	4629      	mov	r1, r5
 80117ba:	9a02      	ldr	r2, [sp, #8]
 80117bc:	a803      	add	r0, sp, #12
 80117be:	f000 fd0a 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80117c2:	a803      	add	r0, sp, #12
 80117c4:	f001 f8d8 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80117c8:	b2a3      	uxth	r3, r4
 80117ca:	b138      	cbz	r0, 80117dc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80117cc:	280a      	cmp	r0, #10
 80117ce:	a803      	add	r0, sp, #12
 80117d0:	bf04      	itt	eq
 80117d2:	3301      	addeq	r3, #1
 80117d4:	b21c      	sxtheq	r4, r3
 80117d6:	f001 f8cf 	bl	8012978 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80117da:	e7f5      	b.n	80117c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80117dc:	4618      	mov	r0, r3
 80117de:	b01d      	add	sp, #116	; 0x74
 80117e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117e4:	b003      	add	sp, #12
 80117e6:	4770      	bx	lr

080117e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80117e8:	b40e      	push	{r1, r2, r3}
 80117ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ec:	b09e      	sub	sp, #120	; 0x78
 80117ee:	4604      	mov	r4, r0
 80117f0:	ab23      	add	r3, sp, #140	; 0x8c
 80117f2:	a805      	add	r0, sp, #20
 80117f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117f8:	9303      	str	r3, [sp, #12]
 80117fa:	f000 fc91 	bl	8012120 <_ZN8touchgfx12TextProviderC1Ev>
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	4620      	mov	r0, r4
 8011802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011804:	4798      	blx	r3
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	4606      	mov	r6, r0
 801180a:	4620      	mov	r0, r4
 801180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801180e:	4798      	blx	r3
 8011810:	4633      	mov	r3, r6
 8011812:	4629      	mov	r1, r5
 8011814:	9000      	str	r0, [sp, #0]
 8011816:	9a03      	ldr	r2, [sp, #12]
 8011818:	a805      	add	r0, sp, #20
 801181a:	f000 fcdc 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801181e:	ad1e      	add	r5, sp, #120	; 0x78
 8011820:	2100      	movs	r1, #0
 8011822:	26ff      	movs	r6, #255	; 0xff
 8011824:	4622      	mov	r2, r4
 8011826:	a805      	add	r0, sp, #20
 8011828:	f845 1d68 	str.w	r1, [r5, #-104]!
 801182c:	462b      	mov	r3, r5
 801182e:	f000 ffd7 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011832:	b1d8      	cbz	r0, 801186c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8011834:	280a      	cmp	r0, #10
 8011836:	d012      	beq.n	801185e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8011838:	9804      	ldr	r0, [sp, #16]
 801183a:	b180      	cbz	r0, 801185e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801183c:	7b47      	ldrb	r7, [r0, #13]
 801183e:	7922      	ldrb	r2, [r4, #4]
 8011840:	00fb      	lsls	r3, r7, #3
 8011842:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011846:	7a03      	ldrb	r3, [r0, #8]
 8011848:	430b      	orrs	r3, r1
 801184a:	0679      	lsls	r1, r7, #25
 801184c:	bf44      	itt	mi
 801184e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011852:	b21b      	sxthmi	r3, r3
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	b2db      	uxtb	r3, r3
 8011858:	429e      	cmp	r6, r3
 801185a:	bf28      	it	cs
 801185c:	461e      	movcs	r6, r3
 801185e:	462b      	mov	r3, r5
 8011860:	4622      	mov	r2, r4
 8011862:	2100      	movs	r1, #0
 8011864:	a805      	add	r0, sp, #20
 8011866:	f000 ffbb 	bl	80127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801186a:	e7e2      	b.n	8011832 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801186c:	4630      	mov	r0, r6
 801186e:	b01e      	add	sp, #120	; 0x78
 8011870:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011874:	b003      	add	sp, #12
 8011876:	4770      	bx	lr

08011878 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8011878:	b513      	push	{r0, r1, r4, lr}
 801187a:	6803      	ldr	r3, [r0, #0]
 801187c:	2400      	movs	r4, #0
 801187e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011882:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011886:	f8ad 1004 	strh.w	r1, [sp, #4]
 801188a:	4669      	mov	r1, sp
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	9400      	str	r4, [sp, #0]
 8011890:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011894:	4798      	blx	r3
 8011896:	b002      	add	sp, #8
 8011898:	bd10      	pop	{r4, pc}

0801189a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801189a:	b538      	push	{r3, r4, r5, lr}
 801189c:	680b      	ldr	r3, [r1, #0]
 801189e:	460c      	mov	r4, r1
 80118a0:	4605      	mov	r5, r0
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	4798      	blx	r3
 80118a6:	6823      	ldr	r3, [r4, #0]
 80118a8:	4620      	mov	r0, r4
 80118aa:	4629      	mov	r1, r5
 80118ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ae:	4798      	blx	r3
 80118b0:	4628      	mov	r0, r5
 80118b2:	bd38      	pop	{r3, r4, r5, pc}

080118b4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80118b4:	b410      	push	{r4}
 80118b6:	880a      	ldrh	r2, [r1, #0]
 80118b8:	8884      	ldrh	r4, [r0, #4]
 80118ba:	4422      	add	r2, r4
 80118bc:	800a      	strh	r2, [r1, #0]
 80118be:	884a      	ldrh	r2, [r1, #2]
 80118c0:	88c4      	ldrh	r4, [r0, #6]
 80118c2:	4422      	add	r2, r4
 80118c4:	804a      	strh	r2, [r1, #2]
 80118c6:	6940      	ldr	r0, [r0, #20]
 80118c8:	b120      	cbz	r0, 80118d4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80118ca:	6803      	ldr	r3, [r0, #0]
 80118cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d2:	4718      	bx	r3
 80118d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118d8:	4770      	bx	lr

080118da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80118da:	b570      	push	{r4, r5, r6, lr}
 80118dc:	8882      	ldrh	r2, [r0, #4]
 80118de:	460c      	mov	r4, r1
 80118e0:	880b      	ldrh	r3, [r1, #0]
 80118e2:	4605      	mov	r5, r0
 80118e4:	4413      	add	r3, r2
 80118e6:	800b      	strh	r3, [r1, #0]
 80118e8:	884b      	ldrh	r3, [r1, #2]
 80118ea:	88c2      	ldrh	r2, [r0, #6]
 80118ec:	4413      	add	r3, r2
 80118ee:	804b      	strh	r3, [r1, #2]
 80118f0:	1d01      	adds	r1, r0, #4
 80118f2:	4620      	mov	r0, r4
 80118f4:	f7fb fd42 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 80118f8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	dd0b      	ble.n	8011918 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011900:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011904:	2b00      	cmp	r3, #0
 8011906:	dd07      	ble.n	8011918 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8011908:	6968      	ldr	r0, [r5, #20]
 801190a:	b128      	cbz	r0, 8011918 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801190c:	6803      	ldr	r3, [r0, #0]
 801190e:	4621      	mov	r1, r4
 8011910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011916:	4718      	bx	r3
 8011918:	bd70      	pop	{r4, r5, r6, pc}
	...

0801191c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	8882      	ldrh	r2, [r0, #4]
 8011920:	460c      	mov	r4, r1
 8011922:	880b      	ldrh	r3, [r1, #0]
 8011924:	4605      	mov	r5, r0
 8011926:	4413      	add	r3, r2
 8011928:	800b      	strh	r3, [r1, #0]
 801192a:	884b      	ldrh	r3, [r1, #2]
 801192c:	88c2      	ldrh	r2, [r0, #6]
 801192e:	4413      	add	r3, r2
 8011930:	804b      	strh	r3, [r1, #2]
 8011932:	1d01      	adds	r1, r0, #4
 8011934:	4620      	mov	r0, r4
 8011936:	f7fb fd21 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 801193a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801193e:	2b00      	cmp	r3, #0
 8011940:	dd18      	ble.n	8011974 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8011942:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011946:	2b00      	cmp	r3, #0
 8011948:	dd14      	ble.n	8011974 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801194a:	6968      	ldr	r0, [r5, #20]
 801194c:	b128      	cbz	r0, 801195a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801194e:	6803      	ldr	r3, [r0, #0]
 8011950:	4621      	mov	r1, r4
 8011952:	691b      	ldr	r3, [r3, #16]
 8011954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011958:	4718      	bx	r3
 801195a:	4b07      	ldr	r3, [pc, #28]	; (8011978 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	3304      	adds	r3, #4
 8011960:	429d      	cmp	r5, r3
 8011962:	d107      	bne.n	8011974 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8011964:	f7fe ffb4 	bl	80108d0 <_ZN8touchgfx11Application11getInstanceEv>
 8011968:	6821      	ldr	r1, [r4, #0]
 801196a:	6862      	ldr	r2, [r4, #4]
 801196c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011970:	f7ff b862 	b.w	8010a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011974:	bd70      	pop	{r4, r5, r6, pc}
 8011976:	bf00      	nop
 8011978:	20024950 	.word	0x20024950

0801197c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	4604      	mov	r4, r0
 8011980:	4616      	mov	r6, r2
 8011982:	460d      	mov	r5, r1
 8011984:	b901      	cbnz	r1, 8011988 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011986:	b192      	cbz	r2, 80119ae <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	4620      	mov	r0, r4
 801198c:	699b      	ldr	r3, [r3, #24]
 801198e:	4798      	blx	r3
 8011990:	88e2      	ldrh	r2, [r4, #6]
 8011992:	88a1      	ldrh	r1, [r4, #4]
 8011994:	4620      	mov	r0, r4
 8011996:	4432      	add	r2, r6
 8011998:	4429      	add	r1, r5
 801199a:	b212      	sxth	r2, r2
 801199c:	b209      	sxth	r1, r1
 801199e:	f7f3 f816 	bl	80049ce <_ZN8touchgfx8Drawable5setXYEss>
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	4620      	mov	r0, r4
 80119a6:	699b      	ldr	r3, [r3, #24]
 80119a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119ac:	4718      	bx	r3
 80119ae:	bd70      	pop	{r4, r5, r6, pc}

080119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	2300      	movs	r3, #0
 80119b4:	4604      	mov	r4, r0
 80119b6:	4608      	mov	r0, r1
 80119b8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80119bc:	8023      	strh	r3, [r4, #0]
 80119be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80119c2:	8063      	strh	r3, [r4, #2]
 80119c4:	6803      	ldr	r3, [r0, #0]
 80119c6:	80a1      	strh	r1, [r4, #4]
 80119c8:	4621      	mov	r1, r4
 80119ca:	80e2      	strh	r2, [r4, #6]
 80119cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ce:	4798      	blx	r3
 80119d0:	4620      	mov	r0, r4
 80119d2:	bd10      	pop	{r4, pc}

080119d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80119d4:	b530      	push	{r4, r5, lr}
 80119d6:	8083      	strh	r3, [r0, #4]
 80119d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80119dc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80119e0:	7183      	strb	r3, [r0, #6]
 80119e2:	79c3      	ldrb	r3, [r0, #7]
 80119e4:	6101      	str	r1, [r0, #16]
 80119e6:	f365 0306 	bfi	r3, r5, #0, #7
 80119ea:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80119ee:	8282      	strh	r2, [r0, #20]
 80119f0:	f365 13c7 	bfi	r3, r5, #7, #1
 80119f4:	71c3      	strb	r3, [r0, #7]
 80119f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80119fa:	7203      	strb	r3, [r0, #8]
 80119fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011a00:	7243      	strb	r3, [r0, #9]
 8011a02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8011a06:	8143      	strh	r3, [r0, #10]
 8011a08:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8011a0c:	8183      	strh	r3, [r0, #12]
 8011a0e:	4b01      	ldr	r3, [pc, #4]	; (8011a14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8011a10:	6003      	str	r3, [r0, #0]
 8011a12:	bd30      	pop	{r4, r5, pc}
 8011a14:	08023dd8 	.word	0x08023dd8

08011a18 <_ZNK8touchgfx9ConstFont4findEt>:
 8011a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1a:	6904      	ldr	r4, [r0, #16]
 8011a1c:	b3bc      	cbz	r4, 8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a1e:	88a3      	ldrh	r3, [r4, #4]
 8011a20:	8a82      	ldrh	r2, [r0, #20]
 8011a22:	1acb      	subs	r3, r1, r3
 8011a24:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a28:	d431      	bmi.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	dd0c      	ble.n	8011a48 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8011a2e:	230e      	movs	r3, #14
 8011a30:	fb03 4302 	mla	r3, r3, r2, r4
 8011a34:	889b      	ldrh	r3, [r3, #4]
 8011a36:	1a5b      	subs	r3, r3, r1
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	db27      	blt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	bfbc      	itt	lt
 8011a42:	2302      	movlt	r3, #2
 8011a44:	fb92 f3f3 	sdivlt	r3, r2, r3
 8011a48:	2500      	movs	r5, #0
 8011a4a:	260e      	movs	r6, #14
 8011a4c:	4295      	cmp	r5, r2
 8011a4e:	dc1e      	bgt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a50:	fb06 4003 	mla	r0, r6, r3, r4
 8011a54:	8887      	ldrh	r7, [r0, #4]
 8011a56:	42b9      	cmp	r1, r7
 8011a58:	d01a      	beq.n	8011a90 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011a5a:	d20d      	bcs.n	8011a78 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011a5c:	1e5a      	subs	r2, r3, #1
 8011a5e:	4295      	cmp	r5, r2
 8011a60:	dc15      	bgt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a62:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011a66:	1a5b      	subs	r3, r3, r1
 8011a68:	1ad3      	subs	r3, r2, r3
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	db0f      	blt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a6e:	429d      	cmp	r5, r3
 8011a70:	ddec      	ble.n	8011a4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011a72:	1953      	adds	r3, r2, r5
 8011a74:	105b      	asrs	r3, r3, #1
 8011a76:	e7e9      	b.n	8011a4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011a78:	1c5d      	adds	r5, r3, #1
 8011a7a:	42aa      	cmp	r2, r5
 8011a7c:	db07      	blt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a7e:	8a43      	ldrh	r3, [r0, #18]
 8011a80:	1acb      	subs	r3, r1, r3
 8011a82:	442b      	add	r3, r5
 8011a84:	429d      	cmp	r5, r3
 8011a86:	dc02      	bgt.n	8011a8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	dadf      	bge.n	8011a4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011a8c:	e7f1      	b.n	8011a72 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a92 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a94:	4604      	mov	r4, r0
 8011a96:	4617      	mov	r7, r2
 8011a98:	461e      	mov	r6, r3
 8011a9a:	b911      	cbnz	r1, 8011aa2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa2:	290a      	cmp	r1, #10
 8011aa4:	d0fa      	beq.n	8011a9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011aa6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011aaa:	4291      	cmp	r1, r2
 8011aac:	d0f6      	beq.n	8011a9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011aae:	f242 020b 	movw	r2, #8203	; 0x200b
 8011ab2:	4291      	cmp	r1, r2
 8011ab4:	d0f2      	beq.n	8011a9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011ab6:	f7ff ffaf 	bl	8011a18 <_ZNK8touchgfx9ConstFont4findEt>
 8011aba:	4605      	mov	r5, r0
 8011abc:	b950      	cbnz	r0, 8011ad4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	4798      	blx	r3
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f7ff ffa5 	bl	8011a18 <_ZNK8touchgfx9ConstFont4findEt>
 8011ace:	4605      	mov	r5, r0
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0e3      	beq.n	8011a9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011ad4:	6823      	ldr	r3, [r4, #0]
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4620      	mov	r0, r4
 8011ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011adc:	4798      	blx	r3
 8011ade:	6038      	str	r0, [r7, #0]
 8011ae0:	6823      	ldr	r3, [r4, #0]
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ae6:	4798      	blx	r3
 8011ae8:	7030      	strb	r0, [r6, #0]
 8011aea:	e7d8      	b.n	8011a9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08011aec <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8011aec:	2000      	movs	r0, #0
 8011aee:	4770      	bx	lr

08011af0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8011af0:	2001      	movs	r0, #1
 8011af2:	4770      	bx	lr

08011af4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8011af4:	2002      	movs	r0, #2
 8011af6:	4770      	bx	lr

08011af8 <_ZN8touchgfx6ScreenD1Ev>:
 8011af8:	4770      	bx	lr

08011afa <_ZN8touchgfx12GestureEventD1Ev>:
 8011afa:	4770      	bx	lr

08011afc <_ZN8touchgfx9DragEventD1Ev>:
 8011afc:	4770      	bx	lr

08011afe <_ZN8touchgfx10ClickEventD1Ev>:
 8011afe:	4770      	bx	lr

08011b00 <_ZN8touchgfx10ClickEventD0Ev>:
 8011b00:	b510      	push	{r4, lr}
 8011b02:	4604      	mov	r4, r0
 8011b04:	210c      	movs	r1, #12
 8011b06:	f00d fc8e 	bl	801f426 <_ZdlPvj>
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	bd10      	pop	{r4, pc}

08011b0e <_ZN8touchgfx9DragEventD0Ev>:
 8011b0e:	b510      	push	{r4, lr}
 8011b10:	4604      	mov	r4, r0
 8011b12:	2110      	movs	r1, #16
 8011b14:	f00d fc87 	bl	801f426 <_ZdlPvj>
 8011b18:	4620      	mov	r0, r4
 8011b1a:	bd10      	pop	{r4, pc}

08011b1c <_ZN8touchgfx12GestureEventD0Ev>:
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	4604      	mov	r4, r0
 8011b20:	210c      	movs	r1, #12
 8011b22:	f00d fc80 	bl	801f426 <_ZdlPvj>
 8011b26:	4620      	mov	r0, r4
 8011b28:	bd10      	pop	{r4, pc}

08011b2a <_ZN8touchgfx6ScreenD0Ev>:
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	213c      	movs	r1, #60	; 0x3c
 8011b30:	f00d fc79 	bl	801f426 <_ZdlPvj>
 8011b34:	4620      	mov	r0, r4
 8011b36:	bd10      	pop	{r4, pc}

08011b38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8011b38:	b530      	push	{r4, r5, lr}
 8011b3a:	460d      	mov	r5, r1
 8011b3c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011b3e:	b087      	sub	sp, #28
 8011b40:	4604      	mov	r4, r0
 8011b42:	b301      	cbz	r1, 8011b86 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011b44:	a801      	add	r0, sp, #4
 8011b46:	f7ff ff33 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b4a:	892a      	ldrh	r2, [r5, #8]
 8011b4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011b50:	7928      	ldrb	r0, [r5, #4]
 8011b52:	1ad2      	subs	r2, r2, r3
 8011b54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011b56:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8011b5a:	441a      	add	r2, r3
 8011b5c:	896b      	ldrh	r3, [r5, #10]
 8011b5e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8011b62:	f88d 0010 	strb.w	r0, [sp, #16]
 8011b66:	1b5b      	subs	r3, r3, r5
 8011b68:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8011b6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011b6c:	442b      	add	r3, r5
 8011b6e:	4d07      	ldr	r5, [pc, #28]	; (8011b8c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011b70:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011b74:	a903      	add	r1, sp, #12
 8011b76:	9503      	str	r5, [sp, #12]
 8011b78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011b7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b80:	6803      	ldr	r3, [r0, #0]
 8011b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b84:	4798      	blx	r3
 8011b86:	b007      	add	sp, #28
 8011b88:	bd30      	pop	{r4, r5, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08023e58 	.word	0x08023e58

08011b90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011b96:	b08a      	sub	sp, #40	; 0x28
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	b113      	cbz	r3, 8011ba4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8011b9e:	790b      	ldrb	r3, [r1, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d044      	beq.n	8011c2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011ba4:	f104 0804 	add.w	r8, r4, #4
 8011ba8:	a803      	add	r0, sp, #12
 8011baa:	4641      	mov	r1, r8
 8011bac:	f7ff ff00 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011bb0:	792b      	ldrb	r3, [r5, #4]
 8011bb2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8011bb6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8011bba:	b983      	cbnz	r3, 8011bde <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8011bbc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8011bc0:	892a      	ldrh	r2, [r5, #8]
 8011bc2:	88e9      	ldrh	r1, [r5, #6]
 8011bc4:	4640      	mov	r0, r8
 8011bc6:	1b92      	subs	r2, r2, r6
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	1bc9      	subs	r1, r1, r7
 8011bcc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8011bd0:	b212      	sxth	r2, r2
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	b209      	sxth	r1, r1
 8011bd6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8011bda:	f7fb faed 	bl	800d1b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8011bde:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011be0:	b329      	cbz	r1, 8011c2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011be2:	a805      	add	r0, sp, #20
 8011be4:	f7ff fee4 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011be8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011bec:	792b      	ldrb	r3, [r5, #4]
 8011bee:	a907      	add	r1, sp, #28
 8011bf0:	1abf      	subs	r7, r7, r2
 8011bf2:	88ea      	ldrh	r2, [r5, #6]
 8011bf4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011bf6:	4417      	add	r7, r2
 8011bf8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8011bfa:	f88d 3020 	strb.w	r3, [sp, #32]
 8011bfe:	4417      	add	r7, r2
 8011c00:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011c04:	1ab6      	subs	r6, r6, r2
 8011c06:	892a      	ldrh	r2, [r5, #8]
 8011c08:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8011c0c:	4416      	add	r6, r2
 8011c0e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011c10:	4416      	add	r6, r2
 8011c12:	4a08      	ldr	r2, [pc, #32]	; (8011c34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011c14:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8011c18:	2600      	movs	r6, #0
 8011c1a:	9207      	str	r2, [sp, #28]
 8011c1c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8011c20:	6803      	ldr	r3, [r0, #0]
 8011c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c24:	4798      	blx	r3
 8011c26:	792b      	ldrb	r3, [r5, #4]
 8011c28:	b10b      	cbz	r3, 8011c2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011c2a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011c2e:	b00a      	add	sp, #40	; 0x28
 8011c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c34:	08023e30 	.word	0x08023e30

08011c38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011c40:	b088      	sub	sp, #32
 8011c42:	4605      	mov	r5, r0
 8011c44:	2900      	cmp	r1, #0
 8011c46:	d06d      	beq.n	8011d24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8011c48:	4668      	mov	r0, sp
 8011c4a:	f7ff feb1 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c4e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8011c50:	88e3      	ldrh	r3, [r4, #6]
 8011c52:	f9bd 8000 	ldrsh.w	r8, [sp]
 8011c56:	440b      	add	r3, r1
 8011c58:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011c5c:	b21b      	sxth	r3, r3
 8011c5e:	4543      	cmp	r3, r8
 8011c60:	db31      	blt.n	8011cc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011c62:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8011c66:	44c4      	add	ip, r8
 8011c68:	fa0f fc8c 	sxth.w	ip, ip
 8011c6c:	4563      	cmp	r3, ip
 8011c6e:	da2a      	bge.n	8011cc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011c70:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011c72:	8926      	ldrh	r6, [r4, #8]
 8011c74:	4416      	add	r6, r2
 8011c76:	b236      	sxth	r6, r6
 8011c78:	42be      	cmp	r6, r7
 8011c7a:	db24      	blt.n	8011cc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011c7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011c80:	4438      	add	r0, r7
 8011c82:	b200      	sxth	r0, r0
 8011c84:	4286      	cmp	r6, r0
 8011c86:	da1e      	bge.n	8011cc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011c88:	8963      	ldrh	r3, [r4, #10]
 8011c8a:	4419      	add	r1, r3
 8011c8c:	b209      	sxth	r1, r1
 8011c8e:	4541      	cmp	r1, r8
 8011c90:	db08      	blt.n	8011ca4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011c92:	4561      	cmp	r1, ip
 8011c94:	da06      	bge.n	8011ca4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011c96:	89a3      	ldrh	r3, [r4, #12]
 8011c98:	441a      	add	r2, r3
 8011c9a:	b212      	sxth	r2, r2
 8011c9c:	42ba      	cmp	r2, r7
 8011c9e:	db01      	blt.n	8011ca4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011ca0:	4282      	cmp	r2, r0
 8011ca2:	db10      	blt.n	8011cc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011ca4:	4b21      	ldr	r3, [pc, #132]	; (8011d2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8011ca6:	a904      	add	r1, sp, #16
 8011ca8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011caa:	9304      	str	r3, [sp, #16]
 8011cac:	2302      	movs	r3, #2
 8011cae:	f88d 3014 	strb.w	r3, [sp, #20]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cb8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011cbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011cc0:	6803      	ldr	r3, [r0, #0]
 8011cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cc4:	4798      	blx	r3
 8011cc6:	1d29      	adds	r1, r5, #4
 8011cc8:	a802      	add	r0, sp, #8
 8011cca:	f7ff fe71 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011cce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011cd2:	88e0      	ldrh	r0, [r4, #6]
 8011cd4:	eba3 0808 	sub.w	r8, r3, r8
 8011cd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011cdc:	7921      	ldrb	r1, [r4, #4]
 8011cde:	fa1f f888 	uxth.w	r8, r8
 8011ce2:	1bdf      	subs	r7, r3, r7
 8011ce4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011ce8:	b2bb      	uxth	r3, r7
 8011cea:	4440      	add	r0, r8
 8011cec:	8922      	ldrh	r2, [r4, #8]
 8011cee:	8967      	ldrh	r7, [r4, #10]
 8011cf0:	4460      	add	r0, ip
 8011cf2:	89a4      	ldrh	r4, [r4, #12]
 8011cf4:	441a      	add	r2, r3
 8011cf6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011cf8:	44b8      	add	r8, r7
 8011cfa:	4423      	add	r3, r4
 8011cfc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011d00:	4432      	add	r2, r6
 8011d02:	44e0      	add	r8, ip
 8011d04:	4433      	add	r3, r6
 8011d06:	4c0a      	ldr	r4, [pc, #40]	; (8011d30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011d08:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011d0a:	f88d 1014 	strb.w	r1, [sp, #20]
 8011d0e:	a904      	add	r1, sp, #16
 8011d10:	9404      	str	r4, [sp, #16]
 8011d12:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011d16:	f8ad 801a 	strh.w	r8, [sp, #26]
 8011d1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d1e:	6803      	ldr	r3, [r0, #0]
 8011d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d22:	4798      	blx	r3
 8011d24:	b008      	add	sp, #32
 8011d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d2a:	bf00      	nop
 8011d2c:	08023e30 	.word	0x08023e30
 8011d30:	08023e44 	.word	0x08023e44

08011d34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d36:	4604      	mov	r4, r0
 8011d38:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011d3c:	3201      	adds	r2, #1
 8011d3e:	d112      	bne.n	8011d66 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011d40:	2500      	movs	r5, #0
 8011d42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011d46:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011d4a:	6803      	ldr	r3, [r0, #0]
 8011d4c:	9500      	str	r5, [sp, #0]
 8011d4e:	466d      	mov	r5, sp
 8011d50:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011d54:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011d58:	4629      	mov	r1, r5
 8011d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d5c:	4798      	blx	r3
 8011d5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011d62:	e884 0003 	stmia.w	r4, {r0, r1}
 8011d66:	4620      	mov	r0, r4
 8011d68:	b003      	add	sp, #12
 8011d6a:	bd30      	pop	{r4, r5, pc}

08011d6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011d6c:	b513      	push	{r0, r1, r4, lr}
 8011d6e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011d72:	4604      	mov	r4, r0
 8011d74:	3301      	adds	r3, #1
 8011d76:	d109      	bne.n	8011d8c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011d78:	4601      	mov	r1, r0
 8011d7a:	4668      	mov	r0, sp
 8011d7c:	f7ff fe18 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d80:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d84:	8423      	strh	r3, [r4, #32]
 8011d86:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d8a:	8463      	strh	r3, [r4, #34]	; 0x22
 8011d8c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011d90:	b002      	add	sp, #8
 8011d92:	bd10      	pop	{r4, pc}

08011d94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011d94:	b513      	push	{r0, r1, r4, lr}
 8011d96:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	d109      	bne.n	8011db4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011da0:	4601      	mov	r1, r0
 8011da2:	4668      	mov	r0, sp
 8011da4:	f7ff fe04 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011da8:	f8bd 3000 	ldrh.w	r3, [sp]
 8011dac:	8423      	strh	r3, [r4, #32]
 8011dae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011db2:	8463      	strh	r3, [r4, #34]	; 0x22
 8011db4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011db8:	b002      	add	sp, #8
 8011dba:	bd10      	pop	{r4, pc}

08011dbc <_ZN8touchgfx6ScreenC1Ev>:
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	4b17      	ldr	r3, [pc, #92]	; (8011e1c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	4a17      	ldr	r2, [pc, #92]	; (8011e20 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011dc4:	2101      	movs	r1, #1
 8011dc6:	f845 3b04 	str.w	r3, [r5], #4
 8011dca:	2300      	movs	r3, #0
 8011dcc:	6042      	str	r2, [r0, #4]
 8011dce:	4604      	mov	r4, r0
 8011dd0:	8103      	strh	r3, [r0, #8]
 8011dd2:	8143      	strh	r3, [r0, #10]
 8011dd4:	8183      	strh	r3, [r0, #12]
 8011dd6:	81c3      	strh	r3, [r0, #14]
 8011dd8:	8203      	strh	r3, [r0, #16]
 8011dda:	8243      	strh	r3, [r0, #18]
 8011ddc:	8283      	strh	r3, [r0, #20]
 8011dde:	82c3      	strh	r3, [r0, #22]
 8011de0:	6203      	str	r3, [r0, #32]
 8011de2:	8483      	strh	r3, [r0, #36]	; 0x24
 8011de4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011de6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8011dea:	6343      	str	r3, [r0, #52]	; 0x34
 8011dec:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011df0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011df4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011df8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011dfc:	4b09      	ldr	r3, [pc, #36]	; (8011e24 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011e06:	4a08      	ldr	r2, [pc, #32]	; (8011e28 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011e08:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011e0c:	4798      	blx	r3
 8011e0e:	6863      	ldr	r3, [r4, #4]
 8011e10:	4628      	mov	r0, r5
 8011e12:	4631      	mov	r1, r6
 8011e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e16:	4798      	blx	r3
 8011e18:	4620      	mov	r0, r4
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	08023e6c 	.word	0x08023e6c
 8011e20:	08023b00 	.word	0x08023b00
 8011e24:	2002490a 	.word	0x2002490a
 8011e28:	20024908 	.word	0x20024908

08011e2c <_ZN8touchgfx6Screen4drawEv>:
 8011e2c:	4b09      	ldr	r3, [pc, #36]	; (8011e54 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011e2e:	b507      	push	{r0, r1, r2, lr}
 8011e30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e34:	2100      	movs	r1, #0
 8011e36:	4b08      	ldr	r3, [pc, #32]	; (8011e58 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011e38:	9100      	str	r1, [sp, #0]
 8011e3a:	4669      	mov	r1, sp
 8011e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e40:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011e44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011e48:	6803      	ldr	r3, [r0, #0]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	4798      	blx	r3
 8011e4e:	b003      	add	sp, #12
 8011e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e54:	20024908 	.word	0x20024908
 8011e58:	2002490a 	.word	0x2002490a

08011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011e64:	b089      	sub	sp, #36	; 0x24
 8011e66:	4680      	mov	r8, r0
 8011e68:	460c      	mov	r4, r1
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	4615      	mov	r5, r2
 8011e6e:	dd0e      	ble.n	8011e8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e70:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	dd0a      	ble.n	8011e8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f7ff ff5b 	bl	8011d34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011e7e:	4621      	mov	r1, r4
 8011e80:	f7fe fc47 	bl	8010712 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011e84:	69eb      	ldr	r3, [r5, #28]
 8011e86:	b928      	cbnz	r0, 8011e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011e88:	461d      	mov	r5, r3
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1f4      	bne.n	8011e78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8011e8e:	b009      	add	sp, #36	; 0x24
 8011e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e94:	ae04      	add	r6, sp, #16
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	f000 80b5 	beq.w	8012006 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	a802      	add	r0, sp, #8
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	4798      	blx	r3
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7ff ff60 	bl	8011d6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011eac:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011eb0:	4407      	add	r7, r0
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	f7ff ff6e 	bl	8011d94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011eb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011ebc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011ec0:	b23f      	sxth	r7, r7
 8011ec2:	4418      	add	r0, r3
 8011ec4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011ec8:	4621      	mov	r1, r4
 8011eca:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011ece:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011ed8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011edc:	f7fb fa4e 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	f7ff ff27 	bl	8011d34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011ee6:	ab06      	add	r3, sp, #24
 8011ee8:	4602      	mov	r2, r0
 8011eea:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011eee:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fb fa41 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 8011efa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011efe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011f02:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011f06:	4299      	cmp	r1, r3
 8011f08:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011f0c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011f10:	d10b      	bne.n	8011f2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011f12:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011f16:	4552      	cmp	r2, sl
 8011f18:	d107      	bne.n	8011f2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011f1a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011f1e:	455a      	cmp	r2, fp
 8011f20:	d103      	bne.n	8011f2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011f22:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011f26:	454a      	cmp	r2, r9
 8011f28:	d06d      	beq.n	8012006 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011f2a:	f1bb 0f00 	cmp.w	fp, #0
 8011f2e:	dd65      	ble.n	8011ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011f30:	f1b9 0f00 	cmp.w	r9, #0
 8011f34:	dd62      	ble.n	8011ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011f36:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011f3a:	fa1f f08a 	uxth.w	r0, sl
 8011f3e:	4552      	cmp	r2, sl
 8011f40:	9000      	str	r0, [sp, #0]
 8011f42:	da12      	bge.n	8011f6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011f44:	9301      	str	r3, [sp, #4]
 8011f46:	9b00      	ldr	r3, [sp, #0]
 8011f48:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011f4c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011f50:	1a9a      	subs	r2, r3, r2
 8011f52:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011f56:	4631      	mov	r1, r6
 8011f58:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011f5c:	4640      	mov	r0, r8
 8011f5e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011f62:	69ea      	ldr	r2, [r5, #28]
 8011f64:	f7ff ff7a 	bl	8011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f68:	9b01      	ldr	r3, [sp, #4]
 8011f6a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011f6e:	b29f      	uxth	r7, r3
 8011f70:	429a      	cmp	r2, r3
 8011f72:	da0d      	bge.n	8011f90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011f74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011f78:	1aba      	subs	r2, r7, r2
 8011f7a:	f8ad a012 	strh.w	sl, [sp, #18]
 8011f7e:	4631      	mov	r1, r6
 8011f80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f84:	4640      	mov	r0, r8
 8011f86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011f8a:	69ea      	ldr	r2, [r5, #28]
 8011f8c:	f7ff ff66 	bl	8011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f90:	8822      	ldrh	r2, [r4, #0]
 8011f92:	445f      	add	r7, fp
 8011f94:	88a3      	ldrh	r3, [r4, #4]
 8011f96:	b2bf      	uxth	r7, r7
 8011f98:	4413      	add	r3, r2
 8011f9a:	b23a      	sxth	r2, r7
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	b219      	sxth	r1, r3
 8011fa0:	4291      	cmp	r1, r2
 8011fa2:	dd0d      	ble.n	8011fc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011fa4:	1bdb      	subs	r3, r3, r7
 8011fa6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011faa:	f8ad a012 	strh.w	sl, [sp, #18]
 8011fae:	4631      	mov	r1, r6
 8011fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011fba:	69ea      	ldr	r2, [r5, #28]
 8011fbc:	f7ff ff4e 	bl	8011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011fc0:	88e2      	ldrh	r2, [r4, #6]
 8011fc2:	8863      	ldrh	r3, [r4, #2]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	9a00      	ldr	r2, [sp, #0]
 8011fc8:	444a      	add	r2, r9
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	fa1f f982 	uxth.w	r9, r2
 8011fd0:	b219      	sxth	r1, r3
 8011fd2:	fa0f f289 	sxth.w	r2, r9
 8011fd6:	428a      	cmp	r2, r1
 8011fd8:	da15      	bge.n	8012006 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011fda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011fde:	eba3 0309 	sub.w	r3, r3, r9
 8011fe2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011fe6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011fea:	4631      	mov	r1, r6
 8011fec:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011ff0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011ff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011ff8:	69ea      	ldr	r2, [r5, #28]
 8011ffa:	e001      	b.n	8012000 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011ffc:	69ea      	ldr	r2, [r5, #28]
 8011ffe:	4621      	mov	r1, r4
 8012000:	4640      	mov	r0, r8
 8012002:	f7ff ff2b 	bl	8011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012006:	4628      	mov	r0, r5
 8012008:	f7ff fe94 	bl	8011d34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801200c:	6861      	ldr	r1, [r4, #4]
 801200e:	4602      	mov	r2, r0
 8012010:	4633      	mov	r3, r6
 8012012:	6820      	ldr	r0, [r4, #0]
 8012014:	c303      	stmia	r3!, {r0, r1}
 8012016:	4611      	mov	r1, r2
 8012018:	4630      	mov	r0, r6
 801201a:	f7fb f9af 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 801201e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012022:	2b00      	cmp	r3, #0
 8012024:	f77f af33 	ble.w	8011e8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012028:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801202c:	2b00      	cmp	r3, #0
 801202e:	f77f af2e 	ble.w	8011e8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012032:	4628      	mov	r0, r5
 8012034:	f7ff fe9a 	bl	8011d6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012038:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801203c:	1a18      	subs	r0, r3, r0
 801203e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012042:	4628      	mov	r0, r5
 8012044:	f7ff fea6 	bl	8011d94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012048:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801204c:	4631      	mov	r1, r6
 801204e:	1a18      	subs	r0, r3, r0
 8012050:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012054:	4628      	mov	r0, r5
 8012056:	682b      	ldr	r3, [r5, #0]
 8012058:	689b      	ldr	r3, [r3, #8]
 801205a:	4798      	blx	r3
 801205c:	e717      	b.n	8011e8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801205e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801205e:	b570      	push	{r4, r5, r6, lr}
 8012060:	1d06      	adds	r6, r0, #4
 8012062:	b086      	sub	sp, #24
 8012064:	460c      	mov	r4, r1
 8012066:	2300      	movs	r3, #0
 8012068:	4631      	mov	r1, r6
 801206a:	4605      	mov	r5, r0
 801206c:	a802      	add	r0, sp, #8
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	f7ff fc9e 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012074:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012078:	8822      	ldrh	r2, [r4, #0]
 801207a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801207e:	1ad2      	subs	r2, r2, r3
 8012080:	8863      	ldrh	r3, [r4, #2]
 8012082:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012086:	1a5b      	subs	r3, r3, r1
 8012088:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801208c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012090:	aa01      	add	r2, sp, #4
 8012092:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012096:	4630      	mov	r0, r6
 8012098:	f8ad 1016 	strh.w	r1, [sp, #22]
 801209c:	a904      	add	r1, sp, #16
 801209e:	f8ad 3012 	strh.w	r3, [sp, #18]
 80120a2:	f7fb fa43 	bl	800d52c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80120a6:	9a01      	ldr	r2, [sp, #4]
 80120a8:	b11a      	cbz	r2, 80120b2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f7ff fed5 	bl	8011e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80120b2:	b006      	add	sp, #24
 80120b4:	bd70      	pop	{r4, r5, r6, pc}

080120b6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80120b6:	4602      	mov	r2, r0
 80120b8:	b530      	push	{r4, r5, lr}
 80120ba:	4604      	mov	r4, r0
 80120bc:	b085      	sub	sp, #20
 80120be:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80120c2:	460d      	mov	r5, r1
 80120c4:	466b      	mov	r3, sp
 80120c6:	6851      	ldr	r1, [r2, #4]
 80120c8:	c303      	stmia	r3!, {r0, r1}
 80120ca:	4629      	mov	r1, r5
 80120cc:	4668      	mov	r0, sp
 80120ce:	f7fb f955 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 80120d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80120d6:	b12b      	cbz	r3, 80120e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80120d8:	4669      	mov	r1, sp
 80120da:	4620      	mov	r0, r4
 80120dc:	f7ff ffbf 	bl	801205e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80120e0:	b005      	add	sp, #20
 80120e2:	bd30      	pop	{r4, r5, pc}
 80120e4:	3404      	adds	r4, #4
 80120e6:	a802      	add	r0, sp, #8
 80120e8:	4621      	mov	r1, r4
 80120ea:	f7ff fc61 	bl	80119b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80120ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80120f2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80120f6:	4669      	mov	r1, sp
 80120f8:	4620      	mov	r0, r4
 80120fa:	1a9b      	subs	r3, r3, r2
 80120fc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012100:	f8ad 3000 	strh.w	r3, [sp]
 8012104:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012108:	1a9b      	subs	r3, r3, r2
 801210a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801210e:	f7fb f9d4 	bl	800d4ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8012112:	e7e5      	b.n	80120e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08012114 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8012114:	460b      	mov	r3, r1
 8012116:	680a      	ldr	r2, [r1, #0]
 8012118:	1d01      	adds	r1, r0, #4
 801211a:	6992      	ldr	r2, [r2, #24]
 801211c:	4618      	mov	r0, r3
 801211e:	4710      	bx	r2

08012120 <_ZN8touchgfx12TextProviderC1Ev>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	2500      	movs	r5, #0
 8012124:	2302      	movs	r3, #2
 8012126:	4604      	mov	r4, r0
 8012128:	220e      	movs	r2, #14
 801212a:	7403      	strb	r3, [r0, #16]
 801212c:	4629      	mov	r1, r5
 801212e:	6145      	str	r5, [r0, #20]
 8012130:	7605      	strb	r5, [r0, #24]
 8012132:	83c5      	strh	r5, [r0, #30]
 8012134:	8405      	strh	r5, [r0, #32]
 8012136:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012138:	8705      	strh	r5, [r0, #56]	; 0x38
 801213a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801213c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8012140:	e9c0 5500 	strd	r5, r5, [r0]
 8012144:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8012148:	304c      	adds	r0, #76	; 0x4c
 801214a:	f00d fa2b 	bl	801f5a4 <memset>
 801214e:	2301      	movs	r3, #1
 8012150:	4620      	mov	r0, r4
 8012152:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8012156:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801215a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801215e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8012162:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8012166:	f7f3 fb45 	bl	80057f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801216a:	4620      	mov	r0, r4
 801216c:	bd38      	pop	{r3, r4, r5, pc}

0801216e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801216e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012170:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012174:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8012176:	fab0 f080 	clz	r0, r0
 801217a:	0940      	lsrs	r0, r0, #5
 801217c:	4770      	bx	lr

0801217e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801217e:	b530      	push	{r4, r5, lr}
 8012180:	2500      	movs	r5, #0
 8012182:	2401      	movs	r4, #1
 8012184:	6843      	ldr	r3, [r0, #4]
 8012186:	b913      	cbnz	r3, 801218e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8012188:	6803      	ldr	r3, [r0, #0]
 801218a:	b313      	cbz	r3, 80121d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801218c:	6043      	str	r3, [r0, #4]
 801218e:	7e03      	ldrb	r3, [r0, #24]
 8012190:	b143      	cbz	r3, 80121a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8012192:	6943      	ldr	r3, [r0, #20]
 8012194:	b12b      	cbz	r3, 80121a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012196:	881a      	ldrh	r2, [r3, #0]
 8012198:	b11a      	cbz	r2, 80121a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801219a:	1c9a      	adds	r2, r3, #2
 801219c:	6142      	str	r2, [r0, #20]
 801219e:	8818      	ldrh	r0, [r3, #0]
 80121a0:	bd30      	pop	{r4, r5, pc}
 80121a2:	7605      	strb	r5, [r0, #24]
 80121a4:	6843      	ldr	r3, [r0, #4]
 80121a6:	8819      	ldrh	r1, [r3, #0]
 80121a8:	b199      	cbz	r1, 80121d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80121aa:	1c9a      	adds	r2, r3, #2
 80121ac:	2902      	cmp	r1, #2
 80121ae:	6042      	str	r2, [r0, #4]
 80121b0:	d1f5      	bne.n	801219e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80121b2:	7c03      	ldrb	r3, [r0, #16]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d8e5      	bhi.n	8012184 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	3302      	adds	r3, #2
 80121bc:	7402      	strb	r2, [r0, #16]
 80121be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80121c2:	6143      	str	r3, [r0, #20]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d0dd      	beq.n	8012184 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80121c8:	881b      	ldrh	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d0da      	beq.n	8012184 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80121ce:	7604      	strb	r4, [r0, #24]
 80121d0:	e7d8      	b.n	8012184 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80121d2:	2000      	movs	r0, #0
 80121d4:	e7e4      	b.n	80121a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80121d6:	6001      	str	r1, [r0, #0]
 80121d8:	2100      	movs	r1, #0
 80121da:	b430      	push	{r4, r5}
 80121dc:	6041      	str	r1, [r0, #4]
 80121de:	6815      	ldr	r5, [r2, #0]
 80121e0:	6085      	str	r5, [r0, #8]
 80121e2:	6852      	ldr	r2, [r2, #4]
 80121e4:	6443      	str	r3, [r0, #68]	; 0x44
 80121e6:	9b02      	ldr	r3, [sp, #8]
 80121e8:	60c2      	str	r2, [r0, #12]
 80121ea:	7401      	strb	r1, [r0, #16]
 80121ec:	6141      	str	r1, [r0, #20]
 80121ee:	7601      	strb	r1, [r0, #24]
 80121f0:	8701      	strh	r1, [r0, #56]	; 0x38
 80121f2:	8401      	strh	r1, [r0, #32]
 80121f4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80121f8:	6483      	str	r3, [r0, #72]	; 0x48
 80121fa:	bc30      	pop	{r4, r5}
 80121fc:	f7f3 bafa 	b.w	80057f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08012200 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8012200:	b408      	push	{r3}
 8012202:	b510      	push	{r4, lr}
 8012204:	b085      	sub	sp, #20
 8012206:	ac07      	add	r4, sp, #28
 8012208:	f854 3b04 	ldr.w	r3, [r4], #4
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	4613      	mov	r3, r2
 8012210:	4622      	mov	r2, r4
 8012212:	9403      	str	r4, [sp, #12]
 8012214:	f7ff ffdf 	bl	80121d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012218:	b005      	add	sp, #20
 801221a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801221e:	b001      	add	sp, #4
 8012220:	4770      	bx	lr

08012222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8012222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012224:	4605      	mov	r5, r0
 8012226:	4608      	mov	r0, r1
 8012228:	b1f1      	cbz	r1, 8012268 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801222a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801222e:	460b      	mov	r3, r1
 8012230:	f101 0708 	add.w	r7, r1, #8
 8012234:	4622      	mov	r2, r4
 8012236:	6818      	ldr	r0, [r3, #0]
 8012238:	3308      	adds	r3, #8
 801223a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801223e:	4626      	mov	r6, r4
 8012240:	42bb      	cmp	r3, r7
 8012242:	c603      	stmia	r6!, {r0, r1}
 8012244:	4634      	mov	r4, r6
 8012246:	d1f6      	bne.n	8012236 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	6030      	str	r0, [r6, #0]
 801224c:	4610      	mov	r0, r2
 801224e:	889b      	ldrh	r3, [r3, #4]
 8012250:	80b3      	strh	r3, [r6, #4]
 8012252:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8012256:	015b      	lsls	r3, r3, #5
 8012258:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801225c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8012260:	430b      	orrs	r3, r1
 8012262:	425b      	negs	r3, r3
 8012264:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8012268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801226a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801226a:	b538      	push	{r3, r4, r5, lr}
 801226c:	460c      	mov	r4, r1
 801226e:	6811      	ldr	r1, [r2, #0]
 8012270:	4610      	mov	r0, r2
 8012272:	68cd      	ldr	r5, [r1, #12]
 8012274:	4619      	mov	r1, r3
 8012276:	47a8      	blx	r5
 8012278:	2800      	cmp	r0, #0
 801227a:	bf08      	it	eq
 801227c:	4620      	moveq	r0, r4
 801227e:	bd38      	pop	{r3, r4, r5, pc}

08012280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012282:	4604      	mov	r4, r0
 8012284:	4615      	mov	r5, r2
 8012286:	4608      	mov	r0, r1
 8012288:	b93a      	cbnz	r2, 801229a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801228a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801228e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8012292:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8012296:	4628      	mov	r0, r5
 8012298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801229a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801229e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80122a2:	8893      	ldrh	r3, [r2, #4]
 80122a4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80122a8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80122ac:	79ee      	ldrb	r6, [r5, #7]
 80122ae:	4316      	orrs	r6, r2
 80122b0:	19da      	adds	r2, r3, r7
 80122b2:	b291      	uxth	r1, r2
 80122b4:	b2b7      	uxth	r7, r6
 80122b6:	291d      	cmp	r1, #29
 80122b8:	d87b      	bhi.n	80123b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80122ba:	2201      	movs	r2, #1
 80122bc:	10f6      	asrs	r6, r6, #3
 80122be:	408a      	lsls	r2, r1
 80122c0:	4974      	ldr	r1, [pc, #464]	; (8012494 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80122c2:	420a      	tst	r2, r1
 80122c4:	d12e      	bne.n	8012324 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80122c6:	f412 7f60 	tst.w	r2, #896	; 0x380
 80122ca:	d072      	beq.n	80123b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80122cc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80122d0:	462b      	mov	r3, r5
 80122d2:	f105 0e08 	add.w	lr, r5, #8
 80122d6:	4615      	mov	r5, r2
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	3308      	adds	r3, #8
 80122dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80122e0:	4694      	mov	ip, r2
 80122e2:	4573      	cmp	r3, lr
 80122e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80122e8:	4662      	mov	r2, ip
 80122ea:	d1f5      	bne.n	80122d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80122ec:	6818      	ldr	r0, [r3, #0]
 80122ee:	f8cc 0000 	str.w	r0, [ip]
 80122f2:	889b      	ldrh	r3, [r3, #4]
 80122f4:	f8ac 3004 	strh.w	r3, [ip, #4]
 80122f8:	b2b3      	uxth	r3, r6
 80122fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80122fe:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8012302:	1aca      	subs	r2, r1, r3
 8012304:	1bcf      	subs	r7, r1, r7
 8012306:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801230a:	b292      	uxth	r2, r2
 801230c:	1afb      	subs	r3, r7, r3
 801230e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8012312:	10d2      	asrs	r2, r2, #3
 8012314:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8012318:	4302      	orrs	r2, r0
 801231a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801231e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012322:	e7b8      	b.n	8012296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012324:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012326:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801232a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801232c:	f640 6333 	movw	r3, #3635	; 0xe33
 8012330:	4299      	cmp	r1, r3
 8012332:	d110      	bne.n	8012356 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8012334:	6803      	ldr	r3, [r0, #0]
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	4798      	blx	r3
 801233a:	7b41      	ldrb	r1, [r0, #13]
 801233c:	00cb      	lsls	r3, r1, #3
 801233e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012342:	7a03      	ldrb	r3, [r0, #8]
 8012344:	0648      	lsls	r0, r1, #25
 8012346:	ea43 0302 	orr.w	r3, r3, r2
 801234a:	bf44      	itt	mi
 801234c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012350:	b21b      	sxthmi	r3, r3
 8012352:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012356:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801235a:	462a      	mov	r2, r5
 801235c:	f105 0c08 	add.w	ip, r5, #8
 8012360:	443b      	add	r3, r7
 8012362:	4433      	add	r3, r6
 8012364:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8012368:	b29b      	uxth	r3, r3
 801236a:	4635      	mov	r5, r6
 801236c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012370:	6810      	ldr	r0, [r2, #0]
 8012372:	3208      	adds	r2, #8
 8012374:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012378:	4637      	mov	r7, r6
 801237a:	4562      	cmp	r2, ip
 801237c:	c703      	stmia	r7!, {r0, r1}
 801237e:	463e      	mov	r6, r7
 8012380:	d1f6      	bne.n	8012370 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8012382:	6810      	ldr	r0, [r2, #0]
 8012384:	6038      	str	r0, [r7, #0]
 8012386:	8892      	ldrh	r2, [r2, #4]
 8012388:	80ba      	strh	r2, [r7, #4]
 801238a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801238e:	10db      	asrs	r3, r3, #3
 8012390:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8012394:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801239c:	4313      	orrs	r3, r2
 801239e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80123a2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80123a6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80123aa:	1a9b      	subs	r3, r3, r2
 80123ac:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80123b0:	e771      	b.n	8012296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80123b2:	f023 0204 	bic.w	r2, r3, #4
 80123b6:	f640 611b 	movw	r1, #3611	; 0xe1b
 80123ba:	428a      	cmp	r2, r1
 80123bc:	d003      	beq.n	80123c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80123be:	f640 621d 	movw	r2, #3613	; 0xe1d
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d120      	bne.n	8012408 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80123c6:	3b01      	subs	r3, #1
 80123c8:	4602      	mov	r2, r0
 80123ca:	4629      	mov	r1, r5
 80123cc:	4620      	mov	r0, r4
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	f7ff ff4b 	bl	801226a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80123d4:	7b41      	ldrb	r1, [r0, #13]
 80123d6:	00cb      	lsls	r3, r1, #3
 80123d8:	0649      	lsls	r1, r1, #25
 80123da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80123de:	7a03      	ldrb	r3, [r0, #8]
 80123e0:	ea43 0302 	orr.w	r3, r3, r2
 80123e4:	bf44      	itt	mi
 80123e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80123ea:	b21b      	sxthmi	r3, r3
 80123ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80123f0:	7b6b      	ldrb	r3, [r5, #13]
 80123f2:	7aaa      	ldrb	r2, [r5, #10]
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123fa:	4313      	orrs	r3, r2
 80123fc:	115a      	asrs	r2, r3, #5
 80123fe:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8012402:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8012406:	e035      	b.n	8012474 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8012408:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801240c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8012410:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8012414:	7a2a      	ldrb	r2, [r5, #8]
 8012416:	ea42 0201 	orr.w	r2, r2, r1
 801241a:	f640 6109 	movw	r1, #3593	; 0xe09
 801241e:	bf1c      	itt	ne
 8012420:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8012424:	b212      	sxthne	r2, r2
 8012426:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801242a:	f023 0210 	bic.w	r2, r3, #16
 801242e:	428a      	cmp	r2, r1
 8012430:	d003      	beq.n	801243a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8012432:	f640 6213 	movw	r2, #3603	; 0xe13
 8012436:	4293      	cmp	r3, r2
 8012438:	d129      	bne.n	801248e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801243a:	7b6e      	ldrb	r6, [r5, #13]
 801243c:	4629      	mov	r1, r5
 801243e:	0076      	lsls	r6, r6, #1
 8012440:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012444:	7aae      	ldrb	r6, [r5, #10]
 8012446:	4316      	orrs	r6, r2
 8012448:	f640 6213 	movw	r2, #3603	; 0xe13
 801244c:	4293      	cmp	r3, r2
 801244e:	4602      	mov	r2, r0
 8012450:	4620      	mov	r0, r4
 8012452:	bf16      	itet	ne
 8012454:	f103 33ff 	addne.w	r3, r3, #4294967295
 8012458:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801245c:	b29b      	uxthne	r3, r3
 801245e:	f7ff ff04 	bl	801226a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8012462:	7b43      	ldrb	r3, [r0, #13]
 8012464:	7a82      	ldrb	r2, [r0, #10]
 8012466:	005b      	lsls	r3, r3, #1
 8012468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801246c:	4313      	orrs	r3, r2
 801246e:	1af6      	subs	r6, r6, r3
 8012470:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8012474:	7b69      	ldrb	r1, [r5, #13]
 8012476:	00cb      	lsls	r3, r1, #3
 8012478:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801247c:	7a2b      	ldrb	r3, [r5, #8]
 801247e:	4313      	orrs	r3, r2
 8012480:	064a      	lsls	r2, r1, #25
 8012482:	bf44      	itt	mi
 8012484:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012488:	b21b      	sxthmi	r3, r3
 801248a:	1bdb      	subs	r3, r3, r7
 801248c:	e747      	b.n	801231e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801248e:	2300      	movs	r3, #0
 8012490:	e7b7      	b.n	8012402 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8012492:	bf00      	nop
 8012494:	3fc00079 	.word	0x3fc00079

08012498 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8012498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801249c:	4604      	mov	r4, r0
 801249e:	b942      	cbnz	r2, 80124b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80124a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124a4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80124a8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80124ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80124b0:	e047      	b.n	8012542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80124b2:	7b51      	ldrb	r1, [r2, #13]
 80124b4:	8893      	ldrh	r3, [r2, #4]
 80124b6:	010d      	lsls	r5, r1, #4
 80124b8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80124bc:	79d5      	ldrb	r5, [r2, #7]
 80124be:	4305      	orrs	r5, r0
 80124c0:	2d04      	cmp	r5, #4
 80124c2:	bfcc      	ite	gt
 80124c4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80124c8:	f04f 0e01 	movle.w	lr, #1
 80124cc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80124d0:	f200 80ab 	bhi.w	801262a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80124d4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80124d8:	4283      	cmp	r3, r0
 80124da:	d216      	bcs.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80124dc:	f240 605b 	movw	r0, #1627	; 0x65b
 80124e0:	4283      	cmp	r3, r0
 80124e2:	d859      	bhi.n	8012598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80124e4:	f240 6057 	movw	r0, #1623	; 0x657
 80124e8:	4283      	cmp	r3, r0
 80124ea:	d20e      	bcs.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80124ec:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80124f0:	d24a      	bcs.n	8012588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80124f2:	f240 604e 	movw	r0, #1614	; 0x64e
 80124f6:	4283      	cmp	r3, r0
 80124f8:	d207      	bcs.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80124fa:	f240 601a 	movw	r0, #1562	; 0x61a
 80124fe:	4283      	cmp	r3, r0
 8012500:	d02a      	beq.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012502:	d821      	bhi.n	8012548 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8012504:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8012508:	d35b      	bcc.n	80125c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801250a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801250e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012512:	f040 80d0 	bne.w	80126b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8012516:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801251a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801251e:	f040 80ca 	bne.w	80126b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8012522:	00cb      	lsls	r3, r1, #3
 8012524:	0649      	lsls	r1, r1, #25
 8012526:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801252a:	7a13      	ldrb	r3, [r2, #8]
 801252c:	ea43 0300 	orr.w	r3, r3, r0
 8012530:	bf44      	itt	mi
 8012532:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012536:	b21b      	sxthmi	r3, r3
 8012538:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801253c:	1b5d      	subs	r5, r3, r5
 801253e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012542:	4610      	mov	r0, r2
 8012544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012548:	f240 604b 	movw	r0, #1611	; 0x64b
 801254c:	4283      	cmp	r3, r0
 801254e:	d338      	bcc.n	80125c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8012550:	f240 604c 	movw	r0, #1612	; 0x64c
 8012554:	4283      	cmp	r3, r0
 8012556:	d9d8      	bls.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012558:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801255c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8012560:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012564:	f040 80f3 	bne.w	801274e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8012568:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801256c:	f040 80ef 	bne.w	801274e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8012570:	00cb      	lsls	r3, r1, #3
 8012572:	064e      	lsls	r6, r1, #25
 8012574:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8012578:	7a13      	ldrb	r3, [r2, #8]
 801257a:	ea43 0300 	orr.w	r3, r3, r0
 801257e:	bf44      	itt	mi
 8012580:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012584:	b21b      	sxthmi	r3, r3
 8012586:	e7d9      	b.n	801253c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8012588:	f240 6054 	movw	r0, #1620	; 0x654
 801258c:	4283      	cmp	r3, r0
 801258e:	d8e3      	bhi.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012590:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8012594:	d9e0      	bls.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012596:	e7b8      	b.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012598:	f240 6074 	movw	r0, #1652	; 0x674
 801259c:	4283      	cmp	r3, r0
 801259e:	d0b4      	beq.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80125a0:	d82d      	bhi.n	80125fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80125a2:	f240 605e 	movw	r0, #1630	; 0x65e
 80125a6:	4283      	cmp	r3, r0
 80125a8:	d804      	bhi.n	80125b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80125aa:	f240 605d 	movw	r0, #1629	; 0x65d
 80125ae:	4283      	cmp	r3, r0
 80125b0:	d3d2      	bcc.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80125b2:	e7aa      	b.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80125b4:	f240 605f 	movw	r0, #1631	; 0x65f
 80125b8:	4283      	cmp	r3, r0
 80125ba:	d0cd      	beq.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80125bc:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80125c0:	d0a3      	beq.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80125c2:	00cb      	lsls	r3, r1, #3
 80125c4:	0649      	lsls	r1, r1, #25
 80125c6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80125ca:	7a13      	ldrb	r3, [r2, #8]
 80125cc:	ea43 0300 	orr.w	r3, r3, r0
 80125d0:	bf44      	itt	mi
 80125d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80125d6:	b21b      	sxthmi	r3, r3
 80125d8:	1b5d      	subs	r5, r3, r5
 80125da:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80125de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80125e2:	7b53      	ldrb	r3, [r2, #13]
 80125e4:	015b      	lsls	r3, r3, #5
 80125e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80125ea:	7993      	ldrb	r3, [r2, #6]
 80125ec:	430b      	orrs	r3, r1
 80125ee:	2105      	movs	r1, #5
 80125f0:	005b      	lsls	r3, r3, #1
 80125f2:	fb93 f3f1 	sdiv	r3, r3, r1
 80125f6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80125fa:	440b      	add	r3, r1
 80125fc:	e756      	b.n	80124ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80125fe:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8012602:	4283      	cmp	r3, r0
 8012604:	d809      	bhi.n	801261a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8012606:	f240 60df 	movw	r0, #1759	; 0x6df
 801260a:	4283      	cmp	r3, r0
 801260c:	f4bf af7d 	bcs.w	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012610:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8012614:	2b05      	cmp	r3, #5
 8012616:	d8d4      	bhi.n	80125c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8012618:	e777      	b.n	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801261a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801261e:	4283      	cmp	r3, r0
 8012620:	d09a      	beq.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012622:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8012626:	4283      	cmp	r3, r0
 8012628:	e7ca      	b.n	80125c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801262a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801262e:	d22b      	bcs.n	8012688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8012630:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8012634:	4283      	cmp	r3, r0
 8012636:	d28f      	bcs.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012638:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801263c:	4283      	cmp	r3, r0
 801263e:	d816      	bhi.n	801266e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8012640:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8012644:	4283      	cmp	r3, r0
 8012646:	f4bf af60 	bcs.w	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801264a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801264e:	4283      	cmp	r3, r0
 8012650:	d80a      	bhi.n	8012668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8012652:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8012656:	4283      	cmp	r3, r0
 8012658:	f4bf af57 	bcs.w	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801265c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8012660:	4283      	cmp	r3, r0
 8012662:	f43f af79 	beq.w	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012666:	e7ac      	b.n	80125c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8012668:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801266c:	e7f8      	b.n	8012660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801266e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8012672:	4283      	cmp	r3, r0
 8012674:	d802      	bhi.n	801267c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8012676:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801267a:	e798      	b.n	80125ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801267c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8012680:	4283      	cmp	r3, r0
 8012682:	f47f af42 	bne.w	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8012686:	e767      	b.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012688:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801268c:	4283      	cmp	r3, r0
 801268e:	f43f af63 	beq.w	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8012692:	d802      	bhi.n	801269a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8012694:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8012698:	e7f2      	b.n	8012680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801269a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801269e:	4283      	cmp	r3, r0
 80126a0:	d805      	bhi.n	80126ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80126a2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80126a6:	4283      	cmp	r3, r0
 80126a8:	f4ff af2f 	bcc.w	801250a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80126ac:	e754      	b.n	8012558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80126ae:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80126b2:	4283      	cmp	r3, r0
 80126b4:	e7af      	b.n	8012616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80126b6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80126ba:	4617      	mov	r7, r2
 80126bc:	f102 0808 	add.w	r8, r2, #8
 80126c0:	4666      	mov	r6, ip
 80126c2:	6838      	ldr	r0, [r7, #0]
 80126c4:	3708      	adds	r7, #8
 80126c6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80126ca:	46e6      	mov	lr, ip
 80126cc:	4547      	cmp	r7, r8
 80126ce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80126d2:	46f4      	mov	ip, lr
 80126d4:	d1f5      	bne.n	80126c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80126d6:	6838      	ldr	r0, [r7, #0]
 80126d8:	f8ce 0000 	str.w	r0, [lr]
 80126dc:	88b9      	ldrh	r1, [r7, #4]
 80126de:	f8ae 1004 	strh.w	r1, [lr, #4]
 80126e2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80126e6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80126ea:	d009      	beq.n	8012700 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80126ec:	7b51      	ldrb	r1, [r2, #13]
 80126ee:	7992      	ldrb	r2, [r2, #6]
 80126f0:	0149      	lsls	r1, r1, #5
 80126f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80126f6:	4311      	orrs	r1, r2
 80126f8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80126fc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8012700:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8012704:	b2ad      	uxth	r5, r5
 8012706:	d00d      	beq.n	8012724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8012708:	442b      	add	r3, r5
 801270a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801270e:	b29b      	uxth	r3, r3
 8012710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012714:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8012718:	10db      	asrs	r3, r3, #3
 801271a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801271e:	4313      	orrs	r3, r2
 8012720:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8012724:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012728:	00cb      	lsls	r3, r1, #3
 801272a:	064f      	lsls	r7, r1, #25
 801272c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012730:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8012734:	ea43 0302 	orr.w	r3, r3, r2
 8012738:	bf44      	itt	mi
 801273a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801273e:	b21b      	sxthmi	r3, r3
 8012740:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8012744:	1b5b      	subs	r3, r3, r5
 8012746:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801274a:	4632      	mov	r2, r6
 801274c:	e6f9      	b.n	8012542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801274e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8012752:	4617      	mov	r7, r2
 8012754:	f102 0908 	add.w	r9, r2, #8
 8012758:	4666      	mov	r6, ip
 801275a:	6838      	ldr	r0, [r7, #0]
 801275c:	3708      	adds	r7, #8
 801275e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8012762:	46e0      	mov	r8, ip
 8012764:	454f      	cmp	r7, r9
 8012766:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801276a:	46c4      	mov	ip, r8
 801276c:	d1f5      	bne.n	801275a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801276e:	6838      	ldr	r0, [r7, #0]
 8012770:	f8c8 0000 	str.w	r0, [r8]
 8012774:	88b9      	ldrh	r1, [r7, #4]
 8012776:	f8a8 1004 	strh.w	r1, [r8, #4]
 801277a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801277e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8012782:	d009      	beq.n	8012798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8012784:	7b51      	ldrb	r1, [r2, #13]
 8012786:	7992      	ldrb	r2, [r2, #6]
 8012788:	0149      	lsls	r1, r1, #5
 801278a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801278e:	4311      	orrs	r1, r2
 8012790:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8012794:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8012798:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801279c:	d00e      	beq.n	80127bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801279e:	eba3 030e 	sub.w	r3, r3, lr
 80127a2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80127ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80127b0:	10db      	asrs	r3, r3, #3
 80127b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80127b6:	4313      	orrs	r3, r2
 80127b8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80127bc:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80127c0:	00cb      	lsls	r3, r1, #3
 80127c2:	0648      	lsls	r0, r1, #25
 80127c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80127c8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80127cc:	ea43 0302 	orr.w	r3, r3, r2
 80127d0:	bf44      	itt	mi
 80127d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80127d6:	b21b      	sxthmi	r3, r3
 80127d8:	1b5d      	subs	r5, r3, r5
 80127da:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80127de:	e7b4      	b.n	801274a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080127e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80127e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e4:	461e      	mov	r6, r3
 80127e6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80127e8:	4604      	mov	r4, r0
 80127ea:	4617      	mov	r7, r2
 80127ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80127f0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80127f4:	f7f2 ffbc 	bl	8005770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80127f8:	4605      	mov	r5, r0
 80127fa:	b918      	cbnz	r0, 8012804 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80127fc:	6030      	str	r0, [r6, #0]
 80127fe:	4628      	mov	r0, r5
 8012800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	4601      	mov	r1, r0
 8012808:	4638      	mov	r0, r7
 801280a:	68db      	ldr	r3, [r3, #12]
 801280c:	4798      	blx	r3
 801280e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8012812:	4602      	mov	r2, r0
 8012814:	6030      	str	r0, [r6, #0]
 8012816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801281a:	d213      	bcs.n	8012844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801281c:	4643      	mov	r3, r8
 801281e:	4639      	mov	r1, r7
 8012820:	4620      	mov	r0, r4
 8012822:	f7ff fe39 	bl	8012498 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8012826:	6030      	str	r0, [r6, #0]
 8012828:	6833      	ldr	r3, [r6, #0]
 801282a:	b143      	cbz	r3, 801283e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801282c:	7b5a      	ldrb	r2, [r3, #13]
 801282e:	7a9b      	ldrb	r3, [r3, #10]
 8012830:	0052      	lsls	r2, r2, #1
 8012832:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8012836:	4313      	orrs	r3, r2
 8012838:	bf0c      	ite	eq
 801283a:	2301      	moveq	r3, #1
 801283c:	2300      	movne	r3, #0
 801283e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8012842:	e7dc      	b.n	80127fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8012844:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8012848:	b29b      	uxth	r3, r3
 801284a:	2b7f      	cmp	r3, #127	; 0x7f
 801284c:	d804      	bhi.n	8012858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801284e:	4639      	mov	r1, r7
 8012850:	4620      	mov	r0, r4
 8012852:	f7ff fd15 	bl	8012280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8012856:	e7e6      	b.n	8012826 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8012858:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801285c:	2b00      	cmp	r3, #0
 801285e:	d0e3      	beq.n	8012828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8012860:	f640 1302 	movw	r3, #2306	; 0x902
 8012864:	429d      	cmp	r5, r3
 8012866:	d1df      	bne.n	8012828 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8012868:	4601      	mov	r1, r0
 801286a:	4620      	mov	r0, r4
 801286c:	f7ff fcd9 	bl	8012222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012870:	e7d9      	b.n	8012826 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08012872 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012872:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012876:	461e      	mov	r6, r3
 8012878:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801287a:	4604      	mov	r4, r0
 801287c:	4617      	mov	r7, r2
 801287e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012882:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012886:	f7f2 ff73 	bl	8005770 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801288a:	4605      	mov	r5, r0
 801288c:	b918      	cbnz	r0, 8012896 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801288e:	6030      	str	r0, [r6, #0]
 8012890:	4628      	mov	r0, r5
 8012892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	4601      	mov	r1, r0
 801289a:	4638      	mov	r0, r7
 801289c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80128a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128a4:	47c8      	blx	r9
 80128a6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80128aa:	4602      	mov	r2, r0
 80128ac:	6030      	str	r0, [r6, #0]
 80128ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128b2:	d213      	bcs.n	80128dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80128b4:	4643      	mov	r3, r8
 80128b6:	4639      	mov	r1, r7
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7ff fded 	bl	8012498 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80128be:	6030      	str	r0, [r6, #0]
 80128c0:	6833      	ldr	r3, [r6, #0]
 80128c2:	b143      	cbz	r3, 80128d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80128c4:	7b5a      	ldrb	r2, [r3, #13]
 80128c6:	7a9b      	ldrb	r3, [r3, #10]
 80128c8:	0052      	lsls	r2, r2, #1
 80128ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80128ce:	4313      	orrs	r3, r2
 80128d0:	bf0c      	ite	eq
 80128d2:	2301      	moveq	r3, #1
 80128d4:	2300      	movne	r3, #0
 80128d6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80128da:	e7d9      	b.n	8012890 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80128dc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	2b7f      	cmp	r3, #127	; 0x7f
 80128e4:	d804      	bhi.n	80128f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80128e6:	4639      	mov	r1, r7
 80128e8:	4620      	mov	r0, r4
 80128ea:	f7ff fcc9 	bl	8012280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80128ee:	e7e6      	b.n	80128be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80128f0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d0e3      	beq.n	80128c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80128f8:	f640 1302 	movw	r3, #2306	; 0x902
 80128fc:	429d      	cmp	r5, r3
 80128fe:	d1df      	bne.n	80128c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8012900:	4601      	mov	r1, r0
 8012902:	4620      	mov	r0, r4
 8012904:	f7ff fc8d 	bl	8012222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012908:	e7d9      	b.n	80128be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801290a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801290a:	b510      	push	{r4, lr}
 801290c:	4604      	mov	r4, r0
 801290e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8012912:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012914:	b1e1      	cbz	r1, 8012950 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8012916:	2b0a      	cmp	r3, #10
 8012918:	d02d      	beq.n	8012976 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801291a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801291c:	3901      	subs	r1, #1
 801291e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8012922:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8012924:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8012928:	1c51      	adds	r1, r2, #1
 801292a:	b289      	uxth	r1, r1
 801292c:	2901      	cmp	r1, #1
 801292e:	bf8a      	itet	hi
 8012930:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012934:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8012936:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8012938:	1c5a      	adds	r2, r3, #1
 801293a:	8722      	strh	r2, [r4, #56]	; 0x38
 801293c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801293e:	4413      	add	r3, r2
 8012940:	b29b      	uxth	r3, r3
 8012942:	2b09      	cmp	r3, #9
 8012944:	bf88      	it	hi
 8012946:	3b0a      	subhi	r3, #10
 8012948:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801294c:	8458      	strh	r0, [r3, #34]	; 0x22
 801294e:	e7de      	b.n	801290e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8012950:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012952:	2b0a      	cmp	r3, #10
 8012954:	d00f      	beq.n	8012976 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8012956:	4620      	mov	r0, r4
 8012958:	f7ff fc11 	bl	801217e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801295c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801295e:	1c5a      	adds	r2, r3, #1
 8012960:	8722      	strh	r2, [r4, #56]	; 0x38
 8012962:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012964:	4413      	add	r3, r2
 8012966:	b29b      	uxth	r3, r3
 8012968:	2b09      	cmp	r3, #9
 801296a:	bf88      	it	hi
 801296c:	3b0a      	subhi	r3, #10
 801296e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012972:	8458      	strh	r0, [r3, #34]	; 0x22
 8012974:	e7ec      	b.n	8012950 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8012976:	bd10      	pop	{r4, pc}

08012978 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801297c:	4604      	mov	r4, r0
 801297e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8012982:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8012984:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8012986:	3a01      	subs	r2, #1
 8012988:	8702      	strh	r2, [r0, #56]	; 0x38
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	b292      	uxth	r2, r2
 801298e:	2a09      	cmp	r2, #9
 8012990:	bf8a      	itet	hi
 8012992:	3b09      	subhi	r3, #9
 8012994:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8012996:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8012998:	f7ff ffb7 	bl	801290a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801299c:	8c23      	ldrh	r3, [r4, #32]
 801299e:	2b01      	cmp	r3, #1
 80129a0:	bf9c      	itt	ls
 80129a2:	3301      	addls	r3, #1
 80129a4:	8423      	strhls	r3, [r4, #32]
 80129a6:	8be3      	ldrh	r3, [r4, #30]
 80129a8:	b90b      	cbnz	r3, 80129ae <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80129aa:	2302      	movs	r3, #2
 80129ac:	83e3      	strh	r3, [r4, #30]
 80129ae:	8be3      	ldrh	r3, [r4, #30]
 80129b0:	4628      	mov	r0, r5
 80129b2:	3b01      	subs	r3, #1
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	83e3      	strh	r3, [r4, #30]
 80129b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80129bc:	8365      	strh	r5, [r4, #26]
 80129be:	bd38      	pop	{r3, r4, r5, pc}

080129c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80129c0:	428a      	cmp	r2, r1
 80129c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80129c8:	d932      	bls.n	8012a30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80129ca:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80129cc:	1a54      	subs	r4, r2, r1
 80129ce:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80129d2:	19ee      	adds	r6, r5, r7
 80129d4:	fa1f fe84 	uxth.w	lr, r4
 80129d8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80129dc:	3e01      	subs	r6, #1
 80129de:	b2b4      	uxth	r4, r6
 80129e0:	eba4 090e 	sub.w	r9, r4, lr
 80129e4:	fa1f f989 	uxth.w	r9, r9
 80129e8:	2c09      	cmp	r4, #9
 80129ea:	4626      	mov	r6, r4
 80129ec:	bf88      	it	hi
 80129ee:	f1a4 060a 	subhi.w	r6, r4, #10
 80129f2:	f1bc 0f00 	cmp.w	ip, #0
 80129f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80129fa:	bf08      	it	eq
 80129fc:	f04f 0c02 	moveq.w	ip, #2
 8012a00:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8012a04:	b2a4      	uxth	r4, r4
 8012a06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a0a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8012a0e:	454c      	cmp	r4, r9
 8012a10:	fa1f fc8c 	uxth.w	ip, ip
 8012a14:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8012a18:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8012a1c:	d1e4      	bne.n	80129e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8012a1e:	eba5 050e 	sub.w	r5, r5, lr
 8012a22:	eb0e 0408 	add.w	r4, lr, r8
 8012a26:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8012a2a:	8705      	strh	r5, [r0, #56]	; 0x38
 8012a2c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8012a30:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8012a32:	250a      	movs	r5, #10
 8012a34:	1a64      	subs	r4, r4, r1
 8012a36:	4439      	add	r1, r7
 8012a38:	b289      	uxth	r1, r1
 8012a3a:	8704      	strh	r4, [r0, #56]	; 0x38
 8012a3c:	2909      	cmp	r1, #9
 8012a3e:	bf88      	it	hi
 8012a40:	390a      	subhi	r1, #10
 8012a42:	86c1      	strh	r1, [r0, #54]	; 0x36
 8012a44:	b18a      	cbz	r2, 8012a6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8012a46:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8012a48:	3a01      	subs	r2, #1
 8012a4a:	3101      	adds	r1, #1
 8012a4c:	b292      	uxth	r2, r2
 8012a4e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012a52:	8701      	strh	r1, [r0, #56]	; 0x38
 8012a54:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012a56:	b901      	cbnz	r1, 8012a5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8012a58:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012a5a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012a5c:	3901      	subs	r1, #1
 8012a5e:	b289      	uxth	r1, r1
 8012a60:	86c1      	strh	r1, [r0, #54]	; 0x36
 8012a62:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012a66:	844c      	strh	r4, [r1, #34]	; 0x22
 8012a68:	e7ec      	b.n	8012a44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8012a6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a6e:	f7ff bf4c 	b.w	801290a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08012a72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012a72:	b570      	push	{r4, r5, r6, lr}
 8012a74:	2500      	movs	r5, #0
 8012a76:	4295      	cmp	r5, r2
 8012a78:	d011      	beq.n	8012a9e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8012a7a:	8bc4      	ldrh	r4, [r0, #30]
 8012a7c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8012a80:	4414      	add	r4, r2
 8012a82:	3c01      	subs	r4, #1
 8012a84:	1b64      	subs	r4, r4, r5
 8012a86:	b2a4      	uxth	r4, r4
 8012a88:	2c01      	cmp	r4, #1
 8012a8a:	bf88      	it	hi
 8012a8c:	3c02      	subhi	r4, #2
 8012a8e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012a92:	8b64      	ldrh	r4, [r4, #26]
 8012a94:	42b4      	cmp	r4, r6
 8012a96:	d117      	bne.n	8012ac8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8012a98:	3501      	adds	r5, #1
 8012a9a:	b2ad      	uxth	r5, r5
 8012a9c:	e7eb      	b.n	8012a76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8012a9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012aa2:	2400      	movs	r4, #0
 8012aa4:	4413      	add	r3, r2
 8012aa6:	b2a2      	uxth	r2, r4
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	da0f      	bge.n	8012acc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8012aac:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8012aae:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8012ab2:	3401      	adds	r4, #1
 8012ab4:	4432      	add	r2, r6
 8012ab6:	b292      	uxth	r2, r2
 8012ab8:	2a09      	cmp	r2, #9
 8012aba:	bf88      	it	hi
 8012abc:	3a0a      	subhi	r2, #10
 8012abe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012ac2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8012ac4:	42aa      	cmp	r2, r5
 8012ac6:	d0ee      	beq.n	8012aa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8012ac8:	2000      	movs	r0, #0
 8012aca:	bd70      	pop	{r4, r5, r6, pc}
 8012acc:	2001      	movs	r0, #1
 8012ace:	e7fc      	b.n	8012aca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08012ad0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8012ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	4616      	mov	r6, r2
 8012ad8:	1c8c      	adds	r4, r1, #2
 8012ada:	8809      	ldrh	r1, [r1, #0]
 8012adc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8012ae0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8012ae4:	42b3      	cmp	r3, r6
 8012ae6:	d124      	bne.n	8012b32 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8012ae8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8012aec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012af0:	f001 070f 	and.w	r7, r1, #15
 8012af4:	4652      	mov	r2, sl
 8012af6:	f8cd 8000 	str.w	r8, [sp]
 8012afa:	464b      	mov	r3, r9
 8012afc:	4621      	mov	r1, r4
 8012afe:	4628      	mov	r0, r5
 8012b00:	f7ff ffb7 	bl	8012a72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012b04:	4683      	mov	fp, r0
 8012b06:	b168      	cbz	r0, 8012b24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8012b08:	eb0a 0109 	add.w	r1, sl, r9
 8012b0c:	463a      	mov	r2, r7
 8012b0e:	4628      	mov	r0, r5
 8012b10:	4441      	add	r1, r8
 8012b12:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012b16:	4649      	mov	r1, r9
 8012b18:	f7ff ff52 	bl	80129c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8012b1c:	4658      	mov	r0, fp
 8012b1e:	b003      	add	sp, #12
 8012b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	eb07 010a 	add.w	r1, r7, sl
 8012b28:	4449      	add	r1, r9
 8012b2a:	4441      	add	r1, r8
 8012b2c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012b30:	e7d2      	b.n	8012ad8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012b32:	f04f 0b00 	mov.w	fp, #0
 8012b36:	e7f1      	b.n	8012b1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012b38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012b38:	b570      	push	{r4, r5, r6, lr}
 8012b3a:	8810      	ldrh	r0, [r2, #0]
 8012b3c:	4298      	cmp	r0, r3
 8012b3e:	d817      	bhi.n	8012b70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012b40:	1e48      	subs	r0, r1, #1
 8012b42:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012b46:	4298      	cmp	r0, r3
 8012b48:	d312      	bcc.n	8012b70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012b4a:	2400      	movs	r4, #0
 8012b4c:	428c      	cmp	r4, r1
 8012b4e:	d20f      	bcs.n	8012b70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012b50:	1860      	adds	r0, r4, r1
 8012b52:	1040      	asrs	r0, r0, #1
 8012b54:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012b58:	0085      	lsls	r5, r0, #2
 8012b5a:	42b3      	cmp	r3, r6
 8012b5c:	d902      	bls.n	8012b64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8012b5e:	3001      	adds	r0, #1
 8012b60:	b284      	uxth	r4, r0
 8012b62:	e7f3      	b.n	8012b4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012b64:	d201      	bcs.n	8012b6a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012b66:	b281      	uxth	r1, r0
 8012b68:	e7f0      	b.n	8012b4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012b6a:	442a      	add	r2, r5
 8012b6c:	8850      	ldrh	r0, [r2, #2]
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	2000      	movs	r0, #0
 8012b72:	e7fc      	b.n	8012b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012b74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b78:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	260b      	movs	r6, #11
 8012b7e:	886f      	ldrh	r7, [r5, #2]
 8012b80:	087f      	lsrs	r7, r7, #1
 8012b82:	3e01      	subs	r6, #1
 8012b84:	d013      	beq.n	8012bae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8012b86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012b88:	462a      	mov	r2, r5
 8012b8a:	4639      	mov	r1, r7
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012b92:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8012b96:	4643      	mov	r3, r8
 8012b98:	f7ff ffce 	bl	8012b38 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012b9c:	b138      	cbz	r0, 8012bae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8012b9e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8012ba2:	4642      	mov	r2, r8
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f7ff ff93 	bl	8012ad0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d1e9      	bne.n	8012b82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8012bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012bb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012bb4:	b570      	push	{r4, r5, r6, lr}
 8012bb6:	694a      	ldr	r2, [r1, #20]
 8012bb8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012bba:	684b      	ldr	r3, [r1, #4]
 8012bbc:	1b54      	subs	r4, r2, r5
 8012bbe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012bc0:	f000 8106 	beq.w	8012dd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012bc4:	1b9b      	subs	r3, r3, r6
 8012bc6:	d003      	beq.n	8012bd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012bc8:	4363      	muls	r3, r4
 8012bca:	2210      	movs	r2, #16
 8012bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012bd0:	680c      	ldr	r4, [r1, #0]
 8012bd2:	698a      	ldr	r2, [r1, #24]
 8012bd4:	1b65      	subs	r5, r4, r5
 8012bd6:	f000 80fd 	beq.w	8012dd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012bda:	1b92      	subs	r2, r2, r6
 8012bdc:	d003      	beq.n	8012be6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012bde:	436a      	muls	r2, r5
 8012be0:	2410      	movs	r4, #16
 8012be2:	fb92 f2f4 	sdiv	r2, r2, r4
 8012be6:	1a9b      	subs	r3, r3, r2
 8012be8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012e10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012bf0:	460a      	mov	r2, r1
 8012bf2:	ee07 3a90 	vmov	s15, r3
 8012bf6:	f100 040c 	add.w	r4, r0, #12
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c00:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012c04:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8012c08:	eeb1 6a43 	vneg.f32	s12, s6
 8012c0c:	edd2 7a02 	vldr	s15, [r2, #8]
 8012c10:	3214      	adds	r2, #20
 8012c12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012c16:	ece3 6a01 	vstmia	r3!, {s13}
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012c20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c24:	edc3 7a02 	vstr	s15, [r3, #8]
 8012c28:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012c2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c30:	edc3 7a05 	vstr	s15, [r3, #20]
 8012c34:	d1ea      	bne.n	8012c0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8012c36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012c38:	698b      	ldr	r3, [r1, #24]
 8012c3a:	edd0 4a02 	vldr	s9, [r0, #8]
 8012c3e:	1a9b      	subs	r3, r3, r2
 8012c40:	edd0 3a00 	vldr	s7, [r0]
 8012c44:	edd0 6a01 	vldr	s13, [r0, #4]
 8012c48:	ee07 3a90 	vmov	s15, r3
 8012c4c:	684b      	ldr	r3, [r1, #4]
 8012c4e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012c52:	ed90 5a05 	vldr	s10, [r0, #20]
 8012c56:	1a9b      	subs	r3, r3, r2
 8012c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c5c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8012c60:	ed90 2a03 	vldr	s4, [r0, #12]
 8012c64:	ee07 3a10 	vmov	s14, r3
 8012c68:	edd0 5a04 	vldr	s11, [r0, #16]
 8012c6c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012c70:	ed90 1a07 	vldr	s2, [r0, #28]
 8012c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c78:	edd0 2a06 	vldr	s5, [r0, #24]
 8012c7c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012c80:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012c84:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012c88:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012c8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012c90:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012c94:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012c98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012c9a:	694a      	ldr	r2, [r1, #20]
 8012c9c:	1b13      	subs	r3, r2, r4
 8012c9e:	ee07 3a10 	vmov	s14, r3
 8012ca2:	680b      	ldr	r3, [r1, #0]
 8012ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ca8:	1b1b      	subs	r3, r3, r4
 8012caa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012cae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8012cb2:	ee07 3a10 	vmov	s14, r3
 8012cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012cba:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012cbe:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012cc2:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012cc6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012cca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012ccc:	698b      	ldr	r3, [r1, #24]
 8012cce:	1a9b      	subs	r3, r3, r2
 8012cd0:	ee06 3a90 	vmov	s13, r3
 8012cd4:	684b      	ldr	r3, [r1, #4]
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012cdc:	ee07 3a10 	vmov	s14, r3
 8012ce0:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ce8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012cec:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012cf0:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012cf4:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012cf8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012cfc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012cfe:	694a      	ldr	r2, [r1, #20]
 8012d00:	1b13      	subs	r3, r2, r4
 8012d02:	ee07 3a10 	vmov	s14, r3
 8012d06:	680b      	ldr	r3, [r1, #0]
 8012d08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d0c:	1b1b      	subs	r3, r3, r4
 8012d0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012d12:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012d16:	ee07 3a10 	vmov	s14, r3
 8012d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d1e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012d22:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012d26:	edd0 5a08 	vldr	s11, [r0, #32]
 8012d2a:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012d2e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012d32:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012d36:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8012d3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012d3c:	698b      	ldr	r3, [r1, #24]
 8012d3e:	1a9b      	subs	r3, r3, r2
 8012d40:	ee07 3a10 	vmov	s14, r3
 8012d44:	684b      	ldr	r3, [r1, #4]
 8012d46:	1a9b      	subs	r3, r3, r2
 8012d48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d4c:	ee01 3a90 	vmov	s3, r3
 8012d50:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012d54:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012d58:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8012d5c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8012d60:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012d64:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012d68:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012d6c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012d6e:	694a      	ldr	r2, [r1, #20]
 8012d70:	1b13      	subs	r3, r2, r4
 8012d72:	ee03 3a10 	vmov	s6, r3
 8012d76:	680b      	ldr	r3, [r1, #0]
 8012d78:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012d7c:	1b1b      	subs	r3, r3, r4
 8012d7e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012d82:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012d86:	ee03 3a10 	vmov	s6, r3
 8012d8a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012d8e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8012d92:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012d96:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012d9a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8012d9e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8012da2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012da6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dae:	dd13      	ble.n	8012dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8012db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012db4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012db8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012dba:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc6:	dd15      	ble.n	8012df4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012dcc:	6403      	str	r3, [r0, #64]	; 0x40
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	4623      	mov	r3, r4
 8012dd2:	e6fd      	b.n	8012bd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012dd4:	462a      	mov	r2, r5
 8012dd6:	e706      	b.n	8012be6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012dd8:	d502      	bpl.n	8012de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012dda:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012dde:	e7e9      	b.n	8012db4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012de0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012de4:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012de8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df0:	dade      	bge.n	8012db0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012df2:	e7f2      	b.n	8012dda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012df4:	d502      	bpl.n	8012dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012df6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012dfa:	e7e7      	b.n	8012dcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012dfc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012e00:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012e04:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8012e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0c:	dadc      	bge.n	8012dc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012e0e:	e7f2      	b.n	8012df6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012e10:	3d800000 	.word	0x3d800000

08012e14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e18:	2714      	movs	r7, #20
 8012e1a:	435f      	muls	r7, r3
 8012e1c:	eb02 0c07 	add.w	ip, r2, r7
 8012e20:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8012e24:	f115 0e0f 	adds.w	lr, r5, #15
 8012e28:	f100 80a2 	bmi.w	8012f70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012e2c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8012e30:	9c08      	ldr	r4, [sp, #32]
 8012e32:	2614      	movs	r6, #20
 8012e34:	f8c0 e014 	str.w	lr, [r0, #20]
 8012e38:	4366      	muls	r6, r4
 8012e3a:	eb02 0806 	add.w	r8, r2, r6
 8012e3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012e42:	f115 040f 	adds.w	r4, r5, #15
 8012e46:	f100 809f 	bmi.w	8012f88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8012e4a:	1124      	asrs	r4, r4, #4
 8012e4c:	eba4 040e 	sub.w	r4, r4, lr
 8012e50:	6184      	str	r4, [r0, #24]
 8012e52:	2c00      	cmp	r4, #0
 8012e54:	f000 808a 	beq.w	8012f6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8012e58:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8012e5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012e60:	5995      	ldr	r5, [r2, r6]
 8012e62:	eba4 0809 	sub.w	r8, r4, r9
 8012e66:	59d4      	ldr	r4, [r2, r7]
 8012e68:	eba5 0a04 	sub.w	sl, r5, r4
 8012e6c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8012e70:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8012e74:	fb0e fe05 	mul.w	lr, lr, r5
 8012e78:	fb0a ee19 	mls	lr, sl, r9, lr
 8012e7c:	fb08 e404 	mla	r4, r8, r4, lr
 8012e80:	3c01      	subs	r4, #1
 8012e82:	19a4      	adds	r4, r4, r6
 8012e84:	f100 808c 	bmi.w	8012fa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8012e88:	fb94 fef6 	sdiv	lr, r4, r6
 8012e8c:	fb06 441e 	mls	r4, r6, lr, r4
 8012e90:	f8c0 e000 	str.w	lr, [r0]
 8012e94:	6104      	str	r4, [r0, #16]
 8012e96:	2d00      	cmp	r5, #0
 8012e98:	f2c0 8095 	blt.w	8012fc6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8012e9c:	fb95 f4f6 	sdiv	r4, r5, r6
 8012ea0:	fb06 5514 	mls	r5, r6, r4, r5
 8012ea4:	6044      	str	r4, [r0, #4]
 8012ea6:	6085      	str	r5, [r0, #8]
 8012ea8:	60c6      	str	r6, [r0, #12]
 8012eaa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012eae:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8012eb2:	6945      	ldr	r5, [r0, #20]
 8012eb4:	59d2      	ldr	r2, [r2, r7]
 8012eb6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8012eba:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8012fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8012ebe:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012ec2:	ee07 4a10 	vmov	s14, r4
 8012ec6:	6804      	ldr	r4, [r0, #0]
 8012ec8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8012ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ed0:	ee07 2a90 	vmov	s15, r2
 8012ed4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012edc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ee0:	edd3 6a00 	vldr	s13, [r3]
 8012ee4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ee8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8012eec:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012ef0:	edc0 6a07 	vstr	s13, [r0, #28]
 8012ef4:	edd0 6a01 	vldr	s13, [r0, #4]
 8012ef8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8012efc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012f00:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012f04:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012f08:	ed80 6a08 	vstr	s12, [r0, #32]
 8012f0c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8012f0e:	6242      	str	r2, [r0, #36]	; 0x24
 8012f10:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8012f14:	ed93 6a03 	vldr	s12, [r3, #12]
 8012f18:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012f1c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012f20:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012f24:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8012f28:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012f2c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8012f30:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012f34:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8012f38:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012f3a:	6302      	str	r2, [r0, #48]	; 0x30
 8012f3c:	ed93 6a06 	vldr	s12, [r3, #24]
 8012f40:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8012f44:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012f48:	eeb0 7a46 	vmov.f32	s14, s12
 8012f4c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8012f50:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012f54:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012f58:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8012f5c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8012f60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012f64:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8012f68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8012f6a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f70:	2410      	movs	r4, #16
 8012f72:	f1c5 0501 	rsb	r5, r5, #1
 8012f76:	fb9e fef4 	sdiv	lr, lr, r4
 8012f7a:	f015 050f 	ands.w	r5, r5, #15
 8012f7e:	bf18      	it	ne
 8012f80:	2501      	movne	r5, #1
 8012f82:	ebae 0e05 	sub.w	lr, lr, r5
 8012f86:	e753      	b.n	8012e30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8012f88:	f04f 0910 	mov.w	r9, #16
 8012f8c:	f1c5 0501 	rsb	r5, r5, #1
 8012f90:	fb94 f4f9 	sdiv	r4, r4, r9
 8012f94:	f015 050f 	ands.w	r5, r5, #15
 8012f98:	bf18      	it	ne
 8012f9a:	2501      	movne	r5, #1
 8012f9c:	1b64      	subs	r4, r4, r5
 8012f9e:	e755      	b.n	8012e4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8012fa0:	4264      	negs	r4, r4
 8012fa2:	fb94 fef6 	sdiv	lr, r4, r6
 8012fa6:	f1ce 0800 	rsb	r8, lr, #0
 8012faa:	fb06 441e 	mls	r4, r6, lr, r4
 8012fae:	f8c0 8000 	str.w	r8, [r0]
 8012fb2:	6104      	str	r4, [r0, #16]
 8012fb4:	2c00      	cmp	r4, #0
 8012fb6:	f43f af6e 	beq.w	8012e96 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8012fba:	ea6f 0e0e 	mvn.w	lr, lr
 8012fbe:	1b34      	subs	r4, r6, r4
 8012fc0:	f8c0 e000 	str.w	lr, [r0]
 8012fc4:	e766      	b.n	8012e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8012fc6:	426d      	negs	r5, r5
 8012fc8:	fb95 f4f6 	sdiv	r4, r5, r6
 8012fcc:	f1c4 0e00 	rsb	lr, r4, #0
 8012fd0:	fb06 5514 	mls	r5, r6, r4, r5
 8012fd4:	f8c0 e004 	str.w	lr, [r0, #4]
 8012fd8:	6085      	str	r5, [r0, #8]
 8012fda:	2d00      	cmp	r5, #0
 8012fdc:	f43f af64 	beq.w	8012ea8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8012fe0:	43e4      	mvns	r4, r4
 8012fe2:	1b75      	subs	r5, r6, r5
 8012fe4:	6044      	str	r4, [r0, #4]
 8012fe6:	e75e      	b.n	8012ea6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8012fe8:	3d800000 	.word	0x3d800000

08012fec <_ZN8touchgfx7Unicode6strlenEPKt>:
 8012fec:	4602      	mov	r2, r0
 8012fee:	b148      	cbz	r0, 8013004 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	b298      	uxth	r0, r3
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8012ffa:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8012ffe:	2900      	cmp	r1, #0
 8013000:	d1f7      	bne.n	8012ff2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8013002:	4770      	bx	lr
 8013004:	4770      	bx	lr

08013006 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8013006:	b530      	push	{r4, r5, lr}
 8013008:	4604      	mov	r4, r0
 801300a:	b159      	cbz	r1, 8013024 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801300c:	b148      	cbz	r0, 8013022 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801300e:	2300      	movs	r3, #0
 8013010:	b298      	uxth	r0, r3
 8013012:	4282      	cmp	r2, r0
 8013014:	d905      	bls.n	8013022 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8013016:	5ccd      	ldrb	r5, [r1, r3]
 8013018:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801301c:	3301      	adds	r3, #1
 801301e:	2d00      	cmp	r5, #0
 8013020:	d1f6      	bne.n	8013010 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8013022:	bd30      	pop	{r4, r5, pc}
 8013024:	4608      	mov	r0, r1
 8013026:	e7fc      	b.n	8013022 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08013028 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8013028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302a:	468c      	mov	ip, r1
 801302c:	b08b      	sub	sp, #44	; 0x2c
 801302e:	2100      	movs	r1, #0
 8013030:	ae01      	add	r6, sp, #4
 8013032:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013036:	211f      	movs	r1, #31
 8013038:	fbb0 f7f3 	udiv	r7, r0, r3
 801303c:	fb03 0517 	mls	r5, r3, r7, r0
 8013040:	4638      	mov	r0, r7
 8013042:	b2ec      	uxtb	r4, r5
 8013044:	2d09      	cmp	r5, #9
 8013046:	bfd4      	ite	le
 8013048:	3430      	addle	r4, #48	; 0x30
 801304a:	3457      	addgt	r4, #87	; 0x57
 801304c:	b2e4      	uxtb	r4, r4
 801304e:	558c      	strb	r4, [r1, r6]
 8013050:	1e4c      	subs	r4, r1, #1
 8013052:	b92f      	cbnz	r7, 8013060 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8013054:	4431      	add	r1, r6
 8013056:	4660      	mov	r0, ip
 8013058:	f7ff ffd5 	bl	8013006 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801305c:	b00b      	add	sp, #44	; 0x2c
 801305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013060:	4621      	mov	r1, r4
 8013062:	e7e9      	b.n	8013038 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08013064 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8013064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013066:	4607      	mov	r7, r0
 8013068:	b08b      	sub	sp, #44	; 0x2c
 801306a:	4608      	mov	r0, r1
 801306c:	b341      	cbz	r1, 80130c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801306e:	1e99      	subs	r1, r3, #2
 8013070:	2922      	cmp	r1, #34	; 0x22
 8013072:	d825      	bhi.n	80130c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8013074:	2100      	movs	r1, #0
 8013076:	463c      	mov	r4, r7
 8013078:	261f      	movs	r6, #31
 801307a:	f10d 0c04 	add.w	ip, sp, #4
 801307e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013082:	1e71      	subs	r1, r6, #1
 8013084:	fb94 fef3 	sdiv	lr, r4, r3
 8013088:	fb03 441e 	mls	r4, r3, lr, r4
 801308c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8013090:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8013094:	b2ec      	uxtb	r4, r5
 8013096:	2d09      	cmp	r5, #9
 8013098:	bfd4      	ite	le
 801309a:	3430      	addle	r4, #48	; 0x30
 801309c:	3457      	addgt	r4, #87	; 0x57
 801309e:	b2e4      	uxtb	r4, r4
 80130a0:	f80c 4006 	strb.w	r4, [ip, r6]
 80130a4:	4674      	mov	r4, lr
 80130a6:	b96c      	cbnz	r4, 80130c4 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80130a8:	2f00      	cmp	r7, #0
 80130aa:	da05      	bge.n	80130b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80130ac:	ab0a      	add	r3, sp, #40	; 0x28
 80130ae:	4419      	add	r1, r3
 80130b0:	232d      	movs	r3, #45	; 0x2d
 80130b2:	f801 3c24 	strb.w	r3, [r1, #-36]
 80130b6:	1eb1      	subs	r1, r6, #2
 80130b8:	3101      	adds	r1, #1
 80130ba:	4461      	add	r1, ip
 80130bc:	f7ff ffa3 	bl	8013006 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80130c0:	b00b      	add	sp, #44	; 0x2c
 80130c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130c4:	460e      	mov	r6, r1
 80130c6:	e7dc      	b.n	8013082 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080130c8 <_ZN8touchgfx7Unicode4atoiEPKt>:
 80130c8:	b510      	push	{r4, lr}
 80130ca:	b158      	cbz	r0, 80130e4 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80130cc:	1e82      	subs	r2, r0, #2
 80130ce:	210a      	movs	r1, #10
 80130d0:	2000      	movs	r0, #0
 80130d2:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80130d6:	3b30      	subs	r3, #48	; 0x30
 80130d8:	b29c      	uxth	r4, r3
 80130da:	2c09      	cmp	r4, #9
 80130dc:	d802      	bhi.n	80130e4 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80130de:	fb01 3000 	mla	r0, r1, r0, r3
 80130e2:	e7f6      	b.n	80130d2 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 80130e4:	bd10      	pop	{r4, pc}

080130e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80130e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ea:	b085      	sub	sp, #20
 80130ec:	4691      	mov	r9, r2
 80130ee:	6802      	ldr	r2, [r0, #0]
 80130f0:	4688      	mov	r8, r1
 80130f2:	461c      	mov	r4, r3
 80130f4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80130f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80130fc:	4683      	mov	fp, r0
 80130fe:	4610      	mov	r0, r2
 8013100:	9103      	str	r1, [sp, #12]
 8013102:	9302      	str	r3, [sp, #8]
 8013104:	9201      	str	r2, [sp, #4]
 8013106:	f7ff ff71 	bl	8012fec <_ZN8touchgfx7Unicode6strlenEPKt>
 801310a:	f1b8 0f00 	cmp.w	r8, #0
 801310e:	bf0c      	ite	eq
 8013110:	4684      	moveq	ip, r0
 8013112:	f100 0c01 	addne.w	ip, r0, #1
 8013116:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801311a:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801311e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013120:	fa1f fc8c 	uxth.w	ip, ip
 8013124:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013126:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801312a:	9903      	ldr	r1, [sp, #12]
 801312c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013130:	d041      	beq.n	80131b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8013132:	d834      	bhi.n	801319e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8013134:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8013138:	d059      	beq.n	80131ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801313a:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801313e:	d03a      	beq.n	80131b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8013140:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8013144:	d034      	beq.n	80131b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8013146:	2400      	movs	r4, #0
 8013148:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801314c:	3a01      	subs	r2, #1
 801314e:	b169      	cbz	r1, 801316c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013150:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013152:	458c      	cmp	ip, r1
 8013154:	da09      	bge.n	801316a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8013156:	eba1 010c 	sub.w	r1, r1, ip
 801315a:	b289      	uxth	r1, r1
 801315c:	b933      	cbnz	r3, 801316c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801315e:	2e00      	cmp	r6, #0
 8013160:	d051      	beq.n	8013206 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8013162:	2800      	cmp	r0, #0
 8013164:	d04f      	beq.n	8013206 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8013166:	440c      	add	r4, r1
 8013168:	b2a4      	uxth	r4, r4
 801316a:	2100      	movs	r1, #0
 801316c:	682b      	ldr	r3, [r5, #0]
 801316e:	4293      	cmp	r3, r2
 8013170:	da07      	bge.n	8013182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8013172:	f1b8 0f00 	cmp.w	r8, #0
 8013176:	d004      	beq.n	8013182 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8013178:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	3301      	adds	r3, #1
 8013180:	602b      	str	r3, [r5, #0]
 8013182:	2730      	movs	r7, #48	; 0x30
 8013184:	2c00      	cmp	r4, #0
 8013186:	d04e      	beq.n	8013226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8013188:	682e      	ldr	r6, [r5, #0]
 801318a:	3c01      	subs	r4, #1
 801318c:	42b2      	cmp	r2, r6
 801318e:	b2a4      	uxth	r4, r4
 8013190:	dd49      	ble.n	8013226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8013192:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8013196:	682b      	ldr	r3, [r5, #0]
 8013198:	3301      	adds	r3, #1
 801319a:	602b      	str	r3, [r5, #0]
 801319c:	e7f2      	b.n	8013184 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801319e:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80131a2:	d01d      	beq.n	80131e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80131a4:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80131a8:	d002      	beq.n	80131b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80131aa:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80131ae:	e7c9      	b.n	8013144 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80131b0:	4684      	mov	ip, r0
 80131b2:	f04f 0800 	mov.w	r8, #0
 80131b6:	2c00      	cmp	r4, #0
 80131b8:	d0c6      	beq.n	8013148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80131ba:	b947      	cbnz	r7, 80131ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80131bc:	2801      	cmp	r0, #1
 80131be:	d106      	bne.n	80131ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80131c0:	8814      	ldrh	r4, [r2, #0]
 80131c2:	2c30      	cmp	r4, #48	; 0x30
 80131c4:	bf02      	ittt	eq
 80131c6:	3202      	addeq	r2, #2
 80131c8:	4638      	moveq	r0, r7
 80131ca:	f8cb 2000 	streq.w	r2, [fp]
 80131ce:	45bc      	cmp	ip, r7
 80131d0:	da14      	bge.n	80131fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80131d2:	b2bf      	uxth	r7, r7
 80131d4:	eba7 040c 	sub.w	r4, r7, ip
 80131d8:	46bc      	mov	ip, r7
 80131da:	b2a4      	uxth	r4, r4
 80131dc:	2600      	movs	r6, #0
 80131de:	e7b3      	b.n	8013148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80131e0:	4684      	mov	ip, r0
 80131e2:	b16c      	cbz	r4, 8013200 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80131e4:	42b8      	cmp	r0, r7
 80131e6:	dd00      	ble.n	80131ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80131e8:	b2b8      	uxth	r0, r7
 80131ea:	2400      	movs	r4, #0
 80131ec:	e003      	b.n	80131f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80131ee:	f04f 0c01 	mov.w	ip, #1
 80131f2:	2400      	movs	r4, #0
 80131f4:	4660      	mov	r0, ip
 80131f6:	4626      	mov	r6, r4
 80131f8:	46a0      	mov	r8, r4
 80131fa:	e7a5      	b.n	8013148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80131fc:	2400      	movs	r4, #0
 80131fe:	e7ed      	b.n	80131dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8013200:	4626      	mov	r6, r4
 8013202:	46a0      	mov	r8, r4
 8013204:	e7a0      	b.n	8013148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8013206:	2900      	cmp	r1, #0
 8013208:	d0b0      	beq.n	801316c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801320a:	2720      	movs	r7, #32
 801320c:	682e      	ldr	r6, [r5, #0]
 801320e:	2900      	cmp	r1, #0
 8013210:	d0ac      	beq.n	801316c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8013212:	3901      	subs	r1, #1
 8013214:	4296      	cmp	r6, r2
 8013216:	b289      	uxth	r1, r1
 8013218:	daa7      	bge.n	801316a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801321a:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801321e:	682b      	ldr	r3, [r5, #0]
 8013220:	3301      	adds	r3, #1
 8013222:	602b      	str	r3, [r5, #0]
 8013224:	e7f2      	b.n	801320c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8013226:	b188      	cbz	r0, 801324c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8013228:	682b      	ldr	r3, [r5, #0]
 801322a:	3801      	subs	r0, #1
 801322c:	429a      	cmp	r2, r3
 801322e:	b280      	uxth	r0, r0
 8013230:	dd0c      	ble.n	801324c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8013232:	f8db 3000 	ldr.w	r3, [fp]
 8013236:	1c9c      	adds	r4, r3, #2
 8013238:	f8cb 4000 	str.w	r4, [fp]
 801323c:	881c      	ldrh	r4, [r3, #0]
 801323e:	682b      	ldr	r3, [r5, #0]
 8013240:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8013244:	682b      	ldr	r3, [r5, #0]
 8013246:	3301      	adds	r3, #1
 8013248:	602b      	str	r3, [r5, #0]
 801324a:	e7ec      	b.n	8013226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801324c:	2620      	movs	r6, #32
 801324e:	b151      	cbz	r1, 8013266 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8013250:	6828      	ldr	r0, [r5, #0]
 8013252:	3901      	subs	r1, #1
 8013254:	4282      	cmp	r2, r0
 8013256:	b289      	uxth	r1, r1
 8013258:	dd05      	ble.n	8013266 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801325a:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801325e:	682b      	ldr	r3, [r5, #0]
 8013260:	3301      	adds	r3, #1
 8013262:	602b      	str	r3, [r5, #0]
 8013264:	e7f3      	b.n	801324e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8013266:	b005      	add	sp, #20
 8013268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801326c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801326c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013270:	2400      	movs	r4, #0
 8013272:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8013276:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801327a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801327e:	8014      	strh	r4, [r2, #0]
 8013280:	701c      	strb	r4, [r3, #0]
 8013282:	f888 4000 	strb.w	r4, [r8]
 8013286:	f88c 4000 	strb.w	r4, [ip]
 801328a:	f88e 4000 	strb.w	r4, [lr]
 801328e:	703c      	strb	r4, [r7, #0]
 8013290:	6804      	ldr	r4, [r0, #0]
 8013292:	b1a4      	cbz	r4, 80132be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8013294:	8824      	ldrh	r4, [r4, #0]
 8013296:	f04f 0901 	mov.w	r9, #1
 801329a:	b314      	cbz	r4, 80132e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801329c:	2c2b      	cmp	r4, #43	; 0x2b
 801329e:	d001      	beq.n	80132a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80132a0:	2c20      	cmp	r4, #32
 80132a2:	d110      	bne.n	80132c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80132a4:	8014      	strh	r4, [r2, #0]
 80132a6:	6804      	ldr	r4, [r0, #0]
 80132a8:	b10c      	cbz	r4, 80132ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80132aa:	3402      	adds	r4, #2
 80132ac:	6004      	str	r4, [r0, #0]
 80132ae:	680c      	ldr	r4, [r1, #0]
 80132b0:	b10c      	cbz	r4, 80132b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80132b2:	3401      	adds	r4, #1
 80132b4:	600c      	str	r4, [r1, #0]
 80132b6:	6804      	ldr	r4, [r0, #0]
 80132b8:	b17c      	cbz	r4, 80132da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80132ba:	8824      	ldrh	r4, [r4, #0]
 80132bc:	e7ed      	b.n	801329a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80132be:	680c      	ldr	r4, [r1, #0]
 80132c0:	b17c      	cbz	r4, 80132e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80132c2:	7824      	ldrb	r4, [r4, #0]
 80132c4:	e7e7      	b.n	8013296 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80132c6:	2c2d      	cmp	r4, #45	; 0x2d
 80132c8:	d102      	bne.n	80132d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80132ca:	f883 9000 	strb.w	r9, [r3]
 80132ce:	e7ea      	b.n	80132a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80132d0:	2c23      	cmp	r4, #35	; 0x23
 80132d2:	d107      	bne.n	80132e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80132d4:	f888 9000 	strb.w	r9, [r8]
 80132d8:	e7e5      	b.n	80132a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80132da:	680c      	ldr	r4, [r1, #0]
 80132dc:	b10c      	cbz	r4, 80132e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80132de:	7824      	ldrb	r4, [r4, #0]
 80132e0:	e7db      	b.n	801329a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80132e2:	2400      	movs	r4, #0
 80132e4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80132e8:	2b09      	cmp	r3, #9
 80132ea:	d901      	bls.n	80132f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80132ec:	2c2a      	cmp	r4, #42	; 0x2a
 80132ee:	d122      	bne.n	8013336 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80132f0:	2301      	movs	r3, #1
 80132f2:	2c30      	cmp	r4, #48	; 0x30
 80132f4:	f88e 3000 	strb.w	r3, [lr]
 80132f8:	d10d      	bne.n	8013316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80132fa:	f88c 3000 	strb.w	r3, [ip]
 80132fe:	6803      	ldr	r3, [r0, #0]
 8013300:	b10b      	cbz	r3, 8013306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8013302:	3302      	adds	r3, #2
 8013304:	6003      	str	r3, [r0, #0]
 8013306:	680b      	ldr	r3, [r1, #0]
 8013308:	b10b      	cbz	r3, 801330e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801330a:	3301      	adds	r3, #1
 801330c:	600b      	str	r3, [r1, #0]
 801330e:	6803      	ldr	r3, [r0, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d02f      	beq.n	8013374 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8013314:	881c      	ldrh	r4, [r3, #0]
 8013316:	2c2a      	cmp	r4, #42	; 0x2a
 8013318:	d135      	bne.n	8013386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801331a:	f04f 33ff 	mov.w	r3, #4294967295
 801331e:	6033      	str	r3, [r6, #0]
 8013320:	6803      	ldr	r3, [r0, #0]
 8013322:	b10b      	cbz	r3, 8013328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8013324:	3302      	adds	r3, #2
 8013326:	6003      	str	r3, [r0, #0]
 8013328:	680b      	ldr	r3, [r1, #0]
 801332a:	b10b      	cbz	r3, 8013330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801332c:	3301      	adds	r3, #1
 801332e:	600b      	str	r3, [r1, #0]
 8013330:	6803      	ldr	r3, [r0, #0]
 8013332:	b31b      	cbz	r3, 801337c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8013334:	881c      	ldrh	r4, [r3, #0]
 8013336:	2c2e      	cmp	r4, #46	; 0x2e
 8013338:	d11a      	bne.n	8013370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801333a:	2301      	movs	r3, #1
 801333c:	703b      	strb	r3, [r7, #0]
 801333e:	6803      	ldr	r3, [r0, #0]
 8013340:	b10b      	cbz	r3, 8013346 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8013342:	3302      	adds	r3, #2
 8013344:	6003      	str	r3, [r0, #0]
 8013346:	680b      	ldr	r3, [r1, #0]
 8013348:	b10b      	cbz	r3, 801334e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801334a:	3301      	adds	r3, #1
 801334c:	600b      	str	r3, [r1, #0]
 801334e:	6803      	ldr	r3, [r0, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d036      	beq.n	80133c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8013354:	881b      	ldrh	r3, [r3, #0]
 8013356:	2b2a      	cmp	r3, #42	; 0x2a
 8013358:	d137      	bne.n	80133ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801335a:	f04f 33ff 	mov.w	r3, #4294967295
 801335e:	602b      	str	r3, [r5, #0]
 8013360:	6803      	ldr	r3, [r0, #0]
 8013362:	b10b      	cbz	r3, 8013368 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8013364:	3302      	adds	r3, #2
 8013366:	6003      	str	r3, [r0, #0]
 8013368:	680b      	ldr	r3, [r1, #0]
 801336a:	b10b      	cbz	r3, 8013370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801336c:	3301      	adds	r3, #1
 801336e:	600b      	str	r3, [r1, #0]
 8013370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013374:	680c      	ldr	r4, [r1, #0]
 8013376:	b134      	cbz	r4, 8013386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8013378:	7824      	ldrb	r4, [r4, #0]
 801337a:	e7cc      	b.n	8013316 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801337c:	680b      	ldr	r3, [r1, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d0f6      	beq.n	8013370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8013382:	781c      	ldrb	r4, [r3, #0]
 8013384:	e7d7      	b.n	8013336 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8013386:	2300      	movs	r3, #0
 8013388:	220a      	movs	r2, #10
 801338a:	6033      	str	r3, [r6, #0]
 801338c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013390:	fa1f f38c 	uxth.w	r3, ip
 8013394:	2b09      	cmp	r3, #9
 8013396:	d8ce      	bhi.n	8013336 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8013398:	6833      	ldr	r3, [r6, #0]
 801339a:	fb02 c303 	mla	r3, r2, r3, ip
 801339e:	6033      	str	r3, [r6, #0]
 80133a0:	6803      	ldr	r3, [r0, #0]
 80133a2:	b10b      	cbz	r3, 80133a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80133a4:	3302      	adds	r3, #2
 80133a6:	6003      	str	r3, [r0, #0]
 80133a8:	680b      	ldr	r3, [r1, #0]
 80133aa:	b10b      	cbz	r3, 80133b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80133ac:	3301      	adds	r3, #1
 80133ae:	600b      	str	r3, [r1, #0]
 80133b0:	6803      	ldr	r3, [r0, #0]
 80133b2:	b10b      	cbz	r3, 80133b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80133b4:	881c      	ldrh	r4, [r3, #0]
 80133b6:	e7e9      	b.n	801338c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80133b8:	680c      	ldr	r4, [r1, #0]
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	d0e6      	beq.n	801338c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80133be:	7824      	ldrb	r4, [r4, #0]
 80133c0:	e7e4      	b.n	801338c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80133c2:	680b      	ldr	r3, [r1, #0]
 80133c4:	b10b      	cbz	r3, 80133ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	e7c5      	b.n	8013356 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80133ca:	2200      	movs	r2, #0
 80133cc:	240a      	movs	r4, #10
 80133ce:	602a      	str	r2, [r5, #0]
 80133d0:	3b30      	subs	r3, #48	; 0x30
 80133d2:	682a      	ldr	r2, [r5, #0]
 80133d4:	b29e      	uxth	r6, r3
 80133d6:	2e09      	cmp	r6, #9
 80133d8:	d813      	bhi.n	8013402 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80133da:	fb04 3302 	mla	r3, r4, r2, r3
 80133de:	602b      	str	r3, [r5, #0]
 80133e0:	6803      	ldr	r3, [r0, #0]
 80133e2:	b10b      	cbz	r3, 80133e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80133e4:	3302      	adds	r3, #2
 80133e6:	6003      	str	r3, [r0, #0]
 80133e8:	680b      	ldr	r3, [r1, #0]
 80133ea:	b10b      	cbz	r3, 80133f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80133ec:	3301      	adds	r3, #1
 80133ee:	600b      	str	r3, [r1, #0]
 80133f0:	6803      	ldr	r3, [r0, #0]
 80133f2:	b10b      	cbz	r3, 80133f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	e7eb      	b.n	80133d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80133f8:	680b      	ldr	r3, [r1, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d0e8      	beq.n	80133d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	e7e6      	b.n	80133d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8013402:	2a06      	cmp	r2, #6
 8013404:	bfa8      	it	ge
 8013406:	2206      	movge	r2, #6
 8013408:	602a      	str	r2, [r5, #0]
 801340a:	e7b1      	b.n	8013370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801340c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013410:	b0a3      	sub	sp, #140	; 0x8c
 8013412:	2600      	movs	r6, #0
 8013414:	4607      	mov	r7, r0
 8013416:	4688      	mov	r8, r1
 8013418:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801341c:	4631      	mov	r1, r6
 801341e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8013420:	4648      	mov	r0, r9
 8013422:	960d      	str	r6, [sp, #52]	; 0x34
 8013424:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013428:	2242      	movs	r2, #66	; 0x42
 801342a:	f00c f8bb 	bl	801f5a4 <memset>
 801342e:	b15f      	cbz	r7, 8013448 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8013430:	f108 3aff 	add.w	sl, r8, #4294967295
 8013434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013438:	b152      	cbz	r2, 8013450 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801343a:	8812      	ldrh	r2, [r2, #0]
 801343c:	b10a      	cbz	r2, 8013442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801343e:	459a      	cmp	sl, r3
 8013440:	dc2e      	bgt.n	80134a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8013442:	2200      	movs	r2, #0
 8013444:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8013448:	4638      	mov	r0, r7
 801344a:	b023      	add	sp, #140	; 0x8c
 801344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013450:	9a08      	ldr	r2, [sp, #32]
 8013452:	2a00      	cmp	r2, #0
 8013454:	d0f5      	beq.n	8013442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8013456:	7812      	ldrb	r2, [r2, #0]
 8013458:	e7f0      	b.n	801343c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801345a:	2d00      	cmp	r5, #0
 801345c:	d0ea      	beq.n	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801345e:	782a      	ldrb	r2, [r5, #0]
 8013460:	b142      	cbz	r2, 8013474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8013462:	2a25      	cmp	r2, #37	; 0x25
 8013464:	d001      	beq.n	801346a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8013466:	459a      	cmp	sl, r3
 8013468:	dc08      	bgt.n	801347c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801346a:	f1bb 0f00 	cmp.w	fp, #0
 801346e:	d121      	bne.n	80134b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8013470:	2d00      	cmp	r5, #0
 8013472:	d0df      	beq.n	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8013474:	782a      	ldrb	r2, [r5, #0]
 8013476:	f04f 0b00 	mov.w	fp, #0
 801347a:	e01d      	b.n	80134b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801347c:	f1bb 0f00 	cmp.w	fp, #0
 8013480:	d077      	beq.n	8013572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8013482:	f8bb 2000 	ldrh.w	r2, [fp]
 8013486:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801348a:	f1bb 0f00 	cmp.w	fp, #0
 801348e:	d002      	beq.n	8013496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8013490:	f10b 0202 	add.w	r2, fp, #2
 8013494:	9209      	str	r2, [sp, #36]	; 0x24
 8013496:	b10d      	cbz	r5, 801349c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8013498:	3501      	adds	r5, #1
 801349a:	9508      	str	r5, [sp, #32]
 801349c:	3301      	adds	r3, #1
 801349e:	930d      	str	r3, [sp, #52]	; 0x34
 80134a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134a2:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80134a6:	f1bb 0f00 	cmp.w	fp, #0
 80134aa:	d0d6      	beq.n	801345a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80134ac:	f8bb 2000 	ldrh.w	r2, [fp]
 80134b0:	2a00      	cmp	r2, #0
 80134b2:	d1d6      	bne.n	8013462 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80134b4:	f8bb 2000 	ldrh.w	r2, [fp]
 80134b8:	2a00      	cmp	r2, #0
 80134ba:	d0bb      	beq.n	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80134bc:	459a      	cmp	sl, r3
 80134be:	ddb9      	ble.n	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80134c0:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80134c4:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80134c8:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80134cc:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80134d0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80134d4:	960e      	str	r6, [sp, #56]	; 0x38
 80134d6:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80134da:	960f      	str	r6, [sp, #60]	; 0x3c
 80134dc:	f1bb 0f00 	cmp.w	fp, #0
 80134e0:	d002      	beq.n	80134e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80134e2:	f10b 0302 	add.w	r3, fp, #2
 80134e6:	9309      	str	r3, [sp, #36]	; 0x24
 80134e8:	b10d      	cbz	r5, 80134ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80134ea:	1c6b      	adds	r3, r5, #1
 80134ec:	9308      	str	r3, [sp, #32]
 80134ee:	ab0f      	add	r3, sp, #60	; 0x3c
 80134f0:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80134f4:	a908      	add	r1, sp, #32
 80134f6:	a809      	add	r0, sp, #36	; 0x24
 80134f8:	9305      	str	r3, [sp, #20]
 80134fa:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80134fe:	9304      	str	r3, [sp, #16]
 8013500:	ab0e      	add	r3, sp, #56	; 0x38
 8013502:	9303      	str	r3, [sp, #12]
 8013504:	ab0c      	add	r3, sp, #48	; 0x30
 8013506:	9302      	str	r3, [sp, #8]
 8013508:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801350c:	9301      	str	r3, [sp, #4]
 801350e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8013518:	f7ff fea8 	bl	801326c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801351c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801351e:	2b00      	cmp	r3, #0
 8013520:	bfbf      	itttt	lt
 8013522:	6823      	ldrlt	r3, [r4, #0]
 8013524:	3404      	addlt	r4, #4
 8013526:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801352a:	930e      	strlt	r3, [sp, #56]	; 0x38
 801352c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801352e:	2b00      	cmp	r3, #0
 8013530:	bfbe      	ittt	lt
 8013532:	6823      	ldrlt	r3, [r4, #0]
 8013534:	3404      	addlt	r4, #4
 8013536:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801353a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801353e:	bfb8      	it	lt
 8013540:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8013542:	b1d9      	cbz	r1, 801357c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8013544:	880b      	ldrh	r3, [r1, #0]
 8013546:	2b69      	cmp	r3, #105	; 0x69
 8013548:	d01f      	beq.n	801358a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801354a:	d82f      	bhi.n	80135ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801354c:	2b58      	cmp	r3, #88	; 0x58
 801354e:	d01c      	beq.n	801358a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8013550:	d818      	bhi.n	8013584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8013552:	2b25      	cmp	r3, #37	; 0x25
 8013554:	d034      	beq.n	80135c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8013556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013558:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801355c:	f1bb 0f00 	cmp.w	fp, #0
 8013560:	f000 80b7 	beq.w	80136d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8013564:	f8bb 5000 	ldrh.w	r5, [fp]
 8013568:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801356c:	3301      	adds	r3, #1
 801356e:	930d      	str	r3, [sp, #52]	; 0x34
 8013570:	e029      	b.n	80135c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8013572:	b10d      	cbz	r5, 8013578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8013574:	782a      	ldrb	r2, [r5, #0]
 8013576:	e786      	b.n	8013486 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8013578:	462a      	mov	r2, r5
 801357a:	e784      	b.n	8013486 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801357c:	2a00      	cmp	r2, #0
 801357e:	d0ea      	beq.n	8013556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8013580:	7813      	ldrb	r3, [r2, #0]
 8013582:	e7e0      	b.n	8013546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8013584:	3b63      	subs	r3, #99	; 0x63
 8013586:	2b01      	cmp	r3, #1
 8013588:	d8e5      	bhi.n	8013556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801358a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801358e:	b329      	cbz	r1, 80135dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8013590:	880b      	ldrh	r3, [r1, #0]
 8013592:	2b69      	cmp	r3, #105	; 0x69
 8013594:	d063      	beq.n	801365e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8013596:	d825      	bhi.n	80135e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8013598:	2b63      	cmp	r3, #99	; 0x63
 801359a:	d038      	beq.n	801360e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801359c:	2b64      	cmp	r3, #100	; 0x64
 801359e:	d05e      	beq.n	801365e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80135a0:	2b58      	cmp	r3, #88	; 0x58
 80135a2:	d07a      	beq.n	801369a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80135a4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80135a8:	4625      	mov	r5, r4
 80135aa:	e036      	b.n	801361a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80135ac:	2b73      	cmp	r3, #115	; 0x73
 80135ae:	d0ec      	beq.n	801358a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80135b0:	d802      	bhi.n	80135b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80135b2:	2b6f      	cmp	r3, #111	; 0x6f
 80135b4:	d1cf      	bne.n	8013556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80135b6:	e7e8      	b.n	801358a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80135b8:	2b75      	cmp	r3, #117	; 0x75
 80135ba:	d0e6      	beq.n	801358a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80135bc:	2b78      	cmp	r3, #120	; 0x78
 80135be:	e7f9      	b.n	80135b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80135c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135c2:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80135c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135c8:	b10b      	cbz	r3, 80135ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80135ca:	3302      	adds	r3, #2
 80135cc:	9309      	str	r3, [sp, #36]	; 0x24
 80135ce:	9b08      	ldr	r3, [sp, #32]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f43f af2f 	beq.w	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80135d6:	3301      	adds	r3, #1
 80135d8:	9308      	str	r3, [sp, #32]
 80135da:	e72b      	b.n	8013434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80135dc:	2a00      	cmp	r2, #0
 80135de:	d0e1      	beq.n	80135a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80135e0:	7813      	ldrb	r3, [r2, #0]
 80135e2:	e7d6      	b.n	8013592 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80135e4:	2b73      	cmp	r3, #115	; 0x73
 80135e6:	d036      	beq.n	8013656 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80135e8:	d807      	bhi.n	80135fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80135ea:	2b6f      	cmp	r3, #111	; 0x6f
 80135ec:	d1da      	bne.n	80135a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80135ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135f0:	1d25      	adds	r5, r4, #4
 80135f2:	2308      	movs	r3, #8
 80135f4:	eba8 0202 	sub.w	r2, r8, r2
 80135f8:	e049      	b.n	801368e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80135fa:	2b75      	cmp	r3, #117	; 0x75
 80135fc:	d042      	beq.n	8013684 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80135fe:	2b78      	cmp	r3, #120	; 0x78
 8013600:	d1d0      	bne.n	80135a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8013602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013604:	1d25      	adds	r5, r4, #4
 8013606:	2310      	movs	r3, #16
 8013608:	eba8 0202 	sub.w	r2, r8, r2
 801360c:	e03f      	b.n	801368e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801360e:	6823      	ldr	r3, [r4, #0]
 8013610:	1d25      	adds	r5, r4, #4
 8013612:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8013616:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801361c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013620:	2b00      	cmp	r3, #0
 8013622:	d051      	beq.n	80136c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8013624:	881a      	ldrh	r2, [r3, #0]
 8013626:	a80d      	add	r0, sp, #52	; 0x34
 8013628:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801362c:	462c      	mov	r4, r5
 801362e:	9005      	str	r0, [sp, #20]
 8013630:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8013634:	9004      	str	r0, [sp, #16]
 8013636:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013638:	9003      	str	r0, [sp, #12]
 801363a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801363e:	9002      	str	r0, [sp, #8]
 8013640:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013642:	9001      	str	r0, [sp, #4]
 8013644:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8013648:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801364c:	9000      	str	r0, [sp, #0]
 801364e:	a810      	add	r0, sp, #64	; 0x40
 8013650:	f7ff fd49 	bl	80130e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8013654:	e7b7      	b.n	80135c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8013656:	1d25      	adds	r5, r4, #4
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	9310      	str	r3, [sp, #64]	; 0x40
 801365c:	e7dd      	b.n	801361a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801365e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013660:	230a      	movs	r3, #10
 8013662:	4649      	mov	r1, r9
 8013664:	6820      	ldr	r0, [r4, #0]
 8013666:	eba8 0202 	sub.w	r2, r8, r2
 801366a:	1d25      	adds	r5, r4, #4
 801366c:	b292      	uxth	r2, r2
 801366e:	f7ff fcf9 	bl	8013064 <_ZN8touchgfx7Unicode4itoaElPtti>
 8013672:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013676:	2b2d      	cmp	r3, #45	; 0x2d
 8013678:	d1cf      	bne.n	801361a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801367a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801367e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013680:	3302      	adds	r3, #2
 8013682:	e7ea      	b.n	801365a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8013684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013686:	1d25      	adds	r5, r4, #4
 8013688:	230a      	movs	r3, #10
 801368a:	eba8 0202 	sub.w	r2, r8, r2
 801368e:	b292      	uxth	r2, r2
 8013690:	4649      	mov	r1, r9
 8013692:	6820      	ldr	r0, [r4, #0]
 8013694:	f7ff fcc8 	bl	8013028 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8013698:	e7bf      	b.n	801361a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801369a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801369c:	2310      	movs	r3, #16
 801369e:	4649      	mov	r1, r9
 80136a0:	6820      	ldr	r0, [r4, #0]
 80136a2:	eba8 0202 	sub.w	r2, r8, r2
 80136a6:	1d25      	adds	r5, r4, #4
 80136a8:	b292      	uxth	r2, r2
 80136aa:	f7ff fcbd 	bl	8013028 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80136ae:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80136b2:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d0af      	beq.n	801361a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80136ba:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80136be:	2919      	cmp	r1, #25
 80136c0:	d8f7      	bhi.n	80136b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80136c2:	3b20      	subs	r3, #32
 80136c4:	8013      	strh	r3, [r2, #0]
 80136c6:	e7f4      	b.n	80136b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80136c8:	9a08      	ldr	r2, [sp, #32]
 80136ca:	2a00      	cmp	r2, #0
 80136cc:	d0ab      	beq.n	8013626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80136ce:	7812      	ldrb	r2, [r2, #0]
 80136d0:	e7a9      	b.n	8013626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80136d2:	2d00      	cmp	r5, #0
 80136d4:	f43f af48 	beq.w	8013568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80136d8:	782d      	ldrb	r5, [r5, #0]
 80136da:	e745      	b.n	8013568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080136dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80136dc:	b507      	push	{r0, r1, r2, lr}
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	4613      	mov	r3, r2
 80136e2:	2200      	movs	r2, #0
 80136e4:	f7ff fe92 	bl	801340c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80136e8:	b003      	add	sp, #12
 80136ea:	f85d fb04 	ldr.w	pc, [sp], #4

080136ee <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80136ee:	b40c      	push	{r2, r3}
 80136f0:	b507      	push	{r0, r1, r2, lr}
 80136f2:	ab04      	add	r3, sp, #16
 80136f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80136f8:	9301      	str	r3, [sp, #4]
 80136fa:	f7ff ffef 	bl	80136dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80136fe:	b003      	add	sp, #12
 8013700:	f85d eb04 	ldr.w	lr, [sp], #4
 8013704:	b002      	add	sp, #8
 8013706:	4770      	bx	lr

08013708 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013708:	4b01      	ldr	r3, [pc, #4]	; (8013710 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801370a:	6018      	str	r0, [r3, #0]
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop
 8013710:	20024974 	.word	0x20024974

08013714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013714:	4b06      	ldr	r3, [pc, #24]	; (8013730 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013716:	881a      	ldrh	r2, [r3, #0]
 8013718:	4282      	cmp	r2, r0
 801371a:	d807      	bhi.n	801372c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801371c:	4b05      	ldr	r3, [pc, #20]	; (8013734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801371e:	881b      	ldrh	r3, [r3, #0]
 8013720:	4413      	add	r3, r2
 8013722:	4298      	cmp	r0, r3
 8013724:	bfac      	ite	ge
 8013726:	2000      	movge	r0, #0
 8013728:	2001      	movlt	r0, #1
 801372a:	4770      	bx	lr
 801372c:	2000      	movs	r0, #0
 801372e:	4770      	bx	lr
 8013730:	20024994 	.word	0x20024994
 8013734:	20024998 	.word	0x20024998

08013738 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013738:	b508      	push	{r3, lr}
 801373a:	4601      	mov	r1, r0
 801373c:	f7ff ffea 	bl	8013714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013740:	b118      	cbz	r0, 801374a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8013742:	4b02      	ldr	r3, [pc, #8]	; (801374c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801374a:	bd08      	pop	{r3, pc}
 801374c:	20024978 	.word	0x20024978

08013750 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8013750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013752:	4c24      	ldr	r4, [pc, #144]	; (80137e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8013754:	6823      	ldr	r3, [r4, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d042      	beq.n	80137e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801375a:	4a23      	ldr	r2, [pc, #140]	; (80137e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801375c:	4d23      	ldr	r5, [pc, #140]	; (80137ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801375e:	8811      	ldrh	r1, [r2, #0]
 8013760:	f8b5 c000 	ldrh.w	ip, [r5]
 8013764:	4822      	ldr	r0, [pc, #136]	; (80137f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8013766:	4461      	add	r1, ip
 8013768:	1c4a      	adds	r2, r1, #1
 801376a:	008f      	lsls	r7, r1, #2
 801376c:	f022 0201 	bic.w	r2, r2, #1
 8013770:	19de      	adds	r6, r3, r7
 8013772:	0412      	lsls	r2, r2, #16
 8013774:	6006      	str	r6, [r0, #0]
 8013776:	4e1f      	ldr	r6, [pc, #124]	; (80137f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8013778:	0c12      	lsrs	r2, r2, #16
 801377a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801377e:	19da      	adds	r2, r3, r7
 8013780:	6032      	str	r2, [r6, #0]
 8013782:	220e      	movs	r2, #14
 8013784:	fb02 f20c 	mul.w	r2, r2, ip
 8013788:	3203      	adds	r2, #3
 801378a:	f022 0203 	bic.w	r2, r2, #3
 801378e:	443a      	add	r2, r7
 8013790:	4f19      	ldr	r7, [pc, #100]	; (80137f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8013792:	4413      	add	r3, r2
 8013794:	603b      	str	r3, [r7, #0]
 8013796:	2300      	movs	r3, #0
 8013798:	4f18      	ldr	r7, [pc, #96]	; (80137fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801379a:	469c      	mov	ip, r3
 801379c:	803b      	strh	r3, [r7, #0]
 801379e:	4f18      	ldr	r7, [pc, #96]	; (8013800 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80137a0:	683f      	ldr	r7, [r7, #0]
 80137a2:	1aba      	subs	r2, r7, r2
 80137a4:	4f17      	ldr	r7, [pc, #92]	; (8013804 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80137a6:	603a      	str	r2, [r7, #0]
 80137a8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80137ac:	4a16      	ldr	r2, [pc, #88]	; (8013808 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80137ae:	8013      	strh	r3, [r2, #0]
 80137b0:	428b      	cmp	r3, r1
 80137b2:	d10d      	bne.n	80137d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80137b4:	882d      	ldrh	r5, [r5, #0]
 80137b6:	2300      	movs	r3, #0
 80137b8:	6830      	ldr	r0, [r6, #0]
 80137ba:	240e      	movs	r4, #14
 80137bc:	429d      	cmp	r5, r3
 80137be:	d90f      	bls.n	80137e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80137c0:	fb04 0203 	mla	r2, r4, r3, r0
 80137c4:	3301      	adds	r3, #1
 80137c6:	7b11      	ldrb	r1, [r2, #12]
 80137c8:	f36f 1145 	bfc	r1, #5, #1
 80137cc:	7311      	strb	r1, [r2, #12]
 80137ce:	e7f5      	b.n	80137bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80137d0:	6822      	ldr	r2, [r4, #0]
 80137d2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80137d6:	6802      	ldr	r2, [r0, #0]
 80137d8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80137dc:	3301      	adds	r3, #1
 80137de:	e7e7      	b.n	80137b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80137e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137e2:	bf00      	nop
 80137e4:	20024978 	.word	0x20024978
 80137e8:	20024994 	.word	0x20024994
 80137ec:	20024998 	.word	0x20024998
 80137f0:	2002498c 	.word	0x2002498c
 80137f4:	2002497c 	.word	0x2002497c
 80137f8:	20024984 	.word	0x20024984
 80137fc:	20024996 	.word	0x20024996
 8013800:	20024980 	.word	0x20024980
 8013804:	20024990 	.word	0x20024990
 8013808:	20024988 	.word	0x20024988

0801380c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801380c:	4b06      	ldr	r3, [pc, #24]	; (8013828 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	b943      	cbnz	r3, 8013824 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8013812:	b139      	cbz	r1, 8013824 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8013814:	4b05      	ldr	r3, [pc, #20]	; (801382c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8013816:	801a      	strh	r2, [r3, #0]
 8013818:	4b05      	ldr	r3, [pc, #20]	; (8013830 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801381a:	6019      	str	r1, [r3, #0]
 801381c:	4b05      	ldr	r3, [pc, #20]	; (8013834 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801381e:	6018      	str	r0, [r3, #0]
 8013820:	f7ff bf96 	b.w	8013750 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	20024984 	.word	0x20024984
 801382c:	20024998 	.word	0x20024998
 8013830:	20024980 	.word	0x20024980
 8013834:	20024978 	.word	0x20024978

08013838 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8013838:	b470      	push	{r4, r5, r6}
 801383a:	4c07      	ldr	r4, [pc, #28]	; (8013858 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801383c:	4605      	mov	r5, r0
 801383e:	4610      	mov	r0, r2
 8013840:	9a03      	ldr	r2, [sp, #12]
 8013842:	6826      	ldr	r6, [r4, #0]
 8013844:	b936      	cbnz	r6, 8013854 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8013846:	6025      	str	r5, [r4, #0]
 8013848:	4c04      	ldr	r4, [pc, #16]	; (801385c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801384a:	8021      	strh	r1, [r4, #0]
 801384c:	4619      	mov	r1, r3
 801384e:	bc70      	pop	{r4, r5, r6}
 8013850:	f7ff bfdc 	b.w	801380c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8013854:	bc70      	pop	{r4, r5, r6}
 8013856:	4770      	bx	lr
 8013858:	2002499c 	.word	0x2002499c
 801385c:	20024994 	.word	0x20024994

08013860 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8013860:	4a12      	ldr	r2, [pc, #72]	; (80138ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8013862:	8803      	ldrh	r3, [r0, #0]
 8013864:	8812      	ldrh	r2, [r2, #0]
 8013866:	4293      	cmp	r3, r2
 8013868:	d207      	bcs.n	801387a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801386a:	4a11      	ldr	r2, [pc, #68]	; (80138b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801386c:	2114      	movs	r1, #20
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	fb01 2303 	mla	r3, r1, r3, r2
 8013874:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8013878:	4770      	bx	lr
 801387a:	490e      	ldr	r1, [pc, #56]	; (80138b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801387c:	8809      	ldrh	r1, [r1, #0]
 801387e:	4411      	add	r1, r2
 8013880:	428b      	cmp	r3, r1
 8013882:	da04      	bge.n	801388e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8013884:	1a9b      	subs	r3, r3, r2
 8013886:	4a0c      	ldr	r2, [pc, #48]	; (80138b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8013888:	210e      	movs	r1, #14
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	e7f0      	b.n	8013870 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801388e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013892:	4293      	cmp	r3, r2
 8013894:	d108      	bne.n	80138a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8013896:	4b09      	ldr	r3, [pc, #36]	; (80138bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	b91b      	cbnz	r3, 80138a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801389c:	4b08      	ldr	r3, [pc, #32]	; (80138c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801389e:	f9b3 0000 	ldrsh.w	r0, [r3]
 80138a2:	4770      	bx	lr
 80138a4:	4b07      	ldr	r3, [pc, #28]	; (80138c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80138a6:	e7fa      	b.n	801389e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80138a8:	2000      	movs	r0, #0
 80138aa:	4770      	bx	lr
 80138ac:	20024994 	.word	0x20024994
 80138b0:	2002499c 	.word	0x2002499c
 80138b4:	20024998 	.word	0x20024998
 80138b8:	2002497c 	.word	0x2002497c
 80138bc:	2002490c 	.word	0x2002490c
 80138c0:	2002490e 	.word	0x2002490e
 80138c4:	20024910 	.word	0x20024910

080138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80138c8:	4a12      	ldr	r2, [pc, #72]	; (8013914 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80138ca:	8803      	ldrh	r3, [r0, #0]
 80138cc:	8812      	ldrh	r2, [r2, #0]
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d207      	bcs.n	80138e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80138d2:	4a11      	ldr	r2, [pc, #68]	; (8013918 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80138d4:	2114      	movs	r1, #20
 80138d6:	6812      	ldr	r2, [r2, #0]
 80138d8:	fb01 2303 	mla	r3, r1, r3, r2
 80138dc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80138e0:	4770      	bx	lr
 80138e2:	490e      	ldr	r1, [pc, #56]	; (801391c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80138e4:	8809      	ldrh	r1, [r1, #0]
 80138e6:	4411      	add	r1, r2
 80138e8:	428b      	cmp	r3, r1
 80138ea:	da04      	bge.n	80138f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80138ec:	1a9b      	subs	r3, r3, r2
 80138ee:	4a0c      	ldr	r2, [pc, #48]	; (8013920 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80138f0:	210e      	movs	r1, #14
 80138f2:	6812      	ldr	r2, [r2, #0]
 80138f4:	e7f0      	b.n	80138d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80138f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d108      	bne.n	8013910 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80138fe:	4b09      	ldr	r3, [pc, #36]	; (8013924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	b91b      	cbnz	r3, 801390c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8013904:	4b08      	ldr	r3, [pc, #32]	; (8013928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8013906:	f9b3 0000 	ldrsh.w	r0, [r3]
 801390a:	4770      	bx	lr
 801390c:	4b07      	ldr	r3, [pc, #28]	; (801392c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801390e:	e7fa      	b.n	8013906 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8013910:	2000      	movs	r0, #0
 8013912:	4770      	bx	lr
 8013914:	20024994 	.word	0x20024994
 8013918:	2002499c 	.word	0x2002499c
 801391c:	20024998 	.word	0x20024998
 8013920:	2002497c 	.word	0x2002497c
 8013924:	2002490c 	.word	0x2002490c
 8013928:	20024910 	.word	0x20024910
 801392c:	2002490e 	.word	0x2002490e

08013930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8013930:	4a1f      	ldr	r2, [pc, #124]	; (80139b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8013932:	b510      	push	{r4, lr}
 8013934:	880b      	ldrh	r3, [r1, #0]
 8013936:	8812      	ldrh	r2, [r2, #0]
 8013938:	4293      	cmp	r3, r2
 801393a:	d213      	bcs.n	8013964 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801393c:	4a1d      	ldr	r2, [pc, #116]	; (80139b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801393e:	2114      	movs	r1, #20
 8013940:	6812      	ldr	r2, [r2, #0]
 8013942:	fb01 2303 	mla	r3, r1, r3, r2
 8013946:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801394a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801394e:	8a1a      	ldrh	r2, [r3, #16]
 8013950:	8a5b      	ldrh	r3, [r3, #18]
 8013952:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8013956:	8004      	strh	r4, [r0, #0]
 8013958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801395c:	8041      	strh	r1, [r0, #2]
 801395e:	8082      	strh	r2, [r0, #4]
 8013960:	80c3      	strh	r3, [r0, #6]
 8013962:	e00e      	b.n	8013982 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8013964:	4914      	ldr	r1, [pc, #80]	; (80139b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8013966:	8809      	ldrh	r1, [r1, #0]
 8013968:	4411      	add	r1, r2
 801396a:	428b      	cmp	r3, r1
 801396c:	da0a      	bge.n	8013984 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801396e:	1a9b      	subs	r3, r3, r2
 8013970:	4a12      	ldr	r2, [pc, #72]	; (80139bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8013972:	210e      	movs	r1, #14
 8013974:	6812      	ldr	r2, [r2, #0]
 8013976:	fb01 2303 	mla	r3, r1, r3, r2
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	6002      	str	r2, [r0, #0]
 801397e:	685a      	ldr	r2, [r3, #4]
 8013980:	6042      	str	r2, [r0, #4]
 8013982:	bd10      	pop	{r4, pc}
 8013984:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013988:	4293      	cmp	r3, r2
 801398a:	d10b      	bne.n	80139a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801398c:	4b0c      	ldr	r3, [pc, #48]	; (80139c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801398e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013992:	4b0c      	ldr	r3, [pc, #48]	; (80139c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8013994:	8081      	strh	r1, [r0, #4]
 8013996:	f9b3 2000 	ldrsh.w	r2, [r3]
 801399a:	2300      	movs	r3, #0
 801399c:	80c2      	strh	r2, [r0, #6]
 801399e:	8003      	strh	r3, [r0, #0]
 80139a0:	8043      	strh	r3, [r0, #2]
 80139a2:	e7ee      	b.n	8013982 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80139a4:	2300      	movs	r3, #0
 80139a6:	8003      	strh	r3, [r0, #0]
 80139a8:	8043      	strh	r3, [r0, #2]
 80139aa:	8083      	strh	r3, [r0, #4]
 80139ac:	e7d8      	b.n	8013960 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80139ae:	bf00      	nop
 80139b0:	20024994 	.word	0x20024994
 80139b4:	2002499c 	.word	0x2002499c
 80139b8:	20024998 	.word	0x20024998
 80139bc:	2002497c 	.word	0x2002497c
 80139c0:	20024908 	.word	0x20024908
 80139c4:	2002490a 	.word	0x2002490a

080139c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80139c8:	4a17      	ldr	r2, [pc, #92]	; (8013a28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80139ca:	8803      	ldrh	r3, [r0, #0]
 80139cc:	8812      	ldrh	r2, [r2, #0]
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d213      	bcs.n	80139fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80139d2:	4a16      	ldr	r2, [pc, #88]	; (8013a2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80139d4:	2114      	movs	r1, #20
 80139d6:	6812      	ldr	r2, [r2, #0]
 80139d8:	fb01 2303 	mla	r3, r1, r3, r2
 80139dc:	8a1a      	ldrh	r2, [r3, #16]
 80139de:	8919      	ldrh	r1, [r3, #8]
 80139e0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80139e4:	428a      	cmp	r2, r1
 80139e6:	db1d      	blt.n	8013a24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80139e8:	8a58      	ldrh	r0, [r3, #18]
 80139ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80139ee:	895b      	ldrh	r3, [r3, #10]
 80139f0:	4298      	cmp	r0, r3
 80139f2:	bfac      	ite	ge
 80139f4:	2000      	movge	r0, #0
 80139f6:	2001      	movlt	r0, #1
 80139f8:	4770      	bx	lr
 80139fa:	490d      	ldr	r1, [pc, #52]	; (8013a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80139fc:	8809      	ldrh	r1, [r1, #0]
 80139fe:	4411      	add	r1, r2
 8013a00:	428b      	cmp	r3, r1
 8013a02:	da0d      	bge.n	8013a20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8013a04:	1a9b      	subs	r3, r3, r2
 8013a06:	4a0b      	ldr	r2, [pc, #44]	; (8013a34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8013a08:	210e      	movs	r1, #14
 8013a0a:	6812      	ldr	r2, [r2, #0]
 8013a0c:	fb01 2303 	mla	r3, r1, r3, r2
 8013a10:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8013a14:	891a      	ldrh	r2, [r3, #8]
 8013a16:	4291      	cmp	r1, r2
 8013a18:	db04      	blt.n	8013a24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8013a1a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8013a1e:	e7e6      	b.n	80139ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8013a20:	2000      	movs	r0, #0
 8013a22:	4770      	bx	lr
 8013a24:	2001      	movs	r0, #1
 8013a26:	4770      	bx	lr
 8013a28:	20024994 	.word	0x20024994
 8013a2c:	2002499c 	.word	0x2002499c
 8013a30:	20024998 	.word	0x20024998
 8013a34:	2002497c 	.word	0x2002497c

08013a38 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8013a38:	4a12      	ldr	r2, [pc, #72]	; (8013a84 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8013a3a:	8803      	ldrh	r3, [r0, #0]
 8013a3c:	8811      	ldrh	r1, [r2, #0]
 8013a3e:	428b      	cmp	r3, r1
 8013a40:	d20b      	bcs.n	8013a5a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8013a42:	4a11      	ldr	r2, [pc, #68]	; (8013a88 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8013a44:	6812      	ldr	r2, [r2, #0]
 8013a46:	b112      	cbz	r2, 8013a4e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8013a48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013a4c:	b9c0      	cbnz	r0, 8013a80 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8013a4e:	4a0f      	ldr	r2, [pc, #60]	; (8013a8c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8013a50:	6811      	ldr	r1, [r2, #0]
 8013a52:	2214      	movs	r2, #20
 8013a54:	4353      	muls	r3, r2
 8013a56:	58c8      	ldr	r0, [r1, r3]
 8013a58:	4770      	bx	lr
 8013a5a:	4a0d      	ldr	r2, [pc, #52]	; (8013a90 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8013a5c:	8812      	ldrh	r2, [r2, #0]
 8013a5e:	440a      	add	r2, r1
 8013a60:	4293      	cmp	r3, r2
 8013a62:	da04      	bge.n	8013a6e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8013a64:	4a08      	ldr	r2, [pc, #32]	; (8013a88 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8013a66:	6812      	ldr	r2, [r2, #0]
 8013a68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013a6c:	4770      	bx	lr
 8013a6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d103      	bne.n	8013a7e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8013a76:	4b07      	ldr	r3, [pc, #28]	; (8013a94 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8013a7c:	4770      	bx	lr
 8013a7e:	2000      	movs	r0, #0
 8013a80:	4770      	bx	lr
 8013a82:	bf00      	nop
 8013a84:	20024994 	.word	0x20024994
 8013a88:	20024978 	.word	0x20024978
 8013a8c:	2002499c 	.word	0x2002499c
 8013a90:	20024998 	.word	0x20024998
 8013a94:	20024914 	.word	0x20024914

08013a98 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013a98:	4b24      	ldr	r3, [pc, #144]	; (8013b2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8013a9a:	8802      	ldrh	r2, [r0, #0]
 8013a9c:	8818      	ldrh	r0, [r3, #0]
 8013a9e:	4282      	cmp	r2, r0
 8013aa0:	d221      	bcs.n	8013ae6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8013aa2:	4b23      	ldr	r3, [pc, #140]	; (8013b30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8013aa4:	6819      	ldr	r1, [r3, #0]
 8013aa6:	2314      	movs	r3, #20
 8013aa8:	fb03 1302 	mla	r3, r3, r2, r1
 8013aac:	6858      	ldr	r0, [r3, #4]
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d03a      	beq.n	8013b28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8013ab2:	4920      	ldr	r1, [pc, #128]	; (8013b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013ab4:	6809      	ldr	r1, [r1, #0]
 8013ab6:	2900      	cmp	r1, #0
 8013ab8:	d036      	beq.n	8013b28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8013aba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013abe:	2900      	cmp	r1, #0
 8013ac0:	d032      	beq.n	8013b28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8013ac2:	891a      	ldrh	r2, [r3, #8]
 8013ac4:	8958      	ldrh	r0, [r3, #10]
 8013ac6:	4350      	muls	r0, r2
 8013ac8:	7c5a      	ldrb	r2, [r3, #17]
 8013aca:	7cdb      	ldrb	r3, [r3, #19]
 8013acc:	0952      	lsrs	r2, r2, #5
 8013ace:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013ad2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8013ad6:	2b0b      	cmp	r3, #11
 8013ad8:	bf18      	it	ne
 8013ada:	0040      	lslne	r0, r0, #1
 8013adc:	3003      	adds	r0, #3
 8013ade:	f020 0003 	bic.w	r0, r0, #3
 8013ae2:	4408      	add	r0, r1
 8013ae4:	4770      	bx	lr
 8013ae6:	4b14      	ldr	r3, [pc, #80]	; (8013b38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8013ae8:	881b      	ldrh	r3, [r3, #0]
 8013aea:	4403      	add	r3, r0
 8013aec:	429a      	cmp	r2, r3
 8013aee:	da1a      	bge.n	8013b26 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013af0:	4b12      	ldr	r3, [pc, #72]	; (8013b3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8013af2:	1a10      	subs	r0, r2, r0
 8013af4:	210e      	movs	r1, #14
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	fb01 3000 	mla	r0, r1, r0, r3
 8013afc:	7b03      	ldrb	r3, [r0, #12]
 8013afe:	f003 031f 	and.w	r3, r3, #31
 8013b02:	2b0b      	cmp	r3, #11
 8013b04:	d10b      	bne.n	8013b1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8013b06:	8903      	ldrh	r3, [r0, #8]
 8013b08:	8940      	ldrh	r0, [r0, #10]
 8013b0a:	4358      	muls	r0, r3
 8013b0c:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013b0e:	3003      	adds	r0, #3
 8013b10:	6819      	ldr	r1, [r3, #0]
 8013b12:	f020 0303 	bic.w	r3, r0, #3
 8013b16:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8013b1a:	4418      	add	r0, r3
 8013b1c:	4770      	bx	lr
 8013b1e:	2b0d      	cmp	r3, #13
 8013b20:	d101      	bne.n	8013b26 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8013b22:	300d      	adds	r0, #13
 8013b24:	4770      	bx	lr
 8013b26:	2000      	movs	r0, #0
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	20024994 	.word	0x20024994
 8013b30:	2002499c 	.word	0x2002499c
 8013b34:	20024978 	.word	0x20024978
 8013b38:	20024998 	.word	0x20024998
 8013b3c:	2002497c 	.word	0x2002497c

08013b40 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8013b40:	4a17      	ldr	r2, [pc, #92]	; (8013ba0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8013b42:	b510      	push	{r4, lr}
 8013b44:	8803      	ldrh	r3, [r0, #0]
 8013b46:	8812      	ldrh	r2, [r2, #0]
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d20c      	bcs.n	8013b66 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013b4c:	4a15      	ldr	r2, [pc, #84]	; (8013ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8013b4e:	2114      	movs	r1, #20
 8013b50:	6812      	ldr	r2, [r2, #0]
 8013b52:	fb01 2303 	mla	r3, r1, r3, r2
 8013b56:	7c58      	ldrb	r0, [r3, #17]
 8013b58:	0942      	lsrs	r2, r0, #5
 8013b5a:	7cd8      	ldrb	r0, [r3, #19]
 8013b5c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8013b60:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	4910      	ldr	r1, [pc, #64]	; (8013ba8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8013b68:	8809      	ldrh	r1, [r1, #0]
 8013b6a:	4411      	add	r1, r2
 8013b6c:	428b      	cmp	r3, r1
 8013b6e:	da09      	bge.n	8013b84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8013b70:	1a9b      	subs	r3, r3, r2
 8013b72:	4a0e      	ldr	r2, [pc, #56]	; (8013bac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8013b74:	210e      	movs	r1, #14
 8013b76:	6812      	ldr	r2, [r2, #0]
 8013b78:	fb01 2303 	mla	r3, r1, r3, r2
 8013b7c:	7b18      	ldrb	r0, [r3, #12]
 8013b7e:	f000 001f 	and.w	r0, r0, #31
 8013b82:	e7ef      	b.n	8013b64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8013b84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d106      	bne.n	8013b9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8013b8c:	f7f9 fec4 	bl	800d918 <_ZN8touchgfx3HAL3lcdEv>
 8013b90:	6803      	ldr	r3, [r0, #0]
 8013b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b98:	4718      	bx	r3
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	e7e2      	b.n	8013b64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8013b9e:	bf00      	nop
 8013ba0:	20024994 	.word	0x20024994
 8013ba4:	2002499c 	.word	0x2002499c
 8013ba8:	20024998 	.word	0x20024998
 8013bac:	2002497c 	.word	0x2002497c

08013bb0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8013bb0:	2010      	movs	r0, #16
 8013bb2:	4770      	bx	lr

08013bb4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	4770      	bx	lr

08013bb8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8013bb8:	4b02      	ldr	r3, [pc, #8]	; (8013bc4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8013bba:	8818      	ldrh	r0, [r3, #0]
 8013bbc:	0040      	lsls	r0, r0, #1
 8013bbe:	b280      	uxth	r0, r0
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	2002490e 	.word	0x2002490e

08013bc8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013bc8:	2bff      	cmp	r3, #255	; 0xff
 8013bca:	d050      	beq.n	8013c6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8013bcc:	2a0b      	cmp	r2, #11
 8013bce:	d04a      	beq.n	8013c66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8013bd0:	d80e      	bhi.n	8013bf0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8013bd2:	2a03      	cmp	r2, #3
 8013bd4:	d03f      	beq.n	8013c56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8013bd6:	d804      	bhi.n	8013be2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013bd8:	2a01      	cmp	r2, #1
 8013bda:	d03e      	beq.n	8013c5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8013bdc:	d93f      	bls.n	8013c5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8013bde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8013be0:	4770      	bx	lr
 8013be2:	2a09      	cmp	r2, #9
 8013be4:	d03f      	beq.n	8013c66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8013be6:	d83c      	bhi.n	8013c62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8013be8:	2a08      	cmp	r2, #8
 8013bea:	d03a      	beq.n	8013c62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8013bec:	2000      	movs	r0, #0
 8013bee:	4770      	bx	lr
 8013bf0:	2a2f      	cmp	r2, #47	; 0x2f
 8013bf2:	d024      	beq.n	8013c3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8013bf4:	d80d      	bhi.n	8013c12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8013bf6:	2a2d      	cmp	r2, #45	; 0x2d
 8013bf8:	d014      	beq.n	8013c24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8013bfa:	d826      	bhi.n	8013c4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8013bfc:	2a2c      	cmp	r2, #44	; 0x2c
 8013bfe:	d1f5      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c00:	684b      	ldr	r3, [r1, #4]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d018      	beq.n	8013c3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8013c08:	d323      	bcc.n	8013c52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8013c0a:	2b02      	cmp	r3, #2
 8013c0c:	d1ee      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c0e:	6880      	ldr	r0, [r0, #8]
 8013c10:	4770      	bx	lr
 8013c12:	2a31      	cmp	r2, #49	; 0x31
 8013c14:	d004      	beq.n	8013c20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8013c16:	d328      	bcc.n	8013c6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8013c18:	2a32      	cmp	r2, #50	; 0x32
 8013c1a:	d026      	beq.n	8013c6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8013c1c:	2a33      	cmp	r2, #51	; 0x33
 8013c1e:	d1e5      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c20:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8013c22:	4770      	bx	lr
 8013c24:	684b      	ldr	r3, [r1, #4]
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d004      	beq.n	8013c36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8013c2c:	d30b      	bcc.n	8013c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	d1dc      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c32:	6900      	ldr	r0, [r0, #16]
 8013c34:	4770      	bx	lr
 8013c36:	6a00      	ldr	r0, [r0, #32]
 8013c38:	4770      	bx	lr
 8013c3a:	6980      	ldr	r0, [r0, #24]
 8013c3c:	4770      	bx	lr
 8013c3e:	684b      	ldr	r3, [r1, #4]
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1d2      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c46:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013c48:	4770      	bx	lr
 8013c4a:	684b      	ldr	r3, [r1, #4]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d1cc      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013c54:	4770      	bx	lr
 8013c56:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013c58:	4770      	bx	lr
 8013c5a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8013c5c:	4770      	bx	lr
 8013c5e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013c60:	4770      	bx	lr
 8013c62:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8013c64:	4770      	bx	lr
 8013c66:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8013c68:	4770      	bx	lr
 8013c6a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013c6c:	4770      	bx	lr
 8013c6e:	2a0b      	cmp	r2, #11
 8013c70:	d049      	beq.n	8013d06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8013c72:	d80e      	bhi.n	8013c92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8013c74:	2a03      	cmp	r2, #3
 8013c76:	d040      	beq.n	8013cfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8013c78:	d804      	bhi.n	8013c84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8013c7a:	2a01      	cmp	r2, #1
 8013c7c:	d03f      	beq.n	8013cfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8013c7e:	d940      	bls.n	8013d02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8013c80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8013c82:	4770      	bx	lr
 8013c84:	2a09      	cmp	r2, #9
 8013c86:	d03e      	beq.n	8013d06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8013c88:	d801      	bhi.n	8013c8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8013c8a:	2a08      	cmp	r2, #8
 8013c8c:	d1ae      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013c8e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8013c90:	4770      	bx	lr
 8013c92:	2a2f      	cmp	r2, #47	; 0x2f
 8013c94:	d024      	beq.n	8013ce0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8013c96:	d80d      	bhi.n	8013cb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8013c98:	2a2d      	cmp	r2, #45	; 0x2d
 8013c9a:	d014      	beq.n	8013cc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8013c9c:	d826      	bhi.n	8013cec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8013c9e:	2a2c      	cmp	r2, #44	; 0x2c
 8013ca0:	d1a4      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013ca2:	684b      	ldr	r3, [r1, #4]
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d018      	beq.n	8013cdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8013caa:	d324      	bcc.n	8013cf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8013cac:	2b02      	cmp	r3, #2
 8013cae:	d19d      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013cb0:	68c0      	ldr	r0, [r0, #12]
 8013cb2:	4770      	bx	lr
 8013cb4:	2a31      	cmp	r2, #49	; 0x31
 8013cb6:	d004      	beq.n	8013cc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8013cb8:	d327      	bcc.n	8013d0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8013cba:	2a32      	cmp	r2, #50	; 0x32
 8013cbc:	d025      	beq.n	8013d0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8013cbe:	2a33      	cmp	r2, #51	; 0x33
 8013cc0:	d194      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013cc2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8013cc4:	4770      	bx	lr
 8013cc6:	684b      	ldr	r3, [r1, #4]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d004      	beq.n	8013cd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8013cce:	d30b      	bcc.n	8013ce8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8013cd0:	2b02      	cmp	r3, #2
 8013cd2:	d18b      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013cd4:	6940      	ldr	r0, [r0, #20]
 8013cd6:	4770      	bx	lr
 8013cd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013cda:	4770      	bx	lr
 8013cdc:	69c0      	ldr	r0, [r0, #28]
 8013cde:	4770      	bx	lr
 8013ce0:	684b      	ldr	r3, [r1, #4]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d181      	bne.n	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013ce8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8013cea:	4770      	bx	lr
 8013cec:	684b      	ldr	r3, [r1, #4]
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	f47f af7b 	bne.w	8013bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013cf6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8013cf8:	4770      	bx	lr
 8013cfa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8013cfc:	4770      	bx	lr
 8013cfe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8013d00:	4770      	bx	lr
 8013d02:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8013d04:	4770      	bx	lr
 8013d06:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8013d08:	4770      	bx	lr
 8013d0a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8013d0c:	4770      	bx	lr

08013d0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d12:	b087      	sub	sp, #28
 8013d14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013d16:	9205      	str	r2, [sp, #20]
 8013d18:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013d1c:	9101      	str	r1, [sp, #4]
 8013d1e:	9202      	str	r2, [sp, #8]
 8013d20:	6841      	ldr	r1, [r0, #4]
 8013d22:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8013d26:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013d2a:	fb01 2404 	mla	r4, r1, r4, r2
 8013d2e:	6802      	ldr	r2, [r0, #0]
 8013d30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013d34:	f8de 2000 	ldr.w	r2, [lr]
 8013d38:	9203      	str	r2, [sp, #12]
 8013d3a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8013d3e:	3204      	adds	r2, #4
 8013d40:	9204      	str	r2, [sp, #16]
 8013d42:	9a02      	ldr	r2, [sp, #8]
 8013d44:	43d6      	mvns	r6, r2
 8013d46:	b2f6      	uxtb	r6, r6
 8013d48:	9a01      	ldr	r2, [sp, #4]
 8013d4a:	2a00      	cmp	r2, #0
 8013d4c:	dc03      	bgt.n	8013d56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013d4e:	9a05      	ldr	r2, [sp, #20]
 8013d50:	2a00      	cmp	r2, #0
 8013d52:	f340 8129 	ble.w	8013fa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013d56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013d58:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8013d5c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013d60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d62:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8013d66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	dd0e      	ble.n	8013d8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013d6e:	1408      	asrs	r0, r1, #16
 8013d70:	d405      	bmi.n	8013d7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013d72:	4560      	cmp	r0, ip
 8013d74:	da03      	bge.n	8013d7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013d76:	1410      	asrs	r0, r2, #16
 8013d78:	d401      	bmi.n	8013d7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013d7a:	42b8      	cmp	r0, r7
 8013d7c:	db07      	blt.n	8013d8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013d7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013d80:	3b01      	subs	r3, #1
 8013d82:	3402      	adds	r4, #2
 8013d84:	4401      	add	r1, r0
 8013d86:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013d88:	4402      	add	r2, r0
 8013d8a:	e7ee      	b.n	8013d6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013d8c:	d071      	beq.n	8013e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013d8e:	1e58      	subs	r0, r3, #1
 8013d90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013d92:	fb05 1500 	mla	r5, r5, r0, r1
 8013d96:	142d      	asrs	r5, r5, #16
 8013d98:	d45f      	bmi.n	8013e5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013d9a:	4565      	cmp	r5, ip
 8013d9c:	da5d      	bge.n	8013e5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013d9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013da0:	fb05 2000 	mla	r0, r5, r0, r2
 8013da4:	1400      	asrs	r0, r0, #16
 8013da6:	d458      	bmi.n	8013e5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013da8:	42b8      	cmp	r0, r7
 8013daa:	da56      	bge.n	8013e5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013dac:	4699      	mov	r9, r3
 8013dae:	46a2      	mov	sl, r4
 8013db0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8013db4:	f1b9 0f00 	cmp.w	r9, #0
 8013db8:	dd57      	ble.n	8013e6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8013dba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013dbe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8013dc2:	9803      	ldr	r0, [sp, #12]
 8013dc4:	140d      	asrs	r5, r1, #16
 8013dc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8013dca:	fb07 000c 	mla	r0, r7, ip, r0
 8013dce:	5d40      	ldrb	r0, [r0, r5]
 8013dd0:	9d04      	ldr	r5, [sp, #16]
 8013dd2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8013dd6:	f8ba 5000 	ldrh.w	r5, [sl]
 8013dda:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013dde:	122f      	asrs	r7, r5, #8
 8013de0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8013de4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013de8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013dec:	00ed      	lsls	r5, r5, #3
 8013dee:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8013df2:	fb17 f706 	smulbb	r7, r7, r6
 8013df6:	b2ed      	uxtb	r5, r5
 8013df8:	fb18 f806 	smulbb	r8, r8, r6
 8013dfc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8013e00:	10c7      	asrs	r7, r0, #3
 8013e02:	fb15 f506 	smulbb	r5, r5, r6
 8013e06:	00c0      	lsls	r0, r0, #3
 8013e08:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8013e0c:	fa1f fc8c 	uxth.w	ip, ip
 8013e10:	b2c0      	uxtb	r0, r0
 8013e12:	fb07 870b 	mla	r7, r7, fp, r8
 8013e16:	fb00 500b 	mla	r0, r0, fp, r5
 8013e1a:	f10c 0501 	add.w	r5, ip, #1
 8013e1e:	b2bf      	uxth	r7, r7
 8013e20:	b280      	uxth	r0, r0
 8013e22:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013e26:	f107 0801 	add.w	r8, r7, #1
 8013e2a:	1c45      	adds	r5, r0, #1
 8013e2c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8013e30:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013e34:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8013e38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013e3a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013e3e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013e42:	4401      	add	r1, r0
 8013e44:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8013e48:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013e4a:	ea45 0c0c 	orr.w	ip, r5, ip
 8013e4e:	4402      	add	r2, r0
 8013e50:	ea4c 0c08 	orr.w	ip, ip, r8
 8013e54:	f82a cb02 	strh.w	ip, [sl], #2
 8013e58:	e7ac      	b.n	8013db4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8013e5a:	f04f 0800 	mov.w	r8, #0
 8013e5e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8013e62:	eb03 0008 	add.w	r0, r3, r8
 8013e66:	2800      	cmp	r0, #0
 8013e68:	dc41      	bgt.n	8013eee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8013e6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e6e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013e72:	9b01      	ldr	r3, [sp, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	f340 8097 	ble.w	8013fa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013e84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013e88:	eef0 6a62 	vmov.f32	s13, s5
 8013e8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013e94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013e98:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8013e9c:	eef0 6a43 	vmov.f32	s13, s6
 8013ea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013ea4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8013ea8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013eac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013eb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013eb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013eb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013ebc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013ec0:	ee12 2a90 	vmov	r2, s5
 8013ec4:	eef0 2a47 	vmov.f32	s5, s14
 8013ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ecc:	ee13 2a10 	vmov	r2, s6
 8013ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ed4:	eeb0 3a67 	vmov.f32	s6, s15
 8013ed8:	fb92 f3f3 	sdiv	r3, r2, r3
 8013edc:	9314      	str	r3, [sp, #80]	; 0x50
 8013ede:	9b01      	ldr	r3, [sp, #4]
 8013ee0:	9a05      	ldr	r2, [sp, #20]
 8013ee2:	3b01      	subs	r3, #1
 8013ee4:	9301      	str	r3, [sp, #4]
 8013ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ee8:	bf08      	it	eq
 8013eea:	4613      	moveq	r3, r2
 8013eec:	e72c      	b.n	8013d48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8013eee:	140f      	asrs	r7, r1, #16
 8013ef0:	d453      	bmi.n	8013f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013ef2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8013ef6:	42bd      	cmp	r5, r7
 8013ef8:	dd4f      	ble.n	8013f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013efa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8013efe:	d44c      	bmi.n	8013f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013f00:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013f04:	4560      	cmp	r0, ip
 8013f06:	dd48      	ble.n	8013f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013f08:	9803      	ldr	r0, [sp, #12]
 8013f0a:	b22d      	sxth	r5, r5
 8013f0c:	fb0c 0505 	mla	r5, ip, r5, r0
 8013f10:	5de8      	ldrb	r0, [r5, r7]
 8013f12:	9d04      	ldr	r5, [sp, #16]
 8013f14:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8013f18:	f06f 0501 	mvn.w	r5, #1
 8013f1c:	fb05 fb08 	mul.w	fp, r5, r8
 8013f20:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013f24:	f834 500b 	ldrh.w	r5, [r4, fp]
 8013f28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013f2c:	122f      	asrs	r7, r5, #8
 8013f2e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8013f32:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013f36:	00ed      	lsls	r5, r5, #3
 8013f38:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013f3c:	fb17 f706 	smulbb	r7, r7, r6
 8013f40:	b2ed      	uxtb	r5, r5
 8013f42:	fb19 f906 	smulbb	r9, r9, r6
 8013f46:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8013f4a:	10c7      	asrs	r7, r0, #3
 8013f4c:	fb15 f506 	smulbb	r5, r5, r6
 8013f50:	00c0      	lsls	r0, r0, #3
 8013f52:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8013f56:	fa1f fc8c 	uxth.w	ip, ip
 8013f5a:	b2c0      	uxtb	r0, r0
 8013f5c:	fb07 970a 	mla	r7, r7, sl, r9
 8013f60:	fb00 500a 	mla	r0, r0, sl, r5
 8013f64:	f10c 0501 	add.w	r5, ip, #1
 8013f68:	b2bf      	uxth	r7, r7
 8013f6a:	b280      	uxth	r0, r0
 8013f6c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013f70:	f107 0901 	add.w	r9, r7, #1
 8013f74:	1c45      	adds	r5, r0, #1
 8013f76:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8013f7a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013f7e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8013f82:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8013f86:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013f8a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8013f8e:	ea45 0c0c 	orr.w	ip, r5, ip
 8013f92:	ea4c 0c09 	orr.w	ip, ip, r9
 8013f96:	f824 c00b 	strh.w	ip, [r4, fp]
 8013f9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013f9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fa0:	4401      	add	r1, r0
 8013fa2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013fa4:	4402      	add	r2, r0
 8013fa6:	e75c      	b.n	8013e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013fa8:	b007      	add	sp, #28
 8013faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	4693      	mov	fp, r2
 8013fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013fba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013fbc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8013fbe:	6870      	ldr	r0, [r6, #4]
 8013fc0:	9100      	str	r1, [sp, #0]
 8013fc2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013fc6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8013fca:	fb00 2404 	mla	r4, r0, r4, r2
 8013fce:	6832      	ldr	r2, [r6, #0]
 8013fd0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013fd4:	682a      	ldr	r2, [r5, #0]
 8013fd6:	9201      	str	r2, [sp, #4]
 8013fd8:	686a      	ldr	r2, [r5, #4]
 8013fda:	3204      	adds	r2, #4
 8013fdc:	9202      	str	r2, [sp, #8]
 8013fde:	9a00      	ldr	r2, [sp, #0]
 8013fe0:	2a00      	cmp	r2, #0
 8013fe2:	dc03      	bgt.n	8013fec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013fe4:	f1bb 0f00 	cmp.w	fp, #0
 8013fe8:	f340 80a0 	ble.w	801412c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8013fec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013fee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8013ff2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ff8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013ffc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014000:	2b00      	cmp	r3, #0
 8014002:	dd0c      	ble.n	801401e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014004:	1406      	asrs	r6, r0, #16
 8014006:	d405      	bmi.n	8014014 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014008:	454e      	cmp	r6, r9
 801400a:	da03      	bge.n	8014014 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801400c:	1416      	asrs	r6, r2, #16
 801400e:	d401      	bmi.n	8014014 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014010:	4546      	cmp	r6, r8
 8014012:	db05      	blt.n	8014020 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014014:	4470      	add	r0, lr
 8014016:	4462      	add	r2, ip
 8014018:	3b01      	subs	r3, #1
 801401a:	3402      	adds	r4, #2
 801401c:	e7f0      	b.n	8014000 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801401e:	d00f      	beq.n	8014040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014020:	1e5e      	subs	r6, r3, #1
 8014022:	fb0e 0706 	mla	r7, lr, r6, r0
 8014026:	143f      	asrs	r7, r7, #16
 8014028:	d541      	bpl.n	80140ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801402a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801402e:	4698      	mov	r8, r3
 8014030:	9603      	str	r6, [sp, #12]
 8014032:	f1b8 0f00 	cmp.w	r8, #0
 8014036:	dc59      	bgt.n	80140ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801403c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014040:	9b00      	ldr	r3, [sp, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	dd72      	ble.n	801412c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8014046:	ee30 0a04 	vadd.f32	s0, s0, s8
 801404a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801404c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014050:	eeb0 6a62 	vmov.f32	s12, s5
 8014054:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014058:	ee31 1a05 	vadd.f32	s2, s2, s10
 801405c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014060:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014064:	eeb0 6a43 	vmov.f32	s12, s6
 8014068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801406c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014074:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014078:	ee77 2a62 	vsub.f32	s5, s14, s5
 801407c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014084:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014088:	ee12 2a90 	vmov	r2, s5
 801408c:	eef0 2a47 	vmov.f32	s5, s14
 8014090:	fb92 fef3 	sdiv	lr, r2, r3
 8014094:	ee13 2a10 	vmov	r2, s6
 8014098:	eeb0 3a67 	vmov.f32	s6, s15
 801409c:	fb92 fcf3 	sdiv	ip, r2, r3
 80140a0:	9b00      	ldr	r3, [sp, #0]
 80140a2:	3b01      	subs	r3, #1
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140a8:	bf08      	it	eq
 80140aa:	465b      	moveq	r3, fp
 80140ac:	e797      	b.n	8013fde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80140ae:	454f      	cmp	r7, r9
 80140b0:	dabb      	bge.n	801402a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80140b2:	fb0c 2606 	mla	r6, ip, r6, r2
 80140b6:	1436      	asrs	r6, r6, #16
 80140b8:	d4b7      	bmi.n	801402a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80140ba:	4546      	cmp	r6, r8
 80140bc:	dab5      	bge.n	801402a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80140be:	461e      	mov	r6, r3
 80140c0:	46a0      	mov	r8, r4
 80140c2:	2e00      	cmp	r6, #0
 80140c4:	ddb8      	ble.n	8014038 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80140c6:	1417      	asrs	r7, r2, #16
 80140c8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80140cc:	9901      	ldr	r1, [sp, #4]
 80140ce:	ea4f 4920 	mov.w	r9, r0, asr #16
 80140d2:	4462      	add	r2, ip
 80140d4:	4470      	add	r0, lr
 80140d6:	fb0a 1707 	mla	r7, sl, r7, r1
 80140da:	9902      	ldr	r1, [sp, #8]
 80140dc:	3e01      	subs	r6, #1
 80140de:	f817 7009 	ldrb.w	r7, [r7, r9]
 80140e2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80140e6:	f828 7b02 	strh.w	r7, [r8], #2
 80140ea:	e7ea      	b.n	80140c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80140ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 80140f0:	d417      	bmi.n	8014122 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80140f2:	68ae      	ldr	r6, [r5, #8]
 80140f4:	454e      	cmp	r6, r9
 80140f6:	dd14      	ble.n	8014122 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80140f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80140fc:	d411      	bmi.n	8014122 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80140fe:	68ef      	ldr	r7, [r5, #12]
 8014100:	4557      	cmp	r7, sl
 8014102:	dd0e      	ble.n	8014122 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8014104:	9f01      	ldr	r7, [sp, #4]
 8014106:	b236      	sxth	r6, r6
 8014108:	f06f 0101 	mvn.w	r1, #1
 801410c:	fb0a 7606 	mla	r6, sl, r6, r7
 8014110:	9f02      	ldr	r7, [sp, #8]
 8014112:	f816 6009 	ldrb.w	r6, [r6, r9]
 8014116:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801411a:	fb01 f608 	mul.w	r6, r1, r8
 801411e:	9903      	ldr	r1, [sp, #12]
 8014120:	538f      	strh	r7, [r1, r6]
 8014122:	4470      	add	r0, lr
 8014124:	4462      	add	r2, ip
 8014126:	f108 38ff 	add.w	r8, r8, #4294967295
 801412a:	e782      	b.n	8014032 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801412c:	b005      	add	sp, #20
 801412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014132 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014136:	b087      	sub	sp, #28
 8014138:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801413a:	9205      	str	r2, [sp, #20]
 801413c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014140:	9102      	str	r1, [sp, #8]
 8014142:	9203      	str	r2, [sp, #12]
 8014144:	6861      	ldr	r1, [r4, #4]
 8014146:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801414a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801414e:	fb01 2000 	mla	r0, r1, r0, r2
 8014152:	6822      	ldr	r2, [r4, #0]
 8014154:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014158:	9200      	str	r2, [sp, #0]
 801415a:	f8dc 2000 	ldr.w	r2, [ip]
 801415e:	9204      	str	r2, [sp, #16]
 8014160:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014164:	3204      	adds	r2, #4
 8014166:	9201      	str	r2, [sp, #4]
 8014168:	9a03      	ldr	r2, [sp, #12]
 801416a:	43d5      	mvns	r5, r2
 801416c:	b2ed      	uxtb	r5, r5
 801416e:	9a02      	ldr	r2, [sp, #8]
 8014170:	2a00      	cmp	r2, #0
 8014172:	dc03      	bgt.n	801417c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8014174:	9a05      	ldr	r2, [sp, #20]
 8014176:	2a00      	cmp	r2, #0
 8014178:	f340 812c 	ble.w	80143d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801417c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801417e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014182:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014188:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801418c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014190:	2b00      	cmp	r3, #0
 8014192:	dd10      	ble.n	80141b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8014194:	140c      	asrs	r4, r1, #16
 8014196:	d405      	bmi.n	80141a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014198:	4574      	cmp	r4, lr
 801419a:	da03      	bge.n	80141a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801419c:	1414      	asrs	r4, r2, #16
 801419e:	d401      	bmi.n	80141a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80141a0:	42bc      	cmp	r4, r7
 80141a2:	db09      	blt.n	80141b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80141a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80141a6:	3b01      	subs	r3, #1
 80141a8:	9800      	ldr	r0, [sp, #0]
 80141aa:	4421      	add	r1, r4
 80141ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80141ae:	3002      	adds	r0, #2
 80141b0:	4422      	add	r2, r4
 80141b2:	9000      	str	r0, [sp, #0]
 80141b4:	e7ec      	b.n	8014190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80141b6:	d071      	beq.n	801429c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80141b8:	1e5c      	subs	r4, r3, #1
 80141ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80141bc:	fb06 1604 	mla	r6, r6, r4, r1
 80141c0:	1436      	asrs	r6, r6, #16
 80141c2:	d45d      	bmi.n	8014280 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80141c4:	4576      	cmp	r6, lr
 80141c6:	da5b      	bge.n	8014280 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80141c8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80141ca:	fb06 2404 	mla	r4, r6, r4, r2
 80141ce:	1424      	asrs	r4, r4, #16
 80141d0:	d456      	bmi.n	8014280 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80141d2:	42bc      	cmp	r4, r7
 80141d4:	da54      	bge.n	8014280 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80141d6:	4698      	mov	r8, r3
 80141d8:	f8dd 9000 	ldr.w	r9, [sp]
 80141dc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80141e0:	f1b8 0f00 	cmp.w	r8, #0
 80141e4:	dd54      	ble.n	8014290 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80141e6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80141ea:	1414      	asrs	r4, r2, #16
 80141ec:	9804      	ldr	r0, [sp, #16]
 80141ee:	140e      	asrs	r6, r1, #16
 80141f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80141f4:	fb07 0404 	mla	r4, r7, r4, r0
 80141f8:	9801      	ldr	r0, [sp, #4]
 80141fa:	f814 e006 	ldrb.w	lr, [r4, r6]
 80141fe:	f8b9 4000 	ldrh.w	r4, [r9]
 8014202:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014206:	1227      	asrs	r7, r4, #8
 8014208:	eb00 0b0e 	add.w	fp, r0, lr
 801420c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8014210:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014214:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014216:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801421a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801421e:	4401      	add	r1, r0
 8014220:	fb16 f60a 	smulbb	r6, r6, sl
 8014224:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014226:	fb1b fb0a 	smulbb	fp, fp, sl
 801422a:	fb07 6705 	mla	r7, r7, r5, r6
 801422e:	10e6      	asrs	r6, r4, #3
 8014230:	00e4      	lsls	r4, r4, #3
 8014232:	4402      	add	r2, r0
 8014234:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014238:	b2bf      	uxth	r7, r7
 801423a:	b2e4      	uxtb	r4, r4
 801423c:	fb06 b605 	mla	r6, r6, r5, fp
 8014240:	fb14 f405 	smulbb	r4, r4, r5
 8014244:	b2b6      	uxth	r6, r6
 8014246:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801424a:	1c7c      	adds	r4, r7, #1
 801424c:	f106 0b01 	add.w	fp, r6, #1
 8014250:	fa1f fe8e 	uxth.w	lr, lr
 8014254:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8014258:	f10e 0401 	add.w	r4, lr, #1
 801425c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8014260:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014264:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8014268:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801426c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8014270:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8014274:	4327      	orrs	r7, r4
 8014276:	ea47 070b 	orr.w	r7, r7, fp
 801427a:	f829 7b02 	strh.w	r7, [r9], #2
 801427e:	e7af      	b.n	80141e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014280:	f04f 0e00 	mov.w	lr, #0
 8014284:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8014288:	eb03 040e 	add.w	r4, r3, lr
 801428c:	2c00      	cmp	r4, #0
 801428e:	dc43      	bgt.n	8014318 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8014290:	9a00      	ldr	r2, [sp, #0]
 8014292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014296:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801429a:	9300      	str	r3, [sp, #0]
 801429c:	9b02      	ldr	r3, [sp, #8]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f340 8098 	ble.w	80143d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80142a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142b2:	eef0 6a62 	vmov.f32	s13, s5
 80142b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80142ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80142c2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80142c6:	eef0 6a43 	vmov.f32	s13, s6
 80142ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80142ce:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80142d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80142d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80142da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80142de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80142e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80142e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80142ea:	ee12 2a90 	vmov	r2, s5
 80142ee:	eef0 2a47 	vmov.f32	s5, s14
 80142f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80142f6:	ee13 2a10 	vmov	r2, s6
 80142fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80142fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142fe:	eeb0 3a67 	vmov.f32	s6, s15
 8014302:	fb92 f3f3 	sdiv	r3, r2, r3
 8014306:	9314      	str	r3, [sp, #80]	; 0x50
 8014308:	9b02      	ldr	r3, [sp, #8]
 801430a:	9a05      	ldr	r2, [sp, #20]
 801430c:	3b01      	subs	r3, #1
 801430e:	9302      	str	r3, [sp, #8]
 8014310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014312:	bf08      	it	eq
 8014314:	4613      	moveq	r3, r2
 8014316:	e72a      	b.n	801416e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014318:	140f      	asrs	r7, r1, #16
 801431a:	d454      	bmi.n	80143c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801431c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014320:	42be      	cmp	r6, r7
 8014322:	dd50      	ble.n	80143c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8014324:	ea5f 4822 	movs.w	r8, r2, asr #16
 8014328:	d44d      	bmi.n	80143c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801432a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801432e:	4544      	cmp	r4, r8
 8014330:	dd49      	ble.n	80143c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8014332:	9c04      	ldr	r4, [sp, #16]
 8014334:	b236      	sxth	r6, r6
 8014336:	f06f 0001 	mvn.w	r0, #1
 801433a:	fb08 4606 	mla	r6, r8, r6, r4
 801433e:	9c01      	ldr	r4, [sp, #4]
 8014340:	fb00 fa0e 	mul.w	sl, r0, lr
 8014344:	9800      	ldr	r0, [sp, #0]
 8014346:	f816 8007 	ldrb.w	r8, [r6, r7]
 801434a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801434e:	eb04 0b08 	add.w	fp, r4, r8
 8014352:	f830 400a 	ldrh.w	r4, [r0, sl]
 8014356:	9801      	ldr	r0, [sp, #4]
 8014358:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801435c:	1227      	asrs	r7, r4, #8
 801435e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8014362:	fb16 f609 	smulbb	r6, r6, r9
 8014366:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801436a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801436e:	fb1b fb09 	smulbb	fp, fp, r9
 8014372:	fb07 6705 	mla	r7, r7, r5, r6
 8014376:	10e6      	asrs	r6, r4, #3
 8014378:	00e4      	lsls	r4, r4, #3
 801437a:	9800      	ldr	r0, [sp, #0]
 801437c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014380:	b2bf      	uxth	r7, r7
 8014382:	b2e4      	uxtb	r4, r4
 8014384:	fb06 b605 	mla	r6, r6, r5, fp
 8014388:	fb14 f405 	smulbb	r4, r4, r5
 801438c:	b2b6      	uxth	r6, r6
 801438e:	fb08 4809 	mla	r8, r8, r9, r4
 8014392:	1c7c      	adds	r4, r7, #1
 8014394:	f106 0b01 	add.w	fp, r6, #1
 8014398:	fa1f f888 	uxth.w	r8, r8
 801439c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80143a0:	f108 0401 	add.w	r4, r8, #1
 80143a4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80143a8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80143ac:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80143b0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80143b4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80143b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80143bc:	4327      	orrs	r7, r4
 80143be:	ea47 070b 	orr.w	r7, r7, fp
 80143c2:	f820 700a 	strh.w	r7, [r0, sl]
 80143c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80143c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80143cc:	4401      	add	r1, r0
 80143ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80143d0:	4402      	add	r2, r0
 80143d2:	e759      	b.n	8014288 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80143d4:	b007      	add	sp, #28
 80143d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080143dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80143dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e0:	b085      	sub	sp, #20
 80143e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80143e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80143ea:	9203      	str	r2, [sp, #12]
 80143ec:	6870      	ldr	r0, [r6, #4]
 80143ee:	686f      	ldr	r7, [r5, #4]
 80143f0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80143f4:	3704      	adds	r7, #4
 80143f6:	9101      	str	r1, [sp, #4]
 80143f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80143fc:	fb00 2404 	mla	r4, r0, r4, r2
 8014400:	6832      	ldr	r2, [r6, #0]
 8014402:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014406:	682a      	ldr	r2, [r5, #0]
 8014408:	9202      	str	r2, [sp, #8]
 801440a:	9a01      	ldr	r2, [sp, #4]
 801440c:	2a00      	cmp	r2, #0
 801440e:	dc03      	bgt.n	8014418 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014410:	9a03      	ldr	r2, [sp, #12]
 8014412:	2a00      	cmp	r2, #0
 8014414:	f340 80cc 	ble.w	80145b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8014418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801441a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801441e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014422:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014424:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8014428:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801442c:	2b00      	cmp	r3, #0
 801442e:	dd0d      	ble.n	801444c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014430:	1406      	asrs	r6, r0, #16
 8014432:	d405      	bmi.n	8014440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014434:	454e      	cmp	r6, r9
 8014436:	da03      	bge.n	8014440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014438:	1416      	asrs	r6, r2, #16
 801443a:	d401      	bmi.n	8014440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801443c:	4546      	cmp	r6, r8
 801443e:	db06      	blt.n	801444e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014440:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014442:	4460      	add	r0, ip
 8014444:	3b01      	subs	r3, #1
 8014446:	3402      	adds	r4, #2
 8014448:	4432      	add	r2, r6
 801444a:	e7ef      	b.n	801442c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801444c:	d00f      	beq.n	801446e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801444e:	1e5e      	subs	r6, r3, #1
 8014450:	fb0c 0e06 	mla	lr, ip, r6, r0
 8014454:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8014458:	d543      	bpl.n	80144e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801445a:	4698      	mov	r8, r3
 801445c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8014460:	f1b8 0f00 	cmp.w	r8, #0
 8014464:	dc71      	bgt.n	801454a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8014466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801446a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801446e:	9b01      	ldr	r3, [sp, #4]
 8014470:	2b00      	cmp	r3, #0
 8014472:	f340 809d 	ble.w	80145b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8014476:	ee30 0a04 	vadd.f32	s0, s0, s8
 801447a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801447c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014480:	eeb0 6a62 	vmov.f32	s12, s5
 8014484:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014488:	ee31 1a05 	vadd.f32	s2, s2, s10
 801448c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014490:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014494:	eeb0 6a43 	vmov.f32	s12, s6
 8014498:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801449c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80144a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80144a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80144a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80144ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80144b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80144b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80144b8:	ee12 2a90 	vmov	r2, s5
 80144bc:	eef0 2a47 	vmov.f32	s5, s14
 80144c0:	fb92 fcf3 	sdiv	ip, r2, r3
 80144c4:	ee13 2a10 	vmov	r2, s6
 80144c8:	eeb0 3a67 	vmov.f32	s6, s15
 80144cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80144d0:	9312      	str	r3, [sp, #72]	; 0x48
 80144d2:	9b01      	ldr	r3, [sp, #4]
 80144d4:	9a03      	ldr	r2, [sp, #12]
 80144d6:	3b01      	subs	r3, #1
 80144d8:	9301      	str	r3, [sp, #4]
 80144da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144dc:	bf08      	it	eq
 80144de:	4613      	moveq	r3, r2
 80144e0:	e793      	b.n	801440a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80144e2:	45ce      	cmp	lr, r9
 80144e4:	dab9      	bge.n	801445a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80144e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80144e8:	fb01 2606 	mla	r6, r1, r6, r2
 80144ec:	1436      	asrs	r6, r6, #16
 80144ee:	d4b4      	bmi.n	801445a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80144f0:	4546      	cmp	r6, r8
 80144f2:	dab2      	bge.n	801445a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80144f4:	4698      	mov	r8, r3
 80144f6:	46a2      	mov	sl, r4
 80144f8:	f1b8 0f00 	cmp.w	r8, #0
 80144fc:	ddb3      	ble.n	8014466 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80144fe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8014502:	1416      	asrs	r6, r2, #16
 8014504:	9902      	ldr	r1, [sp, #8]
 8014506:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801450a:	f108 38ff 	add.w	r8, r8, #4294967295
 801450e:	4460      	add	r0, ip
 8014510:	fb09 1606 	mla	r6, r9, r6, r1
 8014514:	4928      	ldr	r1, [pc, #160]	; (80145b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8014516:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801451a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801451e:	eb07 0b0e 	add.w	fp, r7, lr
 8014522:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8014526:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801452a:	00f6      	lsls	r6, r6, #3
 801452c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8014530:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014532:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014536:	440a      	add	r2, r1
 8014538:	ea49 0606 	orr.w	r6, r9, r6
 801453c:	f817 900e 	ldrb.w	r9, [r7, lr]
 8014540:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8014544:	f82a 6b02 	strh.w	r6, [sl], #2
 8014548:	e7d6      	b.n	80144f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801454a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801454e:	d429      	bmi.n	80145a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014550:	68ae      	ldr	r6, [r5, #8]
 8014552:	454e      	cmp	r6, r9
 8014554:	dd26      	ble.n	80145a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014556:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801455a:	d423      	bmi.n	80145a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801455c:	68e9      	ldr	r1, [r5, #12]
 801455e:	4559      	cmp	r1, fp
 8014560:	dd20      	ble.n	80145a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014562:	fa0f fe86 	sxth.w	lr, r6
 8014566:	9902      	ldr	r1, [sp, #8]
 8014568:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801456c:	f06f 0101 	mvn.w	r1, #1
 8014570:	f81e e009 	ldrb.w	lr, [lr, r9]
 8014574:	fb01 f908 	mul.w	r9, r1, r8
 8014578:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801457c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014580:	eb07 060e 	add.w	r6, r7, lr
 8014584:	f896 b002 	ldrb.w	fp, [r6, #2]
 8014588:	7876      	ldrb	r6, [r6, #1]
 801458a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801458e:	00f6      	lsls	r6, r6, #3
 8014590:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014594:	ea4b 0606 	orr.w	r6, fp, r6
 8014598:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801459c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80145a0:	f82a 6009 	strh.w	r6, [sl, r9]
 80145a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145a6:	4460      	add	r0, ip
 80145a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80145ac:	440a      	add	r2, r1
 80145ae:	e757      	b.n	8014460 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80145b0:	b005      	add	sp, #20
 80145b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b6:	bf00      	nop
 80145b8:	fffff800 	.word	0xfffff800

080145bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80145bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c0:	b087      	sub	sp, #28
 80145c2:	468b      	mov	fp, r1
 80145c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80145c8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80145ca:	9204      	str	r2, [sp, #16]
 80145cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80145d0:	6841      	ldr	r1, [r0, #4]
 80145d2:	9205      	str	r2, [sp, #20]
 80145d4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80145d8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80145dc:	fb01 2404 	mla	r4, r1, r4, r2
 80145e0:	6802      	ldr	r2, [r0, #0]
 80145e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80145e6:	f8dc 2000 	ldr.w	r2, [ip]
 80145ea:	9201      	str	r2, [sp, #4]
 80145ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80145f0:	3204      	adds	r2, #4
 80145f2:	9202      	str	r2, [sp, #8]
 80145f4:	f1bb 0f00 	cmp.w	fp, #0
 80145f8:	dc03      	bgt.n	8014602 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80145fa:	9a04      	ldr	r2, [sp, #16]
 80145fc:	2a00      	cmp	r2, #0
 80145fe:	f340 8138 	ble.w	8014872 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8014602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014604:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8014608:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801460c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801460e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8014612:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014616:	2b00      	cmp	r3, #0
 8014618:	dd0e      	ble.n	8014638 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801461a:	1402      	asrs	r2, r0, #16
 801461c:	d405      	bmi.n	801462a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801461e:	42ba      	cmp	r2, r7
 8014620:	da03      	bge.n	801462a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014622:	140a      	asrs	r2, r1, #16
 8014624:	d401      	bmi.n	801462a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014626:	42b2      	cmp	r2, r6
 8014628:	db07      	blt.n	801463a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801462a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801462c:	3b01      	subs	r3, #1
 801462e:	3402      	adds	r4, #2
 8014630:	4410      	add	r0, r2
 8014632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014634:	4411      	add	r1, r2
 8014636:	e7ee      	b.n	8014616 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014638:	d019      	beq.n	801466e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801463a:	1e5a      	subs	r2, r3, #1
 801463c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801463e:	fb05 0502 	mla	r5, r5, r2, r0
 8014642:	142d      	asrs	r5, r5, #16
 8014644:	d409      	bmi.n	801465a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014646:	42bd      	cmp	r5, r7
 8014648:	da07      	bge.n	801465a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801464a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801464c:	fb05 1202 	mla	r2, r5, r2, r1
 8014650:	1412      	asrs	r2, r2, #16
 8014652:	d402      	bmi.n	801465a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014654:	42b2      	cmp	r2, r6
 8014656:	f2c0 80ac 	blt.w	80147b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801465a:	f04f 0e00 	mov.w	lr, #0
 801465e:	eb03 020e 	add.w	r2, r3, lr
 8014662:	2a00      	cmp	r2, #0
 8014664:	dc3e      	bgt.n	80146e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8014666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801466a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801466e:	f1bb 0f00 	cmp.w	fp, #0
 8014672:	f340 80fe 	ble.w	8014872 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8014676:	ee30 0a04 	vadd.f32	s0, s0, s8
 801467a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801467c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014680:	f1bb 0b01 	subs.w	fp, fp, #1
 8014684:	eeb0 6a62 	vmov.f32	s12, s5
 8014688:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801468c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014690:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014694:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014698:	eeb0 6a43 	vmov.f32	s12, s6
 801469c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146a0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80146a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80146a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80146ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80146b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80146b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80146b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80146bc:	ee12 2a90 	vmov	r2, s5
 80146c0:	eef0 2a47 	vmov.f32	s5, s14
 80146c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80146c8:	ee13 2a10 	vmov	r2, s6
 80146cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80146ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146d0:	eeb0 3a67 	vmov.f32	s6, s15
 80146d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80146d8:	9a04      	ldr	r2, [sp, #16]
 80146da:	9314      	str	r3, [sp, #80]	; 0x50
 80146dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146de:	bf08      	it	eq
 80146e0:	4613      	moveq	r3, r2
 80146e2:	e787      	b.n	80145f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80146e4:	1406      	asrs	r6, r0, #16
 80146e6:	d45d      	bmi.n	80147a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80146e8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80146ec:	42b5      	cmp	r5, r6
 80146ee:	dd59      	ble.n	80147a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80146f0:	140f      	asrs	r7, r1, #16
 80146f2:	d457      	bmi.n	80147a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80146f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80146f8:	42ba      	cmp	r2, r7
 80146fa:	dd53      	ble.n	80147a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80146fc:	9a01      	ldr	r2, [sp, #4]
 80146fe:	b22d      	sxth	r5, r5
 8014700:	fb07 2505 	mla	r5, r7, r5, r2
 8014704:	5daa      	ldrb	r2, [r5, r6]
 8014706:	9d02      	ldr	r5, [sp, #8]
 8014708:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801470c:	0e2e      	lsrs	r6, r5, #24
 801470e:	d049      	beq.n	80147a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8014710:	f06f 0201 	mvn.w	r2, #1
 8014714:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014718:	fb02 f20e 	mul.w	r2, r2, lr
 801471c:	f834 8002 	ldrh.w	r8, [r4, r2]
 8014720:	9203      	str	r2, [sp, #12]
 8014722:	9a05      	ldr	r2, [sp, #20]
 8014724:	ea4f 2728 	mov.w	r7, r8, asr #8
 8014728:	4356      	muls	r6, r2
 801472a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801472e:	1c72      	adds	r2, r6, #1
 8014730:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8014734:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8014738:	b2ed      	uxtb	r5, r5
 801473a:	1212      	asrs	r2, r2, #8
 801473c:	fa1f f982 	uxth.w	r9, r2
 8014740:	43d2      	mvns	r2, r2
 8014742:	fb16 f609 	smulbb	r6, r6, r9
 8014746:	b2d2      	uxtb	r2, r2
 8014748:	fb15 f509 	smulbb	r5, r5, r9
 801474c:	fb07 6702 	mla	r7, r7, r2, r6
 8014750:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8014754:	fb1a fa09 	smulbb	sl, sl, r9
 8014758:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801475c:	b2bf      	uxth	r7, r7
 801475e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014762:	fa5f f888 	uxtb.w	r8, r8
 8014766:	fb06 a602 	mla	r6, r6, r2, sl
 801476a:	fb08 5502 	mla	r5, r8, r2, r5
 801476e:	1c7a      	adds	r2, r7, #1
 8014770:	b2b6      	uxth	r6, r6
 8014772:	b2ad      	uxth	r5, r5
 8014774:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8014778:	9a03      	ldr	r2, [sp, #12]
 801477a:	f105 0a01 	add.w	sl, r5, #1
 801477e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014782:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014786:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801478a:	ea4a 0707 	orr.w	r7, sl, r7
 801478e:	f106 0a01 	add.w	sl, r6, #1
 8014792:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014796:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801479a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801479e:	ea47 070a 	orr.w	r7, r7, sl
 80147a2:	52a7      	strh	r7, [r4, r2]
 80147a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80147a6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80147aa:	4410      	add	r0, r2
 80147ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80147ae:	4411      	add	r1, r2
 80147b0:	e755      	b.n	801465e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80147b2:	f04f 0800 	mov.w	r8, #0
 80147b6:	eba3 0208 	sub.w	r2, r3, r8
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	f77f af53 	ble.w	8014666 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80147c0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80147c4:	140a      	asrs	r2, r1, #16
 80147c6:	9f01      	ldr	r7, [sp, #4]
 80147c8:	1405      	asrs	r5, r0, #16
 80147ca:	fb06 7202 	mla	r2, r6, r2, r7
 80147ce:	5d52      	ldrb	r2, [r2, r5]
 80147d0:	9d02      	ldr	r5, [sp, #8]
 80147d2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80147d6:	0e2e      	lsrs	r6, r5, #24
 80147d8:	d044      	beq.n	8014864 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80147da:	9a05      	ldr	r2, [sp, #20]
 80147dc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80147e0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80147e4:	4356      	muls	r6, r2
 80147e6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80147ea:	1c72      	adds	r2, r6, #1
 80147ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80147f0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80147f4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80147f8:	b2ed      	uxtb	r5, r5
 80147fa:	1212      	asrs	r2, r2, #8
 80147fc:	fa1f f982 	uxth.w	r9, r2
 8014800:	43d2      	mvns	r2, r2
 8014802:	fb16 f609 	smulbb	r6, r6, r9
 8014806:	b2d2      	uxtb	r2, r2
 8014808:	fb15 f509 	smulbb	r5, r5, r9
 801480c:	fb07 6702 	mla	r7, r7, r2, r6
 8014810:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8014814:	fb1a fa09 	smulbb	sl, sl, r9
 8014818:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801481c:	b2bf      	uxth	r7, r7
 801481e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014822:	fa5f fe8e 	uxtb.w	lr, lr
 8014826:	fb06 a602 	mla	r6, r6, r2, sl
 801482a:	fb0e 5502 	mla	r5, lr, r2, r5
 801482e:	1c7a      	adds	r2, r7, #1
 8014830:	b2b6      	uxth	r6, r6
 8014832:	b2ad      	uxth	r5, r5
 8014834:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8014838:	f105 0a01 	add.w	sl, r5, #1
 801483c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014840:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014844:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014848:	ea4a 0707 	orr.w	r7, sl, r7
 801484c:	f106 0a01 	add.w	sl, r6, #1
 8014850:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014854:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014858:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801485c:	ea47 070a 	orr.w	r7, r7, sl
 8014860:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8014864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014866:	f108 0801 	add.w	r8, r8, #1
 801486a:	4410      	add	r0, r2
 801486c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801486e:	4411      	add	r1, r2
 8014870:	e7a1      	b.n	80147b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8014872:	b007      	add	sp, #28
 8014874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014878 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	b085      	sub	sp, #20
 801487e:	468b      	mov	fp, r1
 8014880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014884:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014886:	9203      	str	r2, [sp, #12]
 8014888:	6841      	ldr	r1, [r0, #4]
 801488a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801488e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014892:	fb01 2404 	mla	r4, r1, r4, r2
 8014896:	6802      	ldr	r2, [r0, #0]
 8014898:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801489c:	f8de 2000 	ldr.w	r2, [lr]
 80148a0:	9200      	str	r2, [sp, #0]
 80148a2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80148a6:	3204      	adds	r2, #4
 80148a8:	9201      	str	r2, [sp, #4]
 80148aa:	f1bb 0f00 	cmp.w	fp, #0
 80148ae:	dc03      	bgt.n	80148b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80148b0:	9a03      	ldr	r2, [sp, #12]
 80148b2:	2a00      	cmp	r2, #0
 80148b4:	f340 8153 	ble.w	8014b5e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80148b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80148ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80148be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80148c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148c4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80148c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	dd0e      	ble.n	80148ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80148d0:	1408      	asrs	r0, r1, #16
 80148d2:	d405      	bmi.n	80148e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148d4:	42b8      	cmp	r0, r7
 80148d6:	da03      	bge.n	80148e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148d8:	1410      	asrs	r0, r2, #16
 80148da:	d401      	bmi.n	80148e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148dc:	42b0      	cmp	r0, r6
 80148de:	db07      	blt.n	80148f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80148e0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80148e2:	3b01      	subs	r3, #1
 80148e4:	3402      	adds	r4, #2
 80148e6:	4401      	add	r1, r0
 80148e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80148ea:	4402      	add	r2, r0
 80148ec:	e7ee      	b.n	80148cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80148ee:	d017      	beq.n	8014920 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80148f0:	1e58      	subs	r0, r3, #1
 80148f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80148f4:	fb05 1500 	mla	r5, r5, r0, r1
 80148f8:	142d      	asrs	r5, r5, #16
 80148fa:	d409      	bmi.n	8014910 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80148fc:	42bd      	cmp	r5, r7
 80148fe:	da07      	bge.n	8014910 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014900:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014902:	fb05 2000 	mla	r0, r5, r0, r2
 8014906:	1400      	asrs	r0, r0, #16
 8014908:	d402      	bmi.n	8014910 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801490a:	42b0      	cmp	r0, r6
 801490c:	f2c0 80bc 	blt.w	8014a88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8014910:	2600      	movs	r6, #0
 8014912:	1998      	adds	r0, r3, r6
 8014914:	2800      	cmp	r0, #0
 8014916:	dc3e      	bgt.n	8014996 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801491c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014920:	f1bb 0f00 	cmp.w	fp, #0
 8014924:	f340 811b 	ble.w	8014b5e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8014928:	ee30 0a04 	vadd.f32	s0, s0, s8
 801492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801492e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014932:	f1bb 0b01 	subs.w	fp, fp, #1
 8014936:	eeb0 6a62 	vmov.f32	s12, s5
 801493a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801493e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014942:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014946:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801494a:	eeb0 6a43 	vmov.f32	s12, s6
 801494e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014952:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014956:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801495a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801495e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014962:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014966:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801496a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801496e:	ee12 2a90 	vmov	r2, s5
 8014972:	eef0 2a47 	vmov.f32	s5, s14
 8014976:	fb92 f3f3 	sdiv	r3, r2, r3
 801497a:	ee13 2a10 	vmov	r2, s6
 801497e:	9311      	str	r3, [sp, #68]	; 0x44
 8014980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014982:	eeb0 3a67 	vmov.f32	s6, s15
 8014986:	fb92 f3f3 	sdiv	r3, r2, r3
 801498a:	9a03      	ldr	r2, [sp, #12]
 801498c:	9312      	str	r3, [sp, #72]	; 0x48
 801498e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014990:	bf08      	it	eq
 8014992:	4613      	moveq	r3, r2
 8014994:	e789      	b.n	80148aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8014996:	140f      	asrs	r7, r1, #16
 8014998:	d426      	bmi.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801499a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801499e:	42bd      	cmp	r5, r7
 80149a0:	dd22      	ble.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80149a2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80149a6:	d41f      	bmi.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80149a8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80149ac:	4560      	cmp	r0, ip
 80149ae:	dd1b      	ble.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80149b0:	9800      	ldr	r0, [sp, #0]
 80149b2:	b22d      	sxth	r5, r5
 80149b4:	fb0c 0505 	mla	r5, ip, r5, r0
 80149b8:	5de8      	ldrb	r0, [r5, r7]
 80149ba:	9d01      	ldr	r5, [sp, #4]
 80149bc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80149c0:	0e07      	lsrs	r7, r0, #24
 80149c2:	2fff      	cmp	r7, #255	; 0xff
 80149c4:	d116      	bne.n	80149f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80149c6:	f06f 0501 	mvn.w	r5, #1
 80149ca:	fb05 f706 	mul.w	r7, r5, r6
 80149ce:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80149d2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80149d6:	0945      	lsrs	r5, r0, #5
 80149d8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80149dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80149e0:	ea4c 0505 	orr.w	r5, ip, r5
 80149e4:	4305      	orrs	r5, r0
 80149e6:	53e5      	strh	r5, [r4, r7]
 80149e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80149ea:	3e01      	subs	r6, #1
 80149ec:	4401      	add	r1, r0
 80149ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80149f0:	4402      	add	r2, r0
 80149f2:	e78e      	b.n	8014912 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80149f4:	b2fd      	uxtb	r5, r7
 80149f6:	2f00      	cmp	r7, #0
 80149f8:	d0f6      	beq.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80149fa:	f06f 0701 	mvn.w	r7, #1
 80149fe:	fa1f f985 	uxth.w	r9, r5
 8014a02:	43ed      	mvns	r5, r5
 8014a04:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014a08:	4377      	muls	r7, r6
 8014a0a:	fb1a fa09 	smulbb	sl, sl, r9
 8014a0e:	b2ed      	uxtb	r5, r5
 8014a10:	f834 8007 	ldrh.w	r8, [r4, r7]
 8014a14:	9702      	str	r7, [sp, #8]
 8014a16:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014a1a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8014a1e:	fb17 f709 	smulbb	r7, r7, r9
 8014a22:	b2c0      	uxtb	r0, r0
 8014a24:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014a28:	fb10 f009 	smulbb	r0, r0, r9
 8014a2c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8014a30:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8014a34:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014a38:	fa1f fc8c 	uxth.w	ip, ip
 8014a3c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014a40:	fa5f f888 	uxtb.w	r8, r8
 8014a44:	fb07 a705 	mla	r7, r7, r5, sl
 8014a48:	fb08 0005 	mla	r0, r8, r5, r0
 8014a4c:	f10c 0501 	add.w	r5, ip, #1
 8014a50:	b2bf      	uxth	r7, r7
 8014a52:	b280      	uxth	r0, r0
 8014a54:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014a58:	f100 0a01 	add.w	sl, r0, #1
 8014a5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014a60:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8014a64:	9802      	ldr	r0, [sp, #8]
 8014a66:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014a6a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014a6e:	f107 0a01 	add.w	sl, r7, #1
 8014a72:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8014a76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014a7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014a7e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014a82:	f824 c000 	strh.w	ip, [r4, r0]
 8014a86:	e7af      	b.n	80149e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014a88:	f04f 0800 	mov.w	r8, #0
 8014a8c:	eba3 0008 	sub.w	r0, r3, r8
 8014a90:	2800      	cmp	r0, #0
 8014a92:	f77f af41 	ble.w	8014918 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014a96:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8014a9a:	1410      	asrs	r0, r2, #16
 8014a9c:	9f00      	ldr	r7, [sp, #0]
 8014a9e:	140d      	asrs	r5, r1, #16
 8014aa0:	fb06 7000 	mla	r0, r6, r0, r7
 8014aa4:	5d40      	ldrb	r0, [r0, r5]
 8014aa6:	9d01      	ldr	r5, [sp, #4]
 8014aa8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8014aac:	0e2e      	lsrs	r6, r5, #24
 8014aae:	2eff      	cmp	r6, #255	; 0xff
 8014ab0:	d112      	bne.n	8014ad8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8014ab2:	482c      	ldr	r0, [pc, #176]	; (8014b64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8014ab4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8014ab8:	0968      	lsrs	r0, r5, #5
 8014aba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8014abe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8014ac2:	4330      	orrs	r0, r6
 8014ac4:	4328      	orrs	r0, r5
 8014ac6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8014aca:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014acc:	f108 0801 	add.w	r8, r8, #1
 8014ad0:	4401      	add	r1, r0
 8014ad2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ad4:	4402      	add	r2, r0
 8014ad6:	e7d9      	b.n	8014a8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8014ad8:	b2f0      	uxtb	r0, r6
 8014ada:	2e00      	cmp	r6, #0
 8014adc:	d0f5      	beq.n	8014aca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8014ade:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8014ae2:	fa1f f980 	uxth.w	r9, r0
 8014ae6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8014aea:	43c0      	mvns	r0, r0
 8014aec:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014af0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014af4:	fb16 f609 	smulbb	r6, r6, r9
 8014af8:	b2c0      	uxtb	r0, r0
 8014afa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014afe:	b2ed      	uxtb	r5, r5
 8014b00:	fb1a fa09 	smulbb	sl, sl, r9
 8014b04:	fb07 6700 	mla	r7, r7, r0, r6
 8014b08:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8014b0c:	fb15 f509 	smulbb	r5, r5, r9
 8014b10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014b14:	b2bf      	uxth	r7, r7
 8014b16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014b1a:	fa5f fc8c 	uxtb.w	ip, ip
 8014b1e:	fb06 a600 	mla	r6, r6, r0, sl
 8014b22:	fb0c 5500 	mla	r5, ip, r0, r5
 8014b26:	1c78      	adds	r0, r7, #1
 8014b28:	b2b6      	uxth	r6, r6
 8014b2a:	b2ad      	uxth	r5, r5
 8014b2c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8014b30:	f105 0a01 	add.w	sl, r5, #1
 8014b34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014b38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014b3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014b40:	ea4a 0707 	orr.w	r7, sl, r7
 8014b44:	f106 0a01 	add.w	sl, r6, #1
 8014b48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014b4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014b50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014b54:	ea47 070a 	orr.w	r7, r7, sl
 8014b58:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8014b5c:	e7b5      	b.n	8014aca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8014b5e:	b005      	add	sp, #20
 8014b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b64:	fffff800 	.word	0xfffff800

08014b68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6c:	b087      	sub	sp, #28
 8014b6e:	468b      	mov	fp, r1
 8014b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014b76:	9204      	str	r2, [sp, #16]
 8014b78:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014b7c:	6861      	ldr	r1, [r4, #4]
 8014b7e:	9205      	str	r2, [sp, #20]
 8014b80:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8014b84:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8014b88:	fb01 2000 	mla	r0, r1, r0, r2
 8014b8c:	6822      	ldr	r2, [r4, #0]
 8014b8e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8014b92:	f8de 2000 	ldr.w	r2, [lr]
 8014b96:	9201      	str	r2, [sp, #4]
 8014b98:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014b9c:	9202      	str	r2, [sp, #8]
 8014b9e:	f1bb 0f00 	cmp.w	fp, #0
 8014ba2:	dc03      	bgt.n	8014bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8014ba4:	9a04      	ldr	r2, [sp, #16]
 8014ba6:	2a00      	cmp	r2, #0
 8014ba8:	f340 8142 	ble.w	8014e30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8014bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014bae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8014bb2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bb8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8014bbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	dd0e      	ble.n	8014be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8014bc4:	140c      	asrs	r4, r1, #16
 8014bc6:	d405      	bmi.n	8014bd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014bc8:	42bc      	cmp	r4, r7
 8014bca:	da03      	bge.n	8014bd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014bcc:	1414      	asrs	r4, r2, #16
 8014bce:	d401      	bmi.n	8014bd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014bd0:	42b4      	cmp	r4, r6
 8014bd2:	db07      	blt.n	8014be4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014bd4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014bd6:	3b01      	subs	r3, #1
 8014bd8:	3002      	adds	r0, #2
 8014bda:	4421      	add	r1, r4
 8014bdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014bde:	4422      	add	r2, r4
 8014be0:	e7ee      	b.n	8014bc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8014be2:	d019      	beq.n	8014c18 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8014be4:	1e5c      	subs	r4, r3, #1
 8014be6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014be8:	fb05 1504 	mla	r5, r5, r4, r1
 8014bec:	142d      	asrs	r5, r5, #16
 8014bee:	d409      	bmi.n	8014c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014bf0:	42bd      	cmp	r5, r7
 8014bf2:	da07      	bge.n	8014c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014bf4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014bf6:	fb05 2404 	mla	r4, r5, r4, r2
 8014bfa:	1424      	asrs	r4, r4, #16
 8014bfc:	d402      	bmi.n	8014c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014bfe:	42b4      	cmp	r4, r6
 8014c00:	f2c0 80b1 	blt.w	8014d66 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8014c04:	f04f 0800 	mov.w	r8, #0
 8014c08:	eb03 0408 	add.w	r4, r3, r8
 8014c0c:	2c00      	cmp	r4, #0
 8014c0e:	dc3e      	bgt.n	8014c8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014c18:	f1bb 0f00 	cmp.w	fp, #0
 8014c1c:	f340 8108 	ble.w	8014e30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8014c20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014c2a:	f1bb 0b01 	subs.w	fp, fp, #1
 8014c2e:	eeb0 6a62 	vmov.f32	s12, s5
 8014c32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014c36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014c3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014c3e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014c42:	eeb0 6a43 	vmov.f32	s12, s6
 8014c46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014c4a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014c4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014c52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014c56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014c5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014c5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014c62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014c66:	ee12 2a90 	vmov	r2, s5
 8014c6a:	eef0 2a47 	vmov.f32	s5, s14
 8014c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c72:	ee13 2a10 	vmov	r2, s6
 8014c76:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c7a:	eeb0 3a67 	vmov.f32	s6, s15
 8014c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c82:	9a04      	ldr	r2, [sp, #16]
 8014c84:	9314      	str	r3, [sp, #80]	; 0x50
 8014c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c88:	bf08      	it	eq
 8014c8a:	4613      	moveq	r3, r2
 8014c8c:	e787      	b.n	8014b9e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014c8e:	140e      	asrs	r6, r1, #16
 8014c90:	d462      	bmi.n	8014d58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014c92:	f8de 5008 	ldr.w	r5, [lr, #8]
 8014c96:	42b5      	cmp	r5, r6
 8014c98:	dd5e      	ble.n	8014d58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014c9a:	1417      	asrs	r7, r2, #16
 8014c9c:	d45c      	bmi.n	8014d58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014c9e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8014ca2:	42bc      	cmp	r4, r7
 8014ca4:	dd58      	ble.n	8014d58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014ca6:	b22d      	sxth	r5, r5
 8014ca8:	9c02      	ldr	r4, [sp, #8]
 8014caa:	fb07 6505 	mla	r5, r7, r5, r6
 8014cae:	5d66      	ldrb	r6, [r4, r5]
 8014cb0:	2e00      	cmp	r6, #0
 8014cb2:	d051      	beq.n	8014d58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014cb4:	9c01      	ldr	r4, [sp, #4]
 8014cb6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8014cba:	f06f 0401 	mvn.w	r4, #1
 8014cbe:	fb04 f408 	mul.w	r4, r4, r8
 8014cc2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8014cc6:	5b05      	ldrh	r5, [r0, r4]
 8014cc8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014ccc:	9403      	str	r4, [sp, #12]
 8014cce:	9c05      	ldr	r4, [sp, #20]
 8014cd0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014cd4:	4366      	muls	r6, r4
 8014cd6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014cda:	1c74      	adds	r4, r6, #1
 8014cdc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8014ce0:	122e      	asrs	r6, r5, #8
 8014ce2:	1224      	asrs	r4, r4, #8
 8014ce4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014ce8:	00ed      	lsls	r5, r5, #3
 8014cea:	b2a7      	uxth	r7, r4
 8014cec:	43e4      	mvns	r4, r4
 8014cee:	b2ed      	uxtb	r5, r5
 8014cf0:	b2e4      	uxtb	r4, r4
 8014cf2:	fb16 f604 	smulbb	r6, r6, r4
 8014cf6:	fb15 f504 	smulbb	r5, r5, r4
 8014cfa:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014cfe:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8014d02:	fb1a fa04 	smulbb	sl, sl, r4
 8014d06:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014d0a:	fa1f fc8c 	uxth.w	ip, ip
 8014d0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014d12:	fa5f f989 	uxtb.w	r9, r9
 8014d16:	fb06 a607 	mla	r6, r6, r7, sl
 8014d1a:	f10c 0401 	add.w	r4, ip, #1
 8014d1e:	fb09 5507 	mla	r5, r9, r7, r5
 8014d22:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8014d26:	9c03      	ldr	r4, [sp, #12]
 8014d28:	b2ad      	uxth	r5, r5
 8014d2a:	b2b6      	uxth	r6, r6
 8014d2c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014d30:	f105 0a01 	add.w	sl, r5, #1
 8014d34:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014d38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014d3c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014d40:	f106 0a01 	add.w	sl, r6, #1
 8014d44:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014d48:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014d4c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014d50:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014d54:	f820 c004 	strh.w	ip, [r0, r4]
 8014d58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d5e:	4421      	add	r1, r4
 8014d60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014d62:	4422      	add	r2, r4
 8014d64:	e750      	b.n	8014c08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014d66:	f04f 0900 	mov.w	r9, #0
 8014d6a:	eba3 0409 	sub.w	r4, r3, r9
 8014d6e:	2c00      	cmp	r4, #0
 8014d70:	f77f af4e 	ble.w	8014c10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8014d74:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8014d78:	140d      	asrs	r5, r1, #16
 8014d7a:	1414      	asrs	r4, r2, #16
 8014d7c:	fb06 5404 	mla	r4, r6, r4, r5
 8014d80:	9d02      	ldr	r5, [sp, #8]
 8014d82:	5d2e      	ldrb	r6, [r5, r4]
 8014d84:	2e00      	cmp	r6, #0
 8014d86:	d04c      	beq.n	8014e22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014d88:	9d01      	ldr	r5, [sp, #4]
 8014d8a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8014d8e:	9c05      	ldr	r4, [sp, #20]
 8014d90:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8014d94:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8014d98:	4366      	muls	r6, r4
 8014d9a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014d9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014da2:	1c74      	adds	r4, r6, #1
 8014da4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014da8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8014dac:	122e      	asrs	r6, r5, #8
 8014dae:	1224      	asrs	r4, r4, #8
 8014db0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014db4:	00ed      	lsls	r5, r5, #3
 8014db6:	b2a7      	uxth	r7, r4
 8014db8:	43e4      	mvns	r4, r4
 8014dba:	b2ed      	uxtb	r5, r5
 8014dbc:	b2e4      	uxtb	r4, r4
 8014dbe:	fb16 f604 	smulbb	r6, r6, r4
 8014dc2:	fb15 f504 	smulbb	r5, r5, r4
 8014dc6:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014dca:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8014dce:	fb1a fa04 	smulbb	sl, sl, r4
 8014dd2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014dd6:	fa1f fc8c 	uxth.w	ip, ip
 8014dda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014dde:	fa5f f888 	uxtb.w	r8, r8
 8014de2:	fb06 a607 	mla	r6, r6, r7, sl
 8014de6:	f10c 0401 	add.w	r4, ip, #1
 8014dea:	fb08 5507 	mla	r5, r8, r7, r5
 8014dee:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8014df2:	b2ad      	uxth	r5, r5
 8014df4:	b2b6      	uxth	r6, r6
 8014df6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014dfa:	f105 0a01 	add.w	sl, r5, #1
 8014dfe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014e02:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014e06:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014e0a:	f106 0a01 	add.w	sl, r6, #1
 8014e0e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014e12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014e16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014e1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014e1e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8014e22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014e24:	f109 0901 	add.w	r9, r9, #1
 8014e28:	4421      	add	r1, r4
 8014e2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014e2c:	4422      	add	r2, r4
 8014e2e:	e79c      	b.n	8014d6a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8014e30:	b007      	add	sp, #28
 8014e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e36 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3a:	b085      	sub	sp, #20
 8014e3c:	468b      	mov	fp, r1
 8014e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014e44:	9203      	str	r2, [sp, #12]
 8014e46:	6861      	ldr	r1, [r4, #4]
 8014e48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014e4c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8014e50:	fb01 2000 	mla	r0, r1, r0, r2
 8014e54:	6822      	ldr	r2, [r4, #0]
 8014e56:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8014e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8014e5e:	9200      	str	r2, [sp, #0]
 8014e60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8014e64:	9201      	str	r2, [sp, #4]
 8014e66:	f1bb 0f00 	cmp.w	fp, #0
 8014e6a:	dc03      	bgt.n	8014e74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8014e6c:	9a03      	ldr	r2, [sp, #12]
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	f340 8146 	ble.w	8015100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8014e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e76:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8014e7a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014e7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e80:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8014e84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	dd0e      	ble.n	8014eaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014e8c:	140c      	asrs	r4, r1, #16
 8014e8e:	d405      	bmi.n	8014e9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014e90:	42bc      	cmp	r4, r7
 8014e92:	da03      	bge.n	8014e9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014e94:	1414      	asrs	r4, r2, #16
 8014e96:	d401      	bmi.n	8014e9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014e98:	42b4      	cmp	r4, r6
 8014e9a:	db07      	blt.n	8014eac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014e9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	3002      	adds	r0, #2
 8014ea2:	4421      	add	r1, r4
 8014ea4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014ea6:	4422      	add	r2, r4
 8014ea8:	e7ee      	b.n	8014e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014eaa:	d017      	beq.n	8014edc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014eac:	1e5c      	subs	r4, r3, #1
 8014eae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014eb0:	fb05 1504 	mla	r5, r5, r4, r1
 8014eb4:	142d      	asrs	r5, r5, #16
 8014eb6:	d409      	bmi.n	8014ecc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014eb8:	42bd      	cmp	r5, r7
 8014eba:	da07      	bge.n	8014ecc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014ebc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014ebe:	fb05 2404 	mla	r4, r5, r4, r2
 8014ec2:	1424      	asrs	r4, r4, #16
 8014ec4:	d402      	bmi.n	8014ecc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014ec6:	42b4      	cmp	r4, r6
 8014ec8:	f2c0 80b3 	blt.w	8015032 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8014ecc:	2600      	movs	r6, #0
 8014ece:	199c      	adds	r4, r3, r6
 8014ed0:	2c00      	cmp	r4, #0
 8014ed2:	dc3e      	bgt.n	8014f52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8014ed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ed8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014edc:	f1bb 0f00 	cmp.w	fp, #0
 8014ee0:	f340 810e 	ble.w	8015100 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8014ee4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014eee:	f1bb 0b01 	subs.w	fp, fp, #1
 8014ef2:	eeb0 6a62 	vmov.f32	s12, s5
 8014ef6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014efa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014efe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f02:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014f06:	eeb0 6a43 	vmov.f32	s12, s6
 8014f0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f0e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014f12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014f16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014f1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014f1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014f22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014f26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014f2a:	ee12 2a90 	vmov	r2, s5
 8014f2e:	eef0 2a47 	vmov.f32	s5, s14
 8014f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f36:	ee13 2a10 	vmov	r2, s6
 8014f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8014f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f3e:	eeb0 3a67 	vmov.f32	s6, s15
 8014f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f46:	9a03      	ldr	r2, [sp, #12]
 8014f48:	9312      	str	r3, [sp, #72]	; 0x48
 8014f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f4c:	bf08      	it	eq
 8014f4e:	4613      	moveq	r3, r2
 8014f50:	e789      	b.n	8014e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8014f52:	140f      	asrs	r7, r1, #16
 8014f54:	d418      	bmi.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014f56:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014f5a:	42bd      	cmp	r5, r7
 8014f5c:	dd14      	ble.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014f5e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014f62:	d411      	bmi.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014f64:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8014f68:	4564      	cmp	r4, ip
 8014f6a:	dd0d      	ble.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014f6c:	b22d      	sxth	r5, r5
 8014f6e:	9c01      	ldr	r4, [sp, #4]
 8014f70:	fb0c 7505 	mla	r5, ip, r5, r7
 8014f74:	5d64      	ldrb	r4, [r4, r5]
 8014f76:	2cff      	cmp	r4, #255	; 0xff
 8014f78:	d10c      	bne.n	8014f94 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8014f7a:	9c00      	ldr	r4, [sp, #0]
 8014f7c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8014f80:	f06f 0401 	mvn.w	r4, #1
 8014f84:	4374      	muls	r4, r6
 8014f86:	5305      	strh	r5, [r0, r4]
 8014f88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014f8a:	3e01      	subs	r6, #1
 8014f8c:	4421      	add	r1, r4
 8014f8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014f90:	4422      	add	r2, r4
 8014f92:	e79c      	b.n	8014ece <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014f94:	2c00      	cmp	r4, #0
 8014f96:	d0f7      	beq.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014f98:	9f00      	ldr	r7, [sp, #0]
 8014f9a:	fa1f fc84 	uxth.w	ip, r4
 8014f9e:	43e4      	mvns	r4, r4
 8014fa0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8014fa4:	f06f 0501 	mvn.w	r5, #1
 8014fa8:	b2e4      	uxtb	r4, r4
 8014faa:	4375      	muls	r5, r6
 8014fac:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8014fb0:	9502      	str	r5, [sp, #8]
 8014fb2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8014fb6:	5b45      	ldrh	r5, [r0, r5]
 8014fb8:	122f      	asrs	r7, r5, #8
 8014fba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014fbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014fc2:	00ed      	lsls	r5, r5, #3
 8014fc4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014fc8:	fb17 f704 	smulbb	r7, r7, r4
 8014fcc:	b2ed      	uxtb	r5, r5
 8014fce:	fb1a fa04 	smulbb	sl, sl, r4
 8014fd2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8014fd6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8014fda:	fb15 f504 	smulbb	r5, r5, r4
 8014fde:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014fe2:	fa1f fe8e 	uxth.w	lr, lr
 8014fe6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014fea:	fa5f f989 	uxtb.w	r9, r9
 8014fee:	fb07 a70c 	mla	r7, r7, ip, sl
 8014ff2:	f10e 0401 	add.w	r4, lr, #1
 8014ff6:	fb09 550c 	mla	r5, r9, ip, r5
 8014ffa:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8014ffe:	9c02      	ldr	r4, [sp, #8]
 8015000:	b2ad      	uxth	r5, r5
 8015002:	b2bf      	uxth	r7, r7
 8015004:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8015008:	f105 0a01 	add.w	sl, r5, #1
 801500c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015010:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015014:	ea4a 0e0e 	orr.w	lr, sl, lr
 8015018:	f107 0a01 	add.w	sl, r7, #1
 801501c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015020:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015024:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015028:	ea4e 0e0a 	orr.w	lr, lr, sl
 801502c:	f820 e004 	strh.w	lr, [r0, r4]
 8015030:	e7aa      	b.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015032:	f04f 0900 	mov.w	r9, #0
 8015036:	eba3 0409 	sub.w	r4, r3, r9
 801503a:	2c00      	cmp	r4, #0
 801503c:	f77f af4a 	ble.w	8014ed4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015040:	1414      	asrs	r4, r2, #16
 8015042:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8015046:	140d      	asrs	r5, r1, #16
 8015048:	fb06 5504 	mla	r5, r6, r4, r5
 801504c:	9c01      	ldr	r4, [sp, #4]
 801504e:	5d64      	ldrb	r4, [r4, r5]
 8015050:	2cff      	cmp	r4, #255	; 0xff
 8015052:	d10b      	bne.n	801506c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8015054:	9c00      	ldr	r4, [sp, #0]
 8015056:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801505a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801505e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015060:	f109 0901 	add.w	r9, r9, #1
 8015064:	4421      	add	r1, r4
 8015066:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015068:	4422      	add	r2, r4
 801506a:	e7e4      	b.n	8015036 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801506c:	2c00      	cmp	r4, #0
 801506e:	d0f6      	beq.n	801505e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8015070:	9e00      	ldr	r6, [sp, #0]
 8015072:	b2a7      	uxth	r7, r4
 8015074:	43e4      	mvns	r4, r4
 8015076:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801507a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801507e:	b2e4      	uxtb	r4, r4
 8015080:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015084:	122e      	asrs	r6, r5, #8
 8015086:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801508a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801508e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015092:	00ed      	lsls	r5, r5, #3
 8015094:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015098:	fb16 f604 	smulbb	r6, r6, r4
 801509c:	b2ed      	uxtb	r5, r5
 801509e:	fb1a fa04 	smulbb	sl, sl, r4
 80150a2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80150a6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80150aa:	fb15 f504 	smulbb	r5, r5, r4
 80150ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80150b2:	fa1f fc8c 	uxth.w	ip, ip
 80150b6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80150ba:	fa5f fe8e 	uxtb.w	lr, lr
 80150be:	fb06 a607 	mla	r6, r6, r7, sl
 80150c2:	f10c 0401 	add.w	r4, ip, #1
 80150c6:	fb0e 5507 	mla	r5, lr, r7, r5
 80150ca:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80150ce:	b2ad      	uxth	r5, r5
 80150d0:	b2b6      	uxth	r6, r6
 80150d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80150d6:	f105 0a01 	add.w	sl, r5, #1
 80150da:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80150de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80150e2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80150e6:	f106 0a01 	add.w	sl, r6, #1
 80150ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80150ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80150f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80150f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80150fa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80150fe:	e7ae      	b.n	801505e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8015100:	b005      	add	sp, #20
 8015102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015106 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510a:	b085      	sub	sp, #20
 801510c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801510e:	9203      	str	r2, [sp, #12]
 8015110:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015114:	9100      	str	r1, [sp, #0]
 8015116:	9201      	str	r2, [sp, #4]
 8015118:	6841      	ldr	r1, [r0, #4]
 801511a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801511e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015122:	fb01 2404 	mla	r4, r1, r4, r2
 8015126:	6802      	ldr	r2, [r0, #0]
 8015128:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801512c:	f8de 2000 	ldr.w	r2, [lr]
 8015130:	9202      	str	r2, [sp, #8]
 8015132:	9a01      	ldr	r2, [sp, #4]
 8015134:	43d6      	mvns	r6, r2
 8015136:	b2f6      	uxtb	r6, r6
 8015138:	9a00      	ldr	r2, [sp, #0]
 801513a:	2a00      	cmp	r2, #0
 801513c:	dc03      	bgt.n	8015146 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801513e:	9a03      	ldr	r2, [sp, #12]
 8015140:	2a00      	cmp	r2, #0
 8015142:	f340 8124 	ble.w	801538e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8015146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015148:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801514c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015150:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015152:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8015156:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801515a:	2b00      	cmp	r3, #0
 801515c:	dd0e      	ble.n	801517c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801515e:	1408      	asrs	r0, r1, #16
 8015160:	d405      	bmi.n	801516e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015162:	4560      	cmp	r0, ip
 8015164:	da03      	bge.n	801516e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015166:	1410      	asrs	r0, r2, #16
 8015168:	d401      	bmi.n	801516e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801516a:	42b8      	cmp	r0, r7
 801516c:	db07      	blt.n	801517e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801516e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015170:	3b01      	subs	r3, #1
 8015172:	3402      	adds	r4, #2
 8015174:	4401      	add	r1, r0
 8015176:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015178:	4402      	add	r2, r0
 801517a:	e7ee      	b.n	801515a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801517c:	d06e      	beq.n	801525c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801517e:	1e58      	subs	r0, r3, #1
 8015180:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015182:	fb05 1500 	mla	r5, r5, r0, r1
 8015186:	142d      	asrs	r5, r5, #16
 8015188:	d45c      	bmi.n	8015244 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801518a:	4565      	cmp	r5, ip
 801518c:	da5a      	bge.n	8015244 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801518e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015190:	fb05 2000 	mla	r0, r5, r0, r2
 8015194:	1400      	asrs	r0, r0, #16
 8015196:	d455      	bmi.n	8015244 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8015198:	42b8      	cmp	r0, r7
 801519a:	da53      	bge.n	8015244 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801519c:	4699      	mov	r9, r3
 801519e:	46a2      	mov	sl, r4
 80151a0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80151a4:	f1b9 0f00 	cmp.w	r9, #0
 80151a8:	dd54      	ble.n	8015254 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80151aa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80151ae:	140d      	asrs	r5, r1, #16
 80151b0:	1410      	asrs	r0, r2, #16
 80151b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80151b6:	fb07 5000 	mla	r0, r7, r0, r5
 80151ba:	9d02      	ldr	r5, [sp, #8]
 80151bc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80151c0:	f8ba 5000 	ldrh.w	r5, [sl]
 80151c4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80151c8:	122f      	asrs	r7, r5, #8
 80151ca:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80151ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80151d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80151d6:	00ed      	lsls	r5, r5, #3
 80151d8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80151dc:	fb17 f706 	smulbb	r7, r7, r6
 80151e0:	b2ed      	uxtb	r5, r5
 80151e2:	fb18 f806 	smulbb	r8, r8, r6
 80151e6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80151ea:	10c7      	asrs	r7, r0, #3
 80151ec:	fb15 f506 	smulbb	r5, r5, r6
 80151f0:	00c0      	lsls	r0, r0, #3
 80151f2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80151f6:	fa1f fc8c 	uxth.w	ip, ip
 80151fa:	b2c0      	uxtb	r0, r0
 80151fc:	fb07 870b 	mla	r7, r7, fp, r8
 8015200:	fb00 500b 	mla	r0, r0, fp, r5
 8015204:	f10c 0501 	add.w	r5, ip, #1
 8015208:	b2bf      	uxth	r7, r7
 801520a:	b280      	uxth	r0, r0
 801520c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015210:	f107 0801 	add.w	r8, r7, #1
 8015214:	1c45      	adds	r5, r0, #1
 8015216:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801521a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801521e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015222:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015224:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015228:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801522c:	4401      	add	r1, r0
 801522e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8015232:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015234:	ea45 0c0c 	orr.w	ip, r5, ip
 8015238:	4402      	add	r2, r0
 801523a:	ea4c 0c08 	orr.w	ip, ip, r8
 801523e:	f82a cb02 	strh.w	ip, [sl], #2
 8015242:	e7af      	b.n	80151a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015244:	f04f 0800 	mov.w	r8, #0
 8015248:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801524c:	eb03 0008 	add.w	r0, r3, r8
 8015250:	2800      	cmp	r0, #0
 8015252:	dc41      	bgt.n	80152d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8015254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015258:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801525c:	9b00      	ldr	r3, [sp, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	f340 8095 	ble.w	801538e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8015264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801526a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801526e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015272:	eef0 6a62 	vmov.f32	s13, s5
 8015276:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801527a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801527e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015282:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015286:	eef0 6a43 	vmov.f32	s13, s6
 801528a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801528e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015292:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015296:	ee61 7a27 	vmul.f32	s15, s2, s15
 801529a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801529e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80152a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80152a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80152aa:	ee12 2a90 	vmov	r2, s5
 80152ae:	eef0 2a47 	vmov.f32	s5, s14
 80152b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80152b6:	ee13 2a10 	vmov	r2, s6
 80152ba:	9311      	str	r3, [sp, #68]	; 0x44
 80152bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152be:	eeb0 3a67 	vmov.f32	s6, s15
 80152c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80152c6:	9312      	str	r3, [sp, #72]	; 0x48
 80152c8:	9b00      	ldr	r3, [sp, #0]
 80152ca:	9a03      	ldr	r2, [sp, #12]
 80152cc:	3b01      	subs	r3, #1
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152d2:	bf08      	it	eq
 80152d4:	4613      	moveq	r3, r2
 80152d6:	e72f      	b.n	8015138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80152d8:	140f      	asrs	r7, r1, #16
 80152da:	d451      	bmi.n	8015380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80152dc:	f8de 5008 	ldr.w	r5, [lr, #8]
 80152e0:	42bd      	cmp	r5, r7
 80152e2:	dd4d      	ble.n	8015380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80152e4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80152e8:	d44a      	bmi.n	8015380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80152ea:	f8de 000c 	ldr.w	r0, [lr, #12]
 80152ee:	4560      	cmp	r0, ip
 80152f0:	dd46      	ble.n	8015380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80152f2:	b22d      	sxth	r5, r5
 80152f4:	9802      	ldr	r0, [sp, #8]
 80152f6:	fb0c 7505 	mla	r5, ip, r5, r7
 80152fa:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80152fe:	f06f 0501 	mvn.w	r5, #1
 8015302:	fb05 fb08 	mul.w	fp, r5, r8
 8015306:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801530a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801530e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015312:	122f      	asrs	r7, r5, #8
 8015314:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8015318:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801531c:	00ed      	lsls	r5, r5, #3
 801531e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015322:	fb17 f706 	smulbb	r7, r7, r6
 8015326:	b2ed      	uxtb	r5, r5
 8015328:	fb19 f906 	smulbb	r9, r9, r6
 801532c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8015330:	10c7      	asrs	r7, r0, #3
 8015332:	fb15 f506 	smulbb	r5, r5, r6
 8015336:	00c0      	lsls	r0, r0, #3
 8015338:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801533c:	fa1f fc8c 	uxth.w	ip, ip
 8015340:	b2c0      	uxtb	r0, r0
 8015342:	fb07 970a 	mla	r7, r7, sl, r9
 8015346:	fb00 500a 	mla	r0, r0, sl, r5
 801534a:	f10c 0501 	add.w	r5, ip, #1
 801534e:	b2bf      	uxth	r7, r7
 8015350:	b280      	uxth	r0, r0
 8015352:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015356:	f107 0901 	add.w	r9, r7, #1
 801535a:	1c45      	adds	r5, r0, #1
 801535c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8015360:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015364:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015368:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801536c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015370:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8015374:	ea45 0c0c 	orr.w	ip, r5, ip
 8015378:	ea4c 0c09 	orr.w	ip, ip, r9
 801537c:	f824 c00b 	strh.w	ip, [r4, fp]
 8015380:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015382:	f108 38ff 	add.w	r8, r8, #4294967295
 8015386:	4401      	add	r1, r0
 8015388:	9812      	ldr	r0, [sp, #72]	; 0x48
 801538a:	4402      	add	r2, r0
 801538c:	e75e      	b.n	801524c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801538e:	b005      	add	sp, #20
 8015390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015394 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015398:	b085      	sub	sp, #20
 801539a:	4693      	mov	fp, r2
 801539c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80153a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80153a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80153a4:	6870      	ldr	r0, [r6, #4]
 80153a6:	9101      	str	r1, [sp, #4]
 80153a8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80153ac:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80153b0:	fb00 2404 	mla	r4, r0, r4, r2
 80153b4:	6832      	ldr	r2, [r6, #0]
 80153b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80153ba:	682a      	ldr	r2, [r5, #0]
 80153bc:	9202      	str	r2, [sp, #8]
 80153be:	9a01      	ldr	r2, [sp, #4]
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	dc03      	bgt.n	80153cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80153c4:	f1bb 0f00 	cmp.w	fp, #0
 80153c8:	f340 809a 	ble.w	8015500 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80153cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80153d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80153d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153d8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80153dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	dd0c      	ble.n	80153fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80153e4:	1406      	asrs	r6, r0, #16
 80153e6:	d405      	bmi.n	80153f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80153e8:	454e      	cmp	r6, r9
 80153ea:	da03      	bge.n	80153f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80153ec:	1416      	asrs	r6, r2, #16
 80153ee:	d401      	bmi.n	80153f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80153f0:	4546      	cmp	r6, r8
 80153f2:	db05      	blt.n	8015400 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80153f4:	4470      	add	r0, lr
 80153f6:	4462      	add	r2, ip
 80153f8:	3b01      	subs	r3, #1
 80153fa:	3402      	adds	r4, #2
 80153fc:	e7f0      	b.n	80153e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80153fe:	d00f      	beq.n	8015420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8015400:	1e5e      	subs	r6, r3, #1
 8015402:	fb0e 0706 	mla	r7, lr, r6, r0
 8015406:	143f      	asrs	r7, r7, #16
 8015408:	d541      	bpl.n	801548e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801540a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801540e:	4698      	mov	r8, r3
 8015410:	9603      	str	r6, [sp, #12]
 8015412:	f1b8 0f00 	cmp.w	r8, #0
 8015416:	dc56      	bgt.n	80154c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8015418:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801541c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015420:	9b01      	ldr	r3, [sp, #4]
 8015422:	2b00      	cmp	r3, #0
 8015424:	dd6c      	ble.n	8015500 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015426:	ee30 0a04 	vadd.f32	s0, s0, s8
 801542a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801542c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015430:	eeb0 6a62 	vmov.f32	s12, s5
 8015434:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015438:	ee31 1a05 	vadd.f32	s2, s2, s10
 801543c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015440:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015444:	eeb0 6a43 	vmov.f32	s12, s6
 8015448:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801544c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015450:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015454:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015458:	ee77 2a62 	vsub.f32	s5, s14, s5
 801545c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015460:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015464:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015468:	ee12 2a90 	vmov	r2, s5
 801546c:	eef0 2a47 	vmov.f32	s5, s14
 8015470:	fb92 fef3 	sdiv	lr, r2, r3
 8015474:	ee13 2a10 	vmov	r2, s6
 8015478:	eeb0 3a67 	vmov.f32	s6, s15
 801547c:	fb92 fcf3 	sdiv	ip, r2, r3
 8015480:	9b01      	ldr	r3, [sp, #4]
 8015482:	3b01      	subs	r3, #1
 8015484:	9301      	str	r3, [sp, #4]
 8015486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015488:	bf08      	it	eq
 801548a:	465b      	moveq	r3, fp
 801548c:	e797      	b.n	80153be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801548e:	454f      	cmp	r7, r9
 8015490:	dabb      	bge.n	801540a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015492:	fb0c 2606 	mla	r6, ip, r6, r2
 8015496:	1436      	asrs	r6, r6, #16
 8015498:	d4b7      	bmi.n	801540a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801549a:	4546      	cmp	r6, r8
 801549c:	dab5      	bge.n	801540a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801549e:	461e      	mov	r6, r3
 80154a0:	46a0      	mov	r8, r4
 80154a2:	2e00      	cmp	r6, #0
 80154a4:	ddb8      	ble.n	8015418 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80154a6:	1417      	asrs	r7, r2, #16
 80154a8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80154ac:	ea4f 4920 	mov.w	r9, r0, asr #16
 80154b0:	9902      	ldr	r1, [sp, #8]
 80154b2:	4470      	add	r0, lr
 80154b4:	4462      	add	r2, ip
 80154b6:	fb0a 9707 	mla	r7, sl, r7, r9
 80154ba:	3e01      	subs	r6, #1
 80154bc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80154c0:	f828 7b02 	strh.w	r7, [r8], #2
 80154c4:	e7ed      	b.n	80154a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80154c6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80154ca:	d414      	bmi.n	80154f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80154cc:	68ae      	ldr	r6, [r5, #8]
 80154ce:	454e      	cmp	r6, r9
 80154d0:	dd11      	ble.n	80154f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80154d2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80154d6:	d40e      	bmi.n	80154f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80154d8:	68ef      	ldr	r7, [r5, #12]
 80154da:	4557      	cmp	r7, sl
 80154dc:	dd0b      	ble.n	80154f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80154de:	b236      	sxth	r6, r6
 80154e0:	f06f 0101 	mvn.w	r1, #1
 80154e4:	9f02      	ldr	r7, [sp, #8]
 80154e6:	fb0a 9606 	mla	r6, sl, r6, r9
 80154ea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80154ee:	fb01 f608 	mul.w	r6, r1, r8
 80154f2:	9903      	ldr	r1, [sp, #12]
 80154f4:	538f      	strh	r7, [r1, r6]
 80154f6:	4470      	add	r0, lr
 80154f8:	4462      	add	r2, ip
 80154fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80154fe:	e788      	b.n	8015412 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015500:	b005      	add	sp, #20
 8015502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015506 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550a:	b087      	sub	sp, #28
 801550c:	468b      	mov	fp, r1
 801550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015512:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015514:	9203      	str	r2, [sp, #12]
 8015516:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801551a:	6841      	ldr	r1, [r0, #4]
 801551c:	9204      	str	r2, [sp, #16]
 801551e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8015522:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8015526:	fb01 2505 	mla	r5, r1, r5, r2
 801552a:	6802      	ldr	r2, [r0, #0]
 801552c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8015530:	f8d9 2000 	ldr.w	r2, [r9]
 8015534:	9201      	str	r2, [sp, #4]
 8015536:	f1bb 0f00 	cmp.w	fp, #0
 801553a:	dc03      	bgt.n	8015544 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801553c:	9a03      	ldr	r2, [sp, #12]
 801553e:	2a00      	cmp	r2, #0
 8015540:	f340 8158 	ble.w	80157f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8015544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015546:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801554a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801554e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015550:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8015554:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015558:	2b00      	cmp	r3, #0
 801555a:	dd0e      	ble.n	801557a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801555c:	1402      	asrs	r2, r0, #16
 801555e:	d405      	bmi.n	801556c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015560:	42ba      	cmp	r2, r7
 8015562:	da03      	bge.n	801556c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015564:	140a      	asrs	r2, r1, #16
 8015566:	d401      	bmi.n	801556c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015568:	42b2      	cmp	r2, r6
 801556a:	db07      	blt.n	801557c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801556c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801556e:	3b01      	subs	r3, #1
 8015570:	3502      	adds	r5, #2
 8015572:	4410      	add	r0, r2
 8015574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015576:	4411      	add	r1, r2
 8015578:	e7ee      	b.n	8015558 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801557a:	d017      	beq.n	80155ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801557c:	1e5a      	subs	r2, r3, #1
 801557e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015580:	fb04 0402 	mla	r4, r4, r2, r0
 8015584:	1424      	asrs	r4, r4, #16
 8015586:	d409      	bmi.n	801559c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015588:	42bc      	cmp	r4, r7
 801558a:	da07      	bge.n	801559c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801558c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801558e:	fb04 1202 	mla	r2, r4, r2, r1
 8015592:	1412      	asrs	r2, r2, #16
 8015594:	d402      	bmi.n	801559c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015596:	42b2      	cmp	r2, r6
 8015598:	f2c0 80bf 	blt.w	801571a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801559c:	2700      	movs	r7, #0
 801559e:	19da      	adds	r2, r3, r7
 80155a0:	2a00      	cmp	r2, #0
 80155a2:	dc3e      	bgt.n	8015622 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80155a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80155a8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80155ac:	f1bb 0f00 	cmp.w	fp, #0
 80155b0:	f340 8120 	ble.w	80157f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80155b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80155b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80155be:	f1bb 0b01 	subs.w	fp, fp, #1
 80155c2:	eeb0 6a62 	vmov.f32	s12, s5
 80155c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80155ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80155ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80155d6:	eeb0 6a43 	vmov.f32	s12, s6
 80155da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80155e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80155e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80155ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80155ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80155f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80155f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80155fa:	ee12 2a90 	vmov	r2, s5
 80155fe:	eef0 2a47 	vmov.f32	s5, s14
 8015602:	fb92 f3f3 	sdiv	r3, r2, r3
 8015606:	ee13 2a10 	vmov	r2, s6
 801560a:	9313      	str	r3, [sp, #76]	; 0x4c
 801560c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801560e:	eeb0 3a67 	vmov.f32	s6, s15
 8015612:	fb92 f3f3 	sdiv	r3, r2, r3
 8015616:	9a03      	ldr	r2, [sp, #12]
 8015618:	9314      	str	r3, [sp, #80]	; 0x50
 801561a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801561c:	bf08      	it	eq
 801561e:	4613      	moveq	r3, r2
 8015620:	e789      	b.n	8015536 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8015622:	1406      	asrs	r6, r0, #16
 8015624:	d42d      	bmi.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8015626:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801562a:	42b4      	cmp	r4, r6
 801562c:	dd29      	ble.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801562e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8015632:	d426      	bmi.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8015634:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8015638:	4562      	cmp	r2, ip
 801563a:	dd22      	ble.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801563c:	b224      	sxth	r4, r4
 801563e:	9a01      	ldr	r2, [sp, #4]
 8015640:	fb0c 6404 	mla	r4, ip, r4, r6
 8015644:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8015648:	0e22      	lsrs	r2, r4, #24
 801564a:	d01a      	beq.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801564c:	9e04      	ldr	r6, [sp, #16]
 801564e:	4372      	muls	r2, r6
 8015650:	1c56      	adds	r6, r2, #1
 8015652:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015656:	0a26      	lsrs	r6, r4, #8
 8015658:	1212      	asrs	r2, r2, #8
 801565a:	9605      	str	r6, [sp, #20]
 801565c:	2aff      	cmp	r2, #255	; 0xff
 801565e:	d116      	bne.n	801568e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8015660:	f06f 0201 	mvn.w	r2, #1
 8015664:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8015668:	fb02 fc07 	mul.w	ip, r2, r7
 801566c:	0962      	lsrs	r2, r4, #5
 801566e:	f026 0607 	bic.w	r6, r6, #7
 8015672:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8015676:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801567a:	4316      	orrs	r6, r2
 801567c:	4326      	orrs	r6, r4
 801567e:	f825 600c 	strh.w	r6, [r5, ip]
 8015682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015684:	3f01      	subs	r7, #1
 8015686:	4410      	add	r0, r2
 8015688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801568a:	4411      	add	r1, r2
 801568c:	e787      	b.n	801559e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801568e:	f06f 0601 	mvn.w	r6, #1
 8015692:	fa1f fa82 	uxth.w	sl, r2
 8015696:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801569a:	43d2      	mvns	r2, r2
 801569c:	437e      	muls	r6, r7
 801569e:	b2e4      	uxtb	r4, r4
 80156a0:	fb1c fc0a 	smulbb	ip, ip, sl
 80156a4:	b2d2      	uxtb	r2, r2
 80156a6:	f835 8006 	ldrh.w	r8, [r5, r6]
 80156aa:	fb14 f40a 	smulbb	r4, r4, sl
 80156ae:	9602      	str	r6, [sp, #8]
 80156b0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80156b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80156b8:	fb16 f60a 	smulbb	r6, r6, sl
 80156bc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80156c0:	fb0e ce02 	mla	lr, lr, r2, ip
 80156c4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80156c8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80156cc:	fa1f fe8e 	uxth.w	lr, lr
 80156d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80156d4:	fa5f f888 	uxtb.w	r8, r8
 80156d8:	fb0c 6c02 	mla	ip, ip, r2, r6
 80156dc:	fb08 4402 	mla	r4, r8, r2, r4
 80156e0:	f10e 0201 	add.w	r2, lr, #1
 80156e4:	fa1f fc8c 	uxth.w	ip, ip
 80156e8:	b2a4      	uxth	r4, r4
 80156ea:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80156ee:	9a02      	ldr	r2, [sp, #8]
 80156f0:	1c66      	adds	r6, r4, #1
 80156f2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80156f6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80156fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80156fe:	ea46 0e0e 	orr.w	lr, r6, lr
 8015702:	f10c 0601 	add.w	r6, ip, #1
 8015706:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801570a:	0976      	lsrs	r6, r6, #5
 801570c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8015710:	ea4e 0e06 	orr.w	lr, lr, r6
 8015714:	f825 e002 	strh.w	lr, [r5, r2]
 8015718:	e7b3      	b.n	8015682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801571a:	f04f 0800 	mov.w	r8, #0
 801571e:	eba3 0208 	sub.w	r2, r3, r8
 8015722:	2a00      	cmp	r2, #0
 8015724:	f77f af3e 	ble.w	80155a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015728:	1404      	asrs	r4, r0, #16
 801572a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801572e:	140a      	asrs	r2, r1, #16
 8015730:	fb06 4202 	mla	r2, r6, r2, r4
 8015734:	9c01      	ldr	r4, [sp, #4]
 8015736:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801573a:	0e22      	lsrs	r2, r4, #24
 801573c:	d015      	beq.n	801576a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801573e:	9e04      	ldr	r6, [sp, #16]
 8015740:	4372      	muls	r2, r6
 8015742:	1c56      	adds	r6, r2, #1
 8015744:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015748:	0a26      	lsrs	r6, r4, #8
 801574a:	1212      	asrs	r2, r2, #8
 801574c:	2aff      	cmp	r2, #255	; 0xff
 801574e:	d113      	bne.n	8015778 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8015750:	0962      	lsrs	r2, r4, #5
 8015752:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8015756:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801575a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801575e:	f026 0607 	bic.w	r6, r6, #7
 8015762:	4316      	orrs	r6, r2
 8015764:	4326      	orrs	r6, r4
 8015766:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801576a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801576c:	f108 0801 	add.w	r8, r8, #1
 8015770:	4410      	add	r0, r2
 8015772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015774:	4411      	add	r1, r2
 8015776:	e7d2      	b.n	801571e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8015778:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801577c:	fa1f fa82 	uxth.w	sl, r2
 8015780:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8015784:	43d2      	mvns	r2, r2
 8015786:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801578a:	fb17 f70a 	smulbb	r7, r7, sl
 801578e:	b2d2      	uxtb	r2, r2
 8015790:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015794:	b2e4      	uxtb	r4, r4
 8015796:	b2f6      	uxtb	r6, r6
 8015798:	fb0c 7c02 	mla	ip, ip, r2, r7
 801579c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80157a0:	fb14 f40a 	smulbb	r4, r4, sl
 80157a4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80157a8:	fa1f fc8c 	uxth.w	ip, ip
 80157ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80157b0:	fb16 f60a 	smulbb	r6, r6, sl
 80157b4:	fa5f fe8e 	uxtb.w	lr, lr
 80157b8:	fb0e 4402 	mla	r4, lr, r2, r4
 80157bc:	fb07 6702 	mla	r7, r7, r2, r6
 80157c0:	f10c 0201 	add.w	r2, ip, #1
 80157c4:	b2a4      	uxth	r4, r4
 80157c6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80157ca:	1c66      	adds	r6, r4, #1
 80157cc:	b2bf      	uxth	r7, r7
 80157ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80157d2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80157d6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80157da:	ea46 0c0c 	orr.w	ip, r6, ip
 80157de:	1c7e      	adds	r6, r7, #1
 80157e0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80157e4:	0976      	lsrs	r6, r6, #5
 80157e6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80157ea:	ea4c 0c06 	orr.w	ip, ip, r6
 80157ee:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80157f2:	e7ba      	b.n	801576a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80157f4:	b007      	add	sp, #28
 80157f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080157fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80157fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015800:	b085      	sub	sp, #20
 8015802:	468b      	mov	fp, r1
 8015804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015808:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801580a:	9203      	str	r2, [sp, #12]
 801580c:	6841      	ldr	r1, [r0, #4]
 801580e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015812:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015816:	fb01 2404 	mla	r4, r1, r4, r2
 801581a:	6802      	ldr	r2, [r0, #0]
 801581c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015820:	f8d8 2000 	ldr.w	r2, [r8]
 8015824:	9201      	str	r2, [sp, #4]
 8015826:	f1bb 0f00 	cmp.w	fp, #0
 801582a:	dc03      	bgt.n	8015834 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801582c:	9a03      	ldr	r2, [sp, #12]
 801582e:	2a00      	cmp	r2, #0
 8015830:	f340 814f 	ble.w	8015ad2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8015834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015836:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801583a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801583e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015840:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8015844:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015848:	2b00      	cmp	r3, #0
 801584a:	dd0e      	ble.n	801586a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801584c:	1408      	asrs	r0, r1, #16
 801584e:	d405      	bmi.n	801585c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8015850:	42b8      	cmp	r0, r7
 8015852:	da03      	bge.n	801585c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8015854:	1410      	asrs	r0, r2, #16
 8015856:	d401      	bmi.n	801585c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8015858:	42b0      	cmp	r0, r6
 801585a:	db07      	blt.n	801586c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801585c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801585e:	3b01      	subs	r3, #1
 8015860:	3402      	adds	r4, #2
 8015862:	4401      	add	r1, r0
 8015864:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015866:	4402      	add	r2, r0
 8015868:	e7ee      	b.n	8015848 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801586a:	d017      	beq.n	801589c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801586c:	1e58      	subs	r0, r3, #1
 801586e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015870:	fb05 1500 	mla	r5, r5, r0, r1
 8015874:	142d      	asrs	r5, r5, #16
 8015876:	d409      	bmi.n	801588c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015878:	42bd      	cmp	r5, r7
 801587a:	da07      	bge.n	801588c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801587c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801587e:	fb05 2000 	mla	r0, r5, r0, r2
 8015882:	1400      	asrs	r0, r0, #16
 8015884:	d402      	bmi.n	801588c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015886:	42b0      	cmp	r0, r6
 8015888:	f2c0 80ba 	blt.w	8015a00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801588c:	2600      	movs	r6, #0
 801588e:	1998      	adds	r0, r3, r6
 8015890:	2800      	cmp	r0, #0
 8015892:	dc3e      	bgt.n	8015912 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8015894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015898:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801589c:	f1bb 0f00 	cmp.w	fp, #0
 80158a0:	f340 8117 	ble.w	8015ad2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80158a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80158a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80158ae:	f1bb 0b01 	subs.w	fp, fp, #1
 80158b2:	eeb0 6a62 	vmov.f32	s12, s5
 80158b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80158ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80158be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80158c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80158c6:	eeb0 6a43 	vmov.f32	s12, s6
 80158ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80158ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80158d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80158d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80158da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80158de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80158e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80158e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80158ea:	ee12 2a90 	vmov	r2, s5
 80158ee:	eef0 2a47 	vmov.f32	s5, s14
 80158f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80158f6:	ee13 2a10 	vmov	r2, s6
 80158fa:	9311      	str	r3, [sp, #68]	; 0x44
 80158fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158fe:	eeb0 3a67 	vmov.f32	s6, s15
 8015902:	fb92 f3f3 	sdiv	r3, r2, r3
 8015906:	9a03      	ldr	r2, [sp, #12]
 8015908:	9312      	str	r3, [sp, #72]	; 0x48
 801590a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801590c:	bf08      	it	eq
 801590e:	4613      	moveq	r3, r2
 8015910:	e789      	b.n	8015826 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8015912:	140f      	asrs	r7, r1, #16
 8015914:	d424      	bmi.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015916:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801591a:	42bd      	cmp	r5, r7
 801591c:	dd20      	ble.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801591e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8015922:	d41d      	bmi.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015924:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8015928:	4560      	cmp	r0, ip
 801592a:	dd19      	ble.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801592c:	b22d      	sxth	r5, r5
 801592e:	9801      	ldr	r0, [sp, #4]
 8015930:	fb0c 7505 	mla	r5, ip, r5, r7
 8015934:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015938:	0e07      	lsrs	r7, r0, #24
 801593a:	2fff      	cmp	r7, #255	; 0xff
 801593c:	d116      	bne.n	801596c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801593e:	f06f 0501 	mvn.w	r5, #1
 8015942:	fb05 f706 	mul.w	r7, r5, r6
 8015946:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801594a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801594e:	0945      	lsrs	r5, r0, #5
 8015950:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8015954:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015958:	ea4c 0505 	orr.w	r5, ip, r5
 801595c:	4305      	orrs	r5, r0
 801595e:	53e5      	strh	r5, [r4, r7]
 8015960:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015962:	3e01      	subs	r6, #1
 8015964:	4401      	add	r1, r0
 8015966:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015968:	4402      	add	r2, r0
 801596a:	e790      	b.n	801588e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801596c:	b2fd      	uxtb	r5, r7
 801596e:	2f00      	cmp	r7, #0
 8015970:	d0f6      	beq.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015972:	f06f 0701 	mvn.w	r7, #1
 8015976:	fa1f f985 	uxth.w	r9, r5
 801597a:	43ed      	mvns	r5, r5
 801597c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015980:	4377      	muls	r7, r6
 8015982:	fb1a fa09 	smulbb	sl, sl, r9
 8015986:	b2ed      	uxtb	r5, r5
 8015988:	f834 e007 	ldrh.w	lr, [r4, r7]
 801598c:	9702      	str	r7, [sp, #8]
 801598e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015992:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015996:	fb17 f709 	smulbb	r7, r7, r9
 801599a:	b2c0      	uxtb	r0, r0
 801599c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80159a0:	fb10 f009 	smulbb	r0, r0, r9
 80159a4:	fb0c 7c05 	mla	ip, ip, r5, r7
 80159a8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80159ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80159b0:	fa1f fc8c 	uxth.w	ip, ip
 80159b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80159b8:	fa5f fe8e 	uxtb.w	lr, lr
 80159bc:	fb07 a705 	mla	r7, r7, r5, sl
 80159c0:	fb0e 0005 	mla	r0, lr, r5, r0
 80159c4:	f10c 0501 	add.w	r5, ip, #1
 80159c8:	b2bf      	uxth	r7, r7
 80159ca:	b280      	uxth	r0, r0
 80159cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80159d0:	f100 0a01 	add.w	sl, r0, #1
 80159d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80159d8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80159dc:	9802      	ldr	r0, [sp, #8]
 80159de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80159e2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80159e6:	f107 0a01 	add.w	sl, r7, #1
 80159ea:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80159ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80159f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80159f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80159fa:	f824 c000 	strh.w	ip, [r4, r0]
 80159fe:	e7af      	b.n	8015960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015a00:	f04f 0e00 	mov.w	lr, #0
 8015a04:	eba3 000e 	sub.w	r0, r3, lr
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	f77f af43 	ble.w	8015894 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015a0e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8015a12:	140d      	asrs	r5, r1, #16
 8015a14:	1410      	asrs	r0, r2, #16
 8015a16:	fb06 5000 	mla	r0, r6, r0, r5
 8015a1a:	9d01      	ldr	r5, [sp, #4]
 8015a1c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8015a20:	0e2e      	lsrs	r6, r5, #24
 8015a22:	2eff      	cmp	r6, #255	; 0xff
 8015a24:	d112      	bne.n	8015a4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8015a26:	482c      	ldr	r0, [pc, #176]	; (8015ad8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8015a28:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8015a2c:	0968      	lsrs	r0, r5, #5
 8015a2e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8015a32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8015a36:	4330      	orrs	r0, r6
 8015a38:	4328      	orrs	r0, r5
 8015a3a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8015a3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015a40:	f10e 0e01 	add.w	lr, lr, #1
 8015a44:	4401      	add	r1, r0
 8015a46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015a48:	4402      	add	r2, r0
 8015a4a:	e7db      	b.n	8015a04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8015a4c:	b2f0      	uxtb	r0, r6
 8015a4e:	2e00      	cmp	r6, #0
 8015a50:	d0f5      	beq.n	8015a3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8015a52:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8015a56:	fa1f f980 	uxth.w	r9, r0
 8015a5a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015a5e:	43c0      	mvns	r0, r0
 8015a60:	ea4f 272c 	mov.w	r7, ip, asr #8
 8015a64:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015a68:	fb16 f609 	smulbb	r6, r6, r9
 8015a6c:	b2c0      	uxtb	r0, r0
 8015a6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015a72:	b2ed      	uxtb	r5, r5
 8015a74:	fb1a fa09 	smulbb	sl, sl, r9
 8015a78:	fb07 6700 	mla	r7, r7, r0, r6
 8015a7c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8015a80:	fb15 f509 	smulbb	r5, r5, r9
 8015a84:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015a88:	b2bf      	uxth	r7, r7
 8015a8a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015a8e:	fa5f fc8c 	uxtb.w	ip, ip
 8015a92:	fb06 a600 	mla	r6, r6, r0, sl
 8015a96:	fb0c 5500 	mla	r5, ip, r0, r5
 8015a9a:	1c78      	adds	r0, r7, #1
 8015a9c:	b2b6      	uxth	r6, r6
 8015a9e:	b2ad      	uxth	r5, r5
 8015aa0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8015aa4:	f105 0a01 	add.w	sl, r5, #1
 8015aa8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015aac:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015ab0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015ab4:	ea4a 0707 	orr.w	r7, sl, r7
 8015ab8:	f106 0a01 	add.w	sl, r6, #1
 8015abc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015ac0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015ac4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015ac8:	ea47 070a 	orr.w	r7, r7, sl
 8015acc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8015ad0:	e7b5      	b.n	8015a3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8015ad2:	b005      	add	sp, #20
 8015ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad8:	fffff800 	.word	0xfffff800

08015adc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae0:	b087      	sub	sp, #28
 8015ae2:	468b      	mov	fp, r1
 8015ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ae8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015aea:	9203      	str	r2, [sp, #12]
 8015aec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015af0:	6841      	ldr	r1, [r0, #4]
 8015af2:	9204      	str	r2, [sp, #16]
 8015af4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8015af8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8015afc:	fb01 2404 	mla	r4, r1, r4, r2
 8015b00:	6802      	ldr	r2, [r0, #0]
 8015b02:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015b06:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8015b0a:	3201      	adds	r2, #1
 8015b0c:	f022 0201 	bic.w	r2, r2, #1
 8015b10:	9200      	str	r2, [sp, #0]
 8015b12:	f8d9 2000 	ldr.w	r2, [r9]
 8015b16:	9201      	str	r2, [sp, #4]
 8015b18:	f1bb 0f00 	cmp.w	fp, #0
 8015b1c:	dc03      	bgt.n	8015b26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015b1e:	9a03      	ldr	r2, [sp, #12]
 8015b20:	2a00      	cmp	r2, #0
 8015b22:	f340 816a 	ble.w	8015dfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8015b26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b28:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8015b2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015b30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b32:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8015b36:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	dd0e      	ble.n	8015b5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015b3e:	1402      	asrs	r2, r0, #16
 8015b40:	d405      	bmi.n	8015b4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b42:	42ba      	cmp	r2, r7
 8015b44:	da03      	bge.n	8015b4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b46:	140a      	asrs	r2, r1, #16
 8015b48:	d401      	bmi.n	8015b4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b4a:	42b2      	cmp	r2, r6
 8015b4c:	db07      	blt.n	8015b5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015b4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015b50:	3b01      	subs	r3, #1
 8015b52:	3402      	adds	r4, #2
 8015b54:	4410      	add	r0, r2
 8015b56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b58:	4411      	add	r1, r2
 8015b5a:	e7ee      	b.n	8015b3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015b5c:	d017      	beq.n	8015b8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8015b5e:	1e5a      	subs	r2, r3, #1
 8015b60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015b62:	fb05 0502 	mla	r5, r5, r2, r0
 8015b66:	142d      	asrs	r5, r5, #16
 8015b68:	d409      	bmi.n	8015b7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015b6a:	42bd      	cmp	r5, r7
 8015b6c:	da07      	bge.n	8015b7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015b6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015b70:	fb05 1202 	mla	r2, r5, r2, r1
 8015b74:	1412      	asrs	r2, r2, #16
 8015b76:	d402      	bmi.n	8015b7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015b78:	42b2      	cmp	r2, r6
 8015b7a:	f2c0 80c8 	blt.w	8015d0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8015b7e:	2700      	movs	r7, #0
 8015b80:	19da      	adds	r2, r3, r7
 8015b82:	2a00      	cmp	r2, #0
 8015b84:	dc3e      	bgt.n	8015c04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015b86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015b8e:	f1bb 0f00 	cmp.w	fp, #0
 8015b92:	f340 8132 	ble.w	8015dfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8015b96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ba0:	f1bb 0b01 	subs.w	fp, fp, #1
 8015ba4:	eeb0 6a62 	vmov.f32	s12, s5
 8015ba8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015bac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015bb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015bb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015bb8:	eeb0 6a43 	vmov.f32	s12, s6
 8015bbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015bc0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015bc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015bc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015bcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015bd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015bd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015bd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015bdc:	ee12 2a90 	vmov	r2, s5
 8015be0:	eef0 2a47 	vmov.f32	s5, s14
 8015be4:	fb92 f3f3 	sdiv	r3, r2, r3
 8015be8:	ee13 2a10 	vmov	r2, s6
 8015bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8015bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bf0:	eeb0 3a67 	vmov.f32	s6, s15
 8015bf4:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bf8:	9a03      	ldr	r2, [sp, #12]
 8015bfa:	9314      	str	r3, [sp, #80]	; 0x50
 8015bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bfe:	bf08      	it	eq
 8015c00:	4613      	moveq	r3, r2
 8015c02:	e789      	b.n	8015b18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015c04:	1405      	asrs	r5, r0, #16
 8015c06:	d436      	bmi.n	8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015c08:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8015c0c:	42aa      	cmp	r2, r5
 8015c0e:	dd32      	ble.n	8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015c10:	140e      	asrs	r6, r1, #16
 8015c12:	d430      	bmi.n	8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015c14:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8015c18:	42b2      	cmp	r2, r6
 8015c1a:	dd2c      	ble.n	8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015c1c:	9a00      	ldr	r2, [sp, #0]
 8015c1e:	fb06 5502 	mla	r5, r6, r2, r5
 8015c22:	9e01      	ldr	r6, [sp, #4]
 8015c24:	086a      	lsrs	r2, r5, #1
 8015c26:	5cb2      	ldrb	r2, [r6, r2]
 8015c28:	07ee      	lsls	r6, r5, #31
 8015c2a:	bf54      	ite	pl
 8015c2c:	f002 020f 	andpl.w	r2, r2, #15
 8015c30:	1112      	asrmi	r2, r2, #4
 8015c32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015c36:	b2d2      	uxtb	r2, r2
 8015c38:	b1ea      	cbz	r2, 8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015c3a:	9d04      	ldr	r5, [sp, #16]
 8015c3c:	436a      	muls	r2, r5
 8015c3e:	1c55      	adds	r5, r2, #1
 8015c40:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8015c44:	4d6e      	ldr	r5, [pc, #440]	; (8015e00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8015c46:	1212      	asrs	r2, r2, #8
 8015c48:	682d      	ldr	r5, [r5, #0]
 8015c4a:	2aff      	cmp	r2, #255	; 0xff
 8015c4c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8015c50:	9605      	str	r6, [sp, #20]
 8015c52:	d116      	bne.n	8015c82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8015c54:	f06f 0201 	mvn.w	r2, #1
 8015c58:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8015c5c:	fb02 fc07 	mul.w	ip, r2, r7
 8015c60:	096a      	lsrs	r2, r5, #5
 8015c62:	f026 0607 	bic.w	r6, r6, #7
 8015c66:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8015c6a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015c6e:	4316      	orrs	r6, r2
 8015c70:	432e      	orrs	r6, r5
 8015c72:	f824 600c 	strh.w	r6, [r4, ip]
 8015c76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c78:	3f01      	subs	r7, #1
 8015c7a:	4410      	add	r0, r2
 8015c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c7e:	4411      	add	r1, r2
 8015c80:	e77e      	b.n	8015b80 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015c82:	f06f 0601 	mvn.w	r6, #1
 8015c86:	fa1f fa82 	uxth.w	sl, r2
 8015c8a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8015c8e:	43d2      	mvns	r2, r2
 8015c90:	437e      	muls	r6, r7
 8015c92:	b2ed      	uxtb	r5, r5
 8015c94:	fb1c fc0a 	smulbb	ip, ip, sl
 8015c98:	b2d2      	uxtb	r2, r2
 8015c9a:	f834 8006 	ldrh.w	r8, [r4, r6]
 8015c9e:	fb15 f50a 	smulbb	r5, r5, sl
 8015ca2:	9602      	str	r6, [sp, #8]
 8015ca4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8015ca8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8015cac:	fb16 f60a 	smulbb	r6, r6, sl
 8015cb0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8015cb4:	fb0e ce02 	mla	lr, lr, r2, ip
 8015cb8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8015cbc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015cc0:	fa1f fe8e 	uxth.w	lr, lr
 8015cc4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8015cc8:	fa5f f888 	uxtb.w	r8, r8
 8015ccc:	fb0c 6c02 	mla	ip, ip, r2, r6
 8015cd0:	fb08 5502 	mla	r5, r8, r2, r5
 8015cd4:	f10e 0201 	add.w	r2, lr, #1
 8015cd8:	fa1f fc8c 	uxth.w	ip, ip
 8015cdc:	b2ad      	uxth	r5, r5
 8015cde:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8015ce2:	9a02      	ldr	r2, [sp, #8]
 8015ce4:	1c6e      	adds	r6, r5, #1
 8015ce6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8015cea:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8015cee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8015cf2:	ea46 0e0e 	orr.w	lr, r6, lr
 8015cf6:	f10c 0601 	add.w	r6, ip, #1
 8015cfa:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8015cfe:	0976      	lsrs	r6, r6, #5
 8015d00:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8015d04:	ea4e 0e06 	orr.w	lr, lr, r6
 8015d08:	f824 e002 	strh.w	lr, [r4, r2]
 8015d0c:	e7b3      	b.n	8015c76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015d0e:	f04f 0800 	mov.w	r8, #0
 8015d12:	eba3 0208 	sub.w	r2, r3, r8
 8015d16:	2a00      	cmp	r2, #0
 8015d18:	f77f af35 	ble.w	8015b86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8015d1c:	1402      	asrs	r2, r0, #16
 8015d1e:	9e00      	ldr	r6, [sp, #0]
 8015d20:	140d      	asrs	r5, r1, #16
 8015d22:	fb06 2505 	mla	r5, r6, r5, r2
 8015d26:	9e01      	ldr	r6, [sp, #4]
 8015d28:	086a      	lsrs	r2, r5, #1
 8015d2a:	07ed      	lsls	r5, r5, #31
 8015d2c:	5cb2      	ldrb	r2, [r6, r2]
 8015d2e:	bf54      	ite	pl
 8015d30:	f002 020f 	andpl.w	r2, r2, #15
 8015d34:	1112      	asrmi	r2, r2, #4
 8015d36:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015d3a:	b2d2      	uxtb	r2, r2
 8015d3c:	b1c2      	cbz	r2, 8015d70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015d3e:	9d04      	ldr	r5, [sp, #16]
 8015d40:	436a      	muls	r2, r5
 8015d42:	1c55      	adds	r5, r2, #1
 8015d44:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8015d48:	4d2d      	ldr	r5, [pc, #180]	; (8015e00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8015d4a:	1212      	asrs	r2, r2, #8
 8015d4c:	682e      	ldr	r6, [r5, #0]
 8015d4e:	2aff      	cmp	r2, #255	; 0xff
 8015d50:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8015d54:	d113      	bne.n	8015d7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8015d56:	0972      	lsrs	r2, r6, #5
 8015d58:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8015d5c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8015d60:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015d64:	f025 0507 	bic.w	r5, r5, #7
 8015d68:	4315      	orrs	r5, r2
 8015d6a:	4335      	orrs	r5, r6
 8015d6c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8015d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015d72:	f108 0801 	add.w	r8, r8, #1
 8015d76:	4410      	add	r0, r2
 8015d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d7a:	4411      	add	r1, r2
 8015d7c:	e7c9      	b.n	8015d12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8015d7e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8015d82:	fa1f fa82 	uxth.w	sl, r2
 8015d86:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8015d8a:	43d2      	mvns	r2, r2
 8015d8c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015d90:	fb17 f70a 	smulbb	r7, r7, sl
 8015d94:	b2d2      	uxtb	r2, r2
 8015d96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015d9a:	b2f6      	uxtb	r6, r6
 8015d9c:	b2ed      	uxtb	r5, r5
 8015d9e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8015da2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8015da6:	fb16 f60a 	smulbb	r6, r6, sl
 8015daa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015dae:	fa1f fc8c 	uxth.w	ip, ip
 8015db2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015db6:	fb15 f50a 	smulbb	r5, r5, sl
 8015dba:	fa5f fe8e 	uxtb.w	lr, lr
 8015dbe:	fb0e 6602 	mla	r6, lr, r2, r6
 8015dc2:	fb07 5702 	mla	r7, r7, r2, r5
 8015dc6:	f10c 0201 	add.w	r2, ip, #1
 8015dca:	b2b6      	uxth	r6, r6
 8015dcc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8015dd0:	1c75      	adds	r5, r6, #1
 8015dd2:	b2bf      	uxth	r7, r7
 8015dd4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015dd8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8015ddc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015de0:	ea45 0c0c 	orr.w	ip, r5, ip
 8015de4:	1c7d      	adds	r5, r7, #1
 8015de6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8015dea:	096d      	lsrs	r5, r5, #5
 8015dec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015df0:	ea4c 0c05 	orr.w	ip, ip, r5
 8015df4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8015df8:	e7ba      	b.n	8015d70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015dfa:	b007      	add	sp, #28
 8015dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e00:	2002491c 	.word	0x2002491c

08015e04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e08:	b087      	sub	sp, #28
 8015e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e0e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8016118 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8015e12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015e14:	9101      	str	r1, [sp, #4]
 8015e16:	9205      	str	r2, [sp, #20]
 8015e18:	6841      	ldr	r1, [r0, #4]
 8015e1a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8015e1e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8015e22:	fb01 2404 	mla	r4, r1, r4, r2
 8015e26:	6802      	ldr	r2, [r0, #0]
 8015e28:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015e2c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8015e30:	3201      	adds	r2, #1
 8015e32:	f022 0201 	bic.w	r2, r2, #1
 8015e36:	9202      	str	r2, [sp, #8]
 8015e38:	f8db 2000 	ldr.w	r2, [fp]
 8015e3c:	9203      	str	r2, [sp, #12]
 8015e3e:	9a01      	ldr	r2, [sp, #4]
 8015e40:	2a00      	cmp	r2, #0
 8015e42:	dc03      	bgt.n	8015e4c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015e44:	9a05      	ldr	r2, [sp, #20]
 8015e46:	2a00      	cmp	r2, #0
 8015e48:	f340 8162 	ble.w	8016110 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8015e4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e4e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8015e52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015e58:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8015e5c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	dd0e      	ble.n	8015e82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015e64:	1402      	asrs	r2, r0, #16
 8015e66:	d405      	bmi.n	8015e74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e68:	42ba      	cmp	r2, r7
 8015e6a:	da03      	bge.n	8015e74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e6c:	140a      	asrs	r2, r1, #16
 8015e6e:	d401      	bmi.n	8015e74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e70:	42b2      	cmp	r2, r6
 8015e72:	db07      	blt.n	8015e84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015e74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015e76:	3b01      	subs	r3, #1
 8015e78:	3402      	adds	r4, #2
 8015e7a:	4410      	add	r0, r2
 8015e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e7e:	4411      	add	r1, r2
 8015e80:	e7ee      	b.n	8015e60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015e82:	d017      	beq.n	8015eb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015e84:	1e5a      	subs	r2, r3, #1
 8015e86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015e88:	fb05 0502 	mla	r5, r5, r2, r0
 8015e8c:	142d      	asrs	r5, r5, #16
 8015e8e:	d409      	bmi.n	8015ea4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015e90:	42bd      	cmp	r5, r7
 8015e92:	da07      	bge.n	8015ea4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015e94:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015e96:	fb05 1202 	mla	r2, r5, r2, r1
 8015e9a:	1412      	asrs	r2, r2, #16
 8015e9c:	d402      	bmi.n	8015ea4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015e9e:	42b2      	cmp	r2, r6
 8015ea0:	f2c0 80c3 	blt.w	801602a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8015ea4:	2500      	movs	r5, #0
 8015ea6:	195a      	adds	r2, r3, r5
 8015ea8:	2a00      	cmp	r2, #0
 8015eaa:	dc3f      	bgt.n	8015f2c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015eac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015eb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015eb4:	9b01      	ldr	r3, [sp, #4]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f340 812a 	ble.w	8016110 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8015ebc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015ec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ec2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ec6:	eeb0 6a62 	vmov.f32	s12, s5
 8015eca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015ece:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015ed2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015ed6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015eda:	eeb0 6a43 	vmov.f32	s12, s6
 8015ede:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015ee2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015ee6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015eea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015eee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ef2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015ef6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015efa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015efe:	ee12 2a90 	vmov	r2, s5
 8015f02:	eef0 2a47 	vmov.f32	s5, s14
 8015f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f0a:	ee13 2a10 	vmov	r2, s6
 8015f0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f12:	eeb0 3a67 	vmov.f32	s6, s15
 8015f16:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f1a:	9314      	str	r3, [sp, #80]	; 0x50
 8015f1c:	9b01      	ldr	r3, [sp, #4]
 8015f1e:	9a05      	ldr	r2, [sp, #20]
 8015f20:	3b01      	subs	r3, #1
 8015f22:	9301      	str	r3, [sp, #4]
 8015f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f26:	bf08      	it	eq
 8015f28:	4613      	moveq	r3, r2
 8015f2a:	e788      	b.n	8015e3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8015f2c:	1406      	asrs	r6, r0, #16
 8015f2e:	d42c      	bmi.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015f30:	f8db 2008 	ldr.w	r2, [fp, #8]
 8015f34:	42b2      	cmp	r2, r6
 8015f36:	dd28      	ble.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015f38:	140f      	asrs	r7, r1, #16
 8015f3a:	d426      	bmi.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015f3c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8015f40:	42ba      	cmp	r2, r7
 8015f42:	dd22      	ble.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015f44:	9a02      	ldr	r2, [sp, #8]
 8015f46:	fb07 6602 	mla	r6, r7, r2, r6
 8015f4a:	9f03      	ldr	r7, [sp, #12]
 8015f4c:	0872      	lsrs	r2, r6, #1
 8015f4e:	07f6      	lsls	r6, r6, #31
 8015f50:	5cba      	ldrb	r2, [r7, r2]
 8015f52:	bf54      	ite	pl
 8015f54:	f002 020f 	andpl.w	r2, r2, #15
 8015f58:	1112      	asrmi	r2, r2, #4
 8015f5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015f5e:	b2d2      	uxtb	r2, r2
 8015f60:	2aff      	cmp	r2, #255	; 0xff
 8015f62:	d118      	bne.n	8015f96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8015f64:	f06f 0601 	mvn.w	r6, #1
 8015f68:	f8d8 2000 	ldr.w	r2, [r8]
 8015f6c:	fb06 f705 	mul.w	r7, r6, r5
 8015f70:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8015f74:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8015f78:	0956      	lsrs	r6, r2, #5
 8015f7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015f7e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8015f82:	ea4c 0606 	orr.w	r6, ip, r6
 8015f86:	4316      	orrs	r6, r2
 8015f88:	53e6      	strh	r6, [r4, r7]
 8015f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015f8c:	3d01      	subs	r5, #1
 8015f8e:	4410      	add	r0, r2
 8015f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f92:	4411      	add	r1, r2
 8015f94:	e787      	b.n	8015ea6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015f96:	2a00      	cmp	r2, #0
 8015f98:	d0f7      	beq.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015f9a:	f06f 0601 	mvn.w	r6, #1
 8015f9e:	f8d8 c000 	ldr.w	ip, [r8]
 8015fa2:	fa1f f982 	uxth.w	r9, r2
 8015fa6:	43d2      	mvns	r2, r2
 8015fa8:	436e      	muls	r6, r5
 8015faa:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8015fae:	b2d2      	uxtb	r2, r2
 8015fb0:	f834 e006 	ldrh.w	lr, [r4, r6]
 8015fb4:	fb1a fa09 	smulbb	sl, sl, r9
 8015fb8:	9604      	str	r6, [sp, #16]
 8015fba:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8015fbe:	ea4f 272e 	mov.w	r7, lr, asr #8
 8015fc2:	fb16 f609 	smulbb	r6, r6, r9
 8015fc6:	fa5f fc8c 	uxtb.w	ip, ip
 8015fca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015fce:	fb1c fc09 	smulbb	ip, ip, r9
 8015fd2:	fb07 6702 	mla	r7, r7, r2, r6
 8015fd6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015fda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015fde:	b2bf      	uxth	r7, r7
 8015fe0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015fe4:	fa5f fe8e 	uxtb.w	lr, lr
 8015fe8:	fb06 a602 	mla	r6, r6, r2, sl
 8015fec:	fb0e cc02 	mla	ip, lr, r2, ip
 8015ff0:	1c7a      	adds	r2, r7, #1
 8015ff2:	b2b6      	uxth	r6, r6
 8015ff4:	fa1f fc8c 	uxth.w	ip, ip
 8015ff8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015ffc:	9a04      	ldr	r2, [sp, #16]
 8015ffe:	f10c 0a01 	add.w	sl, ip, #1
 8016002:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016006:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801600a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801600e:	ea4a 0707 	orr.w	r7, sl, r7
 8016012:	f106 0a01 	add.w	sl, r6, #1
 8016016:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801601a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801601e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016022:	ea47 070a 	orr.w	r7, r7, sl
 8016026:	52a7      	strh	r7, [r4, r2]
 8016028:	e7af      	b.n	8015f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801602a:	f04f 0e00 	mov.w	lr, #0
 801602e:	eba3 020e 	sub.w	r2, r3, lr
 8016032:	2a00      	cmp	r2, #0
 8016034:	f77f af3a 	ble.w	8015eac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8016038:	1402      	asrs	r2, r0, #16
 801603a:	9e02      	ldr	r6, [sp, #8]
 801603c:	140d      	asrs	r5, r1, #16
 801603e:	fb06 2505 	mla	r5, r6, r5, r2
 8016042:	9e03      	ldr	r6, [sp, #12]
 8016044:	086a      	lsrs	r2, r5, #1
 8016046:	07ed      	lsls	r5, r5, #31
 8016048:	5cb2      	ldrb	r2, [r6, r2]
 801604a:	bf54      	ite	pl
 801604c:	f002 020f 	andpl.w	r2, r2, #15
 8016050:	1112      	asrmi	r2, r2, #4
 8016052:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016056:	b2d2      	uxtb	r2, r2
 8016058:	2aff      	cmp	r2, #255	; 0xff
 801605a:	d115      	bne.n	8016088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801605c:	f8d8 5000 	ldr.w	r5, [r8]
 8016060:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8016064:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8016068:	096a      	lsrs	r2, r5, #5
 801606a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801606e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016072:	4332      	orrs	r2, r6
 8016074:	432a      	orrs	r2, r5
 8016076:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801607a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801607c:	f10e 0e01 	add.w	lr, lr, #1
 8016080:	4410      	add	r0, r2
 8016082:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016084:	4411      	add	r1, r2
 8016086:	e7d2      	b.n	801602e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016088:	2a00      	cmp	r2, #0
 801608a:	d0f6      	beq.n	801607a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801608c:	f8d8 7000 	ldr.w	r7, [r8]
 8016090:	fa1f f982 	uxth.w	r9, r2
 8016094:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8016098:	43d2      	mvns	r2, r2
 801609a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801609e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80160a2:	ea4f 262c 	mov.w	r6, ip, asr #8
 80160a6:	fb15 f509 	smulbb	r5, r5, r9
 80160aa:	b2d2      	uxtb	r2, r2
 80160ac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80160b0:	b2ff      	uxtb	r7, r7
 80160b2:	fb1a fa09 	smulbb	sl, sl, r9
 80160b6:	fb06 5602 	mla	r6, r6, r2, r5
 80160ba:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80160be:	fb17 f709 	smulbb	r7, r7, r9
 80160c2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80160c6:	b2b6      	uxth	r6, r6
 80160c8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80160cc:	fa5f fc8c 	uxtb.w	ip, ip
 80160d0:	fb05 a502 	mla	r5, r5, r2, sl
 80160d4:	fb0c 7702 	mla	r7, ip, r2, r7
 80160d8:	1c72      	adds	r2, r6, #1
 80160da:	b2ad      	uxth	r5, r5
 80160dc:	b2bf      	uxth	r7, r7
 80160de:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80160e2:	f107 0a01 	add.w	sl, r7, #1
 80160e6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80160ea:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80160ee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80160f2:	ea4a 0606 	orr.w	r6, sl, r6
 80160f6:	f105 0a01 	add.w	sl, r5, #1
 80160fa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80160fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016102:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016106:	ea46 060a 	orr.w	r6, r6, sl
 801610a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801610e:	e7b4      	b.n	801607a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016110:	b007      	add	sp, #28
 8016112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016116:	bf00      	nop
 8016118:	2002491c 	.word	0x2002491c

0801611c <_ZN8touchgfx8LCD16bppD1Ev>:
 801611c:	4770      	bx	lr

0801611e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801611e:	4770      	bx	lr

08016120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8016120:	4770      	bx	lr

08016122 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8016122:	4770      	bx	lr

08016124 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8016124:	4770      	bx	lr

08016126 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016126:	4770      	bx	lr

08016128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016128:	4770      	bx	lr

0801612a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801612a:	4770      	bx	lr

0801612c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801612c:	4770      	bx	lr

0801612e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801612e:	4770      	bx	lr

08016130 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8016130:	4770      	bx	lr

08016132 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016132:	4770      	bx	lr

08016134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016134:	4770      	bx	lr

08016136 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016136:	4770      	bx	lr

08016138 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8016138:	4770      	bx	lr

0801613a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801613a:	4770      	bx	lr

0801613c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801613c:	4770      	bx	lr

0801613e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801613e:	4770      	bx	lr

08016140 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016140:	4770      	bx	lr

08016142 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016142:	4770      	bx	lr

08016144 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016144:	4770      	bx	lr

08016146 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016146:	4770      	bx	lr

08016148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016148:	4770      	bx	lr

0801614a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801614a:	4770      	bx	lr

0801614c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801614c:	4770      	bx	lr

0801614e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801614e:	4770      	bx	lr

08016150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8016150:	4770      	bx	lr

08016152 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016152:	4770      	bx	lr

08016154 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8016154:	4770      	bx	lr

08016156 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8016156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801615a:	b088      	sub	sp, #32
 801615c:	4606      	mov	r6, r0
 801615e:	4688      	mov	r8, r1
 8016160:	4691      	mov	r9, r2
 8016162:	ac08      	add	r4, sp, #32
 8016164:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8016168:	4620      	mov	r0, r4
 801616a:	f7fd fc65 	bl	8013a38 <_ZNK8touchgfx6Bitmap7getDataEv>
 801616e:	6833      	ldr	r3, [r6, #0]
 8016170:	4605      	mov	r5, r0
 8016172:	4620      	mov	r0, r4
 8016174:	699f      	ldr	r7, [r3, #24]
 8016176:	f7fd fb73 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801617a:	4682      	mov	sl, r0
 801617c:	4620      	mov	r0, r4
 801617e:	f7fd fba3 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016182:	9500      	str	r5, [sp, #0]
 8016184:	464b      	mov	r3, r9
 8016186:	4642      	mov	r2, r8
 8016188:	4631      	mov	r1, r6
 801618a:	e9cd a001 	strd	sl, r0, [sp, #4]
 801618e:	a806      	add	r0, sp, #24
 8016190:	47b8      	blx	r7
 8016192:	4628      	mov	r0, r5
 8016194:	b008      	add	sp, #32
 8016196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801619c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801619c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161a0:	2300      	movs	r3, #0
 80161a2:	9300      	str	r3, [sp, #0]
 80161a4:	4b3d      	ldr	r3, [pc, #244]	; (801629c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d137      	bne.n	801621c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80161ac:	4a3c      	ldr	r2, [pc, #240]	; (80162a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80161ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d132      	bne.n	8016220 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80161ba:	4b3a      	ldr	r3, [pc, #232]	; (80162a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80161bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161c0:	ac02      	add	r4, sp, #8
 80161c2:	6808      	ldr	r0, [r1, #0]
 80161c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80161c8:	ab02      	add	r3, sp, #8
 80161ca:	6849      	ldr	r1, [r1, #4]
 80161cc:	4d36      	ldr	r5, [pc, #216]	; (80162a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80161ce:	c303      	stmia	r3!, {r0, r1}
 80161d0:	4669      	mov	r1, sp
 80161d2:	4620      	mov	r0, r4
 80161d4:	f7fa f9a0 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80161d8:	4668      	mov	r0, sp
 80161da:	f7fa f975 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80161de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80161e2:	f8bd 2000 	ldrh.w	r2, [sp]
 80161e6:	462f      	mov	r7, r5
 80161e8:	6828      	ldr	r0, [r5, #0]
 80161ea:	4413      	add	r3, r2
 80161ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80161f0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80161f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80161f8:	4413      	add	r3, r2
 80161fa:	f8ad 300a 	strh.w	r3, [sp, #10]
 80161fe:	6803      	ldr	r3, [r0, #0]
 8016200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016202:	4798      	blx	r3
 8016204:	f010 0f01 	tst.w	r0, #1
 8016208:	d00c      	beq.n	8016224 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801620a:	6828      	ldr	r0, [r5, #0]
 801620c:	6803      	ldr	r3, [r0, #0]
 801620e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016214:	4798      	blx	r3
 8016216:	b004      	add	sp, #16
 8016218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801621c:	4a21      	ldr	r2, [pc, #132]	; (80162a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801621e:	e7c6      	b.n	80161ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8016220:	4b1f      	ldr	r3, [pc, #124]	; (80162a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8016222:	e7cb      	b.n	80161bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8016224:	6838      	ldr	r0, [r7, #0]
 8016226:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801622a:	6803      	ldr	r3, [r0, #0]
 801622c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8016230:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8016234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016236:	4798      	blx	r3
 8016238:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801623c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016240:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8016244:	fb16 3602 	smlabb	r6, r6, r2, r3
 8016248:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801624c:	6838      	ldr	r0, [r7, #0]
 801624e:	6803      	ldr	r3, [r0, #0]
 8016250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016252:	4798      	blx	r3
 8016254:	4a12      	ldr	r2, [pc, #72]	; (80162a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8016256:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801625a:	8813      	ldrh	r3, [r2, #0]
 801625c:	4691      	mov	r9, r2
 801625e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016262:	435d      	muls	r5, r3
 8016264:	fb03 1404 	mla	r4, r3, r4, r1
 8016268:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801626c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8016270:	6838      	ldr	r0, [r7, #0]
 8016272:	42ac      	cmp	r4, r5
 8016274:	6803      	ldr	r3, [r0, #0]
 8016276:	d20e      	bcs.n	8016296 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8016278:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801627c:	4632      	mov	r2, r6
 801627e:	4643      	mov	r3, r8
 8016280:	4621      	mov	r1, r4
 8016282:	47d0      	blx	sl
 8016284:	f8b9 3000 	ldrh.w	r3, [r9]
 8016288:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801628c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016290:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8016294:	e7ec      	b.n	8016270 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8016296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016298:	4798      	blx	r3
 801629a:	e7bc      	b.n	8016216 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801629c:	2002490c 	.word	0x2002490c
 80162a0:	2002490e 	.word	0x2002490e
 80162a4:	20024910 	.word	0x20024910
 80162a8:	20024914 	.word	0x20024914

080162ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80162ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b0:	b08b      	sub	sp, #44	; 0x2c
 80162b2:	460f      	mov	r7, r1
 80162b4:	4616      	mov	r6, r2
 80162b6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80162ba:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80162be:	f1bb 0f00 	cmp.w	fp, #0
 80162c2:	d049      	beq.n	8016358 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80162c4:	6810      	ldr	r0, [r2, #0]
 80162c6:	ad06      	add	r5, sp, #24
 80162c8:	6851      	ldr	r1, [r2, #4]
 80162ca:	c503      	stmia	r5!, {r0, r1}
 80162cc:	6818      	ldr	r0, [r3, #0]
 80162ce:	ad08      	add	r5, sp, #32
 80162d0:	6859      	ldr	r1, [r3, #4]
 80162d2:	c503      	stmia	r5!, {r0, r1}
 80162d4:	a806      	add	r0, sp, #24
 80162d6:	f7fa f8f7 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80162da:	4631      	mov	r1, r6
 80162dc:	a808      	add	r0, sp, #32
 80162de:	f7fa f91b 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80162e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80162e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80162ea:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80162ee:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80162f2:	fb16 2103 	smlabb	r1, r6, r3, r2
 80162f6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80162fa:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80162fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016302:	4f5f      	ldr	r7, [pc, #380]	; (8016480 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8016304:	440a      	add	r2, r1
 8016306:	6838      	ldr	r0, [r7, #0]
 8016308:	46b9      	mov	r9, r7
 801630a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801630e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016312:	4413      	add	r3, r2
 8016314:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016318:	6803      	ldr	r3, [r0, #0]
 801631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801631c:	4798      	blx	r3
 801631e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8016322:	d01c      	beq.n	801635e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8016324:	f010 0f04 	tst.w	r0, #4
 8016328:	d01d      	beq.n	8016366 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801632a:	f8d9 0000 	ldr.w	r0, [r9]
 801632e:	2700      	movs	r7, #0
 8016330:	b2ad      	uxth	r5, r5
 8016332:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8016336:	6801      	ldr	r1, [r0, #0]
 8016338:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801633c:	f8cd b00c 	str.w	fp, [sp, #12]
 8016340:	9501      	str	r5, [sp, #4]
 8016342:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8016346:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801634a:	9402      	str	r4, [sp, #8]
 801634c:	fa1f f488 	uxth.w	r4, r8
 8016350:	9400      	str	r4, [sp, #0]
 8016352:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8016354:	4631      	mov	r1, r6
 8016356:	47a0      	blx	r4
 8016358:	b00b      	add	sp, #44	; 0x2c
 801635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801635e:	b914      	cbnz	r4, 8016366 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8016360:	f010 0f01 	tst.w	r0, #1
 8016364:	e7e0      	b.n	8016328 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8016366:	f8d9 0000 	ldr.w	r0, [r9]
 801636a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801636e:	6803      	ldr	r3, [r0, #0]
 8016370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016372:	4798      	blx	r3
 8016374:	4b43      	ldr	r3, [pc, #268]	; (8016484 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8016376:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801637a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801637e:	881a      	ldrh	r2, [r3, #0]
 8016380:	469a      	mov	sl, r3
 8016382:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8016386:	fb05 f502 	mul.w	r5, r5, r2
 801638a:	fb02 1404 	mla	r4, r2, r4, r1
 801638e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016392:	d059      	beq.n	8016448 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8016394:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8016398:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801639c:	fa1f f28b 	uxth.w	r2, fp
 80163a0:	469e      	mov	lr, r3
 80163a2:	fa1f f989 	uxth.w	r9, r9
 80163a6:	42ac      	cmp	r4, r5
 80163a8:	d264      	bcs.n	8016474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80163aa:	eb04 0a07 	add.w	sl, r4, r7
 80163ae:	4554      	cmp	r4, sl
 80163b0:	d23d      	bcs.n	801642e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80163b2:	8821      	ldrh	r1, [r4, #0]
 80163b4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80163b8:	1208      	asrs	r0, r1, #8
 80163ba:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80163be:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80163c2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80163c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80163ca:	00c9      	lsls	r1, r1, #3
 80163cc:	fb10 f009 	smulbb	r0, r0, r9
 80163d0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80163d4:	b2c9      	uxtb	r1, r1
 80163d6:	fb0c 0c02 	mla	ip, ip, r2, r0
 80163da:	10d8      	asrs	r0, r3, #3
 80163dc:	fb1b fb09 	smulbb	fp, fp, r9
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	fa1f fc8c 	uxth.w	ip, ip
 80163e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80163ea:	fb11 f109 	smulbb	r1, r1, r9
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	fb00 b002 	mla	r0, r0, r2, fp
 80163f4:	f10c 0b01 	add.w	fp, ip, #1
 80163f8:	fb03 1302 	mla	r3, r3, r2, r1
 80163fc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8016400:	b29b      	uxth	r3, r3
 8016402:	b280      	uxth	r0, r0
 8016404:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8016408:	f103 0c01 	add.w	ip, r3, #1
 801640c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8016410:	1c43      	adds	r3, r0, #1
 8016412:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8016416:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801641a:	0940      	lsrs	r0, r0, #5
 801641c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8016420:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8016424:	ea4c 0c00 	orr.w	ip, ip, r0
 8016428:	f824 cb02 	strh.w	ip, [r4], #2
 801642c:	e7bf      	b.n	80163ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801642e:	f8be 3000 	ldrh.w	r3, [lr]
 8016432:	eba3 0308 	sub.w	r3, r3, r8
 8016436:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801643a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801643e:	eba3 0308 	sub.w	r3, r3, r8
 8016442:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8016446:	e7ae      	b.n	80163a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8016448:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801644c:	f8d9 0000 	ldr.w	r0, [r9]
 8016450:	42ac      	cmp	r4, r5
 8016452:	6803      	ldr	r3, [r0, #0]
 8016454:	d20e      	bcs.n	8016474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8016456:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801645a:	4632      	mov	r2, r6
 801645c:	463b      	mov	r3, r7
 801645e:	4621      	mov	r1, r4
 8016460:	47c0      	blx	r8
 8016462:	f8ba 3000 	ldrh.w	r3, [sl]
 8016466:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801646a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801646e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8016472:	e7eb      	b.n	801644c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8016474:	4b02      	ldr	r3, [pc, #8]	; (8016480 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8016476:	6818      	ldr	r0, [r3, #0]
 8016478:	6803      	ldr	r3, [r0, #0]
 801647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801647c:	4798      	blx	r3
 801647e:	e76b      	b.n	8016358 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8016480:	20024914 	.word	0x20024914
 8016484:	2002490e 	.word	0x2002490e

08016488 <_ZN8touchgfx8LCD16bppD0Ev>:
 8016488:	b510      	push	{r4, lr}
 801648a:	4604      	mov	r4, r0
 801648c:	2178      	movs	r1, #120	; 0x78
 801648e:	f008 ffca 	bl	801f426 <_ZdlPvj>
 8016492:	4620      	mov	r0, r4
 8016494:	bd10      	pop	{r4, pc}

08016496 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8016496:	b510      	push	{r4, lr}
 8016498:	4604      	mov	r4, r0
 801649a:	2104      	movs	r1, #4
 801649c:	f008 ffc3 	bl	801f426 <_ZdlPvj>
 80164a0:	4620      	mov	r0, r4
 80164a2:	bd10      	pop	{r4, pc}

080164a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	4604      	mov	r4, r0
 80164a8:	2104      	movs	r1, #4
 80164aa:	f008 ffbc 	bl	801f426 <_ZdlPvj>
 80164ae:	4620      	mov	r0, r4
 80164b0:	bd10      	pop	{r4, pc}

080164b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80164b2:	b510      	push	{r4, lr}
 80164b4:	4604      	mov	r4, r0
 80164b6:	2104      	movs	r1, #4
 80164b8:	f008 ffb5 	bl	801f426 <_ZdlPvj>
 80164bc:	4620      	mov	r0, r4
 80164be:	bd10      	pop	{r4, pc}

080164c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80164c0:	b510      	push	{r4, lr}
 80164c2:	4604      	mov	r4, r0
 80164c4:	2104      	movs	r1, #4
 80164c6:	f008 ffae 	bl	801f426 <_ZdlPvj>
 80164ca:	4620      	mov	r0, r4
 80164cc:	bd10      	pop	{r4, pc}

080164ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80164ce:	b510      	push	{r4, lr}
 80164d0:	4604      	mov	r4, r0
 80164d2:	2104      	movs	r1, #4
 80164d4:	f008 ffa7 	bl	801f426 <_ZdlPvj>
 80164d8:	4620      	mov	r0, r4
 80164da:	bd10      	pop	{r4, pc}

080164dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80164dc:	b510      	push	{r4, lr}
 80164de:	4604      	mov	r4, r0
 80164e0:	2104      	movs	r1, #4
 80164e2:	f008 ffa0 	bl	801f426 <_ZdlPvj>
 80164e6:	4620      	mov	r0, r4
 80164e8:	bd10      	pop	{r4, pc}

080164ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80164ea:	b510      	push	{r4, lr}
 80164ec:	4604      	mov	r4, r0
 80164ee:	2104      	movs	r1, #4
 80164f0:	f008 ff99 	bl	801f426 <_ZdlPvj>
 80164f4:	4620      	mov	r0, r4
 80164f6:	bd10      	pop	{r4, pc}

080164f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80164f8:	b510      	push	{r4, lr}
 80164fa:	4604      	mov	r4, r0
 80164fc:	2104      	movs	r1, #4
 80164fe:	f008 ff92 	bl	801f426 <_ZdlPvj>
 8016502:	4620      	mov	r0, r4
 8016504:	bd10      	pop	{r4, pc}

08016506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8016506:	b510      	push	{r4, lr}
 8016508:	4604      	mov	r4, r0
 801650a:	2104      	movs	r1, #4
 801650c:	f008 ff8b 	bl	801f426 <_ZdlPvj>
 8016510:	4620      	mov	r0, r4
 8016512:	bd10      	pop	{r4, pc}

08016514 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8016514:	b510      	push	{r4, lr}
 8016516:	4604      	mov	r4, r0
 8016518:	2104      	movs	r1, #4
 801651a:	f008 ff84 	bl	801f426 <_ZdlPvj>
 801651e:	4620      	mov	r0, r4
 8016520:	bd10      	pop	{r4, pc}

08016522 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8016522:	b510      	push	{r4, lr}
 8016524:	4604      	mov	r4, r0
 8016526:	2104      	movs	r1, #4
 8016528:	f008 ff7d 	bl	801f426 <_ZdlPvj>
 801652c:	4620      	mov	r0, r4
 801652e:	bd10      	pop	{r4, pc}

08016530 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8016530:	b510      	push	{r4, lr}
 8016532:	4604      	mov	r4, r0
 8016534:	2104      	movs	r1, #4
 8016536:	f008 ff76 	bl	801f426 <_ZdlPvj>
 801653a:	4620      	mov	r0, r4
 801653c:	bd10      	pop	{r4, pc}

0801653e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801653e:	b510      	push	{r4, lr}
 8016540:	4604      	mov	r4, r0
 8016542:	2104      	movs	r1, #4
 8016544:	f008 ff6f 	bl	801f426 <_ZdlPvj>
 8016548:	4620      	mov	r0, r4
 801654a:	bd10      	pop	{r4, pc}

0801654c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801654c:	b510      	push	{r4, lr}
 801654e:	4604      	mov	r4, r0
 8016550:	2104      	movs	r1, #4
 8016552:	f008 ff68 	bl	801f426 <_ZdlPvj>
 8016556:	4620      	mov	r0, r4
 8016558:	bd10      	pop	{r4, pc}

0801655a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801655a:	b510      	push	{r4, lr}
 801655c:	4604      	mov	r4, r0
 801655e:	2104      	movs	r1, #4
 8016560:	f008 ff61 	bl	801f426 <_ZdlPvj>
 8016564:	4620      	mov	r0, r4
 8016566:	bd10      	pop	{r4, pc}

08016568 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8016568:	b510      	push	{r4, lr}
 801656a:	4604      	mov	r4, r0
 801656c:	2104      	movs	r1, #4
 801656e:	f008 ff5a 	bl	801f426 <_ZdlPvj>
 8016572:	4620      	mov	r0, r4
 8016574:	bd10      	pop	{r4, pc}

08016576 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016576:	b510      	push	{r4, lr}
 8016578:	4604      	mov	r4, r0
 801657a:	2104      	movs	r1, #4
 801657c:	f008 ff53 	bl	801f426 <_ZdlPvj>
 8016580:	4620      	mov	r0, r4
 8016582:	bd10      	pop	{r4, pc}

08016584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8016584:	b510      	push	{r4, lr}
 8016586:	4604      	mov	r4, r0
 8016588:	2104      	movs	r1, #4
 801658a:	f008 ff4c 	bl	801f426 <_ZdlPvj>
 801658e:	4620      	mov	r0, r4
 8016590:	bd10      	pop	{r4, pc}

08016592 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8016592:	b510      	push	{r4, lr}
 8016594:	4604      	mov	r4, r0
 8016596:	2104      	movs	r1, #4
 8016598:	f008 ff45 	bl	801f426 <_ZdlPvj>
 801659c:	4620      	mov	r0, r4
 801659e:	bd10      	pop	{r4, pc}

080165a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80165a0:	b510      	push	{r4, lr}
 80165a2:	4604      	mov	r4, r0
 80165a4:	2104      	movs	r1, #4
 80165a6:	f008 ff3e 	bl	801f426 <_ZdlPvj>
 80165aa:	4620      	mov	r0, r4
 80165ac:	bd10      	pop	{r4, pc}

080165ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80165ae:	b510      	push	{r4, lr}
 80165b0:	4604      	mov	r4, r0
 80165b2:	2104      	movs	r1, #4
 80165b4:	f008 ff37 	bl	801f426 <_ZdlPvj>
 80165b8:	4620      	mov	r0, r4
 80165ba:	bd10      	pop	{r4, pc}

080165bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80165bc:	b510      	push	{r4, lr}
 80165be:	4604      	mov	r4, r0
 80165c0:	2104      	movs	r1, #4
 80165c2:	f008 ff30 	bl	801f426 <_ZdlPvj>
 80165c6:	4620      	mov	r0, r4
 80165c8:	bd10      	pop	{r4, pc}

080165ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80165ca:	b510      	push	{r4, lr}
 80165cc:	4604      	mov	r4, r0
 80165ce:	2104      	movs	r1, #4
 80165d0:	f008 ff29 	bl	801f426 <_ZdlPvj>
 80165d4:	4620      	mov	r0, r4
 80165d6:	bd10      	pop	{r4, pc}

080165d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80165d8:	b510      	push	{r4, lr}
 80165da:	4604      	mov	r4, r0
 80165dc:	2104      	movs	r1, #4
 80165de:	f008 ff22 	bl	801f426 <_ZdlPvj>
 80165e2:	4620      	mov	r0, r4
 80165e4:	bd10      	pop	{r4, pc}

080165e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80165e6:	b510      	push	{r4, lr}
 80165e8:	4604      	mov	r4, r0
 80165ea:	2104      	movs	r1, #4
 80165ec:	f008 ff1b 	bl	801f426 <_ZdlPvj>
 80165f0:	4620      	mov	r0, r4
 80165f2:	bd10      	pop	{r4, pc}

080165f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80165f4:	b510      	push	{r4, lr}
 80165f6:	4604      	mov	r4, r0
 80165f8:	2104      	movs	r1, #4
 80165fa:	f008 ff14 	bl	801f426 <_ZdlPvj>
 80165fe:	4620      	mov	r0, r4
 8016600:	bd10      	pop	{r4, pc}

08016602 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8016602:	b510      	push	{r4, lr}
 8016604:	4604      	mov	r4, r0
 8016606:	2104      	movs	r1, #4
 8016608:	f008 ff0d 	bl	801f426 <_ZdlPvj>
 801660c:	4620      	mov	r0, r4
 801660e:	bd10      	pop	{r4, pc}

08016610 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8016610:	b510      	push	{r4, lr}
 8016612:	4604      	mov	r4, r0
 8016614:	2104      	movs	r1, #4
 8016616:	f008 ff06 	bl	801f426 <_ZdlPvj>
 801661a:	4620      	mov	r0, r4
 801661c:	bd10      	pop	{r4, pc}
	...

08016620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8016620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016624:	b091      	sub	sp, #68	; 0x44
 8016626:	469b      	mov	fp, r3
 8016628:	4616      	mov	r6, r2
 801662a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801662e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8016632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016636:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801663a:	4604      	mov	r4, r0
 801663c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8016640:	4640      	mov	r0, r8
 8016642:	460d      	mov	r5, r1
 8016644:	4659      	mov	r1, fp
 8016646:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801664a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801664e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8016652:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8016656:	f7f6 fe91 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 801665a:	4631      	mov	r1, r6
 801665c:	4640      	mov	r0, r8
 801665e:	f7f6 fe8d 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 8016662:	4b74      	ldr	r3, [pc, #464]	; (8016834 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8016664:	8818      	ldrh	r0, [r3, #0]
 8016666:	4b74      	ldr	r3, [pc, #464]	; (8016838 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8016668:	b202      	sxth	r2, r0
 801666a:	8819      	ldrh	r1, [r3, #0]
 801666c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8016670:	b20e      	sxth	r6, r1
 8016672:	2b00      	cmp	r3, #0
 8016674:	da07      	bge.n	8016686 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8016676:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801667a:	4463      	add	r3, ip
 801667c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8016680:	2300      	movs	r3, #0
 8016682:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8016686:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801668a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801668e:	1ad2      	subs	r2, r2, r3
 8016690:	4594      	cmp	ip, r2
 8016692:	bfc4      	itt	gt
 8016694:	1ac2      	subgt	r2, r0, r3
 8016696:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801669a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801669e:	2a00      	cmp	r2, #0
 80166a0:	da07      	bge.n	80166b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 80166a2:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 80166a6:	4462      	add	r2, ip
 80166a8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80166ac:	2200      	movs	r2, #0
 80166ae:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80166b2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80166b6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80166ba:	eba6 060a 	sub.w	r6, r6, sl
 80166be:	42b2      	cmp	r2, r6
 80166c0:	bfc4      	itt	gt
 80166c2:	eba1 020a 	subgt.w	r2, r1, sl
 80166c6:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 80166ca:	4a5c      	ldr	r2, [pc, #368]	; (801683c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80166cc:	7812      	ldrb	r2, [r2, #0]
 80166ce:	b9a2      	cbnz	r2, 80166fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80166d0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80166d4:	4286      	cmp	r6, r0
 80166d6:	4640      	mov	r0, r8
 80166d8:	9303      	str	r3, [sp, #12]
 80166da:	bf14      	ite	ne
 80166dc:	2600      	movne	r6, #0
 80166de:	2601      	moveq	r6, #1
 80166e0:	f7f6 fe8f 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 80166e4:	9b03      	ldr	r3, [sp, #12]
 80166e6:	b160      	cbz	r0, 8016702 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80166e8:	2300      	movs	r3, #0
 80166ea:	8023      	strh	r3, [r4, #0]
 80166ec:	8063      	strh	r3, [r4, #2]
 80166ee:	80a3      	strh	r3, [r4, #4]
 80166f0:	4620      	mov	r0, r4
 80166f2:	80e3      	strh	r3, [r4, #6]
 80166f4:	b011      	add	sp, #68	; 0x44
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80166fe:	428e      	cmp	r6, r1
 8016700:	e7e9      	b.n	80166d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8016702:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016706:	a90e      	add	r1, sp, #56	; 0x38
 8016708:	900e      	str	r0, [sp, #56]	; 0x38
 801670a:	a80c      	add	r0, sp, #48	; 0x30
 801670c:	9205      	str	r2, [sp, #20]
 801670e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8016712:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8016716:	9206      	str	r2, [sp, #24]
 8016718:	f8bb 2000 	ldrh.w	r2, [fp]
 801671c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8016720:	1a9b      	subs	r3, r3, r2
 8016722:	b21b      	sxth	r3, r3
 8016724:	9303      	str	r3, [sp, #12]
 8016726:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801672a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8016844 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801672e:	ebaa 0a03 	sub.w	sl, sl, r3
 8016732:	fa0f f38a 	sxth.w	r3, sl
 8016736:	9304      	str	r3, [sp, #16]
 8016738:	9b03      	ldr	r3, [sp, #12]
 801673a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801673e:	9b04      	ldr	r3, [sp, #16]
 8016740:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016744:	9b05      	ldr	r3, [sp, #20]
 8016746:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801674a:	9b06      	ldr	r3, [sp, #24]
 801674c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016750:	f7f9 fee2 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016754:	4640      	mov	r0, r8
 8016756:	f7f9 feb7 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801675a:	a80e      	add	r0, sp, #56	; 0x38
 801675c:	f7f9 feb4 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016760:	4b37      	ldr	r3, [pc, #220]	; (8016840 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8016762:	4628      	mov	r0, r5
 8016764:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8016768:	881b      	ldrh	r3, [r3, #0]
 801676a:	9307      	str	r3, [sp, #28]
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016770:	4798      	blx	r3
 8016772:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8016776:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801677a:	4681      	mov	r9, r0
 801677c:	f8db 0000 	ldr.w	r0, [fp]
 8016780:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8016784:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016786:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801678a:	6803      	ldr	r3, [r0, #0]
 801678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801678e:	4798      	blx	r3
 8016790:	4607      	mov	r7, r0
 8016792:	f8db 0000 	ldr.w	r0, [fp]
 8016796:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801679a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801679e:	6803      	ldr	r3, [r0, #0]
 80167a0:	9109      	str	r1, [sp, #36]	; 0x24
 80167a2:	9208      	str	r2, [sp, #32]
 80167a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167a6:	4798      	blx	r3
 80167a8:	f010 0f01 	tst.w	r0, #1
 80167ac:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80167b0:	d012      	beq.n	80167d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80167b2:	f8db 0000 	ldr.w	r0, [fp]
 80167b6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80167ba:	6803      	ldr	r3, [r0, #0]
 80167bc:	9200      	str	r2, [sp, #0]
 80167be:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80167c0:	462b      	mov	r3, r5
 80167c2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80167c6:	47b0      	blx	r6
 80167c8:	9b03      	ldr	r3, [sp, #12]
 80167ca:	8023      	strh	r3, [r4, #0]
 80167cc:	9b04      	ldr	r3, [sp, #16]
 80167ce:	8063      	strh	r3, [r4, #2]
 80167d0:	9b05      	ldr	r3, [sp, #20]
 80167d2:	80a3      	strh	r3, [r4, #4]
 80167d4:	9b06      	ldr	r3, [sp, #24]
 80167d6:	e78b      	b.n	80166f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80167d8:	fb09 f202 	mul.w	r2, r9, r2
 80167dc:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80167e0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80167e4:	440f      	add	r7, r1
 80167e6:	b166      	cbz	r6, 8016802 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80167e8:	9a07      	ldr	r2, [sp, #28]
 80167ea:	4592      	cmp	sl, r2
 80167ec:	d109      	bne.n	8016802 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80167ee:	f8db 0000 	ldr.w	r0, [fp]
 80167f2:	fb09 f303 	mul.w	r3, r9, r3
 80167f6:	4629      	mov	r1, r5
 80167f8:	6802      	ldr	r2, [r0, #0]
 80167fa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80167fc:	463a      	mov	r2, r7
 80167fe:	47b0      	blx	r6
 8016800:	e7e2      	b.n	80167c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8016802:	fb0a f303 	mul.w	r3, sl, r3
 8016806:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801680a:	f8df b038 	ldr.w	fp, [pc, #56]	; 8016844 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801680e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8016812:	4545      	cmp	r5, r8
 8016814:	d2d8      	bcs.n	80167c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8016816:	f8db 0000 	ldr.w	r0, [fp]
 801681a:	4629      	mov	r1, r5
 801681c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016820:	4435      	add	r5, r6
 8016822:	6802      	ldr	r2, [r0, #0]
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801682a:	463a      	mov	r2, r7
 801682c:	47d0      	blx	sl
 801682e:	444f      	add	r7, r9
 8016830:	e7ef      	b.n	8016812 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8016832:	bf00      	nop
 8016834:	20024908 	.word	0x20024908
 8016838:	2002490a 	.word	0x2002490a
 801683c:	2002490c 	.word	0x2002490c
 8016840:	2002490e 	.word	0x2002490e
 8016844:	20024914 	.word	0x20024914

08016848 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8016848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801684a:	4606      	mov	r6, r0
 801684c:	b087      	sub	sp, #28
 801684e:	460c      	mov	r4, r1
 8016850:	4617      	mov	r7, r2
 8016852:	461d      	mov	r5, r3
 8016854:	b333      	cbz	r3, 80168a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8016856:	4608      	mov	r0, r1
 8016858:	f7f6 fdd3 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 801685c:	bb10      	cbnz	r0, 80168a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801685e:	6820      	ldr	r0, [r4, #0]
 8016860:	ab04      	add	r3, sp, #16
 8016862:	6861      	ldr	r1, [r4, #4]
 8016864:	4c1b      	ldr	r4, [pc, #108]	; (80168d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8016866:	c303      	stmia	r3!, {r0, r1}
 8016868:	a804      	add	r0, sp, #16
 801686a:	f7f9 fe2d 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801686e:	6820      	ldr	r0, [r4, #0]
 8016870:	6803      	ldr	r3, [r0, #0]
 8016872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016874:	4798      	blx	r3
 8016876:	2dff      	cmp	r5, #255	; 0xff
 8016878:	d016      	beq.n	80168a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801687a:	f010 0f08 	tst.w	r0, #8
 801687e:	6820      	ldr	r0, [r4, #0]
 8016880:	d015      	beq.n	80168ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8016882:	2400      	movs	r4, #0
 8016884:	6801      	ldr	r1, [r0, #0]
 8016886:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801688a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801688e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8016892:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8016896:	9401      	str	r4, [sp, #4]
 8016898:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801689c:	9400      	str	r4, [sp, #0]
 801689e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80168a0:	4639      	mov	r1, r7
 80168a2:	47a0      	blx	r4
 80168a4:	b007      	add	sp, #28
 80168a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168a8:	f010 0f02 	tst.w	r0, #2
 80168ac:	e7e7      	b.n	801687e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80168ae:	6803      	ldr	r3, [r0, #0]
 80168b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168b2:	4798      	blx	r3
 80168b4:	4b08      	ldr	r3, [pc, #32]	; (80168d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80168b6:	4601      	mov	r1, r0
 80168b8:	4630      	mov	r0, r6
 80168ba:	881a      	ldrh	r2, [r3, #0]
 80168bc:	6833      	ldr	r3, [r6, #0]
 80168be:	e9cd 7500 	strd	r7, r5, [sp]
 80168c2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80168c4:	ab04      	add	r3, sp, #16
 80168c6:	47a8      	blx	r5
 80168c8:	6820      	ldr	r0, [r4, #0]
 80168ca:	6803      	ldr	r3, [r0, #0]
 80168cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ce:	4798      	blx	r3
 80168d0:	e7e8      	b.n	80168a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80168d2:	bf00      	nop
 80168d4:	20024914 	.word	0x20024914
 80168d8:	2002490e 	.word	0x2002490e

080168dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80168dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80168e4:	4688      	mov	r8, r1
 80168e6:	4614      	mov	r4, r2
 80168e8:	461d      	mov	r5, r3
 80168ea:	9e08      	ldr	r6, [sp, #32]
 80168ec:	2f00      	cmp	r7, #0
 80168ee:	f000 80ab 	beq.w	8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f6 fd85 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 80168f8:	2800      	cmp	r0, #0
 80168fa:	f040 80a5 	bne.w	8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80168fe:	f9b5 1000 	ldrsh.w	r1, [r5]
 8016902:	2fff      	cmp	r7, #255	; 0xff
 8016904:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016908:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801690c:	fb04 1303 	mla	r3, r4, r3, r1
 8016910:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8016914:	eba4 0200 	sub.w	r2, r4, r0
 8016918:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801691c:	fb04 f505 	mul.w	r5, r4, r5
 8016920:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8016924:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8016928:	d04a      	beq.n	80169c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801692a:	b2bc      	uxth	r4, r7
 801692c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8016930:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8016934:	fa5f f788 	uxtb.w	r7, r8
 8016938:	b2f3      	uxtb	r3, r6
 801693a:	0040      	lsls	r0, r0, #1
 801693c:	fb0e fe04 	mul.w	lr, lr, r4
 8016940:	4367      	muls	r7, r4
 8016942:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8016946:	4363      	muls	r3, r4
 8016948:	fa1f fc8c 	uxth.w	ip, ip
 801694c:	42a9      	cmp	r1, r5
 801694e:	d27b      	bcs.n	8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8016950:	eb01 0900 	add.w	r9, r1, r0
 8016954:	4549      	cmp	r1, r9
 8016956:	d231      	bcs.n	80169bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8016958:	880a      	ldrh	r2, [r1, #0]
 801695a:	1214      	asrs	r4, r2, #8
 801695c:	10d6      	asrs	r6, r2, #3
 801695e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8016962:	00d2      	lsls	r2, r2, #3
 8016964:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016968:	b2d2      	uxtb	r2, r2
 801696a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801696e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016972:	fb14 f40c 	smulbb	r4, r4, ip
 8016976:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801697a:	fb12 f20c 	smulbb	r2, r2, ip
 801697e:	fb16 f60c 	smulbb	r6, r6, ip
 8016982:	4474      	add	r4, lr
 8016984:	441a      	add	r2, r3
 8016986:	b2a4      	uxth	r4, r4
 8016988:	443e      	add	r6, r7
 801698a:	b292      	uxth	r2, r2
 801698c:	f104 0a01 	add.w	sl, r4, #1
 8016990:	b2b6      	uxth	r6, r6
 8016992:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8016996:	f102 0a01 	add.w	sl, r2, #1
 801699a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801699e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80169a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80169a6:	4322      	orrs	r2, r4
 80169a8:	1c74      	adds	r4, r6, #1
 80169aa:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80169ae:	0976      	lsrs	r6, r6, #5
 80169b0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80169b4:	4332      	orrs	r2, r6
 80169b6:	f821 2b02 	strh.w	r2, [r1], #2
 80169ba:	e7cb      	b.n	8016954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 80169bc:	4441      	add	r1, r8
 80169be:	e7c5      	b.n	801694c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80169c0:	0973      	lsrs	r3, r6, #5
 80169c2:	4f22      	ldr	r7, [pc, #136]	; (8016a4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 80169c4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80169c8:	ea08 0707 	and.w	r7, r8, r7
 80169cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80169d0:	433b      	orrs	r3, r7
 80169d2:	07e7      	lsls	r7, r4, #31
 80169d4:	ea43 0306 	orr.w	r3, r3, r6
 80169d8:	b29b      	uxth	r3, r3
 80169da:	d50b      	bpl.n	80169f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 80169dc:	0040      	lsls	r0, r0, #1
 80169de:	0052      	lsls	r2, r2, #1
 80169e0:	42a9      	cmp	r1, r5
 80169e2:	d231      	bcs.n	8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80169e4:	180c      	adds	r4, r1, r0
 80169e6:	42a1      	cmp	r1, r4
 80169e8:	d202      	bcs.n	80169f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80169ea:	f821 3b02 	strh.w	r3, [r1], #2
 80169ee:	e7fa      	b.n	80169e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80169f0:	4411      	add	r1, r2
 80169f2:	e7f5      	b.n	80169e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80169f4:	078e      	lsls	r6, r1, #30
 80169f6:	d008      	beq.n	8016a0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80169f8:	0066      	lsls	r6, r4, #1
 80169fa:	460a      	mov	r2, r1
 80169fc:	42aa      	cmp	r2, r5
 80169fe:	d202      	bcs.n	8016a06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8016a00:	8013      	strh	r3, [r2, #0]
 8016a02:	4432      	add	r2, r6
 8016a04:	e7fa      	b.n	80169fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8016a06:	3102      	adds	r1, #2
 8016a08:	3801      	subs	r0, #1
 8016a0a:	07c2      	lsls	r2, r0, #31
 8016a0c:	d50b      	bpl.n	8016a26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8016a0e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8016a12:	0066      	lsls	r6, r4, #1
 8016a14:	3a01      	subs	r2, #1
 8016a16:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8016a1a:	42aa      	cmp	r2, r5
 8016a1c:	d202      	bcs.n	8016a24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8016a1e:	8013      	strh	r3, [r2, #0]
 8016a20:	4432      	add	r2, r6
 8016a22:	e7fa      	b.n	8016a1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8016a24:	3801      	subs	r0, #1
 8016a26:	b178      	cbz	r0, 8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8016a28:	1040      	asrs	r0, r0, #1
 8016a2a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8016a2e:	0080      	lsls	r0, r0, #2
 8016a30:	0064      	lsls	r4, r4, #1
 8016a32:	42a9      	cmp	r1, r5
 8016a34:	d208      	bcs.n	8016a48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8016a36:	180e      	adds	r6, r1, r0
 8016a38:	460a      	mov	r2, r1
 8016a3a:	42b2      	cmp	r2, r6
 8016a3c:	d202      	bcs.n	8016a44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8016a3e:	f842 3b04 	str.w	r3, [r2], #4
 8016a42:	e7fa      	b.n	8016a3a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8016a44:	4421      	add	r1, r4
 8016a46:	e7f4      	b.n	8016a32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8016a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a4c:	00fff800 	.word	0x00fff800

08016a50 <_ZN8touchgfx8LCD16bppC1Ev>:
 8016a50:	2200      	movs	r2, #0
 8016a52:	4910      	ldr	r1, [pc, #64]	; (8016a94 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8016a54:	6042      	str	r2, [r0, #4]
 8016a56:	6001      	str	r1, [r0, #0]
 8016a58:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8016a5c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8016a60:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8016a64:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8016a68:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8016a6c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8016a70:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8016a74:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8016a78:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8016a7c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8016a80:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016a84:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016a88:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8016a8c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8016a90:	4770      	bx	lr
 8016a92:	bf00      	nop
 8016a94:	080240d0 	.word	0x080240d0

08016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8016a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a9c:	b08d      	sub	sp, #52	; 0x34
 8016a9e:	460d      	mov	r5, r1
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	4699      	mov	r9, r3
 8016aa4:	6808      	ldr	r0, [r1, #0]
 8016aa6:	ab08      	add	r3, sp, #32
 8016aa8:	6849      	ldr	r1, [r1, #4]
 8016aaa:	c303      	stmia	r3!, {r0, r1}
 8016aac:	6810      	ldr	r0, [r2, #0]
 8016aae:	ab0a      	add	r3, sp, #40	; 0x28
 8016ab0:	6851      	ldr	r1, [r2, #4]
 8016ab2:	c303      	stmia	r3!, {r0, r1}
 8016ab4:	a808      	add	r0, sp, #32
 8016ab6:	f7f9 fd07 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016aba:	4629      	mov	r1, r5
 8016abc:	a80a      	add	r0, sp, #40	; 0x28
 8016abe:	4d67      	ldr	r5, [pc, #412]	; (8016c5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8016ac0:	f7f9 fd2a 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016ac4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8016ac8:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8016acc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8016ad0:	6828      	ldr	r0, [r5, #0]
 8016ad2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016ad6:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8016ada:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8016ade:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016ae2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8016ae6:	440a      	add	r2, r1
 8016ae8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016aec:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016af0:	4413      	add	r3, r2
 8016af2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016af6:	6803      	ldr	r3, [r0, #0]
 8016af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016afa:	4798      	blx	r3
 8016afc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016b00:	d119      	bne.n	8016b36 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8016b02:	f010 0f20 	tst.w	r0, #32
 8016b06:	6828      	ldr	r0, [r5, #0]
 8016b08:	d018      	beq.n	8016b3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8016b0a:	2500      	movs	r5, #0
 8016b0c:	6801      	ldr	r1, [r0, #0]
 8016b0e:	b2b6      	uxth	r6, r6
 8016b10:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8016b14:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8016b18:	9601      	str	r6, [sp, #4]
 8016b1a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8016b1e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8016b22:	9502      	str	r5, [sp, #8]
 8016b24:	fa1f f588 	uxth.w	r5, r8
 8016b28:	9500      	str	r5, [sp, #0]
 8016b2a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	47a8      	blx	r5
 8016b30:	b00d      	add	sp, #52	; 0x34
 8016b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b3a:	e7e4      	b.n	8016b06 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8016b3c:	6803      	ldr	r3, [r0, #0]
 8016b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b40:	4798      	blx	r3
 8016b42:	4947      	ldr	r1, [pc, #284]	; (8016c60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8016b44:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8016b48:	880b      	ldrh	r3, [r1, #0]
 8016b4a:	468a      	mov	sl, r1
 8016b4c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8016b50:	fb03 5202 	mla	r2, r3, r2, r5
 8016b54:	4373      	muls	r3, r6
 8016b56:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016b5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016b5e:	9307      	str	r3, [sp, #28]
 8016b60:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8016b64:	9306      	str	r3, [sp, #24]
 8016b66:	9b07      	ldr	r3, [sp, #28]
 8016b68:	4298      	cmp	r0, r3
 8016b6a:	d270      	bcs.n	8016c4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8016b6c:	9b06      	ldr	r3, [sp, #24]
 8016b6e:	4621      	mov	r1, r4
 8016b70:	eb00 0b03 	add.w	fp, r0, r3
 8016b74:	4558      	cmp	r0, fp
 8016b76:	d25d      	bcs.n	8016c34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8016b78:	f851 4b04 	ldr.w	r4, [r1], #4
 8016b7c:	0e23      	lsrs	r3, r4, #24
 8016b7e:	d014      	beq.n	8016baa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8016b80:	2bff      	cmp	r3, #255	; 0xff
 8016b82:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8016b86:	d112      	bne.n	8016bae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8016b88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016b8c:	d10f      	bne.n	8016bae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8016b8e:	0963      	lsrs	r3, r4, #5
 8016b90:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8016b94:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8016b98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016b9c:	f02c 0c07 	bic.w	ip, ip, #7
 8016ba0:	ea43 0c0c 	orr.w	ip, r3, ip
 8016ba4:	ea4c 0404 	orr.w	r4, ip, r4
 8016ba8:	8004      	strh	r4, [r0, #0]
 8016baa:	3002      	adds	r0, #2
 8016bac:	e7e2      	b.n	8016b74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8016bae:	fb09 f303 	mul.w	r3, r9, r3
 8016bb2:	8807      	ldrh	r7, [r0, #0]
 8016bb4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8016bb8:	fa5f fc8c 	uxtb.w	ip, ip
 8016bbc:	1c5a      	adds	r2, r3, #1
 8016bbe:	123e      	asrs	r6, r7, #8
 8016bc0:	10fd      	asrs	r5, r7, #3
 8016bc2:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8016bc6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8016bca:	00ff      	lsls	r7, r7, #3
 8016bcc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016bd0:	1212      	asrs	r2, r2, #8
 8016bd2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8016bd6:	b293      	uxth	r3, r2
 8016bd8:	43d2      	mvns	r2, r2
 8016bda:	b2ff      	uxtb	r7, r7
 8016bdc:	fb1e fe03 	smulbb	lr, lr, r3
 8016be0:	b2d2      	uxtb	r2, r2
 8016be2:	fb1c fc03 	smulbb	ip, ip, r3
 8016be6:	b2e4      	uxtb	r4, r4
 8016be8:	fb06 e602 	mla	r6, r6, r2, lr
 8016bec:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8016bf0:	fb14 f403 	smulbb	r4, r4, r3
 8016bf4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8016bf8:	b2b6      	uxth	r6, r6
 8016bfa:	fb05 c502 	mla	r5, r5, r2, ip
 8016bfe:	fb07 4702 	mla	r7, r7, r2, r4
 8016c02:	f106 0e01 	add.w	lr, r6, #1
 8016c06:	b2ad      	uxth	r5, r5
 8016c08:	b2bf      	uxth	r7, r7
 8016c0a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8016c0e:	f105 0c01 	add.w	ip, r5, #1
 8016c12:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8016c16:	1c7e      	adds	r6, r7, #1
 8016c18:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8016c1c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8016c20:	096d      	lsrs	r5, r5, #5
 8016c22:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8016c26:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016c2a:	ea46 060e 	orr.w	r6, r6, lr
 8016c2e:	432e      	orrs	r6, r5
 8016c30:	8006      	strh	r6, [r0, #0]
 8016c32:	e7ba      	b.n	8016baa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8016c34:	f8ba 3000 	ldrh.w	r3, [sl]
 8016c38:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8016c3c:	eba3 0308 	sub.w	r3, r3, r8
 8016c40:	eba4 0408 	sub.w	r4, r4, r8
 8016c44:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016c48:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8016c4c:	e78b      	b.n	8016b66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8016c4e:	4b03      	ldr	r3, [pc, #12]	; (8016c5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8016c50:	6818      	ldr	r0, [r3, #0]
 8016c52:	6803      	ldr	r3, [r0, #0]
 8016c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c56:	4798      	blx	r3
 8016c58:	e76a      	b.n	8016b30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8016c5a:	bf00      	nop
 8016c5c:	20024914 	.word	0x20024914
 8016c60:	2002490e 	.word	0x2002490e

08016c64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8016c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c68:	b085      	sub	sp, #20
 8016c6a:	6810      	ldr	r0, [r2, #0]
 8016c6c:	460c      	mov	r4, r1
 8016c6e:	6851      	ldr	r1, [r2, #4]
 8016c70:	466d      	mov	r5, sp
 8016c72:	4616      	mov	r6, r2
 8016c74:	c503      	stmia	r5!, {r0, r1}
 8016c76:	6818      	ldr	r0, [r3, #0]
 8016c78:	6859      	ldr	r1, [r3, #4]
 8016c7a:	c503      	stmia	r5!, {r0, r1}
 8016c7c:	4668      	mov	r0, sp
 8016c7e:	4d2e      	ldr	r5, [pc, #184]	; (8016d38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8016c80:	f7f9 fc22 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016c84:	4631      	mov	r1, r6
 8016c86:	a802      	add	r0, sp, #8
 8016c88:	4e2c      	ldr	r6, [pc, #176]	; (8016d3c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8016c8a:	f7f9 fc45 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016c8e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016c92:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016c96:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8016c9a:	6828      	ldr	r0, [r5, #0]
 8016c9c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016ca0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016ca4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8016ca8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016cac:	f8bd 1000 	ldrh.w	r1, [sp]
 8016cb0:	440a      	add	r2, r1
 8016cb2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8016cb6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016cba:	4413      	add	r3, r2
 8016cbc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8016cc0:	6803      	ldr	r3, [r0, #0]
 8016cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cc4:	4798      	blx	r3
 8016cc6:	8833      	ldrh	r3, [r6, #0]
 8016cc8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016ccc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8016cd0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8016cd4:	f8df e068 	ldr.w	lr, [pc, #104]	; 8016d40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8016cd8:	fb03 1202 	mla	r2, r3, r2, r1
 8016cdc:	fb08 f303 	mul.w	r3, r8, r3
 8016ce0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016ce8:	4298      	cmp	r0, r3
 8016cea:	d21d      	bcs.n	8016d28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8016cec:	eb00 080c 	add.w	r8, r0, ip
 8016cf0:	4540      	cmp	r0, r8
 8016cf2:	d20f      	bcs.n	8016d14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8016cf4:	f854 1b04 	ldr.w	r1, [r4], #4
 8016cf8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8016cfc:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8016d00:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8016d04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8016d08:	ea42 0209 	orr.w	r2, r2, r9
 8016d0c:	430a      	orrs	r2, r1
 8016d0e:	f820 2b02 	strh.w	r2, [r0], #2
 8016d12:	e7ed      	b.n	8016cf0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8016d14:	8832      	ldrh	r2, [r6, #0]
 8016d16:	1bd2      	subs	r2, r2, r7
 8016d18:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016d1c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8016d20:	1bd2      	subs	r2, r2, r7
 8016d22:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8016d26:	e7df      	b.n	8016ce8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8016d28:	6828      	ldr	r0, [r5, #0]
 8016d2a:	6803      	ldr	r3, [r0, #0]
 8016d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d2e:	4798      	blx	r3
 8016d30:	b005      	add	sp, #20
 8016d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d36:	bf00      	nop
 8016d38:	20024914 	.word	0x20024914
 8016d3c:	2002490e 	.word	0x2002490e
 8016d40:	fffff800 	.word	0xfffff800

08016d44 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8016d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d48:	b08e      	sub	sp, #56	; 0x38
 8016d4a:	460e      	mov	r6, r1
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	461d      	mov	r5, r3
 8016d50:	6808      	ldr	r0, [r1, #0]
 8016d52:	ab0a      	add	r3, sp, #40	; 0x28
 8016d54:	6849      	ldr	r1, [r1, #4]
 8016d56:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8016f2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8016d5a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8016f30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8016d5e:	c303      	stmia	r3!, {r0, r1}
 8016d60:	6810      	ldr	r0, [r2, #0]
 8016d62:	ab0c      	add	r3, sp, #48	; 0x30
 8016d64:	6851      	ldr	r1, [r2, #4]
 8016d66:	c303      	stmia	r3!, {r0, r1}
 8016d68:	a80a      	add	r0, sp, #40	; 0x28
 8016d6a:	f7f9 fbad 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d6e:	4631      	mov	r1, r6
 8016d70:	a80c      	add	r0, sp, #48	; 0x30
 8016d72:	f7f9 fbd1 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016d76:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8016d7a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016d7e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016d82:	f8d8 0000 	ldr.w	r0, [r8]
 8016d86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016d8a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8016d8e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8016d92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016d96:	440c      	add	r4, r1
 8016d98:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8016d9c:	440a      	add	r2, r1
 8016d9e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8016da2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016da6:	4413      	add	r3, r2
 8016da8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016dac:	6803      	ldr	r3, [r0, #0]
 8016dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016db0:	4798      	blx	r3
 8016db2:	2dff      	cmp	r5, #255	; 0xff
 8016db4:	d124      	bne.n	8016e00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8016db6:	f010 0f01 	tst.w	r0, #1
 8016dba:	f8d8 0000 	ldr.w	r0, [r8]
 8016dbe:	d022      	beq.n	8016e06 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8016dc0:	2100      	movs	r1, #0
 8016dc2:	f04f 0e01 	mov.w	lr, #1
 8016dc6:	f8d0 c000 	ldr.w	ip, [r0]
 8016dca:	b2b6      	uxth	r6, r6
 8016dcc:	f8cd e018 	str.w	lr, [sp, #24]
 8016dd0:	b2bf      	uxth	r7, r7
 8016dd2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016dd6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8016dda:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8016dde:	f8b9 e000 	ldrh.w	lr, [r9]
 8016de2:	9503      	str	r5, [sp, #12]
 8016de4:	9601      	str	r6, [sp, #4]
 8016de6:	9700      	str	r7, [sp, #0]
 8016de8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8016dec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016df0:	9102      	str	r1, [sp, #8]
 8016df2:	4621      	mov	r1, r4
 8016df4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8016df8:	47a8      	blx	r5
 8016dfa:	b00e      	add	sp, #56	; 0x38
 8016dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e00:	f010 0f04 	tst.w	r0, #4
 8016e04:	e7d9      	b.n	8016dba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8016e06:	6803      	ldr	r3, [r0, #0]
 8016e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e0a:	4798      	blx	r3
 8016e0c:	f8b9 3000 	ldrh.w	r3, [r9]
 8016e10:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016e14:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8016e18:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8016e1c:	435e      	muls	r6, r3
 8016e1e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8016e22:	2dff      	cmp	r5, #255	; 0xff
 8016e24:	fb03 1202 	mla	r2, r3, r2, r1
 8016e28:	ebac 0c07 	sub.w	ip, ip, r7
 8016e2c:	eba3 0707 	sub.w	r7, r3, r7
 8016e30:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016e34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016e38:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016e3c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8016e40:	d049      	beq.n	8016ed6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8016e42:	43eb      	mvns	r3, r5
 8016e44:	fa1f f985 	uxth.w	r9, r5
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	42b0      	cmp	r0, r6
 8016e4c:	d266      	bcs.n	8016f1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8016e4e:	eb00 0a0e 	add.w	sl, r0, lr
 8016e52:	4550      	cmp	r0, sl
 8016e54:	4621      	mov	r1, r4
 8016e56:	f104 0403 	add.w	r4, r4, #3
 8016e5a:	d25b      	bcs.n	8016f14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8016e5c:	8802      	ldrh	r2, [r0, #0]
 8016e5e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8016e62:	ea4f 2822 	mov.w	r8, r2, asr #8
 8016e66:	fb11 f109 	smulbb	r1, r1, r9
 8016e6a:	10d5      	asrs	r5, r2, #3
 8016e6c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8016e70:	00d2      	lsls	r2, r2, #3
 8016e72:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016e76:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8016e7a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8016e7e:	fb08 1803 	mla	r8, r8, r3, r1
 8016e82:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8016e86:	b2d2      	uxtb	r2, r2
 8016e88:	fb11 f109 	smulbb	r1, r1, r9
 8016e8c:	fa1f f888 	uxth.w	r8, r8
 8016e90:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016e94:	fb05 1503 	mla	r5, r5, r3, r1
 8016e98:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8016e9c:	fb11 f109 	smulbb	r1, r1, r9
 8016ea0:	b2ad      	uxth	r5, r5
 8016ea2:	fb02 1203 	mla	r2, r2, r3, r1
 8016ea6:	f108 0101 	add.w	r1, r8, #1
 8016eaa:	b292      	uxth	r2, r2
 8016eac:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8016eb0:	1c51      	adds	r1, r2, #1
 8016eb2:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8016eb6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016eba:	1c69      	adds	r1, r5, #1
 8016ebc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8016ec0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016ec4:	096d      	lsrs	r5, r5, #5
 8016ec6:	ea42 0208 	orr.w	r2, r2, r8
 8016eca:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016ece:	432a      	orrs	r2, r5
 8016ed0:	f820 2b02 	strh.w	r2, [r0], #2
 8016ed4:	e7bd      	b.n	8016e52 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8016ed6:	4a14      	ldr	r2, [pc, #80]	; (8016f28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8016ed8:	42b0      	cmp	r0, r6
 8016eda:	d21f      	bcs.n	8016f1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8016edc:	eb00 050e 	add.w	r5, r0, lr
 8016ee0:	42a8      	cmp	r0, r5
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	f104 0403 	add.w	r4, r4, #3
 8016ee8:	d210      	bcs.n	8016f0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8016eea:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8016eee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8016ef2:	00db      	lsls	r3, r3, #3
 8016ef4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8016ef8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016efc:	430b      	orrs	r3, r1
 8016efe:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8016f02:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8016f06:	f820 3b02 	strh.w	r3, [r0], #2
 8016f0a:	e7e9      	b.n	8016ee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8016f0c:	4438      	add	r0, r7
 8016f0e:	eb01 040c 	add.w	r4, r1, ip
 8016f12:	e7e1      	b.n	8016ed8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8016f14:	4438      	add	r0, r7
 8016f16:	eb01 040c 	add.w	r4, r1, ip
 8016f1a:	e796      	b.n	8016e4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8016f1c:	4b03      	ldr	r3, [pc, #12]	; (8016f2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8016f1e:	6818      	ldr	r0, [r3, #0]
 8016f20:	6803      	ldr	r3, [r0, #0]
 8016f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f24:	4798      	blx	r3
 8016f26:	e768      	b.n	8016dfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8016f28:	fffff800 	.word	0xfffff800
 8016f2c:	20024914 	.word	0x20024914
 8016f30:	2002490e 	.word	0x2002490e

08016f34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016f34:	b4f0      	push	{r4, r5, r6, r7}
 8016f36:	4616      	mov	r6, r2
 8016f38:	461c      	mov	r4, r3
 8016f3a:	460d      	mov	r5, r1
 8016f3c:	9a04      	ldr	r2, [sp, #16]
 8016f3e:	2e01      	cmp	r6, #1
 8016f40:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016f44:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8016f48:	d012      	beq.n	8016f70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8016f4a:	d303      	bcc.n	8016f54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8016f4c:	2e02      	cmp	r6, #2
 8016f4e:	d00a      	beq.n	8016f66 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8016f50:	bcf0      	pop	{r4, r5, r6, r7}
 8016f52:	4770      	bx	lr
 8016f54:	6805      	ldr	r5, [r0, #0]
 8016f56:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8016f5a:	68ed      	ldr	r5, [r5, #12]
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	4622      	mov	r2, r4
 8016f60:	46ac      	mov	ip, r5
 8016f62:	bcf0      	pop	{r4, r5, r6, r7}
 8016f64:	4760      	bx	ip
 8016f66:	4621      	mov	r1, r4
 8016f68:	4628      	mov	r0, r5
 8016f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8016f6c:	f7ff bd94 	b.w	8016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016f70:	4621      	mov	r1, r4
 8016f72:	4628      	mov	r0, r5
 8016f74:	bcf0      	pop	{r4, r5, r6, r7}
 8016f76:	f7ff bee5 	b.w	8016d44 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08016f7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8016f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f80:	b093      	sub	sp, #76	; 0x4c
 8016f82:	4681      	mov	r9, r0
 8016f84:	4688      	mov	r8, r1
 8016f86:	6810      	ldr	r0, [r2, #0]
 8016f88:	6851      	ldr	r1, [r2, #4]
 8016f8a:	ac0e      	add	r4, sp, #56	; 0x38
 8016f8c:	4616      	mov	r6, r2
 8016f8e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8016f92:	4f6b      	ldr	r7, [pc, #428]	; (8017140 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8016f94:	c403      	stmia	r4!, {r0, r1}
 8016f96:	6818      	ldr	r0, [r3, #0]
 8016f98:	ac10      	add	r4, sp, #64	; 0x40
 8016f9a:	6859      	ldr	r1, [r3, #4]
 8016f9c:	c403      	stmia	r4!, {r0, r1}
 8016f9e:	a80e      	add	r0, sp, #56	; 0x38
 8016fa0:	f7f9 fa92 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016fa4:	4631      	mov	r1, r6
 8016fa6:	a810      	add	r0, sp, #64	; 0x40
 8016fa8:	4e66      	ldr	r6, [pc, #408]	; (8017144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8016faa:	f7f9 fab5 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016fae:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8016fb2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8016fb6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8016fba:	6830      	ldr	r0, [r6, #0]
 8016fbc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016fc0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8016fc4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8016fc8:	4489      	add	r9, r1
 8016fca:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8016fce:	440a      	add	r2, r1
 8016fd0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016fd4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016fd8:	4413      	add	r3, r2
 8016fda:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8016fde:	6803      	ldr	r3, [r0, #0]
 8016fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fe2:	4798      	blx	r3
 8016fe4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016fe8:	6830      	ldr	r0, [r6, #0]
 8016fea:	d01d      	beq.n	8017028 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8016fec:	2200      	movs	r2, #0
 8016fee:	6801      	ldr	r1, [r0, #0]
 8016ff0:	b2a4      	uxth	r4, r4
 8016ff2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016ff6:	b2ad      	uxth	r5, r5
 8016ff8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8016ffc:	220b      	movs	r2, #11
 8016ffe:	9207      	str	r2, [sp, #28]
 8017000:	883a      	ldrh	r2, [r7, #0]
 8017002:	9502      	str	r5, [sp, #8]
 8017004:	9206      	str	r2, [sp, #24]
 8017006:	2201      	movs	r2, #1
 8017008:	9401      	str	r4, [sp, #4]
 801700a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801700e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017012:	9203      	str	r2, [sp, #12]
 8017014:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017018:	9200      	str	r2, [sp, #0]
 801701a:	4642      	mov	r2, r8
 801701c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801701e:	4649      	mov	r1, r9
 8017020:	47a0      	blx	r4
 8017022:	b013      	add	sp, #76	; 0x4c
 8017024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017028:	6803      	ldr	r3, [r0, #0]
 801702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801702c:	4798      	blx	r3
 801702e:	883b      	ldrh	r3, [r7, #0]
 8017030:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8017034:	f04f 0e04 	mov.w	lr, #4
 8017038:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801703c:	435d      	muls	r5, r3
 801703e:	fb03 1202 	mla	r2, r3, r2, r1
 8017042:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017046:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801704a:	920c      	str	r2, [sp, #48]	; 0x30
 801704c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8017050:	1b12      	subs	r2, r2, r4
 8017052:	920d      	str	r2, [sp, #52]	; 0x34
 8017054:	0062      	lsls	r2, r4, #1
 8017056:	1b1c      	subs	r4, r3, r4
 8017058:	920a      	str	r2, [sp, #40]	; 0x28
 801705a:	0063      	lsls	r3, r4, #1
 801705c:	930b      	str	r3, [sp, #44]	; 0x2c
 801705e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017060:	4298      	cmp	r0, r3
 8017062:	d266      	bcs.n	8017132 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8017064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017066:	eb00 0b03 	add.w	fp, r0, r3
 801706a:	4558      	cmp	r0, fp
 801706c:	d25c      	bcs.n	8017128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801706e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017072:	fb1e e303 	smlabb	r3, lr, r3, lr
 8017076:	f858 2003 	ldr.w	r2, [r8, r3]
 801707a:	0e11      	lsrs	r1, r2, #24
 801707c:	d012      	beq.n	80170a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801707e:	29ff      	cmp	r1, #255	; 0xff
 8017080:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8017084:	d110      	bne.n	80170a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017086:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801708a:	d10d      	bne.n	80170a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801708c:	0953      	lsrs	r3, r2, #5
 801708e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8017092:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8017096:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801709a:	f027 0707 	bic.w	r7, r7, #7
 801709e:	431f      	orrs	r7, r3
 80170a0:	433a      	orrs	r2, r7
 80170a2:	8002      	strh	r2, [r0, #0]
 80170a4:	3002      	adds	r0, #2
 80170a6:	e7e0      	b.n	801706a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80170a8:	fb0a f101 	mul.w	r1, sl, r1
 80170ac:	8806      	ldrh	r6, [r0, #0]
 80170ae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80170b2:	b2d2      	uxtb	r2, r2
 80170b4:	1c4b      	adds	r3, r1, #1
 80170b6:	1235      	asrs	r5, r6, #8
 80170b8:	10f4      	asrs	r4, r6, #3
 80170ba:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80170be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80170c2:	00f6      	lsls	r6, r6, #3
 80170c4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80170c8:	121b      	asrs	r3, r3, #8
 80170ca:	b2f6      	uxtb	r6, r6
 80170cc:	b299      	uxth	r1, r3
 80170ce:	43db      	mvns	r3, r3
 80170d0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80170d4:	fb1c fc01 	smulbb	ip, ip, r1
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	fb12 f201 	smulbb	r2, r2, r1
 80170de:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80170e2:	fb05 c503 	mla	r5, r5, r3, ip
 80170e6:	b2ff      	uxtb	r7, r7
 80170e8:	fb06 2203 	mla	r2, r6, r3, r2
 80170ec:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80170f0:	fb17 f701 	smulbb	r7, r7, r1
 80170f4:	b2ad      	uxth	r5, r5
 80170f6:	b292      	uxth	r2, r2
 80170f8:	fb04 7403 	mla	r4, r4, r3, r7
 80170fc:	f105 0c01 	add.w	ip, r5, #1
 8017100:	1c57      	adds	r7, r2, #1
 8017102:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8017106:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801710a:	b2a4      	uxth	r4, r4
 801710c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8017110:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017114:	433d      	orrs	r5, r7
 8017116:	1c67      	adds	r7, r4, #1
 8017118:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801711c:	0964      	lsrs	r4, r4, #5
 801711e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8017122:	4325      	orrs	r5, r4
 8017124:	8005      	strh	r5, [r0, #0]
 8017126:	e7bd      	b.n	80170a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801712a:	4418      	add	r0, r3
 801712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801712e:	4499      	add	r9, r3
 8017130:	e795      	b.n	801705e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8017132:	4b04      	ldr	r3, [pc, #16]	; (8017144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017134:	6818      	ldr	r0, [r3, #0]
 8017136:	6803      	ldr	r3, [r0, #0]
 8017138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801713a:	4798      	blx	r3
 801713c:	e771      	b.n	8017022 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801713e:	bf00      	nop
 8017140:	2002490e 	.word	0x2002490e
 8017144:	20024914 	.word	0x20024914

08017148 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	b087      	sub	sp, #28
 801714e:	4680      	mov	r8, r0
 8017150:	460d      	mov	r5, r1
 8017152:	4614      	mov	r4, r2
 8017154:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8017158:	2e00      	cmp	r6, #0
 801715a:	f000 80b9 	beq.w	80172d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801715e:	6810      	ldr	r0, [r2, #0]
 8017160:	af02      	add	r7, sp, #8
 8017162:	6851      	ldr	r1, [r2, #4]
 8017164:	c703      	stmia	r7!, {r0, r1}
 8017166:	6818      	ldr	r0, [r3, #0]
 8017168:	af04      	add	r7, sp, #16
 801716a:	6859      	ldr	r1, [r3, #4]
 801716c:	c703      	stmia	r7!, {r0, r1}
 801716e:	a802      	add	r0, sp, #8
 8017170:	f7f9 f9aa 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017174:	4621      	mov	r1, r4
 8017176:	a804      	add	r0, sp, #16
 8017178:	f7f9 f9ce 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801717c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017180:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017184:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8017188:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801718c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8017190:	eb08 0401 	add.w	r4, r8, r1
 8017194:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017198:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801719c:	440a      	add	r2, r1
 801719e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80171a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80171a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80171aa:	4413      	add	r3, r2
 80171ac:	f8ad 3012 	strh.w	r3, [sp, #18]
 80171b0:	4b49      	ldr	r3, [pc, #292]	; (80172d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80171b2:	6818      	ldr	r0, [r3, #0]
 80171b4:	6803      	ldr	r3, [r0, #0]
 80171b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171b8:	4798      	blx	r3
 80171ba:	4b48      	ldr	r3, [pc, #288]	; (80172dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80171bc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80171c0:	2eff      	cmp	r6, #255	; 0xff
 80171c2:	881a      	ldrh	r2, [r3, #0]
 80171c4:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80171c8:	fb02 c101 	mla	r1, r2, r1, ip
 80171cc:	fb02 f207 	mul.w	r2, r2, r7
 80171d0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80171d4:	f105 0104 	add.w	r1, r5, #4
 80171d8:	461d      	mov	r5, r3
 80171da:	d05a      	beq.n	8017292 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80171dc:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80171e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80171e4:	b2b6      	uxth	r6, r6
 80171e6:	9301      	str	r3, [sp, #4]
 80171e8:	fa1f fe8e 	uxth.w	lr, lr
 80171ec:	4282      	cmp	r2, r0
 80171ee:	d96a      	bls.n	80172c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80171f0:	eb00 0b0a 	add.w	fp, r0, sl
 80171f4:	4583      	cmp	fp, r0
 80171f6:	d940      	bls.n	801727a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80171f8:	8805      	ldrh	r5, [r0, #0]
 80171fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171fe:	122f      	asrs	r7, r5, #8
 8017200:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017204:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8017208:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801720c:	00ed      	lsls	r5, r5, #3
 801720e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017212:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017216:	fb17 f70e 	smulbb	r7, r7, lr
 801721a:	b2ed      	uxtb	r5, r5
 801721c:	fb19 f90e 	smulbb	r9, r9, lr
 8017220:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017224:	fb15 f50e 	smulbb	r5, r5, lr
 8017228:	fb0c 7c06 	mla	ip, ip, r6, r7
 801722c:	10df      	asrs	r7, r3, #3
 801722e:	00db      	lsls	r3, r3, #3
 8017230:	fa1f fc8c 	uxth.w	ip, ip
 8017234:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017238:	b2db      	uxtb	r3, r3
 801723a:	fb07 9706 	mla	r7, r7, r6, r9
 801723e:	f10c 0901 	add.w	r9, ip, #1
 8017242:	fb03 5306 	mla	r3, r3, r6, r5
 8017246:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801724a:	b29b      	uxth	r3, r3
 801724c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8017250:	b2bf      	uxth	r7, r7
 8017252:	f103 0c01 	add.w	ip, r3, #1
 8017256:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801725a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801725e:	ea4c 0c09 	orr.w	ip, ip, r9
 8017262:	f107 0901 	add.w	r9, r7, #1
 8017266:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801726a:	097f      	lsrs	r7, r7, #5
 801726c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8017270:	ea4c 0c07 	orr.w	ip, ip, r7
 8017274:	f820 cb02 	strh.w	ip, [r0], #2
 8017278:	e7bc      	b.n	80171f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801727a:	9b01      	ldr	r3, [sp, #4]
 801727c:	881b      	ldrh	r3, [r3, #0]
 801727e:	eba3 0308 	sub.w	r3, r3, r8
 8017282:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017286:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801728a:	eba3 0308 	sub.w	r3, r3, r8
 801728e:	441c      	add	r4, r3
 8017290:	e7ac      	b.n	80171ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8017292:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017296:	4282      	cmp	r2, r0
 8017298:	d915      	bls.n	80172c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801729a:	eb00 060a 	add.w	r6, r0, sl
 801729e:	4286      	cmp	r6, r0
 80172a0:	d906      	bls.n	80172b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80172a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80172a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80172aa:	f820 3b02 	strh.w	r3, [r0], #2
 80172ae:	e7f6      	b.n	801729e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80172b0:	882b      	ldrh	r3, [r5, #0]
 80172b2:	eba3 0308 	sub.w	r3, r3, r8
 80172b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80172ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80172be:	eba3 0308 	sub.w	r3, r3, r8
 80172c2:	441c      	add	r4, r3
 80172c4:	e7e7      	b.n	8017296 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80172c6:	4b04      	ldr	r3, [pc, #16]	; (80172d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80172c8:	6818      	ldr	r0, [r3, #0]
 80172ca:	6803      	ldr	r3, [r0, #0]
 80172cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172ce:	4798      	blx	r3
 80172d0:	b007      	add	sp, #28
 80172d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d6:	bf00      	nop
 80172d8:	20024914 	.word	0x20024914
 80172dc:	2002490e 	.word	0x2002490e

080172e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	b091      	sub	sp, #68	; 0x44
 80172e6:	4680      	mov	r8, r0
 80172e8:	460f      	mov	r7, r1
 80172ea:	4614      	mov	r4, r2
 80172ec:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80172f0:	2d00      	cmp	r5, #0
 80172f2:	d051      	beq.n	8017398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80172f4:	6810      	ldr	r0, [r2, #0]
 80172f6:	ae0c      	add	r6, sp, #48	; 0x30
 80172f8:	6851      	ldr	r1, [r2, #4]
 80172fa:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80174fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80172fe:	c603      	stmia	r6!, {r0, r1}
 8017300:	6818      	ldr	r0, [r3, #0]
 8017302:	ae0e      	add	r6, sp, #56	; 0x38
 8017304:	6859      	ldr	r1, [r3, #4]
 8017306:	c603      	stmia	r6!, {r0, r1}
 8017308:	a80c      	add	r0, sp, #48	; 0x30
 801730a:	f7f9 f8dd 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801730e:	4621      	mov	r1, r4
 8017310:	a80e      	add	r0, sp, #56	; 0x38
 8017312:	f7f9 f901 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017316:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801731a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801731e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017322:	f8d9 0000 	ldr.w	r0, [r9]
 8017326:	fb11 2103 	smlabb	r1, r1, r3, r2
 801732a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801732e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017332:	eb08 0401 	add.w	r4, r8, r1
 8017336:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801733a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8017500 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801733e:	440a      	add	r2, r1
 8017340:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017344:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017348:	4413      	add	r3, r2
 801734a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801734e:	6803      	ldr	r3, [r0, #0]
 8017350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017352:	4798      	blx	r3
 8017354:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017358:	f8d9 0000 	ldr.w	r0, [r9]
 801735c:	d01f      	beq.n	801739e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801735e:	2200      	movs	r2, #0
 8017360:	6801      	ldr	r1, [r0, #0]
 8017362:	b2b6      	uxth	r6, r6
 8017364:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017368:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801736c:	220b      	movs	r2, #11
 801736e:	9207      	str	r2, [sp, #28]
 8017370:	f8b8 2000 	ldrh.w	r2, [r8]
 8017374:	9601      	str	r6, [sp, #4]
 8017376:	9206      	str	r2, [sp, #24]
 8017378:	2201      	movs	r2, #1
 801737a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801737e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017382:	9203      	str	r2, [sp, #12]
 8017384:	fa1f f28a 	uxth.w	r2, sl
 8017388:	9202      	str	r2, [sp, #8]
 801738a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801738e:	9200      	str	r2, [sp, #0]
 8017390:	463a      	mov	r2, r7
 8017392:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8017394:	4621      	mov	r1, r4
 8017396:	47a8      	blx	r5
 8017398:	b011      	add	sp, #68	; 0x44
 801739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739e:	6803      	ldr	r3, [r0, #0]
 80173a0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80173a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173a6:	4798      	blx	r3
 80173a8:	f8b8 2000 	ldrh.w	r2, [r8]
 80173ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80173b0:	2dff      	cmp	r5, #255	; 0xff
 80173b2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80173b6:	fb0a fa02 	mul.w	sl, sl, r2
 80173ba:	fb02 1303 	mla	r3, r2, r3, r1
 80173be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80173c2:	d062      	beq.n	801748a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80173c4:	ea6f 0c05 	mvn.w	ip, r5
 80173c8:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80173cc:	b2ad      	uxth	r5, r5
 80173ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80173d2:	fa5f fc8c 	uxtb.w	ip, ip
 80173d6:	930a      	str	r3, [sp, #40]	; 0x28
 80173d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173da:	4298      	cmp	r0, r3
 80173dc:	f080 8085 	bcs.w	80174ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80173e0:	eb00 0b09 	add.w	fp, r0, r9
 80173e4:	4558      	cmp	r0, fp
 80173e6:	d246      	bcs.n	8017476 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80173e8:	f814 eb01 	ldrb.w	lr, [r4], #1
 80173ec:	2303      	movs	r3, #3
 80173ee:	2204      	movs	r2, #4
 80173f0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80173f4:	8803      	ldrh	r3, [r0, #0]
 80173f6:	eb07 0a0e 	add.w	sl, r7, lr
 80173fa:	1219      	asrs	r1, r3, #8
 80173fc:	10da      	asrs	r2, r3, #3
 80173fe:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8017402:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8017406:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801740a:	00db      	lsls	r3, r3, #3
 801740c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017410:	fb18 f805 	smulbb	r8, r8, r5
 8017414:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8017418:	fb1e fe05 	smulbb	lr, lr, r5
 801741c:	b2db      	uxtb	r3, r3
 801741e:	fb01 810c 	mla	r1, r1, ip, r8
 8017422:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8017426:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801742a:	fb18 f805 	smulbb	r8, r8, r5
 801742e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8017432:	b289      	uxth	r1, r1
 8017434:	fb02 820c 	mla	r2, r2, ip, r8
 8017438:	fb03 e30c 	mla	r3, r3, ip, lr
 801743c:	f101 0801 	add.w	r8, r1, #1
 8017440:	b292      	uxth	r2, r2
 8017442:	b29b      	uxth	r3, r3
 8017444:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017448:	f102 0801 	add.w	r8, r2, #1
 801744c:	f103 0e01 	add.w	lr, r3, #1
 8017450:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8017454:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8017458:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801745c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017460:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8017464:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017468:	ea4e 0101 	orr.w	r1, lr, r1
 801746c:	ea41 0108 	orr.w	r1, r1, r8
 8017470:	f820 1b02 	strh.w	r1, [r0], #2
 8017474:	e7b6      	b.n	80173e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8017476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017478:	881b      	ldrh	r3, [r3, #0]
 801747a:	1b9b      	subs	r3, r3, r6
 801747c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017480:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017484:	1b9b      	subs	r3, r3, r6
 8017486:	441c      	add	r4, r3
 8017488:	e7a6      	b.n	80173d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801748a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801748e:	2203      	movs	r2, #3
 8017490:	2504      	movs	r5, #4
 8017492:	4919      	ldr	r1, [pc, #100]	; (80174f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8017494:	4550      	cmp	r0, sl
 8017496:	d228      	bcs.n	80174ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8017498:	eb00 0c09 	add.w	ip, r0, r9
 801749c:	4560      	cmp	r0, ip
 801749e:	4623      	mov	r3, r4
 80174a0:	d219      	bcs.n	80174d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80174a2:	f893 e000 	ldrb.w	lr, [r3]
 80174a6:	3401      	adds	r4, #1
 80174a8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80174ac:	eb07 0b0e 	add.w	fp, r7, lr
 80174b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80174b4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80174b8:	f89b b001 	ldrb.w	fp, [fp, #1]
 80174bc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80174c0:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80174c4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80174c8:	ea43 030b 	orr.w	r3, r3, fp
 80174cc:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80174d0:	f820 3b02 	strh.w	r3, [r0], #2
 80174d4:	e7e2      	b.n	801749c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80174d6:	f8b8 3000 	ldrh.w	r3, [r8]
 80174da:	1b9b      	subs	r3, r3, r6
 80174dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80174e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80174e4:	1b9b      	subs	r3, r3, r6
 80174e6:	441c      	add	r4, r3
 80174e8:	e7d4      	b.n	8017494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80174ea:	4b04      	ldr	r3, [pc, #16]	; (80174fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80174ec:	6818      	ldr	r0, [r3, #0]
 80174ee:	6803      	ldr	r3, [r0, #0]
 80174f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174f2:	4798      	blx	r3
 80174f4:	e750      	b.n	8017398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80174f6:	bf00      	nop
 80174f8:	fffff800 	.word	0xfffff800
 80174fc:	20024914 	.word	0x20024914
 8017500:	2002490e 	.word	0x2002490e

08017504 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017504:	b430      	push	{r4, r5}
 8017506:	780d      	ldrb	r5, [r1, #0]
 8017508:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801750c:	2d01      	cmp	r5, #1
 801750e:	d00a      	beq.n	8017526 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8017510:	d305      	bcc.n	801751e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8017512:	2d02      	cmp	r5, #2
 8017514:	d10b      	bne.n	801752e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8017516:	9402      	str	r4, [sp, #8]
 8017518:	bc30      	pop	{r4, r5}
 801751a:	f7ff be15 	b.w	8017148 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801751e:	9402      	str	r4, [sp, #8]
 8017520:	bc30      	pop	{r4, r5}
 8017522:	f7ff bd2b 	b.w	8016f7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017526:	9402      	str	r4, [sp, #8]
 8017528:	bc30      	pop	{r4, r5}
 801752a:	f7ff bed9 	b.w	80172e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801752e:	bc30      	pop	{r4, r5}
 8017530:	4770      	bx	lr
	...

08017534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8017534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	b087      	sub	sp, #28
 801753a:	4604      	mov	r4, r0
 801753c:	460e      	mov	r6, r1
 801753e:	6810      	ldr	r0, [r2, #0]
 8017540:	6851      	ldr	r1, [r2, #4]
 8017542:	ad02      	add	r5, sp, #8
 8017544:	4617      	mov	r7, r2
 8017546:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801754a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801777c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801754e:	c503      	stmia	r5!, {r0, r1}
 8017550:	6818      	ldr	r0, [r3, #0]
 8017552:	ad04      	add	r5, sp, #16
 8017554:	6859      	ldr	r1, [r3, #4]
 8017556:	c503      	stmia	r5!, {r0, r1}
 8017558:	a802      	add	r0, sp, #8
 801755a:	f7f8 ffb5 	bl	80104c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801755e:	4639      	mov	r1, r7
 8017560:	a804      	add	r0, sp, #16
 8017562:	f7f8 ffd9 	bl	8010518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017566:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801756a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801756e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017572:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8017576:	fb11 2103 	smlabb	r1, r1, r3, r2
 801757a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801757e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8017582:	440e      	add	r6, r1
 8017584:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017588:	440a      	add	r2, r1
 801758a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801758e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017592:	4413      	add	r3, r2
 8017594:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017598:	4b77      	ldr	r3, [pc, #476]	; (8017778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801759a:	6818      	ldr	r0, [r3, #0]
 801759c:	6803      	ldr	r3, [r0, #0]
 801759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175a0:	4798      	blx	r3
 80175a2:	f8b9 b000 	ldrh.w	fp, [r9]
 80175a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80175aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80175ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80175b2:	fb05 f50b 	mul.w	r5, r5, fp
 80175b6:	fb0b 2303 	mla	r3, fp, r3, r2
 80175ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80175be:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80175c2:	9300      	str	r3, [sp, #0]
 80175c4:	d069      	beq.n	801769a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80175c6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80175ca:	4558      	cmp	r0, fp
 80175cc:	f080 80cc 	bcs.w	8017768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80175d0:	9b00      	ldr	r3, [sp, #0]
 80175d2:	4631      	mov	r1, r6
 80175d4:	18c3      	adds	r3, r0, r3
 80175d6:	9301      	str	r3, [sp, #4]
 80175d8:	9b01      	ldr	r3, [sp, #4]
 80175da:	4298      	cmp	r0, r3
 80175dc:	d24f      	bcs.n	801767e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80175de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175e2:	2a00      	cmp	r2, #0
 80175e4:	d048      	beq.n	8017678 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80175e6:	fb0a f202 	mul.w	r2, sl, r2
 80175ea:	1c53      	adds	r3, r2, #1
 80175ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80175f0:	121b      	asrs	r3, r3, #8
 80175f2:	d041      	beq.n	8017678 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80175f4:	8802      	ldrh	r2, [r0, #0]
 80175f6:	b29e      	uxth	r6, r3
 80175f8:	f8b4 c000 	ldrh.w	ip, [r4]
 80175fc:	43db      	mvns	r3, r3
 80175fe:	1215      	asrs	r5, r2, #8
 8017600:	b2db      	uxtb	r3, r3
 8017602:	ea4f 272c 	mov.w	r7, ip, asr #8
 8017606:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801760a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801760e:	fb15 f503 	smulbb	r5, r5, r3
 8017612:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017616:	00d2      	lsls	r2, r2, #3
 8017618:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801761c:	fb07 5706 	mla	r7, r7, r6, r5
 8017620:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8017624:	b2d2      	uxtb	r2, r2
 8017626:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801762a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801762e:	fb1e fe03 	smulbb	lr, lr, r3
 8017632:	b2bf      	uxth	r7, r7
 8017634:	fb12 f203 	smulbb	r2, r2, r3
 8017638:	fa5f fc8c 	uxtb.w	ip, ip
 801763c:	fb05 e506 	mla	r5, r5, r6, lr
 8017640:	f107 0e01 	add.w	lr, r7, #1
 8017644:	fb0c 2c06 	mla	ip, ip, r6, r2
 8017648:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801764c:	fa1f fc8c 	uxth.w	ip, ip
 8017650:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8017654:	b2ad      	uxth	r5, r5
 8017656:	f10c 0701 	add.w	r7, ip, #1
 801765a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801765e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017662:	ea47 070e 	orr.w	r7, r7, lr
 8017666:	f105 0e01 	add.w	lr, r5, #1
 801766a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801766e:	096d      	lsrs	r5, r5, #5
 8017670:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017674:	432f      	orrs	r7, r5
 8017676:	8007      	strh	r7, [r0, #0]
 8017678:	3002      	adds	r0, #2
 801767a:	3402      	adds	r4, #2
 801767c:	e7ac      	b.n	80175d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801767e:	f8b9 3000 	ldrh.w	r3, [r9]
 8017682:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8017686:	eba3 0308 	sub.w	r3, r3, r8
 801768a:	eba6 0608 	sub.w	r6, r6, r8
 801768e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017692:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8017696:	440e      	add	r6, r1
 8017698:	e797      	b.n	80175ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801769a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801769e:	42a8      	cmp	r0, r5
 80176a0:	d262      	bcs.n	8017768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80176a2:	9b00      	ldr	r3, [sp, #0]
 80176a4:	4631      	mov	r1, r6
 80176a6:	eb00 0b03 	add.w	fp, r0, r3
 80176aa:	4558      	cmp	r0, fp
 80176ac:	d24e      	bcs.n	801774c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80176ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176b2:	b12b      	cbz	r3, 80176c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80176b4:	2bff      	cmp	r3, #255	; 0xff
 80176b6:	f8b4 e000 	ldrh.w	lr, [r4]
 80176ba:	d104      	bne.n	80176c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80176bc:	f8a0 e000 	strh.w	lr, [r0]
 80176c0:	3002      	adds	r0, #2
 80176c2:	3402      	adds	r4, #2
 80176c4:	e7f1      	b.n	80176aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80176c6:	8802      	ldrh	r2, [r0, #0]
 80176c8:	b29f      	uxth	r7, r3
 80176ca:	43db      	mvns	r3, r3
 80176cc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80176d0:	1216      	asrs	r6, r2, #8
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80176d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80176dc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80176e0:	00d2      	lsls	r2, r2, #3
 80176e2:	fb16 f603 	smulbb	r6, r6, r3
 80176e6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80176ea:	b2d2      	uxtb	r2, r2
 80176ec:	fb0c 6c07 	mla	ip, ip, r7, r6
 80176f0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80176f4:	fb1a fa03 	smulbb	sl, sl, r3
 80176f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80176fc:	fa1f fc8c 	uxth.w	ip, ip
 8017700:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017704:	fb12 f303 	smulbb	r3, r2, r3
 8017708:	fa5f fe8e 	uxtb.w	lr, lr
 801770c:	fb06 a607 	mla	r6, r6, r7, sl
 8017710:	f10c 0201 	add.w	r2, ip, #1
 8017714:	fb0e 3307 	mla	r3, lr, r7, r3
 8017718:	b2b6      	uxth	r6, r6
 801771a:	b29b      	uxth	r3, r3
 801771c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8017720:	f106 0a01 	add.w	sl, r6, #1
 8017724:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8017728:	f103 0c01 	add.w	ip, r3, #1
 801772c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8017730:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8017734:	0976      	lsrs	r6, r6, #5
 8017736:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801773a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801773e:	ea4c 0c02 	orr.w	ip, ip, r2
 8017742:	ea4c 0c06 	orr.w	ip, ip, r6
 8017746:	f8a0 c000 	strh.w	ip, [r0]
 801774a:	e7b9      	b.n	80176c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801774c:	f8b9 3000 	ldrh.w	r3, [r9]
 8017750:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8017754:	eba3 0308 	sub.w	r3, r3, r8
 8017758:	eba6 0608 	sub.w	r6, r6, r8
 801775c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017760:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8017764:	440e      	add	r6, r1
 8017766:	e79a      	b.n	801769e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8017768:	4b03      	ldr	r3, [pc, #12]	; (8017778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801776a:	6818      	ldr	r0, [r3, #0]
 801776c:	6803      	ldr	r3, [r0, #0]
 801776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017770:	4798      	blx	r3
 8017772:	b007      	add	sp, #28
 8017774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017778:	20024914 	.word	0x20024914
 801777c:	2002490e 	.word	0x2002490e

08017780 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8017780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	b089      	sub	sp, #36	; 0x24
 8017786:	4682      	mov	sl, r0
 8017788:	460f      	mov	r7, r1
 801778a:	4691      	mov	r9, r2
 801778c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8017790:	4698      	mov	r8, r3
 8017792:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017794:	2e00      	cmp	r6, #0
 8017796:	d036      	beq.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8017798:	4608      	mov	r0, r1
 801779a:	f7fc f861 	bl	8013860 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801779e:	4605      	mov	r5, r0
 80177a0:	4638      	mov	r0, r7
 80177a2:	f7fc f891 	bl	80138c8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80177a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80177aa:	4638      	mov	r0, r7
 80177ac:	f8ad 9008 	strh.w	r9, [sp, #8]
 80177b0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80177b4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80177b8:	f7fc f93e 	bl	8013a38 <_ZNK8touchgfx6Bitmap7getDataEv>
 80177bc:	4605      	mov	r5, r0
 80177be:	4638      	mov	r0, r7
 80177c0:	f7fc f96a 	bl	8013a98 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80177c4:	4681      	mov	r9, r0
 80177c6:	4638      	mov	r0, r7
 80177c8:	f7fc f9ba 	bl	8013b40 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80177cc:	280b      	cmp	r0, #11
 80177ce:	d81a      	bhi.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80177d0:	e8df f000 	tbb	[pc, r0]
 80177d4:	1906aebd 	.word	0x1906aebd
 80177d8:	19191919 	.word	0x19191919
 80177dc:	b5191919 	.word	0xb5191919
 80177e0:	4bb0      	ldr	r3, [pc, #704]	; (8017aa4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 80177e2:	6818      	ldr	r0, [r3, #0]
 80177e4:	6803      	ldr	r3, [r0, #0]
 80177e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177e8:	4798      	blx	r3
 80177ea:	2eff      	cmp	r6, #255	; 0xff
 80177ec:	d121      	bne.n	8017832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80177ee:	0683      	lsls	r3, r0, #26
 80177f0:	d41f      	bmi.n	8017832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 80177f2:	4638      	mov	r0, r7
 80177f4:	f7fc f8e8 	bl	80139c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80177f8:	b940      	cbnz	r0, 801780c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80177fa:	4623      	mov	r3, r4
 80177fc:	aa02      	add	r2, sp, #8
 80177fe:	4629      	mov	r1, r5
 8017800:	4650      	mov	r0, sl
 8017802:	f7ff fa2f 	bl	8016c64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8017806:	b009      	add	sp, #36	; 0x24
 8017808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780c:	f10d 0818 	add.w	r8, sp, #24
 8017810:	4639      	mov	r1, r7
 8017812:	af04      	add	r7, sp, #16
 8017814:	4640      	mov	r0, r8
 8017816:	f7fc f88b 	bl	8013930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801781a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801781e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017822:	4638      	mov	r0, r7
 8017824:	4621      	mov	r1, r4
 8017826:	f7f5 fda9 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 801782a:	4638      	mov	r0, r7
 801782c:	f7f5 fde9 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017830:	b130      	cbz	r0, 8017840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8017832:	4633      	mov	r3, r6
 8017834:	4622      	mov	r2, r4
 8017836:	a902      	add	r1, sp, #8
 8017838:	4628      	mov	r0, r5
 801783a:	f7ff f92d 	bl	8016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801783e:	e7e2      	b.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8017840:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017844:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017848:	4293      	cmp	r3, r2
 801784a:	dd12      	ble.n	8017872 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801784c:	1a9b      	subs	r3, r3, r2
 801784e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017852:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017856:	f8ad 0018 	strh.w	r0, [sp, #24]
 801785a:	4628      	mov	r0, r5
 801785c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8017860:	4642      	mov	r2, r8
 8017862:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017866:	a902      	add	r1, sp, #8
 8017868:	f8ad 301e 	strh.w	r3, [sp, #30]
 801786c:	4633      	mov	r3, r6
 801786e:	f7ff f913 	bl	8016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017872:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8017876:	f9b4 2000 	ldrsh.w	r2, [r4]
 801787a:	4293      	cmp	r3, r2
 801787c:	dd12      	ble.n	80178a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801787e:	1a9b      	subs	r3, r3, r2
 8017880:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8017884:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8017888:	f8ad 2018 	strh.w	r2, [sp, #24]
 801788c:	4642      	mov	r2, r8
 801788e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017892:	4628      	mov	r0, r5
 8017894:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017898:	23ff      	movs	r3, #255	; 0xff
 801789a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801789e:	a902      	add	r1, sp, #8
 80178a0:	f7ff f8fa 	bl	8016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80178a4:	463b      	mov	r3, r7
 80178a6:	aa02      	add	r2, sp, #8
 80178a8:	4629      	mov	r1, r5
 80178aa:	4650      	mov	r0, sl
 80178ac:	f7ff f9da 	bl	8016c64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80178b0:	88a2      	ldrh	r2, [r4, #4]
 80178b2:	8823      	ldrh	r3, [r4, #0]
 80178b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80178b8:	4413      	add	r3, r2
 80178ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80178be:	440a      	add	r2, r1
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	b292      	uxth	r2, r2
 80178c4:	b218      	sxth	r0, r3
 80178c6:	b211      	sxth	r1, r2
 80178c8:	4288      	cmp	r0, r1
 80178ca:	dd12      	ble.n	80178f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 80178cc:	1a9b      	subs	r3, r3, r2
 80178ce:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80178d2:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80178d6:	4642      	mov	r2, r8
 80178d8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80178dc:	a902      	add	r1, sp, #8
 80178de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80178e2:	23ff      	movs	r3, #255	; 0xff
 80178e4:	f8ad 001e 	strh.w	r0, [sp, #30]
 80178e8:	4628      	mov	r0, r5
 80178ea:	f8ad 601a 	strh.w	r6, [sp, #26]
 80178ee:	f7ff f8d3 	bl	8016a98 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80178f2:	88e2      	ldrh	r2, [r4, #6]
 80178f4:	8863      	ldrh	r3, [r4, #2]
 80178f6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80178fa:	4413      	add	r3, r2
 80178fc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017900:	440a      	add	r2, r1
 8017902:	b29b      	uxth	r3, r3
 8017904:	b292      	uxth	r2, r2
 8017906:	b218      	sxth	r0, r3
 8017908:	b211      	sxth	r1, r2
 801790a:	4288      	cmp	r0, r1
 801790c:	f77f af7b 	ble.w	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8017910:	1a9b      	subs	r3, r3, r2
 8017912:	f9b4 6000 	ldrsh.w	r6, [r4]
 8017916:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801791a:	4642      	mov	r2, r8
 801791c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017920:	23ff      	movs	r3, #255	; 0xff
 8017922:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017926:	f8ad 101a 	strh.w	r1, [sp, #26]
 801792a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801792e:	e782      	b.n	8017836 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8017930:	4633      	mov	r3, r6
 8017932:	4622      	mov	r2, r4
 8017934:	a902      	add	r1, sp, #8
 8017936:	4628      	mov	r0, r5
 8017938:	f7ff fa04 	bl	8016d44 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801793c:	e763      	b.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801793e:	9600      	str	r6, [sp, #0]
 8017940:	4623      	mov	r3, r4
 8017942:	aa02      	add	r2, sp, #8
 8017944:	4649      	mov	r1, r9
 8017946:	4628      	mov	r0, r5
 8017948:	f7ff fddc 	bl	8017504 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801794c:	e75b      	b.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801794e:	4638      	mov	r0, r7
 8017950:	f7fc f83a 	bl	80139c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017954:	b950      	cbnz	r0, 801796c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8017956:	f8da 3000 	ldr.w	r3, [sl]
 801795a:	aa02      	add	r2, sp, #8
 801795c:	4629      	mov	r1, r5
 801795e:	e9cd 6000 	strd	r6, r0, [sp]
 8017962:	4650      	mov	r0, sl
 8017964:	68de      	ldr	r6, [r3, #12]
 8017966:	4623      	mov	r3, r4
 8017968:	47b0      	blx	r6
 801796a:	e74c      	b.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801796c:	f10d 0818 	add.w	r8, sp, #24
 8017970:	4639      	mov	r1, r7
 8017972:	af04      	add	r7, sp, #16
 8017974:	4640      	mov	r0, r8
 8017976:	f7fb ffdb 	bl	8013930 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801797a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801797e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017982:	4638      	mov	r0, r7
 8017984:	4621      	mov	r1, r4
 8017986:	f7f5 fcf9 	bl	800d37c <_ZN8touchgfx4RectaNERKS0_>
 801798a:	4638      	mov	r0, r7
 801798c:	f7f5 fd39 	bl	800d402 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017990:	b138      	cbz	r0, 80179a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8017992:	4623      	mov	r3, r4
 8017994:	9600      	str	r6, [sp, #0]
 8017996:	aa02      	add	r2, sp, #8
 8017998:	4649      	mov	r1, r9
 801799a:	4628      	mov	r0, r5
 801799c:	f7ff fdca 	bl	8017534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80179a0:	e731      	b.n	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80179a2:	f8da 3000 	ldr.w	r3, [sl]
 80179a6:	aa02      	add	r2, sp, #8
 80179a8:	4629      	mov	r1, r5
 80179aa:	e9cd 6000 	strd	r6, r0, [sp]
 80179ae:	4650      	mov	r0, sl
 80179b0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80179b4:	463b      	mov	r3, r7
 80179b6:	47d8      	blx	fp
 80179b8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80179bc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80179c0:	4293      	cmp	r3, r2
 80179c2:	dd13      	ble.n	80179ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 80179c4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80179c8:	1a9b      	subs	r3, r3, r2
 80179ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80179ce:	f8ad 0018 	strh.w	r0, [sp, #24]
 80179d2:	4628      	mov	r0, r5
 80179d4:	f8ad 201a 	strh.w	r2, [sp, #26]
 80179d8:	aa02      	add	r2, sp, #8
 80179da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80179de:	4649      	mov	r1, r9
 80179e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80179e4:	4643      	mov	r3, r8
 80179e6:	9600      	str	r6, [sp, #0]
 80179e8:	f7ff fda4 	bl	8017534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80179ec:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80179f0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80179f4:	4293      	cmp	r3, r2
 80179f6:	dd13      	ble.n	8017a20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 80179f8:	1a9b      	subs	r3, r3, r2
 80179fa:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80179fe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8017a02:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017a06:	aa02      	add	r2, sp, #8
 8017a08:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017a12:	4643      	mov	r3, r8
 8017a14:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017a18:	4649      	mov	r1, r9
 8017a1a:	9600      	str	r6, [sp, #0]
 8017a1c:	f7ff fd8a 	bl	8017534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8017a20:	88a2      	ldrh	r2, [r4, #4]
 8017a22:	8823      	ldrh	r3, [r4, #0]
 8017a24:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017a28:	4413      	add	r3, r2
 8017a2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017a2e:	440a      	add	r2, r1
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	b292      	uxth	r2, r2
 8017a34:	b218      	sxth	r0, r3
 8017a36:	b211      	sxth	r1, r2
 8017a38:	4288      	cmp	r0, r1
 8017a3a:	dd13      	ble.n	8017a64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8017a3c:	1a9b      	subs	r3, r3, r2
 8017a3e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8017a42:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8017a46:	aa02      	add	r2, sp, #8
 8017a48:	f8ad 1018 	strh.w	r1, [sp, #24]
 8017a4c:	4649      	mov	r1, r9
 8017a4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017a52:	4643      	mov	r3, r8
 8017a54:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017a58:	4628      	mov	r0, r5
 8017a5a:	9600      	str	r6, [sp, #0]
 8017a5c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017a60:	f7ff fd68 	bl	8017534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8017a64:	88e2      	ldrh	r2, [r4, #6]
 8017a66:	8863      	ldrh	r3, [r4, #2]
 8017a68:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8017a6c:	4413      	add	r3, r2
 8017a6e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017a72:	440a      	add	r2, r1
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	b292      	uxth	r2, r2
 8017a78:	b218      	sxth	r0, r3
 8017a7a:	b211      	sxth	r1, r2
 8017a7c:	4288      	cmp	r0, r1
 8017a7e:	f77f aec2 	ble.w	8017806 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8017a82:	f9b4 7000 	ldrsh.w	r7, [r4]
 8017a86:	1a9b      	subs	r3, r3, r2
 8017a88:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017a8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017a90:	4643      	mov	r3, r8
 8017a92:	f8ad 7018 	strh.w	r7, [sp, #24]
 8017a96:	f8ad 101a 	strh.w	r1, [sp, #26]
 8017a9a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8017a9e:	9600      	str	r6, [sp, #0]
 8017aa0:	e779      	b.n	8017996 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8017aa2:	bf00      	nop
 8017aa4:	20024914 	.word	0x20024914

08017aa8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8017aa8:	b180      	cbz	r0, 8017acc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8017aaa:	2903      	cmp	r1, #3
 8017aac:	d81c      	bhi.n	8017ae8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8017aae:	e8df f001 	tbb	[pc, r1]
 8017ab2:	1d02      	.short	0x1d02
 8017ab4:	1f08      	.short	0x1f08
 8017ab6:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8017ab8:	8818      	ldrh	r0, [r3, #0]
 8017aba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8017abe:	4240      	negs	r0, r0
 8017ac0:	4770      	bx	lr
 8017ac2:	4b0d      	ldr	r3, [pc, #52]	; (8017af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8017ac4:	8818      	ldrh	r0, [r3, #0]
 8017ac6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8017aca:	4770      	bx	lr
 8017acc:	2903      	cmp	r1, #3
 8017ace:	d80b      	bhi.n	8017ae8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8017ad0:	a301      	add	r3, pc, #4	; (adr r3, 8017ad8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8017ad2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017ad6:	bf00      	nop
 8017ad8:	08017aed 	.word	0x08017aed
 8017adc:	08017ac3 	.word	0x08017ac3
 8017ae0:	08017af1 	.word	0x08017af1
 8017ae4:	08017ab7 	.word	0x08017ab7
 8017ae8:	2000      	movs	r0, #0
 8017aea:	4770      	bx	lr
 8017aec:	2001      	movs	r0, #1
 8017aee:	4770      	bx	lr
 8017af0:	f04f 30ff 	mov.w	r0, #4294967295
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop
 8017af8:	2002490e 	.word	0x2002490e

08017afc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8017afc:	b180      	cbz	r0, 8017b20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8017afe:	2903      	cmp	r1, #3
 8017b00:	d81c      	bhi.n	8017b3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8017b02:	e8df f001 	tbb	[pc, r1]
 8017b06:	021d      	.short	0x021d
 8017b08:	071f      	.short	0x071f
 8017b0a:	4b10      	ldr	r3, [pc, #64]	; (8017b4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8017b0c:	8818      	ldrh	r0, [r3, #0]
 8017b0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8017b12:	4770      	bx	lr
 8017b14:	4b0d      	ldr	r3, [pc, #52]	; (8017b4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8017b16:	8818      	ldrh	r0, [r3, #0]
 8017b18:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8017b1c:	4240      	negs	r0, r0
 8017b1e:	4770      	bx	lr
 8017b20:	2903      	cmp	r1, #3
 8017b22:	d80b      	bhi.n	8017b3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8017b24:	a301      	add	r3, pc, #4	; (adr r3, 8017b2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8017b26:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017b2a:	bf00      	nop
 8017b2c:	08017b0b 	.word	0x08017b0b
 8017b30:	08017b45 	.word	0x08017b45
 8017b34:	08017b15 	.word	0x08017b15
 8017b38:	08017b41 	.word	0x08017b41
 8017b3c:	2000      	movs	r0, #0
 8017b3e:	4770      	bx	lr
 8017b40:	2001      	movs	r0, #1
 8017b42:	4770      	bx	lr
 8017b44:	f04f 30ff 	mov.w	r0, #4294967295
 8017b48:	4770      	bx	lr
 8017b4a:	bf00      	nop
 8017b4c:	2002490e 	.word	0x2002490e

08017b50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8017b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b54:	b099      	sub	sp, #100	; 0x64
 8017b56:	910b      	str	r1, [sp, #44]	; 0x2c
 8017b58:	a914      	add	r1, sp, #80	; 0x50
 8017b5a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8017b5e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8017b62:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8017b66:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8017b6a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8017b6e:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b72:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8017b76:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8017b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8017b7c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8017b80:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8017b84:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8017b88:	9310      	str	r3, [sp, #64]	; 0x40
 8017b8a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8017b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8017b90:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8017b94:	798f      	ldrb	r7, [r1, #6]
 8017b96:	431f      	orrs	r7, r3
 8017b98:	f000 8195 	beq.w	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017b9c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8017ba0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017ba4:	f891 9007 	ldrb.w	r9, [r1, #7]
 8017ba8:	ea59 0903 	orrs.w	r9, r9, r3
 8017bac:	f000 818b 	beq.w	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017bb0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	2d00      	cmp	r5, #0
 8017bb8:	f000 812e 	beq.w	8017e18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8017bbc:	1aed      	subs	r5, r5, r3
 8017bbe:	b2ad      	uxth	r5, r5
 8017bc0:	042b      	lsls	r3, r5, #16
 8017bc2:	d502      	bpl.n	8017bca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8017bc4:	1b64      	subs	r4, r4, r5
 8017bc6:	2500      	movs	r5, #0
 8017bc8:	b224      	sxth	r4, r4
 8017bca:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017bce:	a814      	add	r0, sp, #80	; 0x50
 8017bd0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8017bd4:	428c      	cmp	r4, r1
 8017bd6:	b28b      	uxth	r3, r1
 8017bd8:	bfbf      	itttt	lt
 8017bda:	18ed      	addlt	r5, r5, r3
 8017bdc:	1b2c      	sublt	r4, r5, r4
 8017bde:	b2a5      	uxthlt	r5, r4
 8017be0:	460c      	movlt	r4, r1
 8017be2:	8891      	ldrh	r1, [r2, #4]
 8017be4:	440b      	add	r3, r1
 8017be6:	4621      	mov	r1, r4
 8017be8:	b21b      	sxth	r3, r3
 8017bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8017bec:	88d3      	ldrh	r3, [r2, #6]
 8017bee:	8852      	ldrh	r2, [r2, #2]
 8017bf0:	4413      	add	r3, r2
 8017bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bf4:	b21b      	sxth	r3, r3
 8017bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8017bf8:	4bbd      	ldr	r3, [pc, #756]	; (8017ef0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8017bfa:	f893 b000 	ldrb.w	fp, [r3]
 8017bfe:	f10b 3cff 	add.w	ip, fp, #4294967295
 8017c02:	f1dc 0300 	rsbs	r3, ip, #0
 8017c06:	eb43 030c 	adc.w	r3, r3, ip
 8017c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8017c0c:	4653      	mov	r3, sl
 8017c0e:	f7f8 fad6 	bl	80101be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8017c12:	4621      	mov	r1, r4
 8017c14:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8017c18:	4653      	mov	r3, sl
 8017c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c1c:	a814      	add	r0, sp, #80	; 0x50
 8017c1e:	f7f8 faeb 	bl	80101f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8017c22:	a918      	add	r1, sp, #96	; 0x60
 8017c24:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8017c28:	a817      	add	r0, sp, #92	; 0x5c
 8017c2a:	f7f8 fc0b 	bl	8010444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8017c2e:	f1ba 0f00 	cmp.w	sl, #0
 8017c32:	f040 80f4 	bne.w	8017e1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8017c36:	f1bb 0f01 	cmp.w	fp, #1
 8017c3a:	f040 80f8 	bne.w	8017e2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8017c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	f040 8145 	bne.w	8017ed0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8017c46:	b2ba      	uxth	r2, r7
 8017c48:	b905      	cbnz	r5, 8017c4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8017c4a:	b16e      	cbz	r6, 8017c68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8017c4c:	fb06 5302 	mla	r3, r6, r2, r5
 8017c50:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8017c52:	4631      	mov	r1, r6
 8017c54:	fb08 f303 	mul.w	r3, r8, r3
 8017c58:	f003 0607 	and.w	r6, r3, #7
 8017c5c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8017c60:	9328      	str	r3, [sp, #160]	; 0xa0
 8017c62:	eba9 0301 	sub.w	r3, r9, r1
 8017c66:	930a      	str	r3, [sp, #40]	; 0x28
 8017c68:	4651      	mov	r1, sl
 8017c6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017c6c:	f7ff ff1c 	bl	8017aa8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8017c70:	4681      	mov	r9, r0
 8017c72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017c74:	f7ff ff42 	bl	8017afc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8017c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017c7c:	4683      	mov	fp, r0
 8017c7e:	eba3 0a01 	sub.w	sl, r3, r1
 8017c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c84:	459a      	cmp	sl, r3
 8017c86:	bfa8      	it	ge
 8017c88:	469a      	movge	sl, r3
 8017c8a:	f1ba 0f00 	cmp.w	sl, #0
 8017c8e:	f340 811a 	ble.w	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017c92:	1b64      	subs	r4, r4, r5
 8017c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c96:	1b1c      	subs	r4, r3, r4
 8017c98:	42bc      	cmp	r4, r7
 8017c9a:	bfd4      	ite	le
 8017c9c:	ebc5 0504 	rsble	r5, r5, r4
 8017ca0:	ebc5 0507 	rsbgt	r5, r5, r7
 8017ca4:	2d00      	cmp	r5, #0
 8017ca6:	f340 810e 	ble.w	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017caa:	1b52      	subs	r2, r2, r5
 8017cac:	fb08 f302 	mul.w	r3, r8, r2
 8017cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	f040 8116 	bne.w	8017ee6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8017cba:	4b8e      	ldr	r3, [pc, #568]	; (8017ef4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8017cbc:	6818      	ldr	r0, [r3, #0]
 8017cbe:	6803      	ldr	r3, [r0, #0]
 8017cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cc2:	4798      	blx	r3
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	4a8c      	ldr	r2, [pc, #560]	; (8017ef8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8017cc8:	fa03 f308 	lsl.w	r3, r3, r8
 8017ccc:	8811      	ldrh	r1, [r2, #0]
 8017cce:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8017cd8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017cdc:	fb01 2303 	mla	r3, r1, r3, r2
 8017ce0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8017ce6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017ce8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8017cee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017cf0:	0a19      	lsrs	r1, r3, #8
 8017cf2:	b2cb      	uxtb	r3, r1
 8017cf4:	9312      	str	r3, [sp, #72]	; 0x48
 8017cf6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	9311      	str	r3, [sp, #68]	; 0x44
 8017cfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017cfe:	095a      	lsrs	r2, r3, #5
 8017d00:	4b7e      	ldr	r3, [pc, #504]	; (8017efc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8017d02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017d06:	400b      	ands	r3, r1
 8017d08:	4313      	orrs	r3, r2
 8017d0a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8017d0c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8017d10:	4313      	orrs	r3, r2
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	9310      	str	r3, [sp, #64]	; 0x40
 8017d16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017d18:	781a      	ldrb	r2, [r3, #0]
 8017d1a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8017d1e:	fb05 b919 	mls	r9, r5, r9, fp
 8017d22:	4132      	asrs	r2, r6
 8017d24:	fb03 fb05 	mul.w	fp, r3, r5
 8017d28:	930d      	str	r3, [sp, #52]	; 0x34
 8017d2a:	b2d2      	uxtb	r2, r2
 8017d2c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8017d30:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8017d34:	f0c0 80f5 	bcc.w	8017f22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8017d38:	46ae      	mov	lr, r5
 8017d3a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8017d3e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8017d42:	f0c0 80dd 	bcc.w	8017f00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8017d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d48:	4013      	ands	r3, r2
 8017d4a:	d055      	beq.n	8017df8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8017d4c:	20ff      	movs	r0, #255	; 0xff
 8017d4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017d50:	fb90 f1f1 	sdiv	r1, r0, r1
 8017d54:	434b      	muls	r3, r1
 8017d56:	2bfe      	cmp	r3, #254	; 0xfe
 8017d58:	dd03      	ble.n	8017d62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8017d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d5c:	4281      	cmp	r1, r0
 8017d5e:	f000 80c4 	beq.w	8017eea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8017d62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d64:	f8bc 4000 	ldrh.w	r4, [ip]
 8017d68:	fb11 f303 	smulbb	r3, r1, r3
 8017d6c:	1220      	asrs	r0, r4, #8
 8017d6e:	b29b      	uxth	r3, r3
 8017d70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8017d74:	1c59      	adds	r1, r3, #1
 8017d76:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8017d7a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017d7e:	10e1      	asrs	r1, r4, #3
 8017d80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017d84:	00e4      	lsls	r4, r4, #3
 8017d86:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8017d8a:	b29f      	uxth	r7, r3
 8017d8c:	43db      	mvns	r3, r3
 8017d8e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	b2e4      	uxtb	r4, r4
 8017d96:	9309      	str	r3, [sp, #36]	; 0x24
 8017d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017d9a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8017d9e:	fb13 f907 	smulbb	r9, r3, r7
 8017da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017da4:	fb00 9003 	mla	r0, r0, r3, r9
 8017da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017daa:	fb13 f907 	smulbb	r9, r3, r7
 8017dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017db0:	b280      	uxth	r0, r0
 8017db2:	fb01 9103 	mla	r1, r1, r3, r9
 8017db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017db8:	fb13 f707 	smulbb	r7, r3, r7
 8017dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dbe:	b289      	uxth	r1, r1
 8017dc0:	fb04 7403 	mla	r4, r4, r3, r7
 8017dc4:	1c43      	adds	r3, r0, #1
 8017dc6:	b2a4      	uxth	r4, r4
 8017dc8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017dcc:	f104 0901 	add.w	r9, r4, #1
 8017dd0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8017dd4:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8017dd8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8017ddc:	ea49 0000 	orr.w	r0, r9, r0
 8017de0:	f101 0901 	add.w	r9, r1, #1
 8017de4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8017de8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017dec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017df0:	ea40 0009 	orr.w	r0, r0, r9
 8017df4:	f8ac 0000 	strh.w	r0, [ip]
 8017df8:	4446      	add	r6, r8
 8017dfa:	b2b6      	uxth	r6, r6
 8017dfc:	2e07      	cmp	r6, #7
 8017dfe:	bf89      	itett	hi
 8017e00:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8017e02:	fa42 f208 	asrls.w	r2, r2, r8
 8017e06:	2600      	movhi	r6, #0
 8017e08:	785a      	ldrbhi	r2, [r3, #1]
 8017e0a:	bf8a      	itet	hi
 8017e0c:	3301      	addhi	r3, #1
 8017e0e:	b2d2      	uxtbls	r2, r2
 8017e10:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8017e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e14:	449c      	add	ip, r3
 8017e16:	e792      	b.n	8017d3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8017e18:	441c      	add	r4, r3
 8017e1a:	b224      	sxth	r4, r4
 8017e1c:	e6d5      	b.n	8017bca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8017e1e:	f1ba 0f01 	cmp.w	sl, #1
 8017e22:	f47f af0c 	bne.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e26:	f1bb 0f01 	cmp.w	fp, #1
 8017e2a:	f47f af08 	bne.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e2e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8017ef4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8017e32:	f8db 0000 	ldr.w	r0, [fp]
 8017e36:	6803      	ldr	r3, [r0, #0]
 8017e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e3a:	4798      	blx	r3
 8017e3c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8017e40:	465a      	mov	r2, fp
 8017e42:	d006      	beq.n	8017e52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8017e44:	f1b8 0f04 	cmp.w	r8, #4
 8017e48:	d140      	bne.n	8017ecc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8017e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e4c:	3300      	adds	r3, #0
 8017e4e:	bf18      	it	ne
 8017e50:	2301      	movne	r3, #1
 8017e52:	0580      	lsls	r0, r0, #22
 8017e54:	d56e      	bpl.n	8017f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8017e56:	f1b8 0f08 	cmp.w	r8, #8
 8017e5a:	d16b      	bne.n	8017f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	bf0c      	ite	eq
 8017e60:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8017e64:	f44f 7180 	movne.w	r1, #256	; 0x100
 8017e68:	2d00      	cmp	r5, #0
 8017e6a:	f47f aee8 	bne.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e6e:	2e00      	cmp	r6, #0
 8017e70:	f47f aee5 	bne.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e74:	19e3      	adds	r3, r4, r7
 8017e76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017e78:	4283      	cmp	r3, r0
 8017e7a:	f73f aee0 	bgt.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e82:	444b      	add	r3, r9
 8017e84:	4283      	cmp	r3, r0
 8017e86:	f73f aeda 	bgt.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017e8a:	b2bf      	uxth	r7, r7
 8017e8c:	f1b8 0f08 	cmp.w	r8, #8
 8017e90:	6810      	ldr	r0, [r2, #0]
 8017e92:	f04f 0500 	mov.w	r5, #0
 8017e96:	bf18      	it	ne
 8017e98:	3701      	addne	r7, #1
 8017e9a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8017e9e:	6804      	ldr	r4, [r0, #0]
 8017ea0:	bf18      	it	ne
 8017ea2:	f027 0701 	bicne.w	r7, r7, #1
 8017ea6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8017eaa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8017eae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017eb0:	bf18      	it	ne
 8017eb2:	b2bf      	uxthne	r7, r7
 8017eb4:	9104      	str	r1, [sp, #16]
 8017eb6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017eb8:	e9cd 7900 	strd	r7, r9, [sp]
 8017ebc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8017ec0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017ec2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8017ec4:	47a0      	blx	r4
 8017ec6:	b019      	add	sp, #100	; 0x64
 8017ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ecc:	2300      	movs	r3, #0
 8017ece:	e7c0      	b.n	8017e52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8017ed0:	2208      	movs	r2, #8
 8017ed2:	fb92 f3f8 	sdiv	r3, r2, r8
 8017ed6:	1e5a      	subs	r2, r3, #1
 8017ed8:	443a      	add	r2, r7
 8017eda:	fb92 f2f3 	sdiv	r2, r2, r3
 8017ede:	fb12 f203 	smulbb	r2, r2, r3
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	e6b0      	b.n	8017c48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8017ee6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017ee8:	e6ec      	b.n	8017cc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8017eea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017eec:	e782      	b.n	8017df4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8017eee:	bf00      	nop
 8017ef0:	2002490c 	.word	0x2002490c
 8017ef4:	20024914 	.word	0x20024914
 8017ef8:	2002490e 	.word	0x2002490e
 8017efc:	00fff800 	.word	0x00fff800
 8017f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f02:	b153      	cbz	r3, 8017f1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8017f04:	441e      	add	r6, r3
 8017f06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017f08:	b2b6      	uxth	r6, r6
 8017f0a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8017f0e:	f006 0607 	and.w	r6, r6, #7
 8017f12:	781a      	ldrb	r2, [r3, #0]
 8017f14:	9328      	str	r3, [sp, #160]	; 0xa0
 8017f16:	4132      	asrs	r2, r6
 8017f18:	b2d2      	uxtb	r2, r2
 8017f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f1c:	445b      	add	r3, fp
 8017f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8017f20:	e706      	b.n	8017d30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8017f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d1ce      	bne.n	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017f28:	4b05      	ldr	r3, [pc, #20]	; (8017f40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8017f2a:	6818      	ldr	r0, [r3, #0]
 8017f2c:	6803      	ldr	r3, [r0, #0]
 8017f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f30:	4798      	blx	r3
 8017f32:	e7c8      	b.n	8017ec6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	f43f ae82 	beq.w	8017c3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8017f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017f3e:	e793      	b.n	8017e68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8017f40:	20024914 	.word	0x20024914

08017f44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	4c15      	ldr	r4, [pc, #84]	; (8017f9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8017f48:	4605      	mov	r5, r0
 8017f4a:	7823      	ldrb	r3, [r4, #0]
 8017f4c:	f3bf 8f5b 	dmb	ish
 8017f50:	07da      	lsls	r2, r3, #31
 8017f52:	d40b      	bmi.n	8017f6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8017f54:	4620      	mov	r0, r4
 8017f56:	f007 fa68 	bl	801f42a <__cxa_guard_acquire>
 8017f5a:	b138      	cbz	r0, 8017f6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	f007 fa70 	bl	801f442 <__cxa_guard_release>
 8017f62:	4a0f      	ldr	r2, [pc, #60]	; (8017fa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8017f64:	490f      	ldr	r1, [pc, #60]	; (8017fa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8017f66:	4810      	ldr	r0, [pc, #64]	; (8017fa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8017f68:	f007 fa58 	bl	801f41c <__aeabi_atexit>
 8017f6c:	4c0f      	ldr	r4, [pc, #60]	; (8017fac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8017f6e:	7823      	ldrb	r3, [r4, #0]
 8017f70:	f3bf 8f5b 	dmb	ish
 8017f74:	07db      	lsls	r3, r3, #31
 8017f76:	d40b      	bmi.n	8017f90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f007 fa56 	bl	801f42a <__cxa_guard_acquire>
 8017f7e:	b138      	cbz	r0, 8017f90 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8017f80:	4620      	mov	r0, r4
 8017f82:	f007 fa5e 	bl	801f442 <__cxa_guard_release>
 8017f86:	4a06      	ldr	r2, [pc, #24]	; (8017fa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8017f88:	4909      	ldr	r1, [pc, #36]	; (8017fb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8017f8a:	480a      	ldr	r0, [pc, #40]	; (8017fb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8017f8c:	f007 fa46 	bl	801f41c <__aeabi_atexit>
 8017f90:	4b05      	ldr	r3, [pc, #20]	; (8017fa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8017f92:	612b      	str	r3, [r5, #16]
 8017f94:	4b07      	ldr	r3, [pc, #28]	; (8017fb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8017f96:	616b      	str	r3, [r5, #20]
 8017f98:	bd38      	pop	{r3, r4, r5, pc}
 8017f9a:	bf00      	nop
 8017f9c:	200249e0 	.word	0x200249e0
 8017fa0:	20000000 	.word	0x20000000
 8017fa4:	08016151 	.word	0x08016151
 8017fa8:	200000b4 	.word	0x200000b4
 8017fac:	200249e4 	.word	0x200249e4
 8017fb0:	0801614f 	.word	0x0801614f
 8017fb4:	200000b8 	.word	0x200000b8

08017fb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8017fb8:	b538      	push	{r3, r4, r5, lr}
 8017fba:	4c15      	ldr	r4, [pc, #84]	; (8018010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8017fbc:	4605      	mov	r5, r0
 8017fbe:	7823      	ldrb	r3, [r4, #0]
 8017fc0:	f3bf 8f5b 	dmb	ish
 8017fc4:	07da      	lsls	r2, r3, #31
 8017fc6:	d40b      	bmi.n	8017fe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f007 fa2e 	bl	801f42a <__cxa_guard_acquire>
 8017fce:	b138      	cbz	r0, 8017fe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f007 fa36 	bl	801f442 <__cxa_guard_release>
 8017fd6:	4a0f      	ldr	r2, [pc, #60]	; (8018014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8017fd8:	490f      	ldr	r1, [pc, #60]	; (8018018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8017fda:	4810      	ldr	r0, [pc, #64]	; (801801c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8017fdc:	f007 fa1e 	bl	801f41c <__aeabi_atexit>
 8017fe0:	4c0f      	ldr	r4, [pc, #60]	; (8018020 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8017fe2:	7823      	ldrb	r3, [r4, #0]
 8017fe4:	f3bf 8f5b 	dmb	ish
 8017fe8:	07db      	lsls	r3, r3, #31
 8017fea:	d40b      	bmi.n	8018004 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8017fec:	4620      	mov	r0, r4
 8017fee:	f007 fa1c 	bl	801f42a <__cxa_guard_acquire>
 8017ff2:	b138      	cbz	r0, 8018004 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f007 fa24 	bl	801f442 <__cxa_guard_release>
 8017ffa:	4a06      	ldr	r2, [pc, #24]	; (8018014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8017ffc:	4909      	ldr	r1, [pc, #36]	; (8018024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8017ffe:	480a      	ldr	r0, [pc, #40]	; (8018028 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8018000:	f007 fa0c 	bl	801f41c <__aeabi_atexit>
 8018004:	4b05      	ldr	r3, [pc, #20]	; (801801c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8018006:	60ab      	str	r3, [r5, #8]
 8018008:	4b07      	ldr	r3, [pc, #28]	; (8018028 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801800a:	60eb      	str	r3, [r5, #12]
 801800c:	bd38      	pop	{r3, r4, r5, pc}
 801800e:	bf00      	nop
 8018010:	200249b8 	.word	0x200249b8
 8018014:	20000000 	.word	0x20000000
 8018018:	08016155 	.word	0x08016155
 801801c:	2000008c 	.word	0x2000008c
 8018020:	200249bc 	.word	0x200249bc
 8018024:	08016153 	.word	0x08016153
 8018028:	20000090 	.word	0x20000090

0801802c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801802c:	b510      	push	{r4, lr}
 801802e:	4604      	mov	r4, r0
 8018030:	f7ff ff88 	bl	8017f44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8018034:	4620      	mov	r0, r4
 8018036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801803a:	f7ff bfbd 	b.w	8017fb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08018040 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8018040:	b538      	push	{r3, r4, r5, lr}
 8018042:	4c15      	ldr	r4, [pc, #84]	; (8018098 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8018044:	4605      	mov	r5, r0
 8018046:	7823      	ldrb	r3, [r4, #0]
 8018048:	f3bf 8f5b 	dmb	ish
 801804c:	07da      	lsls	r2, r3, #31
 801804e:	d40b      	bmi.n	8018068 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018050:	4620      	mov	r0, r4
 8018052:	f007 f9ea 	bl	801f42a <__cxa_guard_acquire>
 8018056:	b138      	cbz	r0, 8018068 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018058:	4620      	mov	r0, r4
 801805a:	f007 f9f2 	bl	801f442 <__cxa_guard_release>
 801805e:	4a0f      	ldr	r2, [pc, #60]	; (801809c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018060:	490f      	ldr	r1, [pc, #60]	; (80180a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8018062:	4810      	ldr	r0, [pc, #64]	; (80180a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018064:	f007 f9da 	bl	801f41c <__aeabi_atexit>
 8018068:	4c0f      	ldr	r4, [pc, #60]	; (80180a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801806a:	7823      	ldrb	r3, [r4, #0]
 801806c:	f3bf 8f5b 	dmb	ish
 8018070:	07db      	lsls	r3, r3, #31
 8018072:	d40b      	bmi.n	801808c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018074:	4620      	mov	r0, r4
 8018076:	f007 f9d8 	bl	801f42a <__cxa_guard_acquire>
 801807a:	b138      	cbz	r0, 801808c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801807c:	4620      	mov	r0, r4
 801807e:	f007 f9e0 	bl	801f442 <__cxa_guard_release>
 8018082:	4a06      	ldr	r2, [pc, #24]	; (801809c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018084:	4909      	ldr	r1, [pc, #36]	; (80180ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8018086:	480a      	ldr	r0, [pc, #40]	; (80180b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018088:	f007 f9c8 	bl	801f41c <__aeabi_atexit>
 801808c:	4b05      	ldr	r3, [pc, #20]	; (80180a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801808e:	622b      	str	r3, [r5, #32]
 8018090:	4b07      	ldr	r3, [pc, #28]	; (80180b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018092:	626b      	str	r3, [r5, #36]	; 0x24
 8018094:	bd38      	pop	{r3, r4, r5, pc}
 8018096:	bf00      	nop
 8018098:	200249e8 	.word	0x200249e8
 801809c:	20000000 	.word	0x20000000
 80180a0:	08016149 	.word	0x08016149
 80180a4:	200000bc 	.word	0x200000bc
 80180a8:	200249ec 	.word	0x200249ec
 80180ac:	08016147 	.word	0x08016147
 80180b0:	200000c0 	.word	0x200000c0

080180b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80180b4:	b538      	push	{r3, r4, r5, lr}
 80180b6:	4c15      	ldr	r4, [pc, #84]	; (801810c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80180b8:	4605      	mov	r5, r0
 80180ba:	7823      	ldrb	r3, [r4, #0]
 80180bc:	f3bf 8f5b 	dmb	ish
 80180c0:	07da      	lsls	r2, r3, #31
 80180c2:	d40b      	bmi.n	80180dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80180c4:	4620      	mov	r0, r4
 80180c6:	f007 f9b0 	bl	801f42a <__cxa_guard_acquire>
 80180ca:	b138      	cbz	r0, 80180dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80180cc:	4620      	mov	r0, r4
 80180ce:	f007 f9b8 	bl	801f442 <__cxa_guard_release>
 80180d2:	4a0f      	ldr	r2, [pc, #60]	; (8018110 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80180d4:	490f      	ldr	r1, [pc, #60]	; (8018114 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80180d6:	4810      	ldr	r0, [pc, #64]	; (8018118 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80180d8:	f007 f9a0 	bl	801f41c <__aeabi_atexit>
 80180dc:	4c0f      	ldr	r4, [pc, #60]	; (801811c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80180de:	7823      	ldrb	r3, [r4, #0]
 80180e0:	f3bf 8f5b 	dmb	ish
 80180e4:	07db      	lsls	r3, r3, #31
 80180e6:	d40b      	bmi.n	8018100 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80180e8:	4620      	mov	r0, r4
 80180ea:	f007 f99e 	bl	801f42a <__cxa_guard_acquire>
 80180ee:	b138      	cbz	r0, 8018100 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80180f0:	4620      	mov	r0, r4
 80180f2:	f007 f9a6 	bl	801f442 <__cxa_guard_release>
 80180f6:	4a06      	ldr	r2, [pc, #24]	; (8018110 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80180f8:	4909      	ldr	r1, [pc, #36]	; (8018120 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80180fa:	480a      	ldr	r0, [pc, #40]	; (8018124 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80180fc:	f007 f98e 	bl	801f41c <__aeabi_atexit>
 8018100:	4b05      	ldr	r3, [pc, #20]	; (8018118 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018102:	61ab      	str	r3, [r5, #24]
 8018104:	4b07      	ldr	r3, [pc, #28]	; (8018124 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018106:	61eb      	str	r3, [r5, #28]
 8018108:	bd38      	pop	{r3, r4, r5, pc}
 801810a:	bf00      	nop
 801810c:	200249c0 	.word	0x200249c0
 8018110:	20000000 	.word	0x20000000
 8018114:	0801614d 	.word	0x0801614d
 8018118:	20000094 	.word	0x20000094
 801811c:	200249c4 	.word	0x200249c4
 8018120:	0801614b 	.word	0x0801614b
 8018124:	20000098 	.word	0x20000098

08018128 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8018128:	b510      	push	{r4, lr}
 801812a:	4604      	mov	r4, r0
 801812c:	f7ff ff88 	bl	8018040 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8018130:	4620      	mov	r0, r4
 8018132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018136:	f7ff bfbd 	b.w	80180b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801813c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801813c:	b538      	push	{r3, r4, r5, lr}
 801813e:	4c15      	ldr	r4, [pc, #84]	; (8018194 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8018140:	4605      	mov	r5, r0
 8018142:	7823      	ldrb	r3, [r4, #0]
 8018144:	f3bf 8f5b 	dmb	ish
 8018148:	07da      	lsls	r2, r3, #31
 801814a:	d40b      	bmi.n	8018164 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801814c:	4620      	mov	r0, r4
 801814e:	f007 f96c 	bl	801f42a <__cxa_guard_acquire>
 8018152:	b138      	cbz	r0, 8018164 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018154:	4620      	mov	r0, r4
 8018156:	f007 f974 	bl	801f442 <__cxa_guard_release>
 801815a:	4a0f      	ldr	r2, [pc, #60]	; (8018198 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801815c:	490f      	ldr	r1, [pc, #60]	; (801819c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801815e:	4810      	ldr	r0, [pc, #64]	; (80181a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018160:	f007 f95c 	bl	801f41c <__aeabi_atexit>
 8018164:	4c0f      	ldr	r4, [pc, #60]	; (80181a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8018166:	7823      	ldrb	r3, [r4, #0]
 8018168:	f3bf 8f5b 	dmb	ish
 801816c:	07db      	lsls	r3, r3, #31
 801816e:	d40b      	bmi.n	8018188 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018170:	4620      	mov	r0, r4
 8018172:	f007 f95a 	bl	801f42a <__cxa_guard_acquire>
 8018176:	b138      	cbz	r0, 8018188 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018178:	4620      	mov	r0, r4
 801817a:	f007 f962 	bl	801f442 <__cxa_guard_release>
 801817e:	4a06      	ldr	r2, [pc, #24]	; (8018198 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018180:	4909      	ldr	r1, [pc, #36]	; (80181a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018182:	480a      	ldr	r0, [pc, #40]	; (80181ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018184:	f007 f94a 	bl	801f41c <__aeabi_atexit>
 8018188:	4b05      	ldr	r3, [pc, #20]	; (80181a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801818a:	632b      	str	r3, [r5, #48]	; 0x30
 801818c:	4b07      	ldr	r3, [pc, #28]	; (80181ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801818e:	636b      	str	r3, [r5, #52]	; 0x34
 8018190:	bd38      	pop	{r3, r4, r5, pc}
 8018192:	bf00      	nop
 8018194:	200249f8 	.word	0x200249f8
 8018198:	20000000 	.word	0x20000000
 801819c:	08016141 	.word	0x08016141
 80181a0:	200000cc 	.word	0x200000cc
 80181a4:	200249fc 	.word	0x200249fc
 80181a8:	0801613f 	.word	0x0801613f
 80181ac:	200000d0 	.word	0x200000d0

080181b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80181b0:	b538      	push	{r3, r4, r5, lr}
 80181b2:	4c15      	ldr	r4, [pc, #84]	; (8018208 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80181b4:	4605      	mov	r5, r0
 80181b6:	7823      	ldrb	r3, [r4, #0]
 80181b8:	f3bf 8f5b 	dmb	ish
 80181bc:	07da      	lsls	r2, r3, #31
 80181be:	d40b      	bmi.n	80181d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80181c0:	4620      	mov	r0, r4
 80181c2:	f007 f932 	bl	801f42a <__cxa_guard_acquire>
 80181c6:	b138      	cbz	r0, 80181d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80181c8:	4620      	mov	r0, r4
 80181ca:	f007 f93a 	bl	801f442 <__cxa_guard_release>
 80181ce:	4a0f      	ldr	r2, [pc, #60]	; (801820c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80181d0:	490f      	ldr	r1, [pc, #60]	; (8018210 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80181d2:	4810      	ldr	r0, [pc, #64]	; (8018214 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80181d4:	f007 f922 	bl	801f41c <__aeabi_atexit>
 80181d8:	4c0f      	ldr	r4, [pc, #60]	; (8018218 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80181da:	7823      	ldrb	r3, [r4, #0]
 80181dc:	f3bf 8f5b 	dmb	ish
 80181e0:	07db      	lsls	r3, r3, #31
 80181e2:	d40b      	bmi.n	80181fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80181e4:	4620      	mov	r0, r4
 80181e6:	f007 f920 	bl	801f42a <__cxa_guard_acquire>
 80181ea:	b138      	cbz	r0, 80181fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80181ec:	4620      	mov	r0, r4
 80181ee:	f007 f928 	bl	801f442 <__cxa_guard_release>
 80181f2:	4a06      	ldr	r2, [pc, #24]	; (801820c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80181f4:	4909      	ldr	r1, [pc, #36]	; (801821c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80181f6:	480a      	ldr	r0, [pc, #40]	; (8018220 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80181f8:	f007 f910 	bl	801f41c <__aeabi_atexit>
 80181fc:	4b05      	ldr	r3, [pc, #20]	; (8018214 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80181fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8018200:	4b07      	ldr	r3, [pc, #28]	; (8018220 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018202:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018204:	bd38      	pop	{r3, r4, r5, pc}
 8018206:	bf00      	nop
 8018208:	200249c8 	.word	0x200249c8
 801820c:	20000000 	.word	0x20000000
 8018210:	08016145 	.word	0x08016145
 8018214:	2000009c 	.word	0x2000009c
 8018218:	200249cc 	.word	0x200249cc
 801821c:	08016143 	.word	0x08016143
 8018220:	200000a0 	.word	0x200000a0

08018224 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018224:	b510      	push	{r4, lr}
 8018226:	4604      	mov	r4, r0
 8018228:	f7ff ff88 	bl	801813c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801822c:	4620      	mov	r0, r4
 801822e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018232:	f7ff bfbd 	b.w	80181b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018238 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8018238:	b538      	push	{r3, r4, r5, lr}
 801823a:	4c15      	ldr	r4, [pc, #84]	; (8018290 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801823c:	4605      	mov	r5, r0
 801823e:	7823      	ldrb	r3, [r4, #0]
 8018240:	f3bf 8f5b 	dmb	ish
 8018244:	07da      	lsls	r2, r3, #31
 8018246:	d40b      	bmi.n	8018260 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8018248:	4620      	mov	r0, r4
 801824a:	f007 f8ee 	bl	801f42a <__cxa_guard_acquire>
 801824e:	b138      	cbz	r0, 8018260 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8018250:	4620      	mov	r0, r4
 8018252:	f007 f8f6 	bl	801f442 <__cxa_guard_release>
 8018256:	4a0f      	ldr	r2, [pc, #60]	; (8018294 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8018258:	490f      	ldr	r1, [pc, #60]	; (8018298 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801825a:	4810      	ldr	r0, [pc, #64]	; (801829c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801825c:	f007 f8de 	bl	801f41c <__aeabi_atexit>
 8018260:	4c0f      	ldr	r4, [pc, #60]	; (80182a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8018262:	7823      	ldrb	r3, [r4, #0]
 8018264:	f3bf 8f5b 	dmb	ish
 8018268:	07db      	lsls	r3, r3, #31
 801826a:	d40b      	bmi.n	8018284 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801826c:	4620      	mov	r0, r4
 801826e:	f007 f8dc 	bl	801f42a <__cxa_guard_acquire>
 8018272:	b138      	cbz	r0, 8018284 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8018274:	4620      	mov	r0, r4
 8018276:	f007 f8e4 	bl	801f442 <__cxa_guard_release>
 801827a:	4a06      	ldr	r2, [pc, #24]	; (8018294 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801827c:	4909      	ldr	r1, [pc, #36]	; (80182a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801827e:	480a      	ldr	r0, [pc, #40]	; (80182a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8018280:	f007 f8cc 	bl	801f41c <__aeabi_atexit>
 8018284:	4b05      	ldr	r3, [pc, #20]	; (801829c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8018286:	652b      	str	r3, [r5, #80]	; 0x50
 8018288:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801828a:	656b      	str	r3, [r5, #84]	; 0x54
 801828c:	bd38      	pop	{r3, r4, r5, pc}
 801828e:	bf00      	nop
 8018290:	20024a00 	.word	0x20024a00
 8018294:	20000000 	.word	0x20000000
 8018298:	08016131 	.word	0x08016131
 801829c:	200000d4 	.word	0x200000d4
 80182a0:	20024a04 	.word	0x20024a04
 80182a4:	0801612f 	.word	0x0801612f
 80182a8:	200000d8 	.word	0x200000d8

080182ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4c15      	ldr	r4, [pc, #84]	; (8018304 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80182b0:	4605      	mov	r5, r0
 80182b2:	7823      	ldrb	r3, [r4, #0]
 80182b4:	f3bf 8f5b 	dmb	ish
 80182b8:	07da      	lsls	r2, r3, #31
 80182ba:	d40b      	bmi.n	80182d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80182bc:	4620      	mov	r0, r4
 80182be:	f007 f8b4 	bl	801f42a <__cxa_guard_acquire>
 80182c2:	b138      	cbz	r0, 80182d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80182c4:	4620      	mov	r0, r4
 80182c6:	f007 f8bc 	bl	801f442 <__cxa_guard_release>
 80182ca:	4a0f      	ldr	r2, [pc, #60]	; (8018308 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80182cc:	490f      	ldr	r1, [pc, #60]	; (801830c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80182ce:	4810      	ldr	r0, [pc, #64]	; (8018310 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80182d0:	f007 f8a4 	bl	801f41c <__aeabi_atexit>
 80182d4:	4c0f      	ldr	r4, [pc, #60]	; (8018314 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80182d6:	7823      	ldrb	r3, [r4, #0]
 80182d8:	f3bf 8f5b 	dmb	ish
 80182dc:	07db      	lsls	r3, r3, #31
 80182de:	d40b      	bmi.n	80182f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80182e0:	4620      	mov	r0, r4
 80182e2:	f007 f8a2 	bl	801f42a <__cxa_guard_acquire>
 80182e6:	b138      	cbz	r0, 80182f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80182e8:	4620      	mov	r0, r4
 80182ea:	f007 f8aa 	bl	801f442 <__cxa_guard_release>
 80182ee:	4a06      	ldr	r2, [pc, #24]	; (8018308 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80182f0:	4909      	ldr	r1, [pc, #36]	; (8018318 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80182f2:	480a      	ldr	r0, [pc, #40]	; (801831c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80182f4:	f007 f892 	bl	801f41c <__aeabi_atexit>
 80182f8:	4b05      	ldr	r3, [pc, #20]	; (8018310 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80182fa:	64ab      	str	r3, [r5, #72]	; 0x48
 80182fc:	4b07      	ldr	r3, [pc, #28]	; (801831c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80182fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018300:	bd38      	pop	{r3, r4, r5, pc}
 8018302:	bf00      	nop
 8018304:	20024a08 	.word	0x20024a08
 8018308:	20000000 	.word	0x20000000
 801830c:	08016135 	.word	0x08016135
 8018310:	200000dc 	.word	0x200000dc
 8018314:	20024a0c 	.word	0x20024a0c
 8018318:	08016133 	.word	0x08016133
 801831c:	200000e0 	.word	0x200000e0

08018320 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	4c15      	ldr	r4, [pc, #84]	; (8018378 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8018324:	4605      	mov	r5, r0
 8018326:	7823      	ldrb	r3, [r4, #0]
 8018328:	f3bf 8f5b 	dmb	ish
 801832c:	07da      	lsls	r2, r3, #31
 801832e:	d40b      	bmi.n	8018348 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8018330:	4620      	mov	r0, r4
 8018332:	f007 f87a 	bl	801f42a <__cxa_guard_acquire>
 8018336:	b138      	cbz	r0, 8018348 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8018338:	4620      	mov	r0, r4
 801833a:	f007 f882 	bl	801f442 <__cxa_guard_release>
 801833e:	4a0f      	ldr	r2, [pc, #60]	; (801837c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8018340:	490f      	ldr	r1, [pc, #60]	; (8018380 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8018342:	4810      	ldr	r0, [pc, #64]	; (8018384 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8018344:	f007 f86a 	bl	801f41c <__aeabi_atexit>
 8018348:	4c0f      	ldr	r4, [pc, #60]	; (8018388 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801834a:	7823      	ldrb	r3, [r4, #0]
 801834c:	f3bf 8f5b 	dmb	ish
 8018350:	07db      	lsls	r3, r3, #31
 8018352:	d40b      	bmi.n	801836c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8018354:	4620      	mov	r0, r4
 8018356:	f007 f868 	bl	801f42a <__cxa_guard_acquire>
 801835a:	b138      	cbz	r0, 801836c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801835c:	4620      	mov	r0, r4
 801835e:	f007 f870 	bl	801f442 <__cxa_guard_release>
 8018362:	4a06      	ldr	r2, [pc, #24]	; (801837c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8018364:	4909      	ldr	r1, [pc, #36]	; (801838c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8018366:	480a      	ldr	r0, [pc, #40]	; (8018390 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8018368:	f007 f858 	bl	801f41c <__aeabi_atexit>
 801836c:	4b05      	ldr	r3, [pc, #20]	; (8018384 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801836e:	642b      	str	r3, [r5, #64]	; 0x40
 8018370:	4b07      	ldr	r3, [pc, #28]	; (8018390 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8018372:	646b      	str	r3, [r5, #68]	; 0x44
 8018374:	bd38      	pop	{r3, r4, r5, pc}
 8018376:	bf00      	nop
 8018378:	200249d0 	.word	0x200249d0
 801837c:	20000000 	.word	0x20000000
 8018380:	08016139 	.word	0x08016139
 8018384:	200000a4 	.word	0x200000a4
 8018388:	200249d4 	.word	0x200249d4
 801838c:	08016137 	.word	0x08016137
 8018390:	200000a8 	.word	0x200000a8

08018394 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8018394:	b538      	push	{r3, r4, r5, lr}
 8018396:	4c15      	ldr	r4, [pc, #84]	; (80183ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8018398:	4605      	mov	r5, r0
 801839a:	7823      	ldrb	r3, [r4, #0]
 801839c:	f3bf 8f5b 	dmb	ish
 80183a0:	07da      	lsls	r2, r3, #31
 80183a2:	d40b      	bmi.n	80183bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80183a4:	4620      	mov	r0, r4
 80183a6:	f007 f840 	bl	801f42a <__cxa_guard_acquire>
 80183aa:	b138      	cbz	r0, 80183bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80183ac:	4620      	mov	r0, r4
 80183ae:	f007 f848 	bl	801f442 <__cxa_guard_release>
 80183b2:	4a0f      	ldr	r2, [pc, #60]	; (80183f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80183b4:	490f      	ldr	r1, [pc, #60]	; (80183f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80183b6:	4810      	ldr	r0, [pc, #64]	; (80183f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80183b8:	f007 f830 	bl	801f41c <__aeabi_atexit>
 80183bc:	4c0f      	ldr	r4, [pc, #60]	; (80183fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80183be:	7823      	ldrb	r3, [r4, #0]
 80183c0:	f3bf 8f5b 	dmb	ish
 80183c4:	07db      	lsls	r3, r3, #31
 80183c6:	d40b      	bmi.n	80183e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80183c8:	4620      	mov	r0, r4
 80183ca:	f007 f82e 	bl	801f42a <__cxa_guard_acquire>
 80183ce:	b138      	cbz	r0, 80183e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80183d0:	4620      	mov	r0, r4
 80183d2:	f007 f836 	bl	801f442 <__cxa_guard_release>
 80183d6:	4a06      	ldr	r2, [pc, #24]	; (80183f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80183d8:	4909      	ldr	r1, [pc, #36]	; (8018400 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80183da:	480a      	ldr	r0, [pc, #40]	; (8018404 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80183dc:	f007 f81e 	bl	801f41c <__aeabi_atexit>
 80183e0:	4b05      	ldr	r3, [pc, #20]	; (80183f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80183e2:	63ab      	str	r3, [r5, #56]	; 0x38
 80183e4:	4b07      	ldr	r3, [pc, #28]	; (8018404 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80183e6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80183e8:	bd38      	pop	{r3, r4, r5, pc}
 80183ea:	bf00      	nop
 80183ec:	200249f0 	.word	0x200249f0
 80183f0:	20000000 	.word	0x20000000
 80183f4:	0801613d 	.word	0x0801613d
 80183f8:	200000c4 	.word	0x200000c4
 80183fc:	200249f4 	.word	0x200249f4
 8018400:	0801613b 	.word	0x0801613b
 8018404:	200000c8 	.word	0x200000c8

08018408 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8018408:	b510      	push	{r4, lr}
 801840a:	4604      	mov	r4, r0
 801840c:	f7ff ff14 	bl	8018238 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8018410:	4620      	mov	r0, r4
 8018412:	f7ff ff85 	bl	8018320 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8018416:	4620      	mov	r0, r4
 8018418:	f7ff ff48 	bl	80182ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801841c:	4620      	mov	r0, r4
 801841e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018422:	f7ff bfb7 	b.w	8018394 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08018428 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018428:	b538      	push	{r3, r4, r5, lr}
 801842a:	4c15      	ldr	r4, [pc, #84]	; (8018480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801842c:	4605      	mov	r5, r0
 801842e:	7823      	ldrb	r3, [r4, #0]
 8018430:	f3bf 8f5b 	dmb	ish
 8018434:	07da      	lsls	r2, r3, #31
 8018436:	d40b      	bmi.n	8018450 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018438:	4620      	mov	r0, r4
 801843a:	f006 fff6 	bl	801f42a <__cxa_guard_acquire>
 801843e:	b138      	cbz	r0, 8018450 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018440:	4620      	mov	r0, r4
 8018442:	f006 fffe 	bl	801f442 <__cxa_guard_release>
 8018446:	4a0f      	ldr	r2, [pc, #60]	; (8018484 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018448:	490f      	ldr	r1, [pc, #60]	; (8018488 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801844a:	4810      	ldr	r0, [pc, #64]	; (801848c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801844c:	f006 ffe6 	bl	801f41c <__aeabi_atexit>
 8018450:	4c0f      	ldr	r4, [pc, #60]	; (8018490 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018452:	7823      	ldrb	r3, [r4, #0]
 8018454:	f3bf 8f5b 	dmb	ish
 8018458:	07db      	lsls	r3, r3, #31
 801845a:	d40b      	bmi.n	8018474 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801845c:	4620      	mov	r0, r4
 801845e:	f006 ffe4 	bl	801f42a <__cxa_guard_acquire>
 8018462:	b138      	cbz	r0, 8018474 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018464:	4620      	mov	r0, r4
 8018466:	f006 ffec 	bl	801f442 <__cxa_guard_release>
 801846a:	4a06      	ldr	r2, [pc, #24]	; (8018484 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801846c:	4909      	ldr	r1, [pc, #36]	; (8018494 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801846e:	480a      	ldr	r0, [pc, #40]	; (8018498 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018470:	f006 ffd4 	bl	801f41c <__aeabi_atexit>
 8018474:	4b05      	ldr	r3, [pc, #20]	; (801848c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018476:	662b      	str	r3, [r5, #96]	; 0x60
 8018478:	4b07      	ldr	r3, [pc, #28]	; (8018498 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801847a:	666b      	str	r3, [r5, #100]	; 0x64
 801847c:	bd38      	pop	{r3, r4, r5, pc}
 801847e:	bf00      	nop
 8018480:	200249d8 	.word	0x200249d8
 8018484:	20000000 	.word	0x20000000
 8018488:	08016129 	.word	0x08016129
 801848c:	200000ac 	.word	0x200000ac
 8018490:	200249dc 	.word	0x200249dc
 8018494:	08016127 	.word	0x08016127
 8018498:	200000b0 	.word	0x200000b0

0801849c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	4c15      	ldr	r4, [pc, #84]	; (80184f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80184a0:	4605      	mov	r5, r0
 80184a2:	7823      	ldrb	r3, [r4, #0]
 80184a4:	f3bf 8f5b 	dmb	ish
 80184a8:	07da      	lsls	r2, r3, #31
 80184aa:	d40b      	bmi.n	80184c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80184ac:	4620      	mov	r0, r4
 80184ae:	f006 ffbc 	bl	801f42a <__cxa_guard_acquire>
 80184b2:	b138      	cbz	r0, 80184c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80184b4:	4620      	mov	r0, r4
 80184b6:	f006 ffc4 	bl	801f442 <__cxa_guard_release>
 80184ba:	4a0f      	ldr	r2, [pc, #60]	; (80184f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80184bc:	490f      	ldr	r1, [pc, #60]	; (80184fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80184be:	4810      	ldr	r0, [pc, #64]	; (8018500 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80184c0:	f006 ffac 	bl	801f41c <__aeabi_atexit>
 80184c4:	4c0f      	ldr	r4, [pc, #60]	; (8018504 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80184c6:	7823      	ldrb	r3, [r4, #0]
 80184c8:	f3bf 8f5b 	dmb	ish
 80184cc:	07db      	lsls	r3, r3, #31
 80184ce:	d40b      	bmi.n	80184e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80184d0:	4620      	mov	r0, r4
 80184d2:	f006 ffaa 	bl	801f42a <__cxa_guard_acquire>
 80184d6:	b138      	cbz	r0, 80184e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80184d8:	4620      	mov	r0, r4
 80184da:	f006 ffb2 	bl	801f442 <__cxa_guard_release>
 80184de:	4a06      	ldr	r2, [pc, #24]	; (80184f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80184e0:	4909      	ldr	r1, [pc, #36]	; (8018508 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80184e2:	480a      	ldr	r0, [pc, #40]	; (801850c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80184e4:	f006 ff9a 	bl	801f41c <__aeabi_atexit>
 80184e8:	4b05      	ldr	r3, [pc, #20]	; (8018500 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80184ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80184ec:	4b07      	ldr	r3, [pc, #28]	; (801850c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80184ee:	65eb      	str	r3, [r5, #92]	; 0x5c
 80184f0:	bd38      	pop	{r3, r4, r5, pc}
 80184f2:	bf00      	nop
 80184f4:	200249b0 	.word	0x200249b0
 80184f8:	20000000 	.word	0x20000000
 80184fc:	0801612d 	.word	0x0801612d
 8018500:	20000084 	.word	0x20000084
 8018504:	200249b4 	.word	0x200249b4
 8018508:	0801612b 	.word	0x0801612b
 801850c:	20000088 	.word	0x20000088

08018510 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8018510:	b510      	push	{r4, lr}
 8018512:	4604      	mov	r4, r0
 8018514:	f7ff ff88 	bl	8018428 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018518:	4620      	mov	r0, r4
 801851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801851e:	f7ff bfbd 	b.w	801849c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018524:	b538      	push	{r3, r4, r5, lr}
 8018526:	4c15      	ldr	r4, [pc, #84]	; (801857c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018528:	4605      	mov	r5, r0
 801852a:	7823      	ldrb	r3, [r4, #0]
 801852c:	f3bf 8f5b 	dmb	ish
 8018530:	07da      	lsls	r2, r3, #31
 8018532:	d40b      	bmi.n	801854c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018534:	4620      	mov	r0, r4
 8018536:	f006 ff78 	bl	801f42a <__cxa_guard_acquire>
 801853a:	b138      	cbz	r0, 801854c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801853c:	4620      	mov	r0, r4
 801853e:	f006 ff80 	bl	801f442 <__cxa_guard_release>
 8018542:	4a0f      	ldr	r2, [pc, #60]	; (8018580 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018544:	490f      	ldr	r1, [pc, #60]	; (8018584 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018546:	4810      	ldr	r0, [pc, #64]	; (8018588 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018548:	f006 ff68 	bl	801f41c <__aeabi_atexit>
 801854c:	4c0f      	ldr	r4, [pc, #60]	; (801858c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801854e:	7823      	ldrb	r3, [r4, #0]
 8018550:	f3bf 8f5b 	dmb	ish
 8018554:	07db      	lsls	r3, r3, #31
 8018556:	d40b      	bmi.n	8018570 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018558:	4620      	mov	r0, r4
 801855a:	f006 ff66 	bl	801f42a <__cxa_guard_acquire>
 801855e:	b138      	cbz	r0, 8018570 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018560:	4620      	mov	r0, r4
 8018562:	f006 ff6e 	bl	801f442 <__cxa_guard_release>
 8018566:	4a06      	ldr	r2, [pc, #24]	; (8018580 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018568:	4909      	ldr	r1, [pc, #36]	; (8018590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801856a:	480a      	ldr	r0, [pc, #40]	; (8018594 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801856c:	f006 ff56 	bl	801f41c <__aeabi_atexit>
 8018570:	4b05      	ldr	r3, [pc, #20]	; (8018588 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018572:	672b      	str	r3, [r5, #112]	; 0x70
 8018574:	4b07      	ldr	r3, [pc, #28]	; (8018594 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018576:	676b      	str	r3, [r5, #116]	; 0x74
 8018578:	bd38      	pop	{r3, r4, r5, pc}
 801857a:	bf00      	nop
 801857c:	200249a8 	.word	0x200249a8
 8018580:	20000000 	.word	0x20000000
 8018584:	08016121 	.word	0x08016121
 8018588:	2000007c 	.word	0x2000007c
 801858c:	200249ac 	.word	0x200249ac
 8018590:	0801611f 	.word	0x0801611f
 8018594:	20000080 	.word	0x20000080

08018598 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018598:	b538      	push	{r3, r4, r5, lr}
 801859a:	4c15      	ldr	r4, [pc, #84]	; (80185f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801859c:	4605      	mov	r5, r0
 801859e:	7823      	ldrb	r3, [r4, #0]
 80185a0:	f3bf 8f5b 	dmb	ish
 80185a4:	07da      	lsls	r2, r3, #31
 80185a6:	d40b      	bmi.n	80185c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80185a8:	4620      	mov	r0, r4
 80185aa:	f006 ff3e 	bl	801f42a <__cxa_guard_acquire>
 80185ae:	b138      	cbz	r0, 80185c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80185b0:	4620      	mov	r0, r4
 80185b2:	f006 ff46 	bl	801f442 <__cxa_guard_release>
 80185b6:	4a0f      	ldr	r2, [pc, #60]	; (80185f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80185b8:	490f      	ldr	r1, [pc, #60]	; (80185f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80185ba:	4810      	ldr	r0, [pc, #64]	; (80185fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80185bc:	f006 ff2e 	bl	801f41c <__aeabi_atexit>
 80185c0:	4c0f      	ldr	r4, [pc, #60]	; (8018600 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80185c2:	7823      	ldrb	r3, [r4, #0]
 80185c4:	f3bf 8f5b 	dmb	ish
 80185c8:	07db      	lsls	r3, r3, #31
 80185ca:	d40b      	bmi.n	80185e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80185cc:	4620      	mov	r0, r4
 80185ce:	f006 ff2c 	bl	801f42a <__cxa_guard_acquire>
 80185d2:	b138      	cbz	r0, 80185e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80185d4:	4620      	mov	r0, r4
 80185d6:	f006 ff34 	bl	801f442 <__cxa_guard_release>
 80185da:	4a06      	ldr	r2, [pc, #24]	; (80185f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80185dc:	4909      	ldr	r1, [pc, #36]	; (8018604 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80185de:	480a      	ldr	r0, [pc, #40]	; (8018608 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80185e0:	f006 ff1c 	bl	801f41c <__aeabi_atexit>
 80185e4:	4b05      	ldr	r3, [pc, #20]	; (80185fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80185e6:	66ab      	str	r3, [r5, #104]	; 0x68
 80185e8:	4b07      	ldr	r3, [pc, #28]	; (8018608 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80185ea:	66eb      	str	r3, [r5, #108]	; 0x6c
 80185ec:	bd38      	pop	{r3, r4, r5, pc}
 80185ee:	bf00      	nop
 80185f0:	200249a0 	.word	0x200249a0
 80185f4:	20000000 	.word	0x20000000
 80185f8:	08016125 	.word	0x08016125
 80185fc:	20000074 	.word	0x20000074
 8018600:	200249a4 	.word	0x200249a4
 8018604:	08016123 	.word	0x08016123
 8018608:	20000078 	.word	0x20000078

0801860c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801860c:	b510      	push	{r4, lr}
 801860e:	4604      	mov	r4, r0
 8018610:	f7ff ff88 	bl	8018524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018614:	4620      	mov	r0, r4
 8018616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801861a:	f7ff bfbd 	b.w	8018598 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801861e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801861e:	b510      	push	{r4, lr}
 8018620:	4604      	mov	r4, r0
 8018622:	f7ff fff3 	bl	801860c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8018626:	4620      	mov	r0, r4
 8018628:	f7ff ff72 	bl	8018510 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801862c:	4620      	mov	r0, r4
 801862e:	f7ff fdf9 	bl	8018224 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8018632:	4620      	mov	r0, r4
 8018634:	f7ff fcfa 	bl	801802c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8018638:	4620      	mov	r0, r4
 801863a:	f7ff fd75 	bl	8018128 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801863e:	4620      	mov	r0, r4
 8018640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018644:	f7ff bee0 	b.w	8018408 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08018648 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8018648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801864c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8018650:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8018654:	2d00      	cmp	r5, #0
 8018656:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801865a:	fb05 4c0e 	mla	ip, r5, lr, r4
 801865e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8018662:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8018666:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801866a:	eb02 0a0c 	add.w	sl, r2, ip
 801866e:	8808      	ldrh	r0, [r1, #0]
 8018670:	f2c0 80b0 	blt.w	80187d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8018674:	45ab      	cmp	fp, r5
 8018676:	f340 80ad 	ble.w	80187d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801867a:	2c00      	cmp	r4, #0
 801867c:	f2c0 80a8 	blt.w	80187d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8018680:	45a6      	cmp	lr, r4
 8018682:	f340 80a5 	ble.w	80187d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8018686:	f812 200c 	ldrb.w	r2, [r2, ip]
 801868a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801868e:	1c62      	adds	r2, r4, #1
 8018690:	f100 80a3 	bmi.w	80187da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8018694:	4596      	cmp	lr, r2
 8018696:	f340 80a0 	ble.w	80187da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801869a:	f1b9 0f00 	cmp.w	r9, #0
 801869e:	f000 809c 	beq.w	80187da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80186a2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80186a6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80186aa:	3501      	adds	r5, #1
 80186ac:	f100 8099 	bmi.w	80187e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80186b0:	45ab      	cmp	fp, r5
 80186b2:	f340 8096 	ble.w	80187e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80186b6:	2f00      	cmp	r7, #0
 80186b8:	f000 8093 	beq.w	80187e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80186bc:	2c00      	cmp	r4, #0
 80186be:	f2c0 808e 	blt.w	80187de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80186c2:	45a6      	cmp	lr, r4
 80186c4:	f340 808b 	ble.w	80187de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80186c8:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80186cc:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80186d0:	3401      	adds	r4, #1
 80186d2:	f100 8089 	bmi.w	80187e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80186d6:	45a6      	cmp	lr, r4
 80186d8:	f340 8086 	ble.w	80187e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80186dc:	f1b9 0f00 	cmp.w	r9, #0
 80186e0:	f000 8082 	beq.w	80187e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80186e4:	44d6      	add	lr, sl
 80186e6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80186ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80186ee:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80186f2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80186f6:	fb19 fe07 	smulbb	lr, r9, r7
 80186fa:	f1c7 0210 	rsb	r2, r7, #16
 80186fe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8018702:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8018706:	eba2 0209 	sub.w	r2, r2, r9
 801870a:	ea44 0808 	orr.w	r8, r4, r8
 801870e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8018712:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8018716:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801871a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801871e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8018722:	ea44 0c0c 	orr.w	ip, r4, ip
 8018726:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801872a:	fb04 f40c 	mul.w	r4, r4, ip
 801872e:	fb02 4808 	mla	r8, r2, r8, r4
 8018732:	041a      	lsls	r2, r3, #16
 8018734:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018738:	b2b4      	uxth	r4, r6
 801873a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801873e:	43f6      	mvns	r6, r6
 8018740:	4313      	orrs	r3, r2
 8018742:	042a      	lsls	r2, r5, #16
 8018744:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8018748:	b2f6      	uxtb	r6, r6
 801874a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801874e:	fb0e 8303 	mla	r3, lr, r3, r8
 8018752:	432a      	orrs	r2, r5
 8018754:	fb07 3202 	mla	r2, r7, r2, r3
 8018758:	10c7      	asrs	r7, r0, #3
 801875a:	0d53      	lsrs	r3, r2, #21
 801875c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018760:	0952      	lsrs	r2, r2, #5
 8018762:	fb17 f706 	smulbb	r7, r7, r6
 8018766:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801876a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801876e:	431a      	orrs	r2, r3
 8018770:	b293      	uxth	r3, r2
 8018772:	1202      	asrs	r2, r0, #8
 8018774:	121d      	asrs	r5, r3, #8
 8018776:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801877a:	00c0      	lsls	r0, r0, #3
 801877c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018780:	fb12 f206 	smulbb	r2, r2, r6
 8018784:	b2c0      	uxtb	r0, r0
 8018786:	fb05 2504 	mla	r5, r5, r4, r2
 801878a:	10da      	asrs	r2, r3, #3
 801878c:	fb10 f006 	smulbb	r0, r0, r6
 8018790:	00db      	lsls	r3, r3, #3
 8018792:	b2ad      	uxth	r5, r5
 8018794:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018798:	b2db      	uxtb	r3, r3
 801879a:	fb02 7204 	mla	r2, r2, r4, r7
 801879e:	fb03 0004 	mla	r0, r3, r4, r0
 80187a2:	1c6b      	adds	r3, r5, #1
 80187a4:	b292      	uxth	r2, r2
 80187a6:	b280      	uxth	r0, r0
 80187a8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80187ac:	1c43      	adds	r3, r0, #1
 80187ae:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80187b2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80187b6:	1c50      	adds	r0, r2, #1
 80187b8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80187bc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80187c0:	0952      	lsrs	r2, r2, #5
 80187c2:	432b      	orrs	r3, r5
 80187c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80187c8:	4313      	orrs	r3, r2
 80187ca:	800b      	strh	r3, [r1, #0]
 80187cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187d0:	4680      	mov	r8, r0
 80187d2:	e75c      	b.n	801868e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 80187d4:	4684      	mov	ip, r0
 80187d6:	4680      	mov	r8, r0
 80187d8:	e767      	b.n	80186aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80187da:	4684      	mov	ip, r0
 80187dc:	e765      	b.n	80186aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80187de:	4605      	mov	r5, r0
 80187e0:	e776      	b.n	80186d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 80187e2:	4603      	mov	r3, r0
 80187e4:	4605      	mov	r5, r0
 80187e6:	e782      	b.n	80186ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80187e8:	4603      	mov	r3, r0
 80187ea:	e780      	b.n	80186ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

080187ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80187ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f0:	b099      	sub	sp, #100	; 0x64
 80187f2:	9215      	str	r2, [sp, #84]	; 0x54
 80187f4:	9309      	str	r3, [sp, #36]	; 0x24
 80187f6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80187f8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 80187fc:	9016      	str	r0, [sp, #88]	; 0x58
 80187fe:	930d      	str	r3, [sp, #52]	; 0x34
 8018800:	6850      	ldr	r0, [r2, #4]
 8018802:	910c      	str	r1, [sp, #48]	; 0x30
 8018804:	6812      	ldr	r2, [r2, #0]
 8018806:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801880a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801880e:	fb00 1303 	mla	r3, r0, r3, r1
 8018812:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8018816:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	930b      	str	r3, [sp, #44]	; 0x2c
 801881c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801881e:	685e      	ldr	r6, [r3, #4]
 8018820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018822:	3604      	adds	r6, #4
 8018824:	43db      	mvns	r3, r3
 8018826:	b2db      	uxtb	r3, r3
 8018828:	930a      	str	r3, [sp, #40]	; 0x28
 801882a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801882c:	2b00      	cmp	r3, #0
 801882e:	dc03      	bgt.n	8018838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018832:	2b00      	cmp	r3, #0
 8018834:	f340 8225 	ble.w	8018c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8018838:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801883a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801883e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018842:	1e48      	subs	r0, r1, #1
 8018844:	1e57      	subs	r7, r2, #1
 8018846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018848:	2b00      	cmp	r3, #0
 801884a:	f340 80e3 	ble.w	8018a14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801884e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8018852:	ea4f 4325 	mov.w	r3, r5, asr #16
 8018856:	d406      	bmi.n	8018866 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018858:	4584      	cmp	ip, r0
 801885a:	da04      	bge.n	8018866 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801885c:	2b00      	cmp	r3, #0
 801885e:	db02      	blt.n	8018866 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018860:	42bb      	cmp	r3, r7
 8018862:	f2c0 80d8 	blt.w	8018a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8018866:	f11c 0c01 	adds.w	ip, ip, #1
 801886a:	f100 80c9 	bmi.w	8018a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801886e:	4561      	cmp	r1, ip
 8018870:	f2c0 80c6 	blt.w	8018a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018874:	3301      	adds	r3, #1
 8018876:	f100 80c3 	bmi.w	8018a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801887a:	429a      	cmp	r2, r3
 801887c:	f2c0 80c0 	blt.w	8018a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018880:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8018884:	4647      	mov	r7, r8
 8018886:	f1bb 0f00 	cmp.w	fp, #0
 801888a:	f340 80e3 	ble.w	8018a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801888e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018890:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018894:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018896:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801889a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801889e:	ea5f 422a 	movs.w	r2, sl, asr #16
 80188a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80188a6:	689b      	ldr	r3, [r3, #8]
 80188a8:	f100 8121 	bmi.w	8018aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80188ac:	f103 39ff 	add.w	r9, r3, #4294967295
 80188b0:	454a      	cmp	r2, r9
 80188b2:	f280 811c 	bge.w	8018aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80188b6:	f1bc 0f00 	cmp.w	ip, #0
 80188ba:	f2c0 8118 	blt.w	8018aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80188be:	f10e 39ff 	add.w	r9, lr, #4294967295
 80188c2:	45cc      	cmp	ip, r9
 80188c4:	f280 8113 	bge.w	8018aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80188c8:	b21b      	sxth	r3, r3
 80188ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80188cc:	fb0c 2203 	mla	r2, ip, r3, r2
 80188d0:	eb04 0902 	add.w	r9, r4, r2
 80188d4:	5ca2      	ldrb	r2, [r4, r2]
 80188d6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80188da:	2800      	cmp	r0, #0
 80188dc:	f000 80fe 	beq.w	8018adc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80188e0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80188e4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80188e8:	9211      	str	r2, [sp, #68]	; 0x44
 80188ea:	b151      	cbz	r1, 8018902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80188ec:	eb09 0203 	add.w	r2, r9, r3
 80188f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80188f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80188f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80188fa:	7853      	ldrb	r3, [r2, #1]
 80188fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018900:	9312      	str	r3, [sp, #72]	; 0x48
 8018902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018904:	fb10 f201 	smulbb	r2, r0, r1
 8018908:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801890a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801890e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018912:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8018916:	10d2      	asrs	r2, r2, #3
 8018918:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801891c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8018920:	ea4c 0c03 	orr.w	ip, ip, r3
 8018924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018926:	041b      	lsls	r3, r3, #16
 8018928:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801892c:	4323      	orrs	r3, r4
 801892e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018930:	4353      	muls	r3, r2
 8018932:	fb09 330c 	mla	r3, r9, ip, r3
 8018936:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801893a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801893e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018942:	ea4c 0e0e 	orr.w	lr, ip, lr
 8018946:	f1c1 0c10 	rsb	ip, r1, #16
 801894a:	ebac 0c00 	sub.w	ip, ip, r0
 801894e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8018952:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8018956:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801895a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801895c:	0418      	lsls	r0, r3, #16
 801895e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018962:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018966:	4318      	orrs	r0, r3
 8018968:	fb02 c200 	mla	r2, r2, r0, ip
 801896c:	8838      	ldrh	r0, [r7, #0]
 801896e:	0d53      	lsrs	r3, r2, #21
 8018970:	0952      	lsrs	r2, r2, #5
 8018972:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018976:	1201      	asrs	r1, r0, #8
 8018978:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801897c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8018980:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8018984:	00c0      	lsls	r0, r0, #3
 8018986:	431a      	orrs	r2, r3
 8018988:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801898c:	fb11 f104 	smulbb	r1, r1, r4
 8018990:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8018994:	b292      	uxth	r2, r2
 8018996:	fb1e fe04 	smulbb	lr, lr, r4
 801899a:	b2c0      	uxtb	r0, r0
 801899c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80189a0:	fb10 f004 	smulbb	r0, r0, r4
 80189a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80189a8:	fb0c 1c03 	mla	ip, ip, r3, r1
 80189ac:	10d1      	asrs	r1, r2, #3
 80189ae:	00d2      	lsls	r2, r2, #3
 80189b0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80189b4:	fa1f fc8c 	uxth.w	ip, ip
 80189b8:	b2d2      	uxtb	r2, r2
 80189ba:	fb01 e103 	mla	r1, r1, r3, lr
 80189be:	fb02 0303 	mla	r3, r2, r3, r0
 80189c2:	b289      	uxth	r1, r1
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	f10c 0301 	add.w	r3, ip, #1
 80189ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80189ce:	1c53      	adds	r3, r2, #1
 80189d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80189d4:	1c4a      	adds	r2, r1, #1
 80189d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80189da:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80189de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80189e2:	0949      	lsrs	r1, r1, #5
 80189e4:	ea43 030c 	orr.w	r3, r3, ip
 80189e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80189ec:	430b      	orrs	r3, r1
 80189ee:	803b      	strh	r3, [r7, #0]
 80189f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80189f2:	3702      	adds	r7, #2
 80189f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80189f8:	449a      	add	sl, r3
 80189fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80189fc:	441d      	add	r5, r3
 80189fe:	e742      	b.n	8018886 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018a00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018a02:	f108 0802 	add.w	r8, r8, #2
 8018a06:	449a      	add	sl, r3
 8018a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018a0a:	441d      	add	r5, r3
 8018a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	9309      	str	r3, [sp, #36]	; 0x24
 8018a12:	e718      	b.n	8018846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018a14:	d023      	beq.n	8018a5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8018a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a18:	9825      	ldr	r0, [sp, #148]	; 0x94
 8018a1a:	3b01      	subs	r3, #1
 8018a1c:	fb00 a003 	mla	r0, r0, r3, sl
 8018a20:	1400      	asrs	r0, r0, #16
 8018a22:	f53f af2d 	bmi.w	8018880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a26:	3901      	subs	r1, #1
 8018a28:	4288      	cmp	r0, r1
 8018a2a:	f6bf af29 	bge.w	8018880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a2e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018a30:	fb01 5303 	mla	r3, r1, r3, r5
 8018a34:	141b      	asrs	r3, r3, #16
 8018a36:	f53f af23 	bmi.w	8018880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a3a:	3a01      	subs	r2, #1
 8018a3c:	4293      	cmp	r3, r2
 8018a3e:	f6bf af1f 	bge.w	8018880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a42:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8018a46:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8018a4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018a4e:	f1be 0f00 	cmp.w	lr, #0
 8018a52:	dc6c      	bgt.n	8018b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8018a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a56:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018a5a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8018a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	f340 810e 	ble.w	8018c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8018a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018a6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a74:	eef0 6a62 	vmov.f32	s13, s5
 8018a78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018a7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a84:	ee16 aa90 	vmov	sl, s13
 8018a88:	eef0 6a43 	vmov.f32	s13, s6
 8018a8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a90:	ee16 5a90 	vmov	r5, s13
 8018a94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018aa0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018aa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018aa8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018aac:	ee12 2a90 	vmov	r2, s5
 8018ab0:	eef0 2a47 	vmov.f32	s5, s14
 8018ab4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ab8:	ee13 2a10 	vmov	r2, s6
 8018abc:	9325      	str	r3, [sp, #148]	; 0x94
 8018abe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ac0:	eeb0 3a67 	vmov.f32	s6, s15
 8018ac4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ac8:	9326      	str	r3, [sp, #152]	; 0x98
 8018aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018acc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ace:	3b01      	subs	r3, #1
 8018ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8018ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ad4:	bf08      	it	eq
 8018ad6:	4613      	moveq	r3, r2
 8018ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8018ada:	e6a6      	b.n	801882a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018adc:	2900      	cmp	r1, #0
 8018ade:	f43f af10 	beq.w	8018902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8018ae2:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018ae6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8018aec:	e709      	b.n	8018902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8018aee:	f112 0901 	adds.w	r9, r2, #1
 8018af2:	f53f af7d 	bmi.w	80189f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018af6:	454b      	cmp	r3, r9
 8018af8:	f6ff af7a 	blt.w	80189f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018afc:	f11c 0901 	adds.w	r9, ip, #1
 8018b00:	f53f af76 	bmi.w	80189f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018b04:	45ce      	cmp	lr, r9
 8018b06:	f6ff af73 	blt.w	80189f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018b0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018b0c:	b21b      	sxth	r3, r3
 8018b0e:	9202      	str	r2, [sp, #8]
 8018b10:	fa0f f28e 	sxth.w	r2, lr
 8018b14:	9300      	str	r3, [sp, #0]
 8018b16:	4633      	mov	r3, r6
 8018b18:	9201      	str	r2, [sp, #4]
 8018b1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018b20:	e9cd c003 	strd	ip, r0, [sp, #12]
 8018b24:	4639      	mov	r1, r7
 8018b26:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018b28:	f7ff fd8e 	bl	8018648 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8018b2c:	e760      	b.n	80189f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018b2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018b30:	ea4f 422a 	mov.w	r2, sl, asr #16
 8018b34:	1429      	asrs	r1, r5, #16
 8018b36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018b38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018b3c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8018b40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018b44:	fb03 2101 	mla	r1, r3, r1, r2
 8018b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b4a:	440a      	add	r2, r1
 8018b4c:	5c61      	ldrb	r1, [r4, r1]
 8018b4e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8018b52:	f1bc 0f00 	cmp.w	ip, #0
 8018b56:	f000 808c 	beq.w	8018c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8018b5a:	7857      	ldrb	r7, [r2, #1]
 8018b5c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8018b60:	9413      	str	r4, [sp, #76]	; 0x4c
 8018b62:	b140      	cbz	r0, 8018b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018b64:	18d7      	adds	r7, r2, r3
 8018b66:	5cd3      	ldrb	r3, [r2, r3]
 8018b68:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018b6c:	9310      	str	r3, [sp, #64]	; 0x40
 8018b6e:	787b      	ldrb	r3, [r7, #1]
 8018b70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018b74:	9314      	str	r3, [sp, #80]	; 0x50
 8018b76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b78:	fb1c f200 	smulbb	r2, ip, r0
 8018b7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018b7e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018b82:	041f      	lsls	r7, r3, #16
 8018b84:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018b88:	10d2      	asrs	r2, r2, #3
 8018b8a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8018b8e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8018b92:	431f      	orrs	r7, r3
 8018b94:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8018b98:	9317      	str	r3, [sp, #92]	; 0x5c
 8018b9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b9c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018b9e:	041b      	lsls	r3, r3, #16
 8018ba0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018ba4:	ea43 030b 	orr.w	r3, r3, fp
 8018ba8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8018bac:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8018bb0:	4353      	muls	r3, r2
 8018bb2:	fb04 3707 	mla	r7, r4, r7, r3
 8018bb6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8018bba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018bbc:	ea43 0b01 	orr.w	fp, r3, r1
 8018bc0:	f1c0 0110 	rsb	r1, r0, #16
 8018bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018bc6:	eba1 0c0c 	sub.w	ip, r1, ip
 8018bca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8018bce:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8018bd2:	fb0c 770b 	mla	r7, ip, fp, r7
 8018bd6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8018bda:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8018bde:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018be2:	ea4c 0c0b 	orr.w	ip, ip, fp
 8018be6:	fb02 770c 	mla	r7, r2, ip, r7
 8018bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018bec:	0d79      	lsrs	r1, r7, #21
 8018bee:	8812      	ldrh	r2, [r2, #0]
 8018bf0:	097f      	lsrs	r7, r7, #5
 8018bf2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018bf6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8018bfa:	430f      	orrs	r7, r1
 8018bfc:	1211      	asrs	r1, r2, #8
 8018bfe:	b2bb      	uxth	r3, r7
 8018c00:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8018c04:	10d7      	asrs	r7, r2, #3
 8018c06:	fb11 f104 	smulbb	r1, r1, r4
 8018c0a:	1218      	asrs	r0, r3, #8
 8018c0c:	00d2      	lsls	r2, r2, #3
 8018c0e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018c12:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018c16:	fb17 f704 	smulbb	r7, r7, r4
 8018c1a:	b2d2      	uxtb	r2, r2
 8018c1c:	fb00 1009 	mla	r0, r0, r9, r1
 8018c20:	10d9      	asrs	r1, r3, #3
 8018c22:	fb12 f204 	smulbb	r2, r2, r4
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8018c2c:	b280      	uxth	r0, r0
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	fb01 7109 	mla	r1, r1, r9, r7
 8018c34:	fb03 2309 	mla	r3, r3, r9, r2
 8018c38:	1c42      	adds	r2, r0, #1
 8018c3a:	b289      	uxth	r1, r1
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018c42:	1c4f      	adds	r7, r1, #1
 8018c44:	1c5a      	adds	r2, r3, #1
 8018c46:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8018c4a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8018c4e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c54:	0949      	lsrs	r1, r1, #5
 8018c56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018c5a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018c5e:	4310      	orrs	r0, r2
 8018c60:	4308      	orrs	r0, r1
 8018c62:	f823 0b02 	strh.w	r0, [r3], #2
 8018c66:	930e      	str	r3, [sp, #56]	; 0x38
 8018c68:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018c6a:	449a      	add	sl, r3
 8018c6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018c6e:	441d      	add	r5, r3
 8018c70:	e6ed      	b.n	8018a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8018c72:	2800      	cmp	r0, #0
 8018c74:	f43f af7f 	beq.w	8018b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018c78:	5cd3      	ldrb	r3, [r2, r3]
 8018c7a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018c7e:	9310      	str	r3, [sp, #64]	; 0x40
 8018c80:	e779      	b.n	8018b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018c82:	b019      	add	sp, #100	; 0x64
 8018c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8018c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c8c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8018c90:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018c94:	f1b8 0f00 	cmp.w	r8, #0
 8018c98:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8018c9c:	fb08 470e 	mla	r7, r8, lr, r4
 8018ca0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8018ca4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8018ca8:	eb02 0907 	add.w	r9, r2, r7
 8018cac:	8808      	ldrh	r0, [r1, #0]
 8018cae:	db67      	blt.n	8018d80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8018cb0:	45c2      	cmp	sl, r8
 8018cb2:	dd65      	ble.n	8018d80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8018cb4:	2c00      	cmp	r4, #0
 8018cb6:	db61      	blt.n	8018d7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8018cb8:	45a6      	cmp	lr, r4
 8018cba:	dd5f      	ble.n	8018d7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8018cbc:	5dd2      	ldrb	r2, [r2, r7]
 8018cbe:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8018cc2:	1c62      	adds	r2, r4, #1
 8018cc4:	d45f      	bmi.n	8018d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8018cc6:	4596      	cmp	lr, r2
 8018cc8:	dd5d      	ble.n	8018d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8018cca:	2d00      	cmp	r5, #0
 8018ccc:	d05b      	beq.n	8018d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8018cce:	f899 2001 	ldrb.w	r2, [r9, #1]
 8018cd2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8018cd6:	f118 0801 	adds.w	r8, r8, #1
 8018cda:	d458      	bmi.n	8018d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8018cdc:	45c2      	cmp	sl, r8
 8018cde:	dd56      	ble.n	8018d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8018ce0:	2e00      	cmp	r6, #0
 8018ce2:	d054      	beq.n	8018d8e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8018ce4:	2c00      	cmp	r4, #0
 8018ce6:	db50      	blt.n	8018d8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8018ce8:	45a6      	cmp	lr, r4
 8018cea:	dd4e      	ble.n	8018d8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8018cec:	f819 200e 	ldrb.w	r2, [r9, lr]
 8018cf0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8018cf4:	3401      	adds	r4, #1
 8018cf6:	d407      	bmi.n	8018d08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8018cf8:	45a6      	cmp	lr, r4
 8018cfa:	dd05      	ble.n	8018d08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8018cfc:	b125      	cbz	r5, 8018d08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8018cfe:	44ce      	add	lr, r9
 8018d00:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8018d04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018d08:	fb15 f406 	smulbb	r4, r5, r6
 8018d0c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8018d10:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8018d14:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8018d18:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018d1c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8018d20:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8018d24:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8018d28:	ea43 0c0c 	orr.w	ip, r3, ip
 8018d2c:	f1c6 0310 	rsb	r3, r6, #16
 8018d30:	ea4e 0707 	orr.w	r7, lr, r7
 8018d34:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8018d38:	1b5b      	subs	r3, r3, r5
 8018d3a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8018d3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018d42:	437d      	muls	r5, r7
 8018d44:	fb03 5c0c 	mla	ip, r3, ip, r5
 8018d48:	0403      	lsls	r3, r0, #16
 8018d4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018d4e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018d52:	4318      	orrs	r0, r3
 8018d54:	0413      	lsls	r3, r2, #16
 8018d56:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018d5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018d5e:	fb04 c000 	mla	r0, r4, r0, ip
 8018d62:	4313      	orrs	r3, r2
 8018d64:	fb06 0003 	mla	r0, r6, r3, r0
 8018d68:	0d43      	lsrs	r3, r0, #21
 8018d6a:	0940      	lsrs	r0, r0, #5
 8018d6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018d70:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018d74:	4318      	orrs	r0, r3
 8018d76:	8008      	strh	r0, [r1, #0]
 8018d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d7c:	4684      	mov	ip, r0
 8018d7e:	e7a0      	b.n	8018cc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8018d80:	4607      	mov	r7, r0
 8018d82:	4684      	mov	ip, r0
 8018d84:	e7a7      	b.n	8018cd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8018d86:	4607      	mov	r7, r0
 8018d88:	e7a5      	b.n	8018cd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8018d8a:	4602      	mov	r2, r0
 8018d8c:	e7b2      	b.n	8018cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8018d8e:	4602      	mov	r2, r0
 8018d90:	e7ba      	b.n	8018d08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08018d92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d96:	b093      	sub	sp, #76	; 0x4c
 8018d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d9c:	920f      	str	r2, [sp, #60]	; 0x3c
 8018d9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018da0:	9010      	str	r0, [sp, #64]	; 0x40
 8018da2:	9108      	str	r1, [sp, #32]
 8018da4:	6850      	ldr	r0, [r2, #4]
 8018da6:	9306      	str	r3, [sp, #24]
 8018da8:	6812      	ldr	r2, [r2, #0]
 8018daa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8018dae:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8018db2:	fb00 1303 	mla	r3, r0, r3, r1
 8018db6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8018dba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	9307      	str	r3, [sp, #28]
 8018dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018dc2:	685f      	ldr	r7, [r3, #4]
 8018dc4:	3704      	adds	r7, #4
 8018dc6:	9b08      	ldr	r3, [sp, #32]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	dc03      	bgt.n	8018dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	f340 81b2 	ble.w	8019138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8018dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018dd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018dda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018dde:	1e48      	subs	r0, r1, #1
 8018de0:	f102 3cff 	add.w	ip, r2, #4294967295
 8018de4:	9b06      	ldr	r3, [sp, #24]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	f340 80a9 	ble.w	8018f3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018dec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018df0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018df4:	d406      	bmi.n	8018e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018df6:	4586      	cmp	lr, r0
 8018df8:	da04      	bge.n	8018e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	db02      	blt.n	8018e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018dfe:	4563      	cmp	r3, ip
 8018e00:	f2c0 809e 	blt.w	8018f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8018e04:	f11e 0e01 	adds.w	lr, lr, #1
 8018e08:	f100 808f 	bmi.w	8018f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8018e0c:	4571      	cmp	r1, lr
 8018e0e:	f2c0 808c 	blt.w	8018f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8018e12:	3301      	adds	r3, #1
 8018e14:	f100 8089 	bmi.w	8018f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	f2c0 8086 	blt.w	8018f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8018e1e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8018e22:	46c8      	mov	r8, r9
 8018e24:	f1bb 0f00 	cmp.w	fp, #0
 8018e28:	f340 80a6 	ble.w	8018f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8018e2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018e2e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8018e32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018e34:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8018e38:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8018e3c:	1422      	asrs	r2, r4, #16
 8018e3e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018e42:	689b      	ldr	r3, [r3, #8]
 8018e44:	f100 80e3 	bmi.w	801900e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018e48:	f103 3aff 	add.w	sl, r3, #4294967295
 8018e4c:	4552      	cmp	r2, sl
 8018e4e:	f280 80de 	bge.w	801900e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018e52:	f1bc 0f00 	cmp.w	ip, #0
 8018e56:	f2c0 80da 	blt.w	801900e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8018e5e:	45d4      	cmp	ip, sl
 8018e60:	f280 80d5 	bge.w	801900e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018e64:	b21b      	sxth	r3, r3
 8018e66:	9d07      	ldr	r5, [sp, #28]
 8018e68:	fb0c 2203 	mla	r2, ip, r3, r2
 8018e6c:	eb05 0a02 	add.w	sl, r5, r2
 8018e70:	5caa      	ldrb	r2, [r5, r2]
 8018e72:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8018e76:	2800      	cmp	r0, #0
 8018e78:	f000 80c0 	beq.w	8018ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018e7c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8018e80:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8018e84:	920b      	str	r2, [sp, #44]	; 0x2c
 8018e86:	b151      	cbz	r1, 8018e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8018e88:	eb0a 0203 	add.w	r2, sl, r3
 8018e8c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8018e90:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8018e94:	9309      	str	r3, [sp, #36]	; 0x24
 8018e96:	7853      	ldrb	r3, [r2, #1]
 8018e98:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8018e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8018e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ea0:	fb10 f201 	smulbb	r2, r0, r1
 8018ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018ea6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8018eaa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018eae:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8018eb2:	10d2      	asrs	r2, r2, #3
 8018eb4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018eb8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8018ebc:	ea4c 0c03 	orr.w	ip, ip, r3
 8018ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ec2:	041b      	lsls	r3, r3, #16
 8018ec4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018ec8:	432b      	orrs	r3, r5
 8018eca:	4353      	muls	r3, r2
 8018ecc:	fb0a 330c 	mla	r3, sl, ip, r3
 8018ed0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8018ed4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8018ed8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018edc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8018ee0:	f1c1 0c10 	rsb	ip, r1, #16
 8018ee4:	ebac 0c00 	sub.w	ip, ip, r0
 8018ee8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8018eec:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8018ef0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8018ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ef6:	0418      	lsls	r0, r3, #16
 8018ef8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018efc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018f00:	4318      	orrs	r0, r3
 8018f02:	fb02 c200 	mla	r2, r2, r0, ip
 8018f06:	0d53      	lsrs	r3, r2, #21
 8018f08:	0952      	lsrs	r2, r2, #5
 8018f0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018f0e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018f12:	431a      	orrs	r2, r3
 8018f14:	f8a8 2000 	strh.w	r2, [r8]
 8018f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018f1a:	f108 0802 	add.w	r8, r8, #2
 8018f1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018f22:	441c      	add	r4, r3
 8018f24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018f26:	441e      	add	r6, r3
 8018f28:	e77c      	b.n	8018e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018f2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018f2c:	f109 0902 	add.w	r9, r9, #2
 8018f30:	441c      	add	r4, r3
 8018f32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018f34:	441e      	add	r6, r3
 8018f36:	9b06      	ldr	r3, [sp, #24]
 8018f38:	3b01      	subs	r3, #1
 8018f3a:	9306      	str	r3, [sp, #24]
 8018f3c:	e752      	b.n	8018de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018f3e:	d020      	beq.n	8018f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018f40:	9b06      	ldr	r3, [sp, #24]
 8018f42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018f44:	3b01      	subs	r3, #1
 8018f46:	fb00 4003 	mla	r0, r0, r3, r4
 8018f4a:	1400      	asrs	r0, r0, #16
 8018f4c:	f53f af67 	bmi.w	8018e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018f50:	3901      	subs	r1, #1
 8018f52:	4288      	cmp	r0, r1
 8018f54:	f6bf af63 	bge.w	8018e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018f58:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018f5a:	fb01 6303 	mla	r3, r1, r3, r6
 8018f5e:	141b      	asrs	r3, r3, #16
 8018f60:	f53f af5d 	bmi.w	8018e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018f64:	3a01      	subs	r2, #1
 8018f66:	4293      	cmp	r3, r2
 8018f68:	f6bf af59 	bge.w	8018e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018f6c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018f70:	46ca      	mov	sl, r9
 8018f72:	f1b8 0f00 	cmp.w	r8, #0
 8018f76:	dc67      	bgt.n	8019048 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018f78:	9b06      	ldr	r3, [sp, #24]
 8018f7a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8018f7e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8018f82:	9b08      	ldr	r3, [sp, #32]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	f340 80d7 	ble.w	8019138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8018f8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018f90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f94:	eeb0 6a62 	vmov.f32	s12, s5
 8018f98:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018f9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018fa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fa4:	ee16 4a10 	vmov	r4, s12
 8018fa8:	eeb0 6a43 	vmov.f32	s12, s6
 8018fac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fb0:	ee16 6a10 	vmov	r6, s12
 8018fb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018fb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018fbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018fc0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018fc4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fc8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018fcc:	ee12 2a90 	vmov	r2, s5
 8018fd0:	eef0 2a47 	vmov.f32	s5, s14
 8018fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fd8:	ee13 2a10 	vmov	r2, s6
 8018fdc:	931f      	str	r3, [sp, #124]	; 0x7c
 8018fde:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018fe0:	eeb0 3a67 	vmov.f32	s6, s15
 8018fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018fe8:	9320      	str	r3, [sp, #128]	; 0x80
 8018fea:	9b08      	ldr	r3, [sp, #32]
 8018fec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018fee:	3b01      	subs	r3, #1
 8018ff0:	9308      	str	r3, [sp, #32]
 8018ff2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018ff4:	bf08      	it	eq
 8018ff6:	4613      	moveq	r3, r2
 8018ff8:	9306      	str	r3, [sp, #24]
 8018ffa:	e6e4      	b.n	8018dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018ffc:	2900      	cmp	r1, #0
 8018ffe:	f43f af4e 	beq.w	8018e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8019002:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8019006:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801900a:	9309      	str	r3, [sp, #36]	; 0x24
 801900c:	e747      	b.n	8018e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801900e:	f112 0a01 	adds.w	sl, r2, #1
 8019012:	d481      	bmi.n	8018f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019014:	4553      	cmp	r3, sl
 8019016:	f6ff af7f 	blt.w	8018f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801901a:	f11c 0a01 	adds.w	sl, ip, #1
 801901e:	f53f af7b 	bmi.w	8018f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019022:	45d6      	cmp	lr, sl
 8019024:	f6ff af78 	blt.w	8018f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019028:	b21b      	sxth	r3, r3
 801902a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801902e:	fa0f f28e 	sxth.w	r2, lr
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	463b      	mov	r3, r7
 8019036:	9201      	str	r2, [sp, #4]
 8019038:	9a07      	ldr	r2, [sp, #28]
 801903a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801903e:	4641      	mov	r1, r8
 8019040:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019042:	f7ff fe21 	bl	8018c88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8019046:	e767      	b.n	8018f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019048:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801904a:	1422      	asrs	r2, r4, #16
 801904c:	1431      	asrs	r1, r6, #16
 801904e:	9d07      	ldr	r5, [sp, #28]
 8019050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019054:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8019058:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801905c:	fb03 2101 	mla	r1, r3, r1, r2
 8019060:	9a07      	ldr	r2, [sp, #28]
 8019062:	440a      	add	r2, r1
 8019064:	5c69      	ldrb	r1, [r5, r1]
 8019066:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801906a:	f1be 0f00 	cmp.w	lr, #0
 801906e:	d05c      	beq.n	801912a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8019070:	f892 c001 	ldrb.w	ip, [r2, #1]
 8019074:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8019078:	950d      	str	r5, [sp, #52]	; 0x34
 801907a:	b150      	cbz	r0, 8019092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801907c:	eb02 0c03 	add.w	ip, r2, r3
 8019080:	5cd3      	ldrb	r3, [r2, r3]
 8019082:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8019086:	930a      	str	r3, [sp, #40]	; 0x28
 8019088:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801908c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8019090:	930e      	str	r3, [sp, #56]	; 0x38
 8019092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019094:	fb1e f200 	smulbb	r2, lr, r0
 8019098:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801909a:	f108 38ff 	add.w	r8, r8, #4294967295
 801909e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80190a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80190a6:	10d2      	asrs	r2, r2, #3
 80190a8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80190ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80190b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80190b4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80190b8:	9311      	str	r3, [sp, #68]	; 0x44
 80190ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80190be:	041b      	lsls	r3, r3, #16
 80190c0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80190c4:	ea43 030b 	orr.w	r3, r3, fp
 80190c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80190cc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80190d0:	4353      	muls	r3, r2
 80190d2:	fb05 3c0c 	mla	ip, r5, ip, r3
 80190d6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80190da:	ea43 0b01 	orr.w	fp, r3, r1
 80190de:	f1c0 0110 	rsb	r1, r0, #16
 80190e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190e4:	eba1 0e0e 	sub.w	lr, r1, lr
 80190e8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80190ec:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80190f0:	fb0e cc0b 	mla	ip, lr, fp, ip
 80190f4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80190f8:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80190fc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019100:	ea4b 0e0e 	orr.w	lr, fp, lr
 8019104:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019108:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801910c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8019110:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019114:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8019118:	ea43 0c0c 	orr.w	ip, r3, ip
 801911c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801911e:	441c      	add	r4, r3
 8019120:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019122:	f82a cb02 	strh.w	ip, [sl], #2
 8019126:	441e      	add	r6, r3
 8019128:	e723      	b.n	8018f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801912a:	2800      	cmp	r0, #0
 801912c:	d0b1      	beq.n	8019092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801912e:	5cd3      	ldrb	r3, [r2, r3]
 8019130:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8019134:	930a      	str	r3, [sp, #40]	; 0x28
 8019136:	e7ac      	b.n	8019092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8019138:	b013      	add	sp, #76	; 0x4c
 801913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801913e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801913e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019142:	880d      	ldrh	r5, [r1, #0]
 8019144:	b087      	sub	sp, #28
 8019146:	10ef      	asrs	r7, r5, #3
 8019148:	9103      	str	r1, [sp, #12]
 801914a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801914e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8019152:	00ed      	lsls	r5, r5, #3
 8019154:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019158:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801915c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8019160:	b2ed      	uxtb	r5, r5
 8019162:	9701      	str	r7, [sp, #4]
 8019164:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8019168:	9502      	str	r5, [sp, #8]
 801916a:	9d01      	ldr	r5, [sp, #4]
 801916c:	9902      	ldr	r1, [sp, #8]
 801916e:	022d      	lsls	r5, r5, #8
 8019170:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8019174:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8019178:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801917c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8019180:	430d      	orrs	r5, r1
 8019182:	fb06 0709 	mla	r7, r6, r9, r0
 8019186:	2e00      	cmp	r6, #0
 8019188:	9505      	str	r5, [sp, #20]
 801918a:	eb02 0c07 	add.w	ip, r2, r7
 801918e:	f2c0 80b6 	blt.w	80192fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8019192:	45b3      	cmp	fp, r6
 8019194:	f340 80b3 	ble.w	80192fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8019198:	2800      	cmp	r0, #0
 801919a:	f2c0 80ae 	blt.w	80192fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801919e:	4581      	cmp	r9, r0
 80191a0:	f340 80ab 	ble.w	80192fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80191a4:	5dd7      	ldrb	r7, [r2, r7]
 80191a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80191aa:	441f      	add	r7, r3
 80191ac:	1c42      	adds	r2, r0, #1
 80191ae:	f100 80a9 	bmi.w	8019304 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80191b2:	4591      	cmp	r9, r2
 80191b4:	f340 80a6 	ble.w	8019304 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80191b8:	2c00      	cmp	r4, #0
 80191ba:	f000 80a3 	beq.w	8019304 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80191be:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80191c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191c6:	441d      	add	r5, r3
 80191c8:	3601      	adds	r6, #1
 80191ca:	f100 809f 	bmi.w	801930c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80191ce:	45b3      	cmp	fp, r6
 80191d0:	f340 809c 	ble.w	801930c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80191d4:	f1be 0f00 	cmp.w	lr, #0
 80191d8:	f000 8098 	beq.w	801930c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80191dc:	2800      	cmp	r0, #0
 80191de:	f2c0 8093 	blt.w	8019308 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80191e2:	4581      	cmp	r9, r0
 80191e4:	f340 8090 	ble.w	8019308 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80191e8:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80191ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80191f0:	441e      	add	r6, r3
 80191f2:	3001      	adds	r0, #1
 80191f4:	f100 808d 	bmi.w	8019312 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80191f8:	4581      	cmp	r9, r0
 80191fa:	f340 808a 	ble.w	8019312 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80191fe:	2c00      	cmp	r4, #0
 8019200:	f000 8087 	beq.w	8019312 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8019204:	44e1      	add	r9, ip
 8019206:	f899 2001 	ldrb.w	r2, [r9, #1]
 801920a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801920e:	4413      	add	r3, r2
 8019210:	b2a4      	uxth	r4, r4
 8019212:	f897 c002 	ldrb.w	ip, [r7, #2]
 8019216:	fa1f fe8e 	uxth.w	lr, lr
 801921a:	9901      	ldr	r1, [sp, #4]
 801921c:	fb04 fb0e 	mul.w	fp, r4, lr
 8019220:	0124      	lsls	r4, r4, #4
 8019222:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8019226:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801922a:	eba4 040b 	sub.w	r4, r4, fp
 801922e:	fa1f f08e 	uxth.w	r0, lr
 8019232:	b2a2      	uxth	r2, r4
 8019234:	78ac      	ldrb	r4, [r5, #2]
 8019236:	eba9 0900 	sub.w	r9, r9, r0
 801923a:	fa1f fe88 	uxth.w	lr, r8
 801923e:	4354      	muls	r4, r2
 8019240:	ea6f 0808 	mvn.w	r8, r8
 8019244:	fa1f f989 	uxth.w	r9, r9
 8019248:	fa5f f888 	uxtb.w	r8, r8
 801924c:	fb09 440c 	mla	r4, r9, ip, r4
 8019250:	f896 c002 	ldrb.w	ip, [r6, #2]
 8019254:	fb1a fa08 	smulbb	sl, sl, r8
 8019258:	fb00 440c 	mla	r4, r0, ip, r4
 801925c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8019260:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8019264:	787c      	ldrb	r4, [r7, #1]
 8019266:	783f      	ldrb	r7, [r7, #0]
 8019268:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801926c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8019270:	f895 a001 	ldrb.w	sl, [r5, #1]
 8019274:	782d      	ldrb	r5, [r5, #0]
 8019276:	fb02 fa0a 	mul.w	sl, r2, sl
 801927a:	fa1f fc8c 	uxth.w	ip, ip
 801927e:	436a      	muls	r2, r5
 8019280:	7835      	ldrb	r5, [r6, #0]
 8019282:	fb09 aa04 	mla	sl, r9, r4, sl
 8019286:	7874      	ldrb	r4, [r6, #1]
 8019288:	fb09 2207 	mla	r2, r9, r7, r2
 801928c:	fb00 aa04 	mla	sl, r0, r4, sl
 8019290:	785c      	ldrb	r4, [r3, #1]
 8019292:	fb00 2005 	mla	r0, r0, r5, r2
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	fb0b a404 	mla	r4, fp, r4, sl
 801929c:	fb11 fa08 	smulbb	sl, r1, r8
 80192a0:	fb0b 0b03 	mla	fp, fp, r3, r0
 80192a4:	9b02      	ldr	r3, [sp, #8]
 80192a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80192aa:	fb13 f808 	smulbb	r8, r3, r8
 80192ae:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80192b2:	fb04 a40e 	mla	r4, r4, lr, sl
 80192b6:	f10c 0301 	add.w	r3, ip, #1
 80192ba:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80192be:	b2a4      	uxth	r4, r4
 80192c0:	fa1f fe8e 	uxth.w	lr, lr
 80192c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80192c8:	f104 0a01 	add.w	sl, r4, #1
 80192cc:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 80192d0:	f10e 0c01 	add.w	ip, lr, #1
 80192d4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80192d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80192dc:	0964      	lsrs	r4, r4, #5
 80192de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80192e2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80192e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80192ea:	9b03      	ldr	r3, [sp, #12]
 80192ec:	ea4c 0c04 	orr.w	ip, ip, r4
 80192f0:	f8a3 c000 	strh.w	ip, [r3]
 80192f4:	b007      	add	sp, #28
 80192f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192fa:	af05      	add	r7, sp, #20
 80192fc:	e756      	b.n	80191ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80192fe:	ad05      	add	r5, sp, #20
 8019300:	462f      	mov	r7, r5
 8019302:	e761      	b.n	80191c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8019304:	ad05      	add	r5, sp, #20
 8019306:	e75f      	b.n	80191c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8019308:	ae05      	add	r6, sp, #20
 801930a:	e772      	b.n	80191f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801930c:	ab05      	add	r3, sp, #20
 801930e:	461e      	mov	r6, r3
 8019310:	e77e      	b.n	8019210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8019312:	ab05      	add	r3, sp, #20
 8019314:	e77c      	b.n	8019210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08019316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801931a:	b095      	sub	sp, #84	; 0x54
 801931c:	9212      	str	r2, [sp, #72]	; 0x48
 801931e:	9309      	str	r3, [sp, #36]	; 0x24
 8019320:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8019322:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8019326:	9013      	str	r0, [sp, #76]	; 0x4c
 8019328:	930f      	str	r3, [sp, #60]	; 0x3c
 801932a:	6850      	ldr	r0, [r2, #4]
 801932c:	910e      	str	r1, [sp, #56]	; 0x38
 801932e:	6812      	ldr	r2, [r2, #0]
 8019330:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8019334:	fb00 1303 	mla	r3, r0, r3, r1
 8019338:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801933c:	930a      	str	r3, [sp, #40]	; 0x28
 801933e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	930d      	str	r3, [sp, #52]	; 0x34
 8019344:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019346:	685c      	ldr	r4, [r3, #4]
 8019348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801934a:	3404      	adds	r4, #4
 801934c:	43db      	mvns	r3, r3
 801934e:	b2db      	uxtb	r3, r3
 8019350:	930b      	str	r3, [sp, #44]	; 0x2c
 8019352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019354:	2b00      	cmp	r3, #0
 8019356:	dc03      	bgt.n	8019360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801935a:	2b00      	cmp	r3, #0
 801935c:	f340 8255 	ble.w	801980a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8019360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019362:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019366:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801936a:	1e48      	subs	r0, r1, #1
 801936c:	1e55      	subs	r5, r2, #1
 801936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019370:	2b00      	cmp	r3, #0
 8019372:	f340 80f9 	ble.w	8019568 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019376:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8019378:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801937a:	1436      	asrs	r6, r6, #16
 801937c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019380:	d406      	bmi.n	8019390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019382:	4286      	cmp	r6, r0
 8019384:	da04      	bge.n	8019390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019386:	2b00      	cmp	r3, #0
 8019388:	db02      	blt.n	8019390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801938a:	42ab      	cmp	r3, r5
 801938c:	f2c0 80ed 	blt.w	801956a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019390:	3601      	adds	r6, #1
 8019392:	f100 80da 	bmi.w	801954a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8019396:	42b1      	cmp	r1, r6
 8019398:	f2c0 80d7 	blt.w	801954a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801939c:	3301      	adds	r3, #1
 801939e:	f100 80d4 	bmi.w	801954a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80193a2:	429a      	cmp	r2, r3
 80193a4:	f2c0 80d1 	blt.w	801954a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80193a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193aa:	9311      	str	r3, [sp, #68]	; 0x44
 80193ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193ae:	930c      	str	r3, [sp, #48]	; 0x30
 80193b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	f340 80fa 	ble.w	80195ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80193b8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80193ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80193bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80193be:	68c6      	ldr	r6, [r0, #12]
 80193c0:	141d      	asrs	r5, r3, #16
 80193c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80193c4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80193c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80193ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80193cc:	1400      	asrs	r0, r0, #16
 80193ce:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80193d2:	6892      	ldr	r2, [r2, #8]
 80193d4:	f100 813e 	bmi.w	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80193d8:	1e57      	subs	r7, r2, #1
 80193da:	42b8      	cmp	r0, r7
 80193dc:	f280 813a 	bge.w	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80193e0:	2d00      	cmp	r5, #0
 80193e2:	f2c0 8137 	blt.w	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80193e6:	1e77      	subs	r7, r6, #1
 80193e8:	42bd      	cmp	r5, r7
 80193ea:	f280 8133 	bge.w	8019654 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80193ee:	b212      	sxth	r2, r2
 80193f0:	fb05 0002 	mla	r0, r5, r2, r0
 80193f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80193f6:	f815 a000 	ldrb.w	sl, [r5, r0]
 80193fa:	182e      	adds	r6, r5, r0
 80193fc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8019400:	eb04 050a 	add.w	r5, r4, sl
 8019404:	2b00      	cmp	r3, #0
 8019406:	f000 8117 	beq.w	8019638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801940a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801940e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019412:	44a4      	add	ip, r4
 8019414:	2900      	cmp	r1, #0
 8019416:	f000 8117 	beq.w	8019648 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801941a:	18b0      	adds	r0, r6, r2
 801941c:	5cb2      	ldrb	r2, [r6, r2]
 801941e:	7840      	ldrb	r0, [r0, #1]
 8019420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019428:	4422      	add	r2, r4
 801942a:	4420      	add	r0, r4
 801942c:	b29b      	uxth	r3, r3
 801942e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8019432:	b289      	uxth	r1, r1
 8019434:	f895 b002 	ldrb.w	fp, [r5, #2]
 8019438:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801943a:	fb03 f901 	mul.w	r9, r3, r1
 801943e:	011b      	lsls	r3, r3, #4
 8019440:	f8b6 e000 	ldrh.w	lr, [r6]
 8019444:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019448:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801944c:	eba3 0309 	sub.w	r3, r3, r9
 8019450:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8019454:	b289      	uxth	r1, r1
 8019456:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801945a:	b29b      	uxth	r3, r3
 801945c:	eba8 0801 	sub.w	r8, r8, r1
 8019460:	435f      	muls	r7, r3
 8019462:	fa1f f888 	uxth.w	r8, r8
 8019466:	9310      	str	r3, [sp, #64]	; 0x40
 8019468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801946a:	fb08 770b 	mla	r7, r8, fp, r7
 801946e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8019472:	fb01 770b 	mla	r7, r1, fp, r7
 8019476:	f890 b002 	ldrb.w	fp, [r0, #2]
 801947a:	fb09 770b 	mla	r7, r9, fp, r7
 801947e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8019482:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8019486:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801948a:	fb1b fb03 	smulbb	fp, fp, r3
 801948e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019490:	fb07 b706 	mla	r7, r7, r6, fp
 8019494:	f895 b001 	ldrb.w	fp, [r5, #1]
 8019498:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801949c:	f89c c000 	ldrb.w	ip, [ip]
 80194a0:	b2bf      	uxth	r7, r7
 80194a2:	435d      	muls	r5, r3
 80194a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194a6:	fb08 550b 	mla	r5, r8, fp, r5
 80194aa:	f892 b001 	ldrb.w	fp, [r2, #1]
 80194ae:	fb01 550b 	mla	r5, r1, fp, r5
 80194b2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80194b6:	fb09 550b 	mla	r5, r9, fp, r5
 80194ba:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80194be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80194c2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80194c6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80194ca:	fa5f fe8e 	uxtb.w	lr, lr
 80194ce:	fb1b fb03 	smulbb	fp, fp, r3
 80194d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194d4:	fb03 f30c 	mul.w	r3, r3, ip
 80194d8:	f892 c000 	ldrb.w	ip, [r2]
 80194dc:	fb05 b506 	mla	r5, r5, r6, fp
 80194e0:	fb08 330a 	mla	r3, r8, sl, r3
 80194e4:	b2ad      	uxth	r5, r5
 80194e6:	fb01 330c 	mla	r3, r1, ip, r3
 80194ea:	f890 c000 	ldrb.w	ip, [r0]
 80194ee:	f105 0b01 	add.w	fp, r5, #1
 80194f2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80194f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194f8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80194fc:	fb1e fe03 	smulbb	lr, lr, r3
 8019500:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019504:	1c7b      	adds	r3, r7, #1
 8019506:	096d      	lsrs	r5, r5, #5
 8019508:	fb0c e606 	mla	r6, ip, r6, lr
 801950c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8019510:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019514:	b2b6      	uxth	r6, r6
 8019516:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801951a:	1c77      	adds	r7, r6, #1
 801951c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8019520:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019524:	431f      	orrs	r7, r3
 8019526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019528:	433d      	orrs	r5, r7
 801952a:	801d      	strh	r5, [r3, #0]
 801952c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801952e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019530:	3302      	adds	r3, #2
 8019532:	930c      	str	r3, [sp, #48]	; 0x30
 8019534:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019536:	4413      	add	r3, r2
 8019538:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801953a:	931f      	str	r3, [sp, #124]	; 0x7c
 801953c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801953e:	4413      	add	r3, r2
 8019540:	9320      	str	r3, [sp, #128]	; 0x80
 8019542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019544:	3b01      	subs	r3, #1
 8019546:	9311      	str	r3, [sp, #68]	; 0x44
 8019548:	e732      	b.n	80193b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801954a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801954c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801954e:	4433      	add	r3, r6
 8019550:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8019552:	931f      	str	r3, [sp, #124]	; 0x7c
 8019554:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019556:	4433      	add	r3, r6
 8019558:	9320      	str	r3, [sp, #128]	; 0x80
 801955a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801955c:	3b01      	subs	r3, #1
 801955e:	9309      	str	r3, [sp, #36]	; 0x24
 8019560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019562:	3302      	adds	r3, #2
 8019564:	930a      	str	r3, [sp, #40]	; 0x28
 8019566:	e702      	b.n	801936e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019568:	d027      	beq.n	80195ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801956a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801956c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801956e:	3b01      	subs	r3, #1
 8019570:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019572:	fb00 5003 	mla	r0, r0, r3, r5
 8019576:	1400      	asrs	r0, r0, #16
 8019578:	f53f af16 	bmi.w	80193a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801957c:	3901      	subs	r1, #1
 801957e:	4288      	cmp	r0, r1
 8019580:	f6bf af12 	bge.w	80193a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019584:	9922      	ldr	r1, [sp, #136]	; 0x88
 8019586:	9820      	ldr	r0, [sp, #128]	; 0x80
 8019588:	fb01 0303 	mla	r3, r1, r3, r0
 801958c:	141b      	asrs	r3, r3, #16
 801958e:	f53f af0b 	bmi.w	80193a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019592:	3a01      	subs	r2, #1
 8019594:	4293      	cmp	r3, r2
 8019596:	f6bf af07 	bge.w	80193a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801959c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80195a0:	9311      	str	r3, [sp, #68]	; 0x44
 80195a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195a4:	930c      	str	r3, [sp, #48]	; 0x30
 80195a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	dc70      	bgt.n	801968e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80195ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80195b8:	930a      	str	r3, [sp, #40]	; 0x28
 80195ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195bc:	2b00      	cmp	r3, #0
 80195be:	f340 8124 	ble.w	801980a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80195c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195d0:	eef0 6a62 	vmov.f32	s13, s5
 80195d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195e0:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80195e4:	eef0 6a43 	vmov.f32	s13, s6
 80195e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195ec:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80195f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80195f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80195fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019600:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019604:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019608:	ee12 2a90 	vmov	r2, s5
 801960c:	eef0 2a47 	vmov.f32	s5, s14
 8019610:	fb92 f3f3 	sdiv	r3, r2, r3
 8019614:	ee13 2a10 	vmov	r2, s6
 8019618:	9321      	str	r3, [sp, #132]	; 0x84
 801961a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801961c:	eeb0 3a67 	vmov.f32	s6, s15
 8019620:	fb92 f3f3 	sdiv	r3, r2, r3
 8019624:	9322      	str	r3, [sp, #136]	; 0x88
 8019626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019628:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801962a:	3b01      	subs	r3, #1
 801962c:	930e      	str	r3, [sp, #56]	; 0x38
 801962e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019630:	bf08      	it	eq
 8019632:	4613      	moveq	r3, r2
 8019634:	9309      	str	r3, [sp, #36]	; 0x24
 8019636:	e68c      	b.n	8019352 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019638:	b149      	cbz	r1, 801964e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801963a:	5cb2      	ldrb	r2, [r6, r2]
 801963c:	4628      	mov	r0, r5
 801963e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019642:	4422      	add	r2, r4
 8019644:	46ac      	mov	ip, r5
 8019646:	e6f1      	b.n	801942c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8019648:	4628      	mov	r0, r5
 801964a:	462a      	mov	r2, r5
 801964c:	e6ee      	b.n	801942c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801964e:	4628      	mov	r0, r5
 8019650:	462a      	mov	r2, r5
 8019652:	e7f7      	b.n	8019644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8019654:	1c47      	adds	r7, r0, #1
 8019656:	f53f af69 	bmi.w	801952c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801965a:	42ba      	cmp	r2, r7
 801965c:	f6ff af66 	blt.w	801952c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8019660:	1c6f      	adds	r7, r5, #1
 8019662:	f53f af63 	bmi.w	801952c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8019666:	42be      	cmp	r6, r7
 8019668:	f6ff af60 	blt.w	801952c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801966c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801966e:	b236      	sxth	r6, r6
 8019670:	b212      	sxth	r2, r2
 8019672:	9002      	str	r0, [sp, #8]
 8019674:	9601      	str	r6, [sp, #4]
 8019676:	9200      	str	r2, [sp, #0]
 8019678:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801967a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801967e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8019682:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8019686:	4623      	mov	r3, r4
 8019688:	f7ff fd59 	bl	801913e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801968c:	e74e      	b.n	801952c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801968e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019690:	9820      	ldr	r0, [sp, #128]	; 0x80
 8019692:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019696:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801969a:	1400      	asrs	r0, r0, #16
 801969c:	142d      	asrs	r5, r5, #16
 801969e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80196a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80196a4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80196a8:	fb02 5000 	mla	r0, r2, r0, r5
 80196ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80196ae:	f815 9000 	ldrb.w	r9, [r5, r0]
 80196b2:	182e      	adds	r6, r5, r0
 80196b4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80196b8:	eb04 0509 	add.w	r5, r4, r9
 80196bc:	2b00      	cmp	r3, #0
 80196be:	f000 8096 	beq.w	80197ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80196c2:	7877      	ldrb	r7, [r6, #1]
 80196c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80196c8:	4427      	add	r7, r4
 80196ca:	2900      	cmp	r1, #0
 80196cc:	f000 8097 	beq.w	80197fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80196d0:	18b0      	adds	r0, r6, r2
 80196d2:	5cb2      	ldrb	r2, [r6, r2]
 80196d4:	7840      	ldrb	r0, [r0, #1]
 80196d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80196da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80196de:	4422      	add	r2, r4
 80196e0:	4420      	add	r0, r4
 80196e2:	b29b      	uxth	r3, r3
 80196e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80196e6:	b289      	uxth	r1, r1
 80196e8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80196ec:	f8b6 c000 	ldrh.w	ip, [r6]
 80196f0:	fb03 f801 	mul.w	r8, r3, r1
 80196f4:	011b      	lsls	r3, r3, #4
 80196f6:	78be      	ldrb	r6, [r7, #2]
 80196f8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80196fc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019700:	eba3 0308 	sub.w	r3, r3, r8
 8019704:	f814 9009 	ldrb.w	r9, [r4, r9]
 8019708:	b289      	uxth	r1, r1
 801970a:	b29b      	uxth	r3, r3
 801970c:	ebae 0e01 	sub.w	lr, lr, r1
 8019710:	435e      	muls	r6, r3
 8019712:	fa1f fe8e 	uxth.w	lr, lr
 8019716:	9310      	str	r3, [sp, #64]	; 0x40
 8019718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801971a:	fb0e 660b 	mla	r6, lr, fp, r6
 801971e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8019722:	fb01 660b 	mla	r6, r1, fp, r6
 8019726:	f890 b002 	ldrb.w	fp, [r0, #2]
 801972a:	fb08 660b 	mla	r6, r8, fp, r6
 801972e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8019732:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8019736:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801973a:	fb1b fb03 	smulbb	fp, fp, r3
 801973e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019740:	fb06 b60a 	mla	r6, r6, sl, fp
 8019744:	f895 b001 	ldrb.w	fp, [r5, #1]
 8019748:	787d      	ldrb	r5, [r7, #1]
 801974a:	783f      	ldrb	r7, [r7, #0]
 801974c:	b2b6      	uxth	r6, r6
 801974e:	435d      	muls	r5, r3
 8019750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019752:	fb0e 550b 	mla	r5, lr, fp, r5
 8019756:	f892 b001 	ldrb.w	fp, [r2, #1]
 801975a:	fb01 550b 	mla	r5, r1, fp, r5
 801975e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019762:	fb08 550b 	mla	r5, r8, fp, r5
 8019766:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801976a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801976e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8019772:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8019776:	fa5f fc8c 	uxtb.w	ip, ip
 801977a:	fb1b fb03 	smulbb	fp, fp, r3
 801977e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019780:	437b      	muls	r3, r7
 8019782:	7817      	ldrb	r7, [r2, #0]
 8019784:	fb05 b50a 	mla	r5, r5, sl, fp
 8019788:	fb0e 3309 	mla	r3, lr, r9, r3
 801978c:	b2ad      	uxth	r5, r5
 801978e:	fb01 3307 	mla	r3, r1, r7, r3
 8019792:	7807      	ldrb	r7, [r0, #0]
 8019794:	f105 0b01 	add.w	fp, r5, #1
 8019798:	fb08 3707 	mla	r7, r8, r7, r3
 801979c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801979e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80197a2:	fb1c fc03 	smulbb	ip, ip, r3
 80197a6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80197aa:	1c73      	adds	r3, r6, #1
 80197ac:	096d      	lsrs	r5, r5, #5
 80197ae:	fb07 c70a 	mla	r7, r7, sl, ip
 80197b2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80197b6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80197ba:	b2bf      	uxth	r7, r7
 80197bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197be:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80197c2:	1c7a      	adds	r2, r7, #1
 80197c4:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80197c8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80197cc:	4316      	orrs	r6, r2
 80197ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80197d0:	432e      	orrs	r6, r5
 80197d2:	f823 6b02 	strh.w	r6, [r3], #2
 80197d6:	930c      	str	r3, [sp, #48]	; 0x30
 80197d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80197da:	4413      	add	r3, r2
 80197dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80197de:	931f      	str	r3, [sp, #124]	; 0x7c
 80197e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80197e2:	4413      	add	r3, r2
 80197e4:	9320      	str	r3, [sp, #128]	; 0x80
 80197e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197e8:	3b01      	subs	r3, #1
 80197ea:	9311      	str	r3, [sp, #68]	; 0x44
 80197ec:	e6db      	b.n	80195a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80197ee:	b149      	cbz	r1, 8019804 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80197f0:	5cb2      	ldrb	r2, [r6, r2]
 80197f2:	4628      	mov	r0, r5
 80197f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80197f8:	4422      	add	r2, r4
 80197fa:	462f      	mov	r7, r5
 80197fc:	e771      	b.n	80196e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80197fe:	4628      	mov	r0, r5
 8019800:	462a      	mov	r2, r5
 8019802:	e76e      	b.n	80196e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8019804:	4628      	mov	r0, r5
 8019806:	462a      	mov	r2, r5
 8019808:	e7f7      	b.n	80197fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801980a:	b015      	add	sp, #84	; 0x54
 801980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019810 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8019810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019814:	880f      	ldrh	r7, [r1, #0]
 8019816:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801981a:	023c      	lsls	r4, r7, #8
 801981c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019820:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8019824:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8019828:	017c      	lsls	r4, r7, #5
 801982a:	00ff      	lsls	r7, r7, #3
 801982c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8019830:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8019834:	b2ff      	uxtb	r7, r7
 8019836:	ea4b 0404 	orr.w	r4, fp, r4
 801983a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801983e:	4327      	orrs	r7, r4
 8019840:	fb05 ca0e 	mla	sl, r5, lr, ip
 8019844:	2d00      	cmp	r5, #0
 8019846:	9701      	str	r7, [sp, #4]
 8019848:	eb02 080a 	add.w	r8, r2, sl
 801984c:	db7e      	blt.n	801994c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801984e:	45a9      	cmp	r9, r5
 8019850:	dd7c      	ble.n	801994c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8019852:	f1bc 0f00 	cmp.w	ip, #0
 8019856:	db77      	blt.n	8019948 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8019858:	45e6      	cmp	lr, ip
 801985a:	dd75      	ble.n	8019948 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801985c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8019860:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019864:	441f      	add	r7, r3
 8019866:	f11c 0201 	adds.w	r2, ip, #1
 801986a:	d472      	bmi.n	8019952 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801986c:	4596      	cmp	lr, r2
 801986e:	dd70      	ble.n	8019952 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8019870:	2800      	cmp	r0, #0
 8019872:	d06e      	beq.n	8019952 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8019874:	f898 4001 	ldrb.w	r4, [r8, #1]
 8019878:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801987c:	441c      	add	r4, r3
 801987e:	3501      	adds	r5, #1
 8019880:	d46b      	bmi.n	801995a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8019882:	45a9      	cmp	r9, r5
 8019884:	dd69      	ble.n	801995a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8019886:	2e00      	cmp	r6, #0
 8019888:	d067      	beq.n	801995a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801988a:	f1bc 0f00 	cmp.w	ip, #0
 801988e:	db62      	blt.n	8019956 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8019890:	45e6      	cmp	lr, ip
 8019892:	dd60      	ble.n	8019956 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8019894:	f818 500e 	ldrb.w	r5, [r8, lr]
 8019898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801989c:	441d      	add	r5, r3
 801989e:	f11c 0201 	adds.w	r2, ip, #1
 80198a2:	d45d      	bmi.n	8019960 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80198a4:	4596      	cmp	lr, r2
 80198a6:	dd5b      	ble.n	8019960 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	d059      	beq.n	8019960 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80198ac:	44c6      	add	lr, r8
 80198ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80198b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80198b6:	4413      	add	r3, r2
 80198b8:	b280      	uxth	r0, r0
 80198ba:	f897 e002 	ldrb.w	lr, [r7, #2]
 80198be:	b2b2      	uxth	r2, r6
 80198c0:	f897 9000 	ldrb.w	r9, [r7]
 80198c4:	787f      	ldrb	r7, [r7, #1]
 80198c6:	fb00 f602 	mul.w	r6, r0, r2
 80198ca:	0100      	lsls	r0, r0, #4
 80198cc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80198d0:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80198d4:	1b80      	subs	r0, r0, r6
 80198d6:	fa1f fc82 	uxth.w	ip, r2
 80198da:	b282      	uxth	r2, r0
 80198dc:	78a0      	ldrb	r0, [r4, #2]
 80198de:	eba8 080c 	sub.w	r8, r8, ip
 80198e2:	4350      	muls	r0, r2
 80198e4:	fa1f f888 	uxth.w	r8, r8
 80198e8:	fb08 0e0e 	mla	lr, r8, lr, r0
 80198ec:	78a8      	ldrb	r0, [r5, #2]
 80198ee:	fb0c e000 	mla	r0, ip, r0, lr
 80198f2:	f893 e002 	ldrb.w	lr, [r3, #2]
 80198f6:	fb06 0e0e 	mla	lr, r6, lr, r0
 80198fa:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 80198fe:	f894 e000 	ldrb.w	lr, [r4]
 8019902:	fb02 fe0e 	mul.w	lr, r2, lr
 8019906:	fb08 e909 	mla	r9, r8, r9, lr
 801990a:	f895 e000 	ldrb.w	lr, [r5]
 801990e:	fb0c 990e 	mla	r9, ip, lr, r9
 8019912:	f893 e000 	ldrb.w	lr, [r3]
 8019916:	785b      	ldrb	r3, [r3, #1]
 8019918:	fb06 9e0e 	mla	lr, r6, lr, r9
 801991c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019920:	ea4e 0e00 	orr.w	lr, lr, r0
 8019924:	7860      	ldrb	r0, [r4, #1]
 8019926:	4350      	muls	r0, r2
 8019928:	786a      	ldrb	r2, [r5, #1]
 801992a:	fb08 0007 	mla	r0, r8, r7, r0
 801992e:	fb0c 0202 	mla	r2, ip, r2, r0
 8019932:	fb06 2303 	mla	r3, r6, r3, r2
 8019936:	095b      	lsrs	r3, r3, #5
 8019938:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801993c:	ea4e 0303 	orr.w	r3, lr, r3
 8019940:	800b      	strh	r3, [r1, #0]
 8019942:	b003      	add	sp, #12
 8019944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019948:	af01      	add	r7, sp, #4
 801994a:	e78c      	b.n	8019866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801994c:	ac01      	add	r4, sp, #4
 801994e:	4627      	mov	r7, r4
 8019950:	e795      	b.n	801987e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8019952:	ac01      	add	r4, sp, #4
 8019954:	e793      	b.n	801987e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8019956:	ad01      	add	r5, sp, #4
 8019958:	e7a1      	b.n	801989e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801995a:	ab01      	add	r3, sp, #4
 801995c:	461d      	mov	r5, r3
 801995e:	e7ab      	b.n	80198b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8019960:	ab01      	add	r3, sp, #4
 8019962:	e7a9      	b.n	80198b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08019964 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019968:	b08f      	sub	sp, #60	; 0x3c
 801996a:	920c      	str	r2, [sp, #48]	; 0x30
 801996c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801996e:	900d      	str	r0, [sp, #52]	; 0x34
 8019970:	910a      	str	r1, [sp, #40]	; 0x28
 8019972:	6850      	ldr	r0, [r2, #4]
 8019974:	9306      	str	r3, [sp, #24]
 8019976:	6812      	ldr	r2, [r2, #0]
 8019978:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801997c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8019980:	fb00 1303 	mla	r3, r0, r3, r1
 8019984:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019988:	9307      	str	r3, [sp, #28]
 801998a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	9308      	str	r3, [sp, #32]
 8019990:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019992:	685c      	ldr	r4, [r3, #4]
 8019994:	3404      	adds	r4, #4
 8019996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019998:	2b00      	cmp	r3, #0
 801999a:	dc03      	bgt.n	80199a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801999c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f340 81d5 	ble.w	8019d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80199a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80199a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80199aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80199ae:	1e48      	subs	r0, r1, #1
 80199b0:	1e56      	subs	r6, r2, #1
 80199b2:	9b06      	ldr	r3, [sp, #24]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	f340 80b6 	ble.w	8019b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80199ba:	ea5f 472b 	movs.w	r7, fp, asr #16
 80199be:	ea4f 4325 	mov.w	r3, r5, asr #16
 80199c2:	d406      	bmi.n	80199d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80199c4:	4287      	cmp	r7, r0
 80199c6:	da04      	bge.n	80199d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	db02      	blt.n	80199d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80199cc:	42b3      	cmp	r3, r6
 80199ce:	f2c0 80ab 	blt.w	8019b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80199d2:	3701      	adds	r7, #1
 80199d4:	f100 809c 	bmi.w	8019b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80199d8:	42b9      	cmp	r1, r7
 80199da:	f2c0 8099 	blt.w	8019b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80199de:	3301      	adds	r3, #1
 80199e0:	f100 8096 	bmi.w	8019b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80199e4:	429a      	cmp	r2, r3
 80199e6:	f2c0 8093 	blt.w	8019b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80199ea:	9b06      	ldr	r3, [sp, #24]
 80199ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80199ee:	9b07      	ldr	r3, [sp, #28]
 80199f0:	9309      	str	r3, [sp, #36]	; 0x24
 80199f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	f340 80b4 	ble.w	8019b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80199fa:	9820      	ldr	r0, [sp, #128]	; 0x80
 80199fc:	142e      	asrs	r6, r5, #16
 80199fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019a00:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019a04:	68c7      	ldr	r7, [r0, #12]
 8019a06:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019a0a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019a0e:	6892      	ldr	r2, [r2, #8]
 8019a10:	f100 80fb 	bmi.w	8019c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019a14:	f102 3cff 	add.w	ip, r2, #4294967295
 8019a18:	4560      	cmp	r0, ip
 8019a1a:	f280 80f6 	bge.w	8019c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019a1e:	2e00      	cmp	r6, #0
 8019a20:	f2c0 80f3 	blt.w	8019c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019a24:	f107 3cff 	add.w	ip, r7, #4294967295
 8019a28:	4566      	cmp	r6, ip
 8019a2a:	f280 80ee 	bge.w	8019c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019a2e:	b212      	sxth	r2, r2
 8019a30:	fb06 0002 	mla	r0, r6, r2, r0
 8019a34:	9e08      	ldr	r6, [sp, #32]
 8019a36:	1837      	adds	r7, r6, r0
 8019a38:	5c30      	ldrb	r0, [r6, r0]
 8019a3a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8019a3e:	eb04 0c08 	add.w	ip, r4, r8
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	f000 80d3 	beq.w	8019bee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019a48:	787e      	ldrb	r6, [r7, #1]
 8019a4a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019a4e:	4426      	add	r6, r4
 8019a50:	2900      	cmp	r1, #0
 8019a52:	f000 80d4 	beq.w	8019bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019a56:	18b8      	adds	r0, r7, r2
 8019a58:	5cba      	ldrb	r2, [r7, r2]
 8019a5a:	7840      	ldrb	r0, [r0, #1]
 8019a5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019a60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019a64:	4422      	add	r2, r4
 8019a66:	4420      	add	r0, r4
 8019a68:	b29b      	uxth	r3, r3
 8019a6a:	78b7      	ldrb	r7, [r6, #2]
 8019a6c:	b289      	uxth	r1, r1
 8019a6e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019a72:	f89c c001 	ldrb.w	ip, [ip, #1]
 8019a76:	fb03 f901 	mul.w	r9, r3, r1
 8019a7a:	011b      	lsls	r3, r3, #4
 8019a7c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019a80:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019a84:	eba3 0309 	sub.w	r3, r3, r9
 8019a88:	b289      	uxth	r1, r1
 8019a8a:	b29b      	uxth	r3, r3
 8019a8c:	ebae 0e01 	sub.w	lr, lr, r1
 8019a90:	435f      	muls	r7, r3
 8019a92:	fa1f fe8e 	uxth.w	lr, lr
 8019a96:	fb0e 770a 	mla	r7, lr, sl, r7
 8019a9a:	f892 a002 	ldrb.w	sl, [r2, #2]
 8019a9e:	fb01 770a 	mla	r7, r1, sl, r7
 8019aa2:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019aa6:	fb09 7a0a 	mla	sl, r9, sl, r7
 8019aaa:	f814 7008 	ldrb.w	r7, [r4, r8]
 8019aae:	f896 8000 	ldrb.w	r8, [r6]
 8019ab2:	7876      	ldrb	r6, [r6, #1]
 8019ab4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8019ab8:	fb03 f808 	mul.w	r8, r3, r8
 8019abc:	4373      	muls	r3, r6
 8019abe:	fb0e 8807 	mla	r8, lr, r7, r8
 8019ac2:	7817      	ldrb	r7, [r2, #0]
 8019ac4:	fb0e 330c 	mla	r3, lr, ip, r3
 8019ac8:	fb01 8807 	mla	r8, r1, r7, r8
 8019acc:	7807      	ldrb	r7, [r0, #0]
 8019ace:	fb09 8707 	mla	r7, r9, r7, r8
 8019ad2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019ad6:	ea47 070a 	orr.w	r7, r7, sl
 8019ada:	f892 a001 	ldrb.w	sl, [r2, #1]
 8019ade:	fb01 310a 	mla	r1, r1, sl, r3
 8019ae2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ae8:	fb09 1a0a 	mla	sl, r9, sl, r1
 8019aec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019af0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019af4:	ea47 070a 	orr.w	r7, r7, sl
 8019af8:	801f      	strh	r7, [r3, #0]
 8019afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019afc:	3302      	adds	r3, #2
 8019afe:	9309      	str	r3, [sp, #36]	; 0x24
 8019b00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b02:	449b      	add	fp, r3
 8019b04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b06:	441d      	add	r5, r3
 8019b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b0a:	3b01      	subs	r3, #1
 8019b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b0e:	e770      	b.n	80199f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019b10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b12:	449b      	add	fp, r3
 8019b14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b16:	441d      	add	r5, r3
 8019b18:	9b06      	ldr	r3, [sp, #24]
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	9306      	str	r3, [sp, #24]
 8019b1e:	9b07      	ldr	r3, [sp, #28]
 8019b20:	3302      	adds	r3, #2
 8019b22:	9307      	str	r3, [sp, #28]
 8019b24:	e745      	b.n	80199b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8019b26:	d023      	beq.n	8019b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8019b28:	9b06      	ldr	r3, [sp, #24]
 8019b2a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019b2c:	3b01      	subs	r3, #1
 8019b2e:	fb00 b003 	mla	r0, r0, r3, fp
 8019b32:	1400      	asrs	r0, r0, #16
 8019b34:	f53f af59 	bmi.w	80199ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019b38:	3901      	subs	r1, #1
 8019b3a:	4288      	cmp	r0, r1
 8019b3c:	f6bf af55 	bge.w	80199ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019b40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019b42:	fb01 5303 	mla	r3, r1, r3, r5
 8019b46:	141b      	asrs	r3, r3, #16
 8019b48:	f53f af4f 	bmi.w	80199ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019b4c:	3a01      	subs	r2, #1
 8019b4e:	4293      	cmp	r3, r2
 8019b50:	f6bf af4b 	bge.w	80199ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019b54:	9b06      	ldr	r3, [sp, #24]
 8019b56:	9309      	str	r3, [sp, #36]	; 0x24
 8019b58:	9b07      	ldr	r3, [sp, #28]
 8019b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	dc70      	bgt.n	8019c44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019b62:	9b06      	ldr	r3, [sp, #24]
 8019b64:	9a07      	ldr	r2, [sp, #28]
 8019b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019b6e:	9307      	str	r3, [sp, #28]
 8019b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	f340 80eb 	ble.w	8019d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8019b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019b7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019b86:	eef0 6a62 	vmov.f32	s13, s5
 8019b8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019b8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019b92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b96:	ee16 ba90 	vmov	fp, s13
 8019b9a:	eef0 6a43 	vmov.f32	s13, s6
 8019b9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ba2:	ee16 5a90 	vmov	r5, s13
 8019ba6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019baa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019bae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019bb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019bb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019bba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019bbe:	ee12 2a90 	vmov	r2, s5
 8019bc2:	eef0 2a47 	vmov.f32	s5, s14
 8019bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bca:	ee13 2a10 	vmov	r2, s6
 8019bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8019bd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019bd2:	eeb0 3a67 	vmov.f32	s6, s15
 8019bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bda:	931c      	str	r3, [sp, #112]	; 0x70
 8019bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019be0:	3b01      	subs	r3, #1
 8019be2:	930a      	str	r3, [sp, #40]	; 0x28
 8019be4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019be6:	bf08      	it	eq
 8019be8:	4613      	moveq	r3, r2
 8019bea:	9306      	str	r3, [sp, #24]
 8019bec:	e6d3      	b.n	8019996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019bee:	b149      	cbz	r1, 8019c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8019bf0:	5cba      	ldrb	r2, [r7, r2]
 8019bf2:	4660      	mov	r0, ip
 8019bf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019bf8:	4422      	add	r2, r4
 8019bfa:	4666      	mov	r6, ip
 8019bfc:	e734      	b.n	8019a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8019bfe:	4660      	mov	r0, ip
 8019c00:	4662      	mov	r2, ip
 8019c02:	e731      	b.n	8019a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8019c04:	4660      	mov	r0, ip
 8019c06:	4662      	mov	r2, ip
 8019c08:	e7f7      	b.n	8019bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019c0a:	f110 0c01 	adds.w	ip, r0, #1
 8019c0e:	f53f af74 	bmi.w	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8019c12:	4562      	cmp	r2, ip
 8019c14:	f6ff af71 	blt.w	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8019c18:	f116 0c01 	adds.w	ip, r6, #1
 8019c1c:	f53f af6d 	bmi.w	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8019c20:	4567      	cmp	r7, ip
 8019c22:	f6ff af6a 	blt.w	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8019c26:	b23f      	sxth	r7, r7
 8019c28:	b212      	sxth	r2, r2
 8019c2a:	9701      	str	r7, [sp, #4]
 8019c2c:	9200      	str	r2, [sp, #0]
 8019c2e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019c32:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8019c36:	4623      	mov	r3, r4
 8019c38:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019c3a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8019c3e:	f7ff fde7 	bl	8019810 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8019c42:	e75a      	b.n	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8019c44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019c46:	ea4f 462b 	mov.w	r6, fp, asr #16
 8019c4a:	1428      	asrs	r0, r5, #16
 8019c4c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019c50:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019c54:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019c58:	fb02 6000 	mla	r0, r2, r0, r6
 8019c5c:	9e08      	ldr	r6, [sp, #32]
 8019c5e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019c62:	1837      	adds	r7, r6, r0
 8019c64:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019c68:	eb04 0c08 	add.w	ip, r4, r8
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d060      	beq.n	8019d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8019c70:	787e      	ldrb	r6, [r7, #1]
 8019c72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019c76:	4426      	add	r6, r4
 8019c78:	2900      	cmp	r1, #0
 8019c7a:	d062      	beq.n	8019d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019c7c:	18b8      	adds	r0, r7, r2
 8019c7e:	5cba      	ldrb	r2, [r7, r2]
 8019c80:	7840      	ldrb	r0, [r0, #1]
 8019c82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019c86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019c8a:	4422      	add	r2, r4
 8019c8c:	4420      	add	r0, r4
 8019c8e:	b29b      	uxth	r3, r3
 8019c90:	78b7      	ldrb	r7, [r6, #2]
 8019c92:	b289      	uxth	r1, r1
 8019c94:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019c98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8019c9c:	fb03 f901 	mul.w	r9, r3, r1
 8019ca0:	011b      	lsls	r3, r3, #4
 8019ca2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019ca6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019caa:	eba3 0309 	sub.w	r3, r3, r9
 8019cae:	b289      	uxth	r1, r1
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	ebae 0e01 	sub.w	lr, lr, r1
 8019cb6:	435f      	muls	r7, r3
 8019cb8:	fa1f fe8e 	uxth.w	lr, lr
 8019cbc:	fb0e 770a 	mla	r7, lr, sl, r7
 8019cc0:	f892 a002 	ldrb.w	sl, [r2, #2]
 8019cc4:	fb01 770a 	mla	r7, r1, sl, r7
 8019cc8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019ccc:	fb09 7a0a 	mla	sl, r9, sl, r7
 8019cd0:	f814 7008 	ldrb.w	r7, [r4, r8]
 8019cd4:	f896 8000 	ldrb.w	r8, [r6]
 8019cd8:	7876      	ldrb	r6, [r6, #1]
 8019cda:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8019cde:	fb03 f808 	mul.w	r8, r3, r8
 8019ce2:	4373      	muls	r3, r6
 8019ce4:	7856      	ldrb	r6, [r2, #1]
 8019ce6:	fb0e 8807 	mla	r8, lr, r7, r8
 8019cea:	7817      	ldrb	r7, [r2, #0]
 8019cec:	fb0e 330c 	mla	r3, lr, ip, r3
 8019cf0:	fb01 8807 	mla	r8, r1, r7, r8
 8019cf4:	7807      	ldrb	r7, [r0, #0]
 8019cf6:	fb01 3306 	mla	r3, r1, r6, r3
 8019cfa:	fb09 8707 	mla	r7, r9, r7, r8
 8019cfe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019d02:	ea47 070a 	orr.w	r7, r7, sl
 8019d06:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019d0a:	fb09 3a0a 	mla	sl, r9, sl, r3
 8019d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019d14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019d18:	ea47 070a 	orr.w	r7, r7, sl
 8019d1c:	f823 7b02 	strh.w	r7, [r3], #2
 8019d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d24:	449b      	add	fp, r3
 8019d26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019d28:	441d      	add	r5, r3
 8019d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d2c:	3b01      	subs	r3, #1
 8019d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019d30:	e714      	b.n	8019b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8019d32:	b149      	cbz	r1, 8019d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8019d34:	5cba      	ldrb	r2, [r7, r2]
 8019d36:	4660      	mov	r0, ip
 8019d38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019d3c:	4422      	add	r2, r4
 8019d3e:	4666      	mov	r6, ip
 8019d40:	e7a5      	b.n	8019c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8019d42:	4660      	mov	r0, ip
 8019d44:	4662      	mov	r2, ip
 8019d46:	e7a2      	b.n	8019c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8019d48:	4660      	mov	r0, ip
 8019d4a:	4662      	mov	r2, ip
 8019d4c:	e7f7      	b.n	8019d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 8019d4e:	b00f      	add	sp, #60	; 0x3c
 8019d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8019d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d58:	b085      	sub	sp, #20
 8019d5a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8019d5e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8019d62:	9102      	str	r1, [sp, #8]
 8019d64:	2c00      	cmp	r4, #0
 8019d66:	fb04 710c 	mla	r1, r4, ip, r7
 8019d6a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8019d6e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8019d72:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8019d76:	eb02 0e01 	add.w	lr, r2, r1
 8019d7a:	f2c0 8122 	blt.w	8019fc2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8019d7e:	45a0      	cmp	r8, r4
 8019d80:	f340 811f 	ble.w	8019fc2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8019d84:	2f00      	cmp	r7, #0
 8019d86:	f2c0 811a 	blt.w	8019fbe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8019d8a:	45bc      	cmp	ip, r7
 8019d8c:	f340 8117 	ble.w	8019fbe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8019d90:	5c52      	ldrb	r2, [r2, r1]
 8019d92:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019d96:	1c7a      	adds	r2, r7, #1
 8019d98:	f100 8116 	bmi.w	8019fc8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8019d9c:	4594      	cmp	ip, r2
 8019d9e:	f340 8113 	ble.w	8019fc8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8019da2:	2e00      	cmp	r6, #0
 8019da4:	f000 8112 	beq.w	8019fcc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8019da8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019db0:	3401      	adds	r4, #1
 8019db2:	f100 810f 	bmi.w	8019fd4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8019db6:	45a0      	cmp	r8, r4
 8019db8:	f340 810c 	ble.w	8019fd4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	f000 810c 	beq.w	8019fda <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8019dc2:	2f00      	cmp	r7, #0
 8019dc4:	f2c0 8104 	blt.w	8019fd0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8019dc8:	45bc      	cmp	ip, r7
 8019dca:	f340 8101 	ble.w	8019fd0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8019dce:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8019dd2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8019dd6:	3701      	adds	r7, #1
 8019dd8:	f100 8102 	bmi.w	8019fe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8019ddc:	45bc      	cmp	ip, r7
 8019dde:	f340 80ff 	ble.w	8019fe0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8019de2:	2e00      	cmp	r6, #0
 8019de4:	f000 80fe 	beq.w	8019fe4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8019de8:	44f4      	add	ip, lr
 8019dea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019df2:	b2b6      	uxth	r6, r6
 8019df4:	b280      	uxth	r0, r0
 8019df6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8019dfa:	fb00 fe06 	mul.w	lr, r0, r6
 8019dfe:	0136      	lsls	r6, r6, #4
 8019e00:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8019e04:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8019e08:	eba6 070e 	sub.w	r7, r6, lr
 8019e0c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8019e10:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8019e14:	b280      	uxth	r0, r0
 8019e16:	b2bf      	uxth	r7, r7
 8019e18:	1a1b      	subs	r3, r3, r0
 8019e1a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019e1e:	fb0a f607 	mul.w	r6, sl, r7
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	fb0b 6603 	mla	r6, fp, r3, r6
 8019e28:	fb00 6609 	mla	r6, r0, r9, r6
 8019e2c:	fb0e 6608 	mla	r6, lr, r8, r6
 8019e30:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019e34:	9600      	str	r6, [sp, #0]
 8019e36:	2e00      	cmp	r6, #0
 8019e38:	f000 80be 	beq.w	8019fb8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8019e3c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8019e40:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019e44:	9e02      	ldr	r6, [sp, #8]
 8019e46:	fb0b fc0c 	mul.w	ip, fp, ip
 8019e4a:	fb0b f505 	mul.w	r5, fp, r5
 8019e4e:	8836      	ldrh	r6, [r6, #0]
 8019e50:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019e54:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019e58:	9501      	str	r5, [sp, #4]
 8019e5a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019e5e:	44dc      	add	ip, fp
 8019e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e64:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8019e68:	9503      	str	r5, [sp, #12]
 8019e6a:	9d01      	ldr	r5, [sp, #4]
 8019e6c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8019e70:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019e74:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8019e78:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8019e7c:	fb0a fc0c 	mul.w	ip, sl, ip
 8019e80:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8019e84:	fb0a fa01 	mul.w	sl, sl, r1
 8019e88:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8019e8c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019e90:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8019e94:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019e98:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8019e9c:	4465      	add	r5, ip
 8019e9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ea2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019ea6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019eaa:	fb09 fc0c 	mul.w	ip, r9, ip
 8019eae:	0a2d      	lsrs	r5, r5, #8
 8019eb0:	fb09 f904 	mul.w	r9, r9, r4
 8019eb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019eb8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8019ebc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019ec0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8019ec4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019ec8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8019ecc:	437d      	muls	r5, r7
 8019ece:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8019ed2:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8019ed6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019eda:	4461      	add	r1, ip
 8019edc:	fb08 f404 	mul.w	r4, r8, r4
 8019ee0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019ee4:	fb08 f802 	mul.w	r8, r8, r2
 8019ee8:	0a09      	lsrs	r1, r1, #8
 8019eea:	0a22      	lsrs	r2, r4, #8
 8019eec:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8019ef0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8019ef4:	fb07 f70a 	mul.w	r7, r7, sl
 8019ef8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019efc:	4414      	add	r4, r2
 8019efe:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019f02:	0a24      	lsrs	r4, r4, #8
 8019f04:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019f08:	9a03      	ldr	r2, [sp, #12]
 8019f0a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019f0e:	fb02 5503 	mla	r5, r2, r3, r5
 8019f12:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019f16:	9a00      	ldr	r2, [sp, #0]
 8019f18:	fb04 540e 	mla	r4, r4, lr, r5
 8019f1c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019f20:	1235      	asrs	r5, r6, #8
 8019f22:	fb01 4100 	mla	r1, r1, r0, r4
 8019f26:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019f2a:	0a09      	lsrs	r1, r1, #8
 8019f2c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8019f30:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8019f34:	fb03 7101 	mla	r1, r3, r1, r7
 8019f38:	fb0e 1e08 	mla	lr, lr, r8, r1
 8019f3c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8019f40:	fb00 e101 	mla	r1, r0, r1, lr
 8019f44:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019f48:	b287      	uxth	r7, r0
 8019f4a:	0a09      	lsrs	r1, r1, #8
 8019f4c:	437a      	muls	r2, r7
 8019f4e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8019f52:	1c53      	adds	r3, r2, #1
 8019f54:	4321      	orrs	r1, r4
 8019f56:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019f5a:	0c0a      	lsrs	r2, r1, #16
 8019f5c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8019f60:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8019f64:	b2c8      	uxtb	r0, r1
 8019f66:	fb12 f207 	smulbb	r2, r2, r7
 8019f6a:	fb14 f407 	smulbb	r4, r4, r7
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	fb10 f007 	smulbb	r0, r0, r7
 8019f74:	fb05 2503 	mla	r5, r5, r3, r2
 8019f78:	10f2      	asrs	r2, r6, #3
 8019f7a:	00f6      	lsls	r6, r6, #3
 8019f7c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019f80:	b2ad      	uxth	r5, r5
 8019f82:	b2f6      	uxtb	r6, r6
 8019f84:	fb02 4203 	mla	r2, r2, r3, r4
 8019f88:	fb06 0303 	mla	r3, r6, r3, r0
 8019f8c:	b294      	uxth	r4, r2
 8019f8e:	b299      	uxth	r1, r3
 8019f90:	1c6b      	adds	r3, r5, #1
 8019f92:	1c62      	adds	r2, r4, #1
 8019f94:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019f98:	1c4b      	adds	r3, r1, #1
 8019f9a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019f9e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019fa2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8019fa6:	0952      	lsrs	r2, r2, #5
 8019fa8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019fac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019fb0:	432b      	orrs	r3, r5
 8019fb2:	4313      	orrs	r3, r2
 8019fb4:	9a02      	ldr	r2, [sp, #8]
 8019fb6:	8013      	strh	r3, [r2, #0]
 8019fb8:	b005      	add	sp, #20
 8019fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fbe:	2500      	movs	r5, #0
 8019fc0:	e6e9      	b.n	8019d96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8019fc2:	2100      	movs	r1, #0
 8019fc4:	460d      	mov	r5, r1
 8019fc6:	e6f3      	b.n	8019db0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8019fc8:	2100      	movs	r1, #0
 8019fca:	e6f1      	b.n	8019db0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8019fcc:	4631      	mov	r1, r6
 8019fce:	e6ef      	b.n	8019db0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8019fd0:	2400      	movs	r4, #0
 8019fd2:	e700      	b.n	8019dd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	4614      	mov	r4, r2
 8019fd8:	e70b      	b.n	8019df2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8019fda:	4602      	mov	r2, r0
 8019fdc:	4604      	mov	r4, r0
 8019fde:	e708      	b.n	8019df2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	e706      	b.n	8019df2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8019fe4:	4632      	mov	r2, r6
 8019fe6:	e704      	b.n	8019df2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08019fe8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fec:	b09f      	sub	sp, #124	; 0x7c
 8019fee:	921b      	str	r2, [sp, #108]	; 0x6c
 8019ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ff2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019ff4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019ff8:	901d      	str	r0, [sp, #116]	; 0x74
 8019ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8019ffc:	6850      	ldr	r0, [r2, #4]
 8019ffe:	9119      	str	r1, [sp, #100]	; 0x64
 801a000:	6812      	ldr	r2, [r2, #0]
 801a002:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801a004:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a008:	fb00 1303 	mla	r3, r0, r3, r1
 801a00c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a010:	930c      	str	r3, [sp, #48]	; 0x30
 801a012:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	9312      	str	r3, [sp, #72]	; 0x48
 801a018:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a01a:	685e      	ldr	r6, [r3, #4]
 801a01c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801a020:	3604      	adds	r6, #4
 801a022:	930d      	str	r3, [sp, #52]	; 0x34
 801a024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a026:	2b00      	cmp	r3, #0
 801a028:	dc03      	bgt.n	801a032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a02a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	f340 8387 	ble.w	801a740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801a032:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a034:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a038:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a03c:	1e48      	subs	r0, r1, #1
 801a03e:	1e57      	subs	r7, r2, #1
 801a040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a042:	2b00      	cmp	r3, #0
 801a044:	f340 8194 	ble.w	801a370 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801a048:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a04a:	142b      	asrs	r3, r5, #16
 801a04c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a050:	d406      	bmi.n	801a060 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a052:	4584      	cmp	ip, r0
 801a054:	da04      	bge.n	801a060 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a056:	2b00      	cmp	r3, #0
 801a058:	db02      	blt.n	801a060 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a05a:	42bb      	cmp	r3, r7
 801a05c:	f2c0 8189 	blt.w	801a372 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a060:	f11c 0c01 	adds.w	ip, ip, #1
 801a064:	f100 8177 	bmi.w	801a356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a068:	4561      	cmp	r1, ip
 801a06a:	f2c0 8174 	blt.w	801a356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a06e:	3301      	adds	r3, #1
 801a070:	f100 8171 	bmi.w	801a356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a074:	429a      	cmp	r2, r3
 801a076:	f2c0 816e 	blt.w	801a356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a07c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a07e:	931a      	str	r3, [sp, #104]	; 0x68
 801a080:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a082:	2b00      	cmp	r3, #0
 801a084:	f340 8193 	ble.w	801a3ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a088:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a08a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a08e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a092:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a096:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a098:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801a09c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a09e:	141b      	asrs	r3, r3, #16
 801a0a0:	f100 81d6 	bmi.w	801a450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801a0a4:	f100 38ff 	add.w	r8, r0, #4294967295
 801a0a8:	4543      	cmp	r3, r8
 801a0aa:	f280 81d1 	bge.w	801a450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801a0ae:	f1bc 0f00 	cmp.w	ip, #0
 801a0b2:	f2c0 81cd 	blt.w	801a450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801a0b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a0ba:	45c4      	cmp	ip, r8
 801a0bc:	f280 81c8 	bge.w	801a450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801a0c0:	b200      	sxth	r0, r0
 801a0c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a0c4:	fb0c 3300 	mla	r3, ip, r0, r3
 801a0c8:	eb04 0803 	add.w	r8, r4, r3
 801a0cc:	5ce3      	ldrb	r3, [r4, r3]
 801a0ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a0d2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a0d6:	2a00      	cmp	r2, #0
 801a0d8:	f000 81af 	beq.w	801a43a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801a0dc:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a0e0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a0e4:	940e      	str	r4, [sp, #56]	; 0x38
 801a0e6:	0e24      	lsrs	r4, r4, #24
 801a0e8:	9415      	str	r4, [sp, #84]	; 0x54
 801a0ea:	b179      	cbz	r1, 801a10c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a0ec:	eb08 0c00 	add.w	ip, r8, r0
 801a0f0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a0f4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a0f8:	900a      	str	r0, [sp, #40]	; 0x28
 801a0fa:	0e00      	lsrs	r0, r0, #24
 801a0fc:	9013      	str	r0, [sp, #76]	; 0x4c
 801a0fe:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a102:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a106:	900f      	str	r0, [sp, #60]	; 0x3c
 801a108:	0e00      	lsrs	r0, r0, #24
 801a10a:	9016      	str	r0, [sp, #88]	; 0x58
 801a10c:	b292      	uxth	r2, r2
 801a10e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a110:	b289      	uxth	r1, r1
 801a112:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a114:	fb02 f901 	mul.w	r9, r2, r1
 801a118:	0112      	lsls	r2, r2, #4
 801a11a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a11e:	eba2 0809 	sub.w	r8, r2, r9
 801a122:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a126:	b289      	uxth	r1, r1
 801a128:	fa1f f888 	uxth.w	r8, r8
 801a12c:	1a52      	subs	r2, r2, r1
 801a12e:	fb08 f000 	mul.w	r0, r8, r0
 801a132:	b292      	uxth	r2, r2
 801a134:	fb02 000e 	mla	r0, r2, lr, r0
 801a138:	fb01 0004 	mla	r0, r1, r4, r0
 801a13c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a13e:	fb09 0004 	mla	r0, r9, r4, r0
 801a142:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a146:	2800      	cmp	r0, #0
 801a148:	f000 80fa 	beq.w	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a14c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a150:	d01b      	beq.n	801a18a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801a152:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a15a:	fb0e fa0a 	mul.w	sl, lr, sl
 801a15e:	fb0e fe03 	mul.w	lr, lr, r3
 801a162:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a166:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a16a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a16e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a172:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a176:	4453      	add	r3, sl
 801a178:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a17c:	0a1b      	lsrs	r3, r3, #8
 801a17e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a182:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a186:	ea43 030c 	orr.w	r3, r3, ip
 801a18a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a18c:	2cff      	cmp	r4, #255	; 0xff
 801a18e:	d021      	beq.n	801a1d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801a190:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a192:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a196:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a198:	fb04 fb0b 	mul.w	fp, r4, fp
 801a19c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a19e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a1a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a1a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a1a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1ac:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a1b8:	44de      	add	lr, fp
 801a1ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a1be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a1c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a1c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a1ce:	ea4e 040a 	orr.w	r4, lr, sl
 801a1d2:	940e      	str	r4, [sp, #56]	; 0x38
 801a1d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1d6:	2cff      	cmp	r4, #255	; 0xff
 801a1d8:	d021      	beq.n	801a21e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a1da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a1dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a1e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1e2:	fb04 fb0b 	mul.w	fp, r4, fp
 801a1e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a1e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a1ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a1ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a1f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1f6:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a202:	44de      	add	lr, fp
 801a204:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a208:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a20c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a210:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a214:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a218:	ea4e 040a 	orr.w	r4, lr, sl
 801a21c:	940a      	str	r4, [sp, #40]	; 0x28
 801a21e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a220:	2cff      	cmp	r4, #255	; 0xff
 801a222:	d021      	beq.n	801a268 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801a224:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a226:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a22a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a22c:	fb04 fb0b 	mul.w	fp, r4, fp
 801a230:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a232:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a236:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a238:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a23c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a240:	fb04 fa0a 	mul.w	sl, r4, sl
 801a244:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a248:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a24c:	44de      	add	lr, fp
 801a24e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a252:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a256:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a25a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a25e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a262:	ea4e 040a 	orr.w	r4, lr, sl
 801a266:	940f      	str	r4, [sp, #60]	; 0x3c
 801a268:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a26a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a26e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a272:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a278:	fb08 fc0c 	mul.w	ip, r8, ip
 801a27c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a280:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a284:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a286:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a28a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a28e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a290:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a294:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a298:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a29a:	fb08 f80e 	mul.w	r8, r8, lr
 801a29e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a2a2:	fb02 8303 	mla	r3, r2, r3, r8
 801a2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2ac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a2b2:	fb01 330a 	mla	r3, r1, sl, r3
 801a2b6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801a2ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2bc:	fb09 3901 	mla	r9, r9, r1, r3
 801a2c0:	883b      	ldrh	r3, [r7, #0]
 801a2c2:	4342      	muls	r2, r0
 801a2c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a2c8:	1c50      	adds	r0, r2, #1
 801a2ca:	1219      	asrs	r1, r3, #8
 801a2cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a2d0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a2d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a2d8:	ea4c 0c09 	orr.w	ip, ip, r9
 801a2dc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a2e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801a2e4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801a2e8:	b2c0      	uxtb	r0, r0
 801a2ea:	fb12 f204 	smulbb	r2, r2, r4
 801a2ee:	fa5f fc8c 	uxtb.w	ip, ip
 801a2f2:	fb1e fe04 	smulbb	lr, lr, r4
 801a2f6:	fb01 2100 	mla	r1, r1, r0, r2
 801a2fa:	10da      	asrs	r2, r3, #3
 801a2fc:	fb1c fc04 	smulbb	ip, ip, r4
 801a300:	00db      	lsls	r3, r3, #3
 801a302:	b289      	uxth	r1, r1
 801a304:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a308:	b2db      	uxtb	r3, r3
 801a30a:	fb02 e200 	mla	r2, r2, r0, lr
 801a30e:	fb03 c300 	mla	r3, r3, r0, ip
 801a312:	b292      	uxth	r2, r2
 801a314:	fa1f fc83 	uxth.w	ip, r3
 801a318:	1c4b      	adds	r3, r1, #1
 801a31a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a31e:	f10c 0301 	add.w	r3, ip, #1
 801a322:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801a326:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a32a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a32e:	430b      	orrs	r3, r1
 801a330:	1c51      	adds	r1, r2, #1
 801a332:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a336:	0952      	lsrs	r2, r2, #5
 801a338:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a33c:	4313      	orrs	r3, r2
 801a33e:	803b      	strh	r3, [r7, #0]
 801a340:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a342:	3702      	adds	r7, #2
 801a344:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a346:	441a      	add	r2, r3
 801a348:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a34a:	441d      	add	r5, r3
 801a34c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a34e:	9229      	str	r2, [sp, #164]	; 0xa4
 801a350:	3b01      	subs	r3, #1
 801a352:	931a      	str	r3, [sp, #104]	; 0x68
 801a354:	e694      	b.n	801a080 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a356:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a358:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a35a:	441c      	add	r4, r3
 801a35c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a35e:	441d      	add	r5, r3
 801a360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a362:	9429      	str	r4, [sp, #164]	; 0xa4
 801a364:	3b01      	subs	r3, #1
 801a366:	9309      	str	r3, [sp, #36]	; 0x24
 801a368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a36a:	3302      	adds	r3, #2
 801a36c:	930c      	str	r3, [sp, #48]	; 0x30
 801a36e:	e667      	b.n	801a040 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a370:	d024      	beq.n	801a3bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801a372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a374:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a376:	3b01      	subs	r3, #1
 801a378:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a37a:	fb00 4003 	mla	r0, r0, r3, r4
 801a37e:	1400      	asrs	r0, r0, #16
 801a380:	f53f ae7b 	bmi.w	801a07a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a384:	3901      	subs	r1, #1
 801a386:	4288      	cmp	r0, r1
 801a388:	f6bf ae77 	bge.w	801a07a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a38c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a38e:	fb01 5303 	mla	r3, r1, r3, r5
 801a392:	141b      	asrs	r3, r3, #16
 801a394:	f53f ae71 	bmi.w	801a07a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a398:	3a01      	subs	r2, #1
 801a39a:	4293      	cmp	r3, r2
 801a39c:	f6bf ae6d 	bge.w	801a07a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a3a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a3a4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a3a8:	f1bb 0f00 	cmp.w	fp, #0
 801a3ac:	dc70      	bgt.n	801a490 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a3ba:	930c      	str	r3, [sp, #48]	; 0x30
 801a3bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	f340 81be 	ble.w	801a740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801a3c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a3c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a3ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3d2:	eef0 6a62 	vmov.f32	s13, s5
 801a3d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3e2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801a3e6:	eef0 6a43 	vmov.f32	s13, s6
 801a3ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3ee:	ee16 5a90 	vmov	r5, s13
 801a3f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a3fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a402:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a406:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a40a:	ee12 2a90 	vmov	r2, s5
 801a40e:	eef0 2a47 	vmov.f32	s5, s14
 801a412:	fb92 f3f3 	sdiv	r3, r2, r3
 801a416:	ee13 2a10 	vmov	r2, s6
 801a41a:	932b      	str	r3, [sp, #172]	; 0xac
 801a41c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a41e:	eeb0 3a67 	vmov.f32	s6, s15
 801a422:	fb92 f3f3 	sdiv	r3, r2, r3
 801a426:	932c      	str	r3, [sp, #176]	; 0xb0
 801a428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a42a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a42c:	3b01      	subs	r3, #1
 801a42e:	9319      	str	r3, [sp, #100]	; 0x64
 801a430:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a432:	bf08      	it	eq
 801a434:	4613      	moveq	r3, r2
 801a436:	9309      	str	r3, [sp, #36]	; 0x24
 801a438:	e5f4      	b.n	801a024 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a43a:	2900      	cmp	r1, #0
 801a43c:	f43f ae66 	beq.w	801a10c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a440:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a444:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a448:	900a      	str	r0, [sp, #40]	; 0x28
 801a44a:	0e00      	lsrs	r0, r0, #24
 801a44c:	9013      	str	r0, [sp, #76]	; 0x4c
 801a44e:	e65d      	b.n	801a10c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a450:	f113 0801 	adds.w	r8, r3, #1
 801a454:	f53f af74 	bmi.w	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a458:	4540      	cmp	r0, r8
 801a45a:	f6ff af71 	blt.w	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a45e:	f11c 0801 	adds.w	r8, ip, #1
 801a462:	f53f af6d 	bmi.w	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a466:	45c6      	cmp	lr, r8
 801a468:	f6ff af6a 	blt.w	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a46c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a46e:	b200      	sxth	r0, r0
 801a470:	9302      	str	r3, [sp, #8]
 801a472:	fa0f f38e 	sxth.w	r3, lr
 801a476:	9000      	str	r0, [sp, #0]
 801a478:	9301      	str	r3, [sp, #4]
 801a47a:	4633      	mov	r3, r6
 801a47c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a47e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a482:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a486:	4639      	mov	r1, r7
 801a488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a48a:	f7ff fc63 	bl	8019d54 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801a48e:	e757      	b.n	801a340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801a490:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a492:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a496:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a498:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a49c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a49e:	1427      	asrs	r7, r4, #16
 801a4a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a4a6:	142b      	asrs	r3, r5, #16
 801a4a8:	fb01 7303 	mla	r3, r1, r3, r7
 801a4ac:	18e7      	adds	r7, r4, r3
 801a4ae:	5ce3      	ldrb	r3, [r4, r3]
 801a4b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a4b4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a4b8:	2a00      	cmp	r2, #0
 801a4ba:	f000 8137 	beq.w	801a72c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801a4be:	f897 e001 	ldrb.w	lr, [r7, #1]
 801a4c2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801a4c6:	9410      	str	r4, [sp, #64]	; 0x40
 801a4c8:	0e24      	lsrs	r4, r4, #24
 801a4ca:	9417      	str	r4, [sp, #92]	; 0x5c
 801a4cc:	b170      	cbz	r0, 801a4ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801a4ce:	eb07 0e01 	add.w	lr, r7, r1
 801a4d2:	5c79      	ldrb	r1, [r7, r1]
 801a4d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a4d8:	910b      	str	r1, [sp, #44]	; 0x2c
 801a4da:	0e09      	lsrs	r1, r1, #24
 801a4dc:	9114      	str	r1, [sp, #80]	; 0x50
 801a4de:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801a4e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a4e6:	9111      	str	r1, [sp, #68]	; 0x44
 801a4e8:	0e09      	lsrs	r1, r1, #24
 801a4ea:	9118      	str	r1, [sp, #96]	; 0x60
 801a4ec:	b292      	uxth	r2, r2
 801a4ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a4f0:	b280      	uxth	r0, r0
 801a4f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a4f4:	fb02 f800 	mul.w	r8, r2, r0
 801a4f8:	0112      	lsls	r2, r2, #4
 801a4fa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801a4fe:	eba2 0e08 	sub.w	lr, r2, r8
 801a502:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a506:	b280      	uxth	r0, r0
 801a508:	fa1f fe8e 	uxth.w	lr, lr
 801a50c:	1a12      	subs	r2, r2, r0
 801a50e:	fb0e f101 	mul.w	r1, lr, r1
 801a512:	b292      	uxth	r2, r2
 801a514:	fb02 110c 	mla	r1, r2, ip, r1
 801a518:	fb00 1104 	mla	r1, r0, r4, r1
 801a51c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a51e:	fb08 1104 	mla	r1, r8, r4, r1
 801a522:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a526:	2900      	cmp	r1, #0
 801a528:	f000 80f5 	beq.w	801a716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801a52c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a530:	d019      	beq.n	801a566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801a532:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a53a:	fb0c fa0a 	mul.w	sl, ip, sl
 801a53e:	fb0c fc03 	mul.w	ip, ip, r3
 801a542:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a546:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a54a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a54e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a552:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a556:	4453      	add	r3, sl
 801a558:	0a3f      	lsrs	r7, r7, #8
 801a55a:	0a1b      	lsrs	r3, r3, #8
 801a55c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a564:	433b      	orrs	r3, r7
 801a566:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a568:	2cff      	cmp	r4, #255	; 0xff
 801a56a:	d020      	beq.n	801a5ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801a56c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a56e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a572:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a574:	4367      	muls	r7, r4
 801a576:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a578:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a57c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a580:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a582:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a586:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a58a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a58e:	44bc      	add	ip, r7
 801a590:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a594:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a598:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a59c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5a8:	ea4c 040a 	orr.w	r4, ip, sl
 801a5ac:	9410      	str	r4, [sp, #64]	; 0x40
 801a5ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5b0:	2cff      	cmp	r4, #255	; 0xff
 801a5b2:	d020      	beq.n	801a5f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801a5b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a5b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a5ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5bc:	4367      	muls	r7, r4
 801a5be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a5c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a5c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a5c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a5ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5d6:	44bc      	add	ip, r7
 801a5d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a5dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5f0:	ea4c 040a 	orr.w	r4, ip, sl
 801a5f4:	940b      	str	r4, [sp, #44]	; 0x2c
 801a5f6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a5f8:	2cff      	cmp	r4, #255	; 0xff
 801a5fa:	d020      	beq.n	801a63e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801a5fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a5fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a602:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a604:	4367      	muls	r7, r4
 801a606:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a608:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a60c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a610:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a612:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a616:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a61a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a61e:	44bc      	add	ip, r7
 801a620:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a624:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a628:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a62c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a630:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a634:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a638:	ea4c 040a 	orr.w	r4, ip, sl
 801a63c:	9411      	str	r4, [sp, #68]	; 0x44
 801a63e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a640:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a644:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a648:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a64c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a64e:	fb0e f707 	mul.w	r7, lr, r7
 801a652:	fb02 770c 	mla	r7, r2, ip, r7
 801a656:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a65a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a65c:	fb00 770c 	mla	r7, r0, ip, r7
 801a660:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a664:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a666:	fb08 770c 	mla	r7, r8, ip, r7
 801a66a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a66e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a670:	fb0e fe0c 	mul.w	lr, lr, ip
 801a674:	0a3f      	lsrs	r7, r7, #8
 801a676:	fb02 e303 	mla	r3, r2, r3, lr
 801a67a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a67c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a680:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a686:	fb00 330a 	mla	r3, r0, sl, r3
 801a68a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a68e:	f8b9 0000 	ldrh.w	r0, [r9]
 801a692:	fb08 3c0c 	mla	ip, r8, ip, r3
 801a696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a698:	1202      	asrs	r2, r0, #8
 801a69a:	434b      	muls	r3, r1
 801a69c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a6a0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801a6a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a6a8:	1c59      	adds	r1, r3, #1
 801a6aa:	ea47 070c 	orr.w	r7, r7, ip
 801a6ae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a6b2:	0c3b      	lsrs	r3, r7, #16
 801a6b4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a6b8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801a6bc:	b2ff      	uxtb	r7, r7
 801a6be:	fb13 f304 	smulbb	r3, r3, r4
 801a6c2:	b2c9      	uxtb	r1, r1
 801a6c4:	fb1c fc04 	smulbb	ip, ip, r4
 801a6c8:	fb02 3201 	mla	r2, r2, r1, r3
 801a6cc:	10c3      	asrs	r3, r0, #3
 801a6ce:	fb17 f704 	smulbb	r7, r7, r4
 801a6d2:	00c0      	lsls	r0, r0, #3
 801a6d4:	b292      	uxth	r2, r2
 801a6d6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801a6da:	b2c0      	uxtb	r0, r0
 801a6dc:	fb03 c301 	mla	r3, r3, r1, ip
 801a6e0:	f102 0c01 	add.w	ip, r2, #1
 801a6e4:	fb00 7001 	mla	r0, r0, r1, r7
 801a6e8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a6ec:	b280      	uxth	r0, r0
 801a6ee:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	1c42      	adds	r2, r0, #1
 801a6f6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a6fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a6fe:	ea42 020c 	orr.w	r2, r2, ip
 801a702:	f103 0c01 	add.w	ip, r3, #1
 801a706:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801a70a:	095b      	lsrs	r3, r3, #5
 801a70c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a710:	431a      	orrs	r2, r3
 801a712:	f8a9 2000 	strh.w	r2, [r9]
 801a716:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a718:	f109 0902 	add.w	r9, r9, #2
 801a71c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a71e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a722:	441a      	add	r2, r3
 801a724:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a726:	9229      	str	r2, [sp, #164]	; 0xa4
 801a728:	441d      	add	r5, r3
 801a72a:	e63d      	b.n	801a3a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801a72c:	2800      	cmp	r0, #0
 801a72e:	f43f aedd 	beq.w	801a4ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801a732:	5c79      	ldrb	r1, [r7, r1]
 801a734:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a738:	910b      	str	r1, [sp, #44]	; 0x2c
 801a73a:	0e09      	lsrs	r1, r1, #24
 801a73c:	9114      	str	r1, [sp, #80]	; 0x50
 801a73e:	e6d5      	b.n	801a4ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801a740:	b01f      	add	sp, #124	; 0x7c
 801a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a746 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801a746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a74a:	b089      	sub	sp, #36	; 0x24
 801a74c:	9101      	str	r1, [sp, #4]
 801a74e:	9801      	ldr	r0, [sp, #4]
 801a750:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801a754:	8800      	ldrh	r0, [r0, #0]
 801a756:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801a75a:	1206      	asrs	r6, r0, #8
 801a75c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801a760:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801a764:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a768:	9602      	str	r6, [sp, #8]
 801a76a:	10c6      	asrs	r6, r0, #3
 801a76c:	00c0      	lsls	r0, r0, #3
 801a76e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a772:	b2c0      	uxtb	r0, r0
 801a774:	9603      	str	r6, [sp, #12]
 801a776:	9004      	str	r0, [sp, #16]
 801a778:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801a77c:	fb07 100c 	mla	r0, r7, ip, r1
 801a780:	2f00      	cmp	r7, #0
 801a782:	eb02 0e00 	add.w	lr, r2, r0
 801a786:	f2c0 810a 	blt.w	801a99e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801a78a:	45b8      	cmp	r8, r7
 801a78c:	f340 8107 	ble.w	801a99e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801a790:	2900      	cmp	r1, #0
 801a792:	f2c0 8102 	blt.w	801a99a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801a796:	458c      	cmp	ip, r1
 801a798:	f340 80ff 	ble.w	801a99a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801a79c:	5c12      	ldrb	r2, [r2, r0]
 801a79e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a7a2:	1c4a      	adds	r2, r1, #1
 801a7a4:	f100 80fe 	bmi.w	801a9a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801a7a8:	4594      	cmp	ip, r2
 801a7aa:	f340 80fb 	ble.w	801a9a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801a7ae:	2d00      	cmp	r5, #0
 801a7b0:	f000 80fa 	beq.w	801a9a8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801a7b4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a7b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a7bc:	3701      	adds	r7, #1
 801a7be:	f100 80f7 	bmi.w	801a9b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801a7c2:	45b8      	cmp	r8, r7
 801a7c4:	f340 80f4 	ble.w	801a9b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801a7c8:	2c00      	cmp	r4, #0
 801a7ca:	f000 80f4 	beq.w	801a9b6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801a7ce:	2900      	cmp	r1, #0
 801a7d0:	eb0e 020c 	add.w	r2, lr, ip
 801a7d4:	f2c0 80ea 	blt.w	801a9ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801a7d8:	458c      	cmp	ip, r1
 801a7da:	f340 80e7 	ble.w	801a9ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801a7de:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801a7e2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801a7e6:	3101      	adds	r1, #1
 801a7e8:	f100 80e8 	bmi.w	801a9bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801a7ec:	458c      	cmp	ip, r1
 801a7ee:	f340 80e5 	ble.w	801a9bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801a7f2:	2d00      	cmp	r5, #0
 801a7f4:	f000 80e4 	beq.w	801a9c0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801a7f8:	7852      	ldrb	r2, [r2, #1]
 801a7fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a7fe:	0e0b      	lsrs	r3, r1, #24
 801a800:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801a804:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801a808:	9300      	str	r3, [sp, #0]
 801a80a:	b2a4      	uxth	r4, r4
 801a80c:	b2ab      	uxth	r3, r5
 801a80e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801a812:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801a816:	fb03 f904 	mul.w	r9, r3, r4
 801a81a:	011b      	lsls	r3, r3, #4
 801a81c:	fb0a f505 	mul.w	r5, sl, r5
 801a820:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801a824:	eba3 0e09 	sub.w	lr, r3, r9
 801a828:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801a82c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801a830:	0a28      	lsrs	r0, r5, #8
 801a832:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801a836:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a83a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a83e:	fb0a f303 	mul.w	r3, sl, r3
 801a842:	fb08 f707 	mul.w	r7, r8, r7
 801a846:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801a84a:	4405      	add	r5, r0
 801a84c:	fb08 fc0c 	mul.w	ip, r8, ip
 801a850:	b2a4      	uxth	r4, r4
 801a852:	0a2d      	lsrs	r5, r5, #8
 801a854:	fa1f fe8e 	uxth.w	lr, lr
 801a858:	1b12      	subs	r2, r2, r4
 801a85a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801a85e:	b292      	uxth	r2, r2
 801a860:	9005      	str	r0, [sp, #20]
 801a862:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801a866:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a86a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801a86e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a872:	0a1b      	lsrs	r3, r3, #8
 801a874:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a878:	9306      	str	r3, [sp, #24]
 801a87a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801a87e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a882:	4460      	add	r0, ip
 801a884:	fb0b f303 	mul.w	r3, fp, r3
 801a888:	fb0b f606 	mul.w	r6, fp, r6
 801a88c:	0a00      	lsrs	r0, r0, #8
 801a88e:	0a1d      	lsrs	r5, r3, #8
 801a890:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801a894:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a898:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a89c:	441d      	add	r5, r3
 801a89e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801a8a2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a8a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801a8aa:	0a2d      	lsrs	r5, r5, #8
 801a8ac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801a8b0:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801a8b4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a8b8:	0a36      	lsrs	r6, r6, #8
 801a8ba:	0a1b      	lsrs	r3, r3, #8
 801a8bc:	fb05 f50e 	mul.w	r5, r5, lr
 801a8c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a8c4:	9307      	str	r3, [sp, #28]
 801a8c6:	0e0b      	lsrs	r3, r1, #24
 801a8c8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801a8cc:	fb0e f606 	mul.w	r6, lr, r6
 801a8d0:	435f      	muls	r7, r3
 801a8d2:	4359      	muls	r1, r3
 801a8d4:	9b05      	ldr	r3, [sp, #20]
 801a8d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a8da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a8de:	fb03 5502 	mla	r5, r3, r2, r5
 801a8e2:	9b06      	ldr	r3, [sp, #24]
 801a8e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8e8:	fb0e fe0b 	mul.w	lr, lr, fp
 801a8ec:	44bc      	add	ip, r7
 801a8ee:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801a8f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8f6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801a8fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8fe:	0a09      	lsrs	r1, r1, #8
 801a900:	fb0c 5509 	mla	r5, ip, r9, r5
 801a904:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801a908:	fb00 5504 	mla	r5, r0, r4, r5
 801a90c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801a910:	9b07      	ldr	r3, [sp, #28]
 801a912:	fb02 6000 	mla	r0, r2, r0, r6
 801a916:	0a2d      	lsrs	r5, r5, #8
 801a918:	fb02 e20a 	mla	r2, r2, sl, lr
 801a91c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a920:	fb09 0001 	mla	r0, r9, r1, r0
 801a924:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a928:	fb04 0003 	mla	r0, r4, r3, r0
 801a92c:	9b00      	ldr	r3, [sp, #0]
 801a92e:	fb04 2408 	mla	r4, r4, r8, r2
 801a932:	9a04      	ldr	r2, [sp, #16]
 801a934:	0a00      	lsrs	r0, r0, #8
 801a936:	fb09 4903 	mla	r9, r9, r3, r4
 801a93a:	9b02      	ldr	r3, [sp, #8]
 801a93c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a940:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801a944:	4305      	orrs	r5, r0
 801a946:	fa5f f989 	uxtb.w	r9, r9
 801a94a:	fb03 f109 	mul.w	r1, r3, r9
 801a94e:	9b03      	ldr	r3, [sp, #12]
 801a950:	fb03 f309 	mul.w	r3, r3, r9
 801a954:	fb02 f909 	mul.w	r9, r2, r9
 801a958:	1c4a      	adds	r2, r1, #1
 801a95a:	1c58      	adds	r0, r3, #1
 801a95c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a960:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a964:	0c2a      	lsrs	r2, r5, #16
 801a966:	0a2b      	lsrs	r3, r5, #8
 801a968:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801a96c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a970:	0212      	lsls	r2, r2, #8
 801a972:	00db      	lsls	r3, r3, #3
 801a974:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801a978:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a97c:	4313      	orrs	r3, r2
 801a97e:	f109 0201 	add.w	r2, r9, #1
 801a982:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a986:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801a98a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a98e:	431d      	orrs	r5, r3
 801a990:	9b01      	ldr	r3, [sp, #4]
 801a992:	801d      	strh	r5, [r3, #0]
 801a994:	b009      	add	sp, #36	; 0x24
 801a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99a:	2000      	movs	r0, #0
 801a99c:	e701      	b.n	801a7a2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801a99e:	2600      	movs	r6, #0
 801a9a0:	4630      	mov	r0, r6
 801a9a2:	e70b      	b.n	801a7bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801a9a4:	2600      	movs	r6, #0
 801a9a6:	e709      	b.n	801a7bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801a9a8:	462e      	mov	r6, r5
 801a9aa:	e707      	b.n	801a7bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801a9ac:	2700      	movs	r7, #0
 801a9ae:	e71a      	b.n	801a7e6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801a9b0:	2100      	movs	r1, #0
 801a9b2:	460f      	mov	r7, r1
 801a9b4:	e723      	b.n	801a7fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801a9b6:	4621      	mov	r1, r4
 801a9b8:	4627      	mov	r7, r4
 801a9ba:	e720      	b.n	801a7fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801a9bc:	2100      	movs	r1, #0
 801a9be:	e71e      	b.n	801a7fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801a9c0:	4629      	mov	r1, r5
 801a9c2:	e71c      	b.n	801a7fe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801a9c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c8:	b09b      	sub	sp, #108	; 0x6c
 801a9ca:	9218      	str	r2, [sp, #96]	; 0x60
 801a9cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a9ce:	9019      	str	r0, [sp, #100]	; 0x64
 801a9d0:	9116      	str	r1, [sp, #88]	; 0x58
 801a9d2:	6850      	ldr	r0, [r2, #4]
 801a9d4:	9307      	str	r3, [sp, #28]
 801a9d6:	6812      	ldr	r2, [r2, #0]
 801a9d8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801a9da:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a9de:	fb00 1303 	mla	r3, r0, r3, r1
 801a9e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a9e6:	930a      	str	r3, [sp, #40]	; 0x28
 801a9e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801a9ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a9f0:	685e      	ldr	r6, [r3, #4]
 801a9f2:	3604      	adds	r6, #4
 801a9f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	dc03      	bgt.n	801aa02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a9fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	f340 8373 	ble.w	801b0e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801aa02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aa08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aa0c:	1e48      	subs	r0, r1, #1
 801aa0e:	1e57      	subs	r7, r2, #1
 801aa10:	9b07      	ldr	r3, [sp, #28]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	f340 818f 	ble.w	801ad36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801aa18:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801aa1a:	142b      	asrs	r3, r5, #16
 801aa1c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801aa20:	d406      	bmi.n	801aa30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa22:	4584      	cmp	ip, r0
 801aa24:	da04      	bge.n	801aa30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	db02      	blt.n	801aa30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aa2a:	42bb      	cmp	r3, r7
 801aa2c:	f2c0 8184 	blt.w	801ad38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801aa30:	f11c 0c01 	adds.w	ip, ip, #1
 801aa34:	f100 8172 	bmi.w	801ad1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801aa38:	4561      	cmp	r1, ip
 801aa3a:	f2c0 816f 	blt.w	801ad1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801aa3e:	3301      	adds	r3, #1
 801aa40:	f100 816c 	bmi.w	801ad1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801aa44:	429a      	cmp	r2, r3
 801aa46:	f2c0 8169 	blt.w	801ad1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801aa4a:	9b07      	ldr	r3, [sp, #28]
 801aa4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801aa4e:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	f340 818e 	ble.w	801ad74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801aa58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801aa5a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801aa5e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801aa62:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801aa66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa68:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801aa6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801aa6e:	141b      	asrs	r3, r3, #16
 801aa70:	f100 81d1 	bmi.w	801ae16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801aa74:	f101 38ff 	add.w	r8, r1, #4294967295
 801aa78:	4543      	cmp	r3, r8
 801aa7a:	f280 81cc 	bge.w	801ae16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801aa7e:	f1bc 0f00 	cmp.w	ip, #0
 801aa82:	f2c0 81c8 	blt.w	801ae16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801aa86:	f10e 38ff 	add.w	r8, lr, #4294967295
 801aa8a:	45c4      	cmp	ip, r8
 801aa8c:	f280 81c3 	bge.w	801ae16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801aa90:	b209      	sxth	r1, r1
 801aa92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aa94:	fb0c 3301 	mla	r3, ip, r1, r3
 801aa98:	eb04 0803 	add.w	r8, r4, r3
 801aa9c:	5ce3      	ldrb	r3, [r4, r3]
 801aa9e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801aaa2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801aaa6:	2a00      	cmp	r2, #0
 801aaa8:	f000 81aa 	beq.w	801ae00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801aaac:	f898 c001 	ldrb.w	ip, [r8, #1]
 801aab0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801aab4:	940b      	str	r4, [sp, #44]	; 0x2c
 801aab6:	0e24      	lsrs	r4, r4, #24
 801aab8:	9412      	str	r4, [sp, #72]	; 0x48
 801aaba:	b178      	cbz	r0, 801aadc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801aabc:	eb08 0c01 	add.w	ip, r8, r1
 801aac0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aac4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aac8:	9108      	str	r1, [sp, #32]
 801aaca:	0e09      	lsrs	r1, r1, #24
 801aacc:	9110      	str	r1, [sp, #64]	; 0x40
 801aace:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801aad2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aad6:	910c      	str	r1, [sp, #48]	; 0x30
 801aad8:	0e09      	lsrs	r1, r1, #24
 801aada:	9113      	str	r1, [sp, #76]	; 0x4c
 801aadc:	b292      	uxth	r2, r2
 801aade:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aae0:	b280      	uxth	r0, r0
 801aae2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aae4:	fb02 f900 	mul.w	r9, r2, r0
 801aae8:	0112      	lsls	r2, r2, #4
 801aaea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801aaee:	eba2 0809 	sub.w	r8, r2, r9
 801aaf2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801aaf6:	b280      	uxth	r0, r0
 801aaf8:	fa1f f888 	uxth.w	r8, r8
 801aafc:	1a12      	subs	r2, r2, r0
 801aafe:	fb08 f101 	mul.w	r1, r8, r1
 801ab02:	b292      	uxth	r2, r2
 801ab04:	fb02 110e 	mla	r1, r2, lr, r1
 801ab08:	fb00 1104 	mla	r1, r0, r4, r1
 801ab0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab0e:	fb09 1104 	mla	r1, r9, r4, r1
 801ab12:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ab16:	2900      	cmp	r1, #0
 801ab18:	f000 80f5 	beq.w	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ab1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ab20:	d01b      	beq.n	801ab5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ab22:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ab26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ab2a:	fb0e fa0a 	mul.w	sl, lr, sl
 801ab2e:	fb0e fe03 	mul.w	lr, lr, r3
 801ab32:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ab36:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ab3a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ab3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ab42:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ab46:	4453      	add	r3, sl
 801ab48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab4c:	0a1b      	lsrs	r3, r3, #8
 801ab4e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ab52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ab56:	ea43 030c 	orr.w	r3, r3, ip
 801ab5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab5c:	2cff      	cmp	r4, #255	; 0xff
 801ab5e:	d021      	beq.n	801aba4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ab60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ab62:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ab66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab68:	fb04 fb0b 	mul.w	fp, r4, fp
 801ab6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ab6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ab72:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ab78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab7c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ab88:	44de      	add	lr, fp
 801ab8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ab8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ab9e:	ea4e 040a 	orr.w	r4, lr, sl
 801aba2:	940b      	str	r4, [sp, #44]	; 0x2c
 801aba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aba6:	2cff      	cmp	r4, #255	; 0xff
 801aba8:	d021      	beq.n	801abee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801abaa:	9c08      	ldr	r4, [sp, #32]
 801abac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801abb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801abb2:	fb04 fb0b 	mul.w	fp, r4, fp
 801abb6:	9c08      	ldr	r4, [sp, #32]
 801abb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801abbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801abbe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801abc2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801abc6:	fb04 fa0a 	mul.w	sl, r4, sl
 801abca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801abd2:	44de      	add	lr, fp
 801abd4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801abd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801abe0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801abe4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801abe8:	ea4e 040a 	orr.w	r4, lr, sl
 801abec:	9408      	str	r4, [sp, #32]
 801abee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801abf0:	2cff      	cmp	r4, #255	; 0xff
 801abf2:	d021      	beq.n	801ac38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801abf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801abf6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801abfa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801abfc:	fb04 fb0b 	mul.w	fp, r4, fp
 801ac00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ac02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ac06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ac0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ac10:	fb04 fa0a 	mul.w	sl, r4, sl
 801ac14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ac1c:	44de      	add	lr, fp
 801ac1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ac22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ac2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ac2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ac32:	ea4e 040a 	orr.w	r4, lr, sl
 801ac36:	940c      	str	r4, [sp, #48]	; 0x30
 801ac38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac3a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ac3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ac42:	43c9      	mvns	r1, r1
 801ac44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ac48:	9c08      	ldr	r4, [sp, #32]
 801ac4a:	fb08 fc0c 	mul.w	ip, r8, ip
 801ac4e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ac52:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ac58:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ac5c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ac60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ac62:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ac66:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ac6a:	fb08 f80e 	mul.w	r8, r8, lr
 801ac6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac72:	fa5f fe81 	uxtb.w	lr, r1
 801ac76:	fb02 8303 	mla	r3, r2, r3, r8
 801ac7a:	9a08      	ldr	r2, [sp, #32]
 801ac7c:	f8b7 8000 	ldrh.w	r8, [r7]
 801ac80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac84:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ac88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801ac8e:	fb00 330a 	mla	r3, r0, sl, r3
 801ac92:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801ac96:	ea4f 2228 	mov.w	r2, r8, asr #8
 801ac9a:	fb09 3900 	mla	r9, r9, r0, r3
 801ac9e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801aca2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801aca6:	b2c9      	uxtb	r1, r1
 801aca8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801acac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801acb0:	fb02 f20e 	mul.w	r2, r2, lr
 801acb4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801acb8:	fb00 f00e 	mul.w	r0, r0, lr
 801acbc:	1c53      	adds	r3, r2, #1
 801acbe:	fb01 f10e 	mul.w	r1, r1, lr
 801acc2:	ea4c 0c09 	orr.w	ip, ip, r9
 801acc6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801acca:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801acce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801acd2:	4a60      	ldr	r2, [pc, #384]	; (801ae54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801acd4:	b2db      	uxtb	r3, r3
 801acd6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801acda:	1c43      	adds	r3, r0, #1
 801acdc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ace0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ace4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ace8:	00db      	lsls	r3, r3, #3
 801acea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acee:	4313      	orrs	r3, r2
 801acf0:	1c4a      	adds	r2, r1, #1
 801acf2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801acf6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801acfa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801acfe:	ea4c 0c03 	orr.w	ip, ip, r3
 801ad02:	f8a7 c000 	strh.w	ip, [r7]
 801ad06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ad08:	3702      	adds	r7, #2
 801ad0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ad0c:	441a      	add	r2, r3
 801ad0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ad10:	441d      	add	r5, r3
 801ad12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ad14:	9225      	str	r2, [sp, #148]	; 0x94
 801ad16:	3b01      	subs	r3, #1
 801ad18:	9317      	str	r3, [sp, #92]	; 0x5c
 801ad1a:	e699      	b.n	801aa50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ad1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ad1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ad20:	441c      	add	r4, r3
 801ad22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ad24:	441d      	add	r5, r3
 801ad26:	9b07      	ldr	r3, [sp, #28]
 801ad28:	9425      	str	r4, [sp, #148]	; 0x94
 801ad2a:	3b01      	subs	r3, #1
 801ad2c:	9307      	str	r3, [sp, #28]
 801ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad30:	3302      	adds	r3, #2
 801ad32:	930a      	str	r3, [sp, #40]	; 0x28
 801ad34:	e66c      	b.n	801aa10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ad36:	d024      	beq.n	801ad82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801ad38:	9b07      	ldr	r3, [sp, #28]
 801ad3a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ad3c:	3b01      	subs	r3, #1
 801ad3e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ad40:	fb00 4003 	mla	r0, r0, r3, r4
 801ad44:	1400      	asrs	r0, r0, #16
 801ad46:	f53f ae80 	bmi.w	801aa4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ad4a:	3901      	subs	r1, #1
 801ad4c:	4288      	cmp	r0, r1
 801ad4e:	f6bf ae7c 	bge.w	801aa4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ad52:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ad54:	fb01 5303 	mla	r3, r1, r3, r5
 801ad58:	141b      	asrs	r3, r3, #16
 801ad5a:	f53f ae76 	bmi.w	801aa4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ad5e:	3a01      	subs	r2, #1
 801ad60:	4293      	cmp	r3, r2
 801ad62:	f6bf ae72 	bge.w	801aa4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ad66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ad6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ad6e:	f1bb 0f00 	cmp.w	fp, #0
 801ad72:	dc71      	bgt.n	801ae58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ad74:	9b07      	ldr	r3, [sp, #28]
 801ad76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ad7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad7c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ad80:	930a      	str	r3, [sp, #40]	; 0x28
 801ad82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f340 81af 	ble.w	801b0e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801ad8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ad90:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad98:	eef0 6a62 	vmov.f32	s13, s5
 801ad9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ada0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ada4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ada8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801adac:	eef0 6a43 	vmov.f32	s13, s6
 801adb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801adb4:	ee16 5a90 	vmov	r5, s13
 801adb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801adbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801adc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801add0:	ee12 2a90 	vmov	r2, s5
 801add4:	eef0 2a47 	vmov.f32	s5, s14
 801add8:	fb92 f3f3 	sdiv	r3, r2, r3
 801addc:	ee13 2a10 	vmov	r2, s6
 801ade0:	9327      	str	r3, [sp, #156]	; 0x9c
 801ade2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ade4:	eeb0 3a67 	vmov.f32	s6, s15
 801ade8:	fb92 f3f3 	sdiv	r3, r2, r3
 801adec:	9328      	str	r3, [sp, #160]	; 0xa0
 801adee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801adf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801adf2:	3b01      	subs	r3, #1
 801adf4:	9316      	str	r3, [sp, #88]	; 0x58
 801adf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801adf8:	bf08      	it	eq
 801adfa:	4613      	moveq	r3, r2
 801adfc:	9307      	str	r3, [sp, #28]
 801adfe:	e5f9      	b.n	801a9f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ae00:	2800      	cmp	r0, #0
 801ae02:	f43f ae6b 	beq.w	801aadc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ae06:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ae0a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ae0e:	9108      	str	r1, [sp, #32]
 801ae10:	0e09      	lsrs	r1, r1, #24
 801ae12:	9110      	str	r1, [sp, #64]	; 0x40
 801ae14:	e662      	b.n	801aadc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ae16:	f113 0801 	adds.w	r8, r3, #1
 801ae1a:	f53f af74 	bmi.w	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae1e:	4541      	cmp	r1, r8
 801ae20:	f6ff af71 	blt.w	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae24:	f11c 0801 	adds.w	r8, ip, #1
 801ae28:	f53f af6d 	bmi.w	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae2c:	45c6      	cmp	lr, r8
 801ae2e:	f6ff af6a 	blt.w	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae32:	b209      	sxth	r1, r1
 801ae34:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ae38:	fa0f f38e 	sxth.w	r3, lr
 801ae3c:	9100      	str	r1, [sp, #0]
 801ae3e:	4639      	mov	r1, r7
 801ae40:	9301      	str	r3, [sp, #4]
 801ae42:	4633      	mov	r3, r6
 801ae44:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ae48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae4a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ae4c:	f7ff fc7b 	bl	801a746 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ae50:	e759      	b.n	801ad06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ae52:	bf00      	nop
 801ae54:	fffff800 	.word	0xfffff800
 801ae58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ae5a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ae5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ae60:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ae64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ae66:	1427      	asrs	r7, r4, #16
 801ae68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ae6e:	142b      	asrs	r3, r5, #16
 801ae70:	fb01 7303 	mla	r3, r1, r3, r7
 801ae74:	18e7      	adds	r7, r4, r3
 801ae76:	5ce3      	ldrb	r3, [r4, r3]
 801ae78:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ae7c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	f000 8127 	beq.w	801b0d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ae86:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ae8a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ae8e:	940d      	str	r4, [sp, #52]	; 0x34
 801ae90:	0e24      	lsrs	r4, r4, #24
 801ae92:	9414      	str	r4, [sp, #80]	; 0x50
 801ae94:	b170      	cbz	r0, 801aeb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ae96:	eb07 0e01 	add.w	lr, r7, r1
 801ae9a:	5c79      	ldrb	r1, [r7, r1]
 801ae9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aea0:	9109      	str	r1, [sp, #36]	; 0x24
 801aea2:	0e09      	lsrs	r1, r1, #24
 801aea4:	9111      	str	r1, [sp, #68]	; 0x44
 801aea6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801aeaa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aeae:	910e      	str	r1, [sp, #56]	; 0x38
 801aeb0:	0e09      	lsrs	r1, r1, #24
 801aeb2:	9115      	str	r1, [sp, #84]	; 0x54
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aeb8:	b280      	uxth	r0, r0
 801aeba:	fb02 f800 	mul.w	r8, r2, r0
 801aebe:	0112      	lsls	r2, r2, #4
 801aec0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801aec4:	eba2 0e08 	sub.w	lr, r2, r8
 801aec8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801aecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aece:	b280      	uxth	r0, r0
 801aed0:	fa1f fe8e 	uxth.w	lr, lr
 801aed4:	1a09      	subs	r1, r1, r0
 801aed6:	fb0e f202 	mul.w	r2, lr, r2
 801aeda:	b289      	uxth	r1, r1
 801aedc:	fb01 220c 	mla	r2, r1, ip, r2
 801aee0:	fb00 2204 	mla	r2, r0, r4, r2
 801aee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aee6:	fb08 2204 	mla	r2, r8, r4, r2
 801aeea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aeee:	2a00      	cmp	r2, #0
 801aef0:	f000 80e5 	beq.w	801b0be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801aef4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aef8:	d019      	beq.n	801af2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801aefa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801aefe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801af02:	fb0c fa0a 	mul.w	sl, ip, sl
 801af06:	fb0c fc03 	mul.w	ip, ip, r3
 801af0a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801af0e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801af12:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801af16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af1a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801af1e:	4453      	add	r3, sl
 801af20:	0a3f      	lsrs	r7, r7, #8
 801af22:	0a1b      	lsrs	r3, r3, #8
 801af24:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801af28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801af2c:	433b      	orrs	r3, r7
 801af2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af30:	2cff      	cmp	r4, #255	; 0xff
 801af32:	d020      	beq.n	801af76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801af34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af36:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801af3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af3c:	4367      	muls	r7, r4
 801af3e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801af44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801af48:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af4a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801af4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af52:	fb04 fa0a 	mul.w	sl, r4, sl
 801af56:	44bc      	add	ip, r7
 801af58:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801af5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801af64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af70:	ea4c 040a 	orr.w	r4, ip, sl
 801af74:	940d      	str	r4, [sp, #52]	; 0x34
 801af76:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801af78:	2cff      	cmp	r4, #255	; 0xff
 801af7a:	d020      	beq.n	801afbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801af7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801af7e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801af82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801af84:	4367      	muls	r7, r4
 801af86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801af88:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801af8c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801af90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801af92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801af96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af9a:	fb04 fa0a 	mul.w	sl, r4, sl
 801af9e:	44bc      	add	ip, r7
 801afa0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801afa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801afa8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801afac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801afb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801afb8:	ea4c 040a 	orr.w	r4, ip, sl
 801afbc:	9409      	str	r4, [sp, #36]	; 0x24
 801afbe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801afc0:	2cff      	cmp	r4, #255	; 0xff
 801afc2:	d020      	beq.n	801b006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801afc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801afc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801afca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801afcc:	4367      	muls	r7, r4
 801afce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801afd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801afd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801afd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801afda:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801afde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801afe2:	fb04 fa0a 	mul.w	sl, r4, sl
 801afe6:	44bc      	add	ip, r7
 801afe8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801afec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aff0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801affc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b000:	ea4c 040a 	orr.w	r4, ip, sl
 801b004:	940e      	str	r4, [sp, #56]	; 0x38
 801b006:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b008:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b00c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b010:	43d2      	mvns	r2, r2
 801b012:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b016:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b018:	b2d2      	uxtb	r2, r2
 801b01a:	fb0e f707 	mul.w	r7, lr, r7
 801b01e:	fb01 770c 	mla	r7, r1, ip, r7
 801b022:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b026:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b028:	fb00 770c 	mla	r7, r0, ip, r7
 801b02c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b030:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b032:	fb08 770c 	mla	r7, r8, ip, r7
 801b036:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801b03a:	fb0e fe0c 	mul.w	lr, lr, ip
 801b03e:	0a3f      	lsrs	r7, r7, #8
 801b040:	fb01 e303 	mla	r3, r1, r3, lr
 801b044:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b046:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b04a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b04e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b050:	fb00 330a 	mla	r3, r0, sl, r3
 801b054:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801b058:	fb08 3c0c 	mla	ip, r8, ip, r3
 801b05c:	f8b9 3000 	ldrh.w	r3, [r9]
 801b060:	1218      	asrs	r0, r3, #8
 801b062:	10d9      	asrs	r1, r3, #3
 801b064:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b068:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b06c:	00db      	lsls	r3, r3, #3
 801b06e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b072:	4350      	muls	r0, r2
 801b074:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b078:	b2db      	uxtb	r3, r3
 801b07a:	4351      	muls	r1, r2
 801b07c:	ea47 070c 	orr.w	r7, r7, ip
 801b080:	4353      	muls	r3, r2
 801b082:	1c42      	adds	r2, r0, #1
 801b084:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b088:	0c3a      	lsrs	r2, r7, #16
 801b08a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b08e:	4a18      	ldr	r2, [pc, #96]	; (801b0f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801b090:	b2c0      	uxtb	r0, r0
 801b092:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801b096:	1c4a      	adds	r2, r1, #1
 801b098:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b09c:	0a3a      	lsrs	r2, r7, #8
 801b09e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b0a2:	00c9      	lsls	r1, r1, #3
 801b0a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b0a8:	4301      	orrs	r1, r0
 801b0aa:	1c58      	adds	r0, r3, #1
 801b0ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b0b0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801b0b4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801b0b8:	4308      	orrs	r0, r1
 801b0ba:	f8a9 0000 	strh.w	r0, [r9]
 801b0be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b0c0:	f109 0902 	add.w	r9, r9, #2
 801b0c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b0c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b0ca:	441a      	add	r2, r3
 801b0cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0ce:	9225      	str	r2, [sp, #148]	; 0x94
 801b0d0:	441d      	add	r5, r3
 801b0d2:	e64c      	b.n	801ad6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b0d4:	2800      	cmp	r0, #0
 801b0d6:	f43f aeed 	beq.w	801aeb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801b0da:	5c79      	ldrb	r1, [r7, r1]
 801b0dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b0e0:	9109      	str	r1, [sp, #36]	; 0x24
 801b0e2:	0e09      	lsrs	r1, r1, #24
 801b0e4:	9111      	str	r1, [sp, #68]	; 0x44
 801b0e6:	e6e5      	b.n	801aeb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801b0e8:	b01b      	add	sp, #108	; 0x6c
 801b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ee:	bf00      	nop
 801b0f0:	fffff800 	.word	0xfffff800

0801b0f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f8:	b085      	sub	sp, #20
 801b0fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801b0fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801b102:	2800      	cmp	r0, #0
 801b104:	9103      	str	r1, [sp, #12]
 801b106:	fb00 7406 	mla	r4, r0, r6, r7
 801b10a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801b10e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801b112:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801b116:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801b11a:	eb03 0904 	add.w	r9, r3, r4
 801b11e:	9501      	str	r5, [sp, #4]
 801b120:	f2c0 8150 	blt.w	801b3c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801b124:	4583      	cmp	fp, r0
 801b126:	f340 814d 	ble.w	801b3c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801b12a:	2f00      	cmp	r7, #0
 801b12c:	f2c0 8146 	blt.w	801b3bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801b130:	42be      	cmp	r6, r7
 801b132:	f340 8143 	ble.w	801b3bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801b136:	f813 c004 	ldrb.w	ip, [r3, r4]
 801b13a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801b13e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801b142:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801b146:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801b14a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b14e:	4355      	muls	r5, r2
 801b150:	fb0c f203 	mul.w	r2, ip, r3
 801b154:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801b158:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801b15c:	441d      	add	r5, r3
 801b15e:	f102 0320 	add.w	r3, r2, #32
 801b162:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b166:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801b16a:	0a1b      	lsrs	r3, r3, #8
 801b16c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b170:	431c      	orrs	r4, r3
 801b172:	1c7b      	adds	r3, r7, #1
 801b174:	f100 812b 	bmi.w	801b3ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801b178:	429e      	cmp	r6, r3
 801b17a:	f340 8128 	ble.w	801b3ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801b17e:	2900      	cmp	r1, #0
 801b180:	f000 8128 	beq.w	801b3d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801b184:	9a01      	ldr	r2, [sp, #4]
 801b186:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b18a:	8855      	ldrh	r5, [r2, #2]
 801b18c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801b190:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801b194:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b198:	fb08 f802 	mul.w	r8, r8, r2
 801b19c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801b1a0:	435d      	muls	r5, r3
 801b1a2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801b1a6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b1aa:	44d0      	add	r8, sl
 801b1ac:	f105 0a20 	add.w	sl, r5, #32
 801b1b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801b1b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801b1b8:	0a2d      	lsrs	r5, r5, #8
 801b1ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b1be:	432a      	orrs	r2, r5
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	f100 810d 	bmi.w	801b3e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801b1c6:	4583      	cmp	fp, r0
 801b1c8:	f340 810a 	ble.w	801b3e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801b1cc:	f1be 0f00 	cmp.w	lr, #0
 801b1d0:	f000 810b 	beq.w	801b3ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801b1d4:	2f00      	cmp	r7, #0
 801b1d6:	f2c0 8100 	blt.w	801b3da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801b1da:	42be      	cmp	r6, r7
 801b1dc:	f340 80fd 	ble.w	801b3da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801b1e0:	9801      	ldr	r0, [sp, #4]
 801b1e2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801b1e6:	f819 5006 	ldrb.w	r5, [r9, r6]
 801b1ea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801b1ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b1f2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801b1f6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b1fa:	fb0a fa00 	mul.w	sl, sl, r0
 801b1fe:	fb05 f808 	mul.w	r8, r5, r8
 801b202:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801b206:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801b20a:	4482      	add	sl, r0
 801b20c:	f108 0020 	add.w	r0, r8, #32
 801b210:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801b214:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801b218:	0a00      	lsrs	r0, r0, #8
 801b21a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b21e:	ea4b 0b00 	orr.w	fp, fp, r0
 801b222:	3701      	adds	r7, #1
 801b224:	f100 80e6 	bmi.w	801b3f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801b228:	42be      	cmp	r6, r7
 801b22a:	f340 80e3 	ble.w	801b3f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801b22e:	2900      	cmp	r1, #0
 801b230:	f000 80e3 	beq.w	801b3fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801b234:	3601      	adds	r6, #1
 801b236:	9801      	ldr	r0, [sp, #4]
 801b238:	f819 7006 	ldrb.w	r7, [r9, r6]
 801b23c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801b240:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801b244:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801b248:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b24c:	fb09 f906 	mul.w	r9, r9, r6
 801b250:	fb07 f800 	mul.w	r8, r7, r0
 801b254:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801b258:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801b25c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801b260:	44d1      	add	r9, sl
 801b262:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801b266:	f108 0020 	add.w	r0, r8, #32
 801b26a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801b26e:	0a00      	lsrs	r0, r0, #8
 801b270:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b274:	4330      	orrs	r0, r6
 801b276:	b28e      	uxth	r6, r1
 801b278:	fa1f f98e 	uxth.w	r9, lr
 801b27c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801b280:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801b284:	fb06 f809 	mul.w	r8, r6, r9
 801b288:	0136      	lsls	r6, r6, #4
 801b28a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b28e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801b292:	9601      	str	r6, [sp, #4]
 801b294:	ea4a 0404 	orr.w	r4, sl, r4
 801b298:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801b29c:	fa1f f689 	uxth.w	r6, r9
 801b2a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b2a4:	fb11 f90e 	smulbb	r9, r1, lr
 801b2a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b2ac:	9602      	str	r6, [sp, #8]
 801b2ae:	4626      	mov	r6, r4
 801b2b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801b2b4:	f1ce 0410 	rsb	r4, lr, #16
 801b2b8:	ea4a 0202 	orr.w	r2, sl, r2
 801b2bc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801b2c0:	1a64      	subs	r4, r4, r1
 801b2c2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801b2c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b2ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b2ce:	434a      	muls	r2, r1
 801b2d0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801b2d4:	ea4a 0000 	orr.w	r0, sl, r0
 801b2d8:	9903      	ldr	r1, [sp, #12]
 801b2da:	fb04 2406 	mla	r4, r4, r6, r2
 801b2de:	9e02      	ldr	r6, [sp, #8]
 801b2e0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801b2e4:	fb09 4200 	mla	r2, r9, r0, r4
 801b2e8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801b2ec:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801b2f0:	8808      	ldrh	r0, [r1, #0]
 801b2f2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b2f6:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801b2fa:	ea44 0b0b 	orr.w	fp, r4, fp
 801b2fe:	9c01      	ldr	r4, [sp, #4]
 801b300:	b289      	uxth	r1, r1
 801b302:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801b306:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801b30a:	1ba4      	subs	r4, r4, r6
 801b30c:	9e01      	ldr	r6, [sp, #4]
 801b30e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801b312:	eba6 0608 	sub.w	r6, r6, r8
 801b316:	b2a4      	uxth	r4, r4
 801b318:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801b31c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b320:	b2b6      	uxth	r6, r6
 801b322:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b326:	4373      	muls	r3, r6
 801b328:	ea42 0e0e 	orr.w	lr, r2, lr
 801b32c:	fb0c 3304 	mla	r3, ip, r4, r3
 801b330:	9c02      	ldr	r4, [sp, #8]
 801b332:	fa1f f28e 	uxth.w	r2, lr
 801b336:	fb04 3505 	mla	r5, r4, r5, r3
 801b33a:	10d4      	asrs	r4, r2, #3
 801b33c:	fb08 5707 	mla	r7, r8, r7, r5
 801b340:	1215      	asrs	r5, r2, #8
 801b342:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801b346:	00d2      	lsls	r2, r2, #3
 801b348:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801b34c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b350:	b2d2      	uxtb	r2, r2
 801b352:	434f      	muls	r7, r1
 801b354:	1c7b      	adds	r3, r7, #1
 801b356:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b35a:	1203      	asrs	r3, r0, #8
 801b35c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801b360:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b364:	b2ff      	uxtb	r7, r7
 801b366:	fb13 f307 	smulbb	r3, r3, r7
 801b36a:	fb05 3501 	mla	r5, r5, r1, r3
 801b36e:	10c3      	asrs	r3, r0, #3
 801b370:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b374:	b2ad      	uxth	r5, r5
 801b376:	fb13 f307 	smulbb	r3, r3, r7
 801b37a:	fb04 3401 	mla	r4, r4, r1, r3
 801b37e:	00c3      	lsls	r3, r0, #3
 801b380:	b2db      	uxtb	r3, r3
 801b382:	b2a4      	uxth	r4, r4
 801b384:	fb13 f307 	smulbb	r3, r3, r7
 801b388:	fb02 3101 	mla	r1, r2, r1, r3
 801b38c:	1c6b      	adds	r3, r5, #1
 801b38e:	1c62      	adds	r2, r4, #1
 801b390:	b289      	uxth	r1, r1
 801b392:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b396:	1c4b      	adds	r3, r1, #1
 801b398:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801b39c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b3a0:	9a03      	ldr	r2, [sp, #12]
 801b3a2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b3a6:	0964      	lsrs	r4, r4, #5
 801b3a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b3ac:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b3b0:	432b      	orrs	r3, r5
 801b3b2:	4323      	orrs	r3, r4
 801b3b4:	8013      	strh	r3, [r2, #0]
 801b3b6:	b005      	add	sp, #20
 801b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3bc:	f04f 0c00 	mov.w	ip, #0
 801b3c0:	4664      	mov	r4, ip
 801b3c2:	e6d6      	b.n	801b172 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801b3c4:	2300      	movs	r3, #0
 801b3c6:	469c      	mov	ip, r3
 801b3c8:	461a      	mov	r2, r3
 801b3ca:	461c      	mov	r4, r3
 801b3cc:	e6f8      	b.n	801b1c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	e6f5      	b.n	801b1c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801b3d4:	460b      	mov	r3, r1
 801b3d6:	460a      	mov	r2, r1
 801b3d8:	e6f2      	b.n	801b1c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801b3da:	2500      	movs	r5, #0
 801b3dc:	46ab      	mov	fp, r5
 801b3de:	e720      	b.n	801b222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801b3e0:	2700      	movs	r7, #0
 801b3e2:	463d      	mov	r5, r7
 801b3e4:	4638      	mov	r0, r7
 801b3e6:	46bb      	mov	fp, r7
 801b3e8:	e745      	b.n	801b276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801b3ea:	4677      	mov	r7, lr
 801b3ec:	4675      	mov	r5, lr
 801b3ee:	4670      	mov	r0, lr
 801b3f0:	46f3      	mov	fp, lr
 801b3f2:	e740      	b.n	801b276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801b3f4:	2700      	movs	r7, #0
 801b3f6:	4638      	mov	r0, r7
 801b3f8:	e73d      	b.n	801b276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801b3fa:	460f      	mov	r7, r1
 801b3fc:	4608      	mov	r0, r1
 801b3fe:	e73a      	b.n	801b276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801b400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b404:	b097      	sub	sp, #92	; 0x5c
 801b406:	9214      	str	r2, [sp, #80]	; 0x50
 801b408:	9308      	str	r3, [sp, #32]
 801b40a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b40c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b410:	9015      	str	r0, [sp, #84]	; 0x54
 801b412:	9312      	str	r3, [sp, #72]	; 0x48
 801b414:	6850      	ldr	r0, [r2, #4]
 801b416:	9111      	str	r1, [sp, #68]	; 0x44
 801b418:	6812      	ldr	r2, [r2, #0]
 801b41a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801b41e:	fb00 1303 	mla	r3, r0, r3, r1
 801b422:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b426:	9309      	str	r3, [sp, #36]	; 0x24
 801b428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	930b      	str	r3, [sp, #44]	; 0x2c
 801b42e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b430:	685b      	ldr	r3, [r3, #4]
 801b432:	930c      	str	r3, [sp, #48]	; 0x30
 801b434:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801b438:	930a      	str	r3, [sp, #40]	; 0x28
 801b43a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	dc03      	bgt.n	801b448 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b442:	2b00      	cmp	r3, #0
 801b444:	f340 83cd 	ble.w	801bbe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801b448:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b44a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b44e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b452:	1e48      	subs	r0, r1, #1
 801b454:	1e55      	subs	r5, r2, #1
 801b456:	9b08      	ldr	r3, [sp, #32]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	f340 81a5 	ble.w	801b7a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801b45e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801b460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b462:	1436      	asrs	r6, r6, #16
 801b464:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b468:	d406      	bmi.n	801b478 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b46a:	4286      	cmp	r6, r0
 801b46c:	da04      	bge.n	801b478 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b46e:	2b00      	cmp	r3, #0
 801b470:	db02      	blt.n	801b478 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b472:	42ab      	cmp	r3, r5
 801b474:	f2c0 8199 	blt.w	801b7aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b478:	3601      	adds	r6, #1
 801b47a:	f100 8186 	bmi.w	801b78a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b47e:	42b1      	cmp	r1, r6
 801b480:	f2c0 8183 	blt.w	801b78a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b484:	3301      	adds	r3, #1
 801b486:	f100 8180 	bmi.w	801b78a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b48a:	429a      	cmp	r2, r3
 801b48c:	f2c0 817d 	blt.w	801b78a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b490:	9b08      	ldr	r3, [sp, #32]
 801b492:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801b496:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b498:	9313      	str	r3, [sp, #76]	; 0x4c
 801b49a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f340 81a6 	ble.w	801b7ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b4a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b4a4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801b4a6:	1418      	asrs	r0, r3, #16
 801b4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b4aa:	142d      	asrs	r5, r5, #16
 801b4ac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801b4b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b4b2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801b4b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b4b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b4bc:	f100 81fa 	bmi.w	801b8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b4c0:	f102 3eff 	add.w	lr, r2, #4294967295
 801b4c4:	4575      	cmp	r5, lr
 801b4c6:	f280 81f5 	bge.w	801b8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	f2c0 81f2 	blt.w	801b8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b4d0:	f103 3eff 	add.w	lr, r3, #4294967295
 801b4d4:	4570      	cmp	r0, lr
 801b4d6:	f280 81ed 	bge.w	801b8b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b4da:	b212      	sxth	r2, r2
 801b4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4de:	fa1f fe81 	uxth.w	lr, r1
 801b4e2:	fb00 5002 	mla	r0, r0, r2, r5
 801b4e6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801b4ea:	eb03 0a00 	add.w	sl, r3, r0
 801b4ee:	f813 9000 	ldrb.w	r9, [r3, r0]
 801b4f2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801b4f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	f1bc 0f00 	cmp.w	ip, #0
 801b500:	f000 81bb 	beq.w	801b87a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801b504:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801b508:	eb0a 0b02 	add.w	fp, sl, r2
 801b50c:	fa1f fa8c 	uxth.w	sl, ip
 801b510:	940d      	str	r4, [sp, #52]	; 0x34
 801b512:	fb0a fe0e 	mul.w	lr, sl, lr
 801b516:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801b51a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801b51e:	eba5 050e 	sub.w	r5, r5, lr
 801b522:	940e      	str	r4, [sp, #56]	; 0x38
 801b524:	fa1f fa8a 	uxth.w	sl, sl
 801b528:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b52a:	b2ad      	uxth	r5, r5
 801b52c:	eba3 030a 	sub.w	r3, r3, sl
 801b530:	fb08 f505 	mul.w	r5, r8, r5
 801b534:	b29b      	uxth	r3, r3
 801b536:	fb09 5303 	mla	r3, r9, r3, r5
 801b53a:	fb0a 3304 	mla	r3, sl, r4, r3
 801b53e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b540:	fb0e 3304 	mla	r3, lr, r4, r3
 801b544:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b548:	2b00      	cmp	r3, #0
 801b54a:	f000 8111 	beq.w	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b54e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b550:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b554:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801b558:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801b55c:	f000 8192 	beq.w	801b884 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801b560:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801b564:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801b568:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b56c:	fb0a fe0e 	mul.w	lr, sl, lr
 801b570:	fb09 f000 	mul.w	r0, r9, r0
 801b574:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801b578:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801b57c:	f100 0b20 	add.w	fp, r0, #32
 801b580:	44ce      	add	lr, r9
 801b582:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801b586:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801b58a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b58e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b592:	ea4e 0909 	orr.w	r9, lr, r9
 801b596:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b59a:	8868      	ldrh	r0, [r5, #2]
 801b59c:	d019      	beq.n	801b5d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b59e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801b5a2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801b5a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b5aa:	fb0a fe0e 	mul.w	lr, sl, lr
 801b5ae:	fb08 f800 	mul.w	r8, r8, r0
 801b5b2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801b5b6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801b5ba:	f108 0b20 	add.w	fp, r8, #32
 801b5be:	4486      	add	lr, r0
 801b5c0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801b5c4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801b5c8:	0a00      	lsrs	r0, r0, #8
 801b5ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b5ce:	ea4e 0000 	orr.w	r0, lr, r0
 801b5d2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801b5d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b5da:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801b5de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b5e2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b5e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b5ea:	ea4e 0909 	orr.w	r9, lr, r9
 801b5ee:	ea4a 0000 	orr.w	r0, sl, r0
 801b5f2:	f1bc 0f00 	cmp.w	ip, #0
 801b5f6:	f000 8147 	beq.w	801b888 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801b5fa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801b5fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b600:	3a01      	subs	r2, #1
 801b602:	2cff      	cmp	r4, #255	; 0xff
 801b604:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b608:	f102 0202 	add.w	r2, r2, #2
 801b60c:	eb05 0e02 	add.w	lr, r5, r2
 801b610:	5aaa      	ldrh	r2, [r5, r2]
 801b612:	d018      	beq.n	801b646 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801b614:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801b618:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b61c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801b620:	fb04 fa02 	mul.w	sl, r4, r2
 801b624:	fb08 f805 	mul.w	r8, r8, r5
 801b628:	f10a 0520 	add.w	r5, sl, #32
 801b62c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801b630:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b634:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801b638:	4442      	add	r2, r8
 801b63a:	0a2d      	lsrs	r5, r5, #8
 801b63c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801b640:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b644:	432a      	orrs	r2, r5
 801b646:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b648:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801b64c:	2cff      	cmp	r4, #255	; 0xff
 801b64e:	d01a      	beq.n	801b686 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801b650:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801b654:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b658:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801b65c:	fb04 fa05 	mul.w	sl, r4, r5
 801b660:	fb08 f80e 	mul.w	r8, r8, lr
 801b664:	f10a 0e20 	add.w	lr, sl, #32
 801b668:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801b66c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b670:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801b674:	4445      	add	r5, r8
 801b676:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b67a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801b67e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801b682:	ea45 050e 	orr.w	r5, r5, lr
 801b686:	fb1c fe01 	smulbb	lr, ip, r1
 801b68a:	f1cc 0810 	rsb	r8, ip, #16
 801b68e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801b692:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b696:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801b69a:	eba8 0801 	sub.w	r8, r8, r1
 801b69e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801b6a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b6a6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801b6aa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b6ae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801b6b2:	ea4a 0202 	orr.w	r2, sl, r2
 801b6b6:	4341      	muls	r1, r0
 801b6b8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801b6bc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b6c0:	fb09 1108 	mla	r1, r9, r8, r1
 801b6c4:	ea4b 0505 	orr.w	r5, fp, r5
 801b6c8:	fb0c 1102 	mla	r1, ip, r2, r1
 801b6cc:	fb0e 1e05 	mla	lr, lr, r5, r1
 801b6d0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801b6d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801b6d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b6dc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b6e0:	ea42 0e0e 	orr.w	lr, r2, lr
 801b6e4:	fa1f f28e 	uxth.w	r2, lr
 801b6e8:	2bff      	cmp	r3, #255	; 0xff
 801b6ea:	d103      	bne.n	801b6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b6ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6ee:	29ff      	cmp	r1, #255	; 0xff
 801b6f0:	f000 80de 	beq.w	801b8b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801b6f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b6f6:	1215      	asrs	r5, r2, #8
 801b6f8:	8838      	ldrh	r0, [r7, #0]
 801b6fa:	434b      	muls	r3, r1
 801b6fc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b700:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b702:	f103 0c01 	add.w	ip, r3, #1
 801b706:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801b70a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801b70e:	fa5f fc83 	uxtb.w	ip, r3
 801b712:	1203      	asrs	r3, r0, #8
 801b714:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b718:	fb13 f30c 	smulbb	r3, r3, ip
 801b71c:	fb05 3501 	mla	r5, r5, r1, r3
 801b720:	10c3      	asrs	r3, r0, #3
 801b722:	10d1      	asrs	r1, r2, #3
 801b724:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b728:	00d2      	lsls	r2, r2, #3
 801b72a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b72e:	b2ad      	uxth	r5, r5
 801b730:	fb13 f30c 	smulbb	r3, r3, ip
 801b734:	b2d2      	uxtb	r2, r2
 801b736:	fb01 3104 	mla	r1, r1, r4, r3
 801b73a:	00c3      	lsls	r3, r0, #3
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	b289      	uxth	r1, r1
 801b740:	fb13 f30c 	smulbb	r3, r3, ip
 801b744:	fb02 3304 	mla	r3, r2, r4, r3
 801b748:	b29a      	uxth	r2, r3
 801b74a:	1c6b      	adds	r3, r5, #1
 801b74c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b750:	1c53      	adds	r3, r2, #1
 801b752:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b756:	1c4a      	adds	r2, r1, #1
 801b758:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b75c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b760:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b764:	0949      	lsrs	r1, r1, #5
 801b766:	432b      	orrs	r3, r5
 801b768:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b76c:	430b      	orrs	r3, r1
 801b76e:	803b      	strh	r3, [r7, #0]
 801b770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b772:	3702      	adds	r7, #2
 801b774:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801b776:	4413      	add	r3, r2
 801b778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b77a:	9321      	str	r3, [sp, #132]	; 0x84
 801b77c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b77e:	441a      	add	r2, r3
 801b780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b782:	3b01      	subs	r3, #1
 801b784:	9222      	str	r2, [sp, #136]	; 0x88
 801b786:	9313      	str	r3, [sp, #76]	; 0x4c
 801b788:	e687      	b.n	801b49a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b78c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801b78e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801b790:	4433      	add	r3, r6
 801b792:	9321      	str	r3, [sp, #132]	; 0x84
 801b794:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b796:	441c      	add	r4, r3
 801b798:	9b08      	ldr	r3, [sp, #32]
 801b79a:	3b01      	subs	r3, #1
 801b79c:	9422      	str	r4, [sp, #136]	; 0x88
 801b79e:	9308      	str	r3, [sp, #32]
 801b7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7a2:	3302      	adds	r3, #2
 801b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b7a6:	e656      	b.n	801b456 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b7a8:	d028      	beq.n	801b7fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801b7aa:	9b08      	ldr	r3, [sp, #32]
 801b7ac:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801b7ae:	3b01      	subs	r3, #1
 801b7b0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801b7b2:	fb00 5003 	mla	r0, r0, r3, r5
 801b7b6:	1400      	asrs	r0, r0, #16
 801b7b8:	f53f ae6a 	bmi.w	801b490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b7bc:	3901      	subs	r1, #1
 801b7be:	4288      	cmp	r0, r1
 801b7c0:	f6bf ae66 	bge.w	801b490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b7c4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b7c6:	9822      	ldr	r0, [sp, #136]	; 0x88
 801b7c8:	fb01 0303 	mla	r3, r1, r3, r0
 801b7cc:	141b      	asrs	r3, r3, #16
 801b7ce:	f53f ae5f 	bmi.w	801b490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b7d2:	3a01      	subs	r2, #1
 801b7d4:	4293      	cmp	r3, r2
 801b7d6:	f6bf ae5b 	bge.w	801b490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b7da:	9b08      	ldr	r3, [sp, #32]
 801b7dc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801b7e0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801b7e4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b7e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	f300 8082 	bgt.w	801b8f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801b7ee:	9b08      	ldr	r3, [sp, #32]
 801b7f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801b7fa:	9309      	str	r3, [sp, #36]	; 0x24
 801b7fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	f340 81ef 	ble.w	801bbe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801b804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b80a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b80e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b812:	eef0 6a62 	vmov.f32	s13, s5
 801b816:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b81a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b81e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b822:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801b826:	eef0 6a43 	vmov.f32	s13, s6
 801b82a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b82e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801b832:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b836:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b83a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b83e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b846:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b84a:	ee12 2a90 	vmov	r2, s5
 801b84e:	eef0 2a47 	vmov.f32	s5, s14
 801b852:	fb92 f3f3 	sdiv	r3, r2, r3
 801b856:	ee13 2a10 	vmov	r2, s6
 801b85a:	9323      	str	r3, [sp, #140]	; 0x8c
 801b85c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b85e:	eeb0 3a67 	vmov.f32	s6, s15
 801b862:	fb92 f3f3 	sdiv	r3, r2, r3
 801b866:	9324      	str	r3, [sp, #144]	; 0x90
 801b868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b86a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b86c:	3b01      	subs	r3, #1
 801b86e:	9311      	str	r3, [sp, #68]	; 0x44
 801b870:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b872:	bf08      	it	eq
 801b874:	4613      	moveq	r3, r2
 801b876:	9308      	str	r3, [sp, #32]
 801b878:	e5df      	b.n	801b43a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b87a:	fb08 f505 	mul.w	r5, r8, r5
 801b87e:	fb09 5303 	mla	r3, r9, r3, r5
 801b882:	e65f      	b.n	801b544 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801b884:	4681      	mov	r9, r0
 801b886:	e686      	b.n	801b596 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801b888:	f1c1 0210 	rsb	r2, r1, #16
 801b88c:	4341      	muls	r1, r0
 801b88e:	fb09 1902 	mla	r9, r9, r2, r1
 801b892:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b896:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801b89a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b89e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b8a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b8a6:	ea42 0909 	orr.w	r9, r2, r9
 801b8aa:	fa1f f289 	uxth.w	r2, r9
 801b8ae:	e71b      	b.n	801b6e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801b8b0:	803a      	strh	r2, [r7, #0]
 801b8b2:	e75d      	b.n	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8b4:	f115 0e01 	adds.w	lr, r5, #1
 801b8b8:	f53f af5a 	bmi.w	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8bc:	4572      	cmp	r2, lr
 801b8be:	f6ff af57 	blt.w	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8c2:	f110 0e01 	adds.w	lr, r0, #1
 801b8c6:	f53f af53 	bmi.w	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8ca:	4573      	cmp	r3, lr
 801b8cc:	f6ff af50 	blt.w	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b8d2:	b21b      	sxth	r3, r3
 801b8d4:	b212      	sxth	r2, r2
 801b8d6:	9502      	str	r5, [sp, #8]
 801b8d8:	9301      	str	r3, [sp, #4]
 801b8da:	9200      	str	r2, [sp, #0]
 801b8dc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801b8e0:	e9cd c405 	strd	ip, r4, [sp, #20]
 801b8e4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801b8e8:	4639      	mov	r1, r7
 801b8ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b8ec:	f7ff fc02 	bl	801b0f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801b8f0:	e73e      	b.n	801b770 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801b8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b8f4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b8f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b8fa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801b8fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b900:	fa1f fc82 	uxth.w	ip, r2
 801b904:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b90a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801b90e:	141f      	asrs	r7, r3, #16
 801b910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b912:	141b      	asrs	r3, r3, #16
 801b914:	fb01 3707 	mla	r7, r1, r7, r3
 801b918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b91a:	eb03 0a07 	add.w	sl, r3, r7
 801b91e:	f813 9007 	ldrb.w	r9, [r3, r7]
 801b922:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b926:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b92a:	b29b      	uxth	r3, r3
 801b92c:	2d00      	cmp	r5, #0
 801b92e:	f000 813d 	beq.w	801bbac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801b932:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801b936:	eb0a 0b01 	add.w	fp, sl, r1
 801b93a:	fa1f fa85 	uxth.w	sl, r5
 801b93e:	940f      	str	r4, [sp, #60]	; 0x3c
 801b940:	fb0a fc0c 	mul.w	ip, sl, ip
 801b944:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801b948:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801b94c:	eba0 000c 	sub.w	r0, r0, ip
 801b950:	9410      	str	r4, [sp, #64]	; 0x40
 801b952:	fa1f fa8a 	uxth.w	sl, sl
 801b956:	b280      	uxth	r0, r0
 801b958:	eba3 030a 	sub.w	r3, r3, sl
 801b95c:	fb08 f000 	mul.w	r0, r8, r0
 801b960:	b29b      	uxth	r3, r3
 801b962:	fb09 0303 	mla	r3, r9, r3, r0
 801b966:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b968:	fb0a 3300 	mla	r3, sl, r0, r3
 801b96c:	fb0c 3304 	mla	r3, ip, r4, r3
 801b970:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b974:	2b00      	cmp	r3, #0
 801b976:	f000 810b 	beq.w	801bb90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801b97a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b97c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b980:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b982:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801b986:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801b98a:	f000 8114 	beq.w	801bbb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801b98e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b992:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801b996:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b99a:	fb0a fc0c 	mul.w	ip, sl, ip
 801b99e:	fb09 f707 	mul.w	r7, r9, r7
 801b9a2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801b9a6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b9aa:	f107 0b20 	add.w	fp, r7, #32
 801b9ae:	44cc      	add	ip, r9
 801b9b0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801b9b4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b9b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b9bc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b9c0:	ea4c 0909 	orr.w	r9, ip, r9
 801b9c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b9c8:	8847      	ldrh	r7, [r0, #2]
 801b9ca:	d019      	beq.n	801ba00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801b9cc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b9d0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801b9d4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b9d8:	fb0a fc0c 	mul.w	ip, sl, ip
 801b9dc:	fb08 f807 	mul.w	r8, r8, r7
 801b9e0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801b9e4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b9e8:	f108 0b20 	add.w	fp, r8, #32
 801b9ec:	44bc      	add	ip, r7
 801b9ee:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801b9f2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b9f6:	0a3f      	lsrs	r7, r7, #8
 801b9f8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b9fc:	ea4c 0707 	orr.w	r7, ip, r7
 801ba00:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ba04:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ba08:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ba0c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ba10:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ba14:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ba18:	ea4c 0909 	orr.w	r9, ip, r9
 801ba1c:	ea4a 0707 	orr.w	r7, sl, r7
 801ba20:	2d00      	cmp	r5, #0
 801ba22:	f000 80ca 	beq.w	801bbba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801ba26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ba2a:	3901      	subs	r1, #1
 801ba2c:	0049      	lsls	r1, r1, #1
 801ba2e:	3102      	adds	r1, #2
 801ba30:	eb00 0c01 	add.w	ip, r0, r1
 801ba34:	5a41      	ldrh	r1, [r0, r1]
 801ba36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ba38:	28ff      	cmp	r0, #255	; 0xff
 801ba3a:	d019      	beq.n	801ba70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801ba3c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801ba40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ba42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ba46:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ba4a:	fb04 fa01 	mul.w	sl, r4, r1
 801ba4e:	fb08 f800 	mul.w	r8, r8, r0
 801ba52:	f10a 0020 	add.w	r0, sl, #32
 801ba56:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801ba5a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ba5e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801ba62:	4441      	add	r1, r8
 801ba64:	0a00      	lsrs	r0, r0, #8
 801ba66:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801ba6a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ba6e:	4301      	orrs	r1, r0
 801ba70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ba72:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801ba76:	2cff      	cmp	r4, #255	; 0xff
 801ba78:	d01a      	beq.n	801bab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801ba7a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801ba7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ba82:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ba86:	fb04 fa00 	mul.w	sl, r4, r0
 801ba8a:	fb08 f80c 	mul.w	r8, r8, ip
 801ba8e:	f10a 0c20 	add.w	ip, sl, #32
 801ba92:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ba96:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ba9a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ba9e:	4440      	add	r0, r8
 801baa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801baa4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801baa8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801baac:	ea40 000c 	orr.w	r0, r0, ip
 801bab0:	fb15 fc02 	smulbb	ip, r5, r2
 801bab4:	f1c5 0810 	rsb	r8, r5, #16
 801bab8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801babc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bac0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801bac4:	eba8 0802 	sub.w	r8, r8, r2
 801bac8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801bacc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bad0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801bad4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bad8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801badc:	ea4a 0101 	orr.w	r1, sl, r1
 801bae0:	437a      	muls	r2, r7
 801bae2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801bae6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801baea:	fb09 2208 	mla	r2, r9, r8, r2
 801baee:	ea4b 0000 	orr.w	r0, fp, r0
 801baf2:	fb05 2201 	mla	r2, r5, r1, r2
 801baf6:	fb0c 2200 	mla	r2, ip, r0, r2
 801bafa:	0d57      	lsrs	r7, r2, #21
 801bafc:	0952      	lsrs	r2, r2, #5
 801bafe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801bb02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bb06:	433a      	orrs	r2, r7
 801bb08:	2bff      	cmp	r3, #255	; 0xff
 801bb0a:	b292      	uxth	r2, r2
 801bb0c:	d102      	bne.n	801bb14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801bb0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bb10:	29ff      	cmp	r1, #255	; 0xff
 801bb12:	d063      	beq.n	801bbdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801bb14:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bb16:	1215      	asrs	r5, r2, #8
 801bb18:	f8be 1000 	ldrh.w	r1, [lr]
 801bb1c:	4343      	muls	r3, r0
 801bb1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bb20:	10cf      	asrs	r7, r1, #3
 801bb22:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801bb26:	1c58      	adds	r0, r3, #1
 801bb28:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bb2c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801bb30:	1208      	asrs	r0, r1, #8
 801bb32:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801bb36:	00c9      	lsls	r1, r1, #3
 801bb38:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bb3c:	b2db      	uxtb	r3, r3
 801bb3e:	b2c9      	uxtb	r1, r1
 801bb40:	fb10 f003 	smulbb	r0, r0, r3
 801bb44:	fb11 f103 	smulbb	r1, r1, r3
 801bb48:	fb05 0504 	mla	r5, r5, r4, r0
 801bb4c:	10d0      	asrs	r0, r2, #3
 801bb4e:	fb17 f703 	smulbb	r7, r7, r3
 801bb52:	00d2      	lsls	r2, r2, #3
 801bb54:	b2ad      	uxth	r5, r5
 801bb56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bb5a:	b2d2      	uxtb	r2, r2
 801bb5c:	fb00 7004 	mla	r0, r0, r4, r7
 801bb60:	1c6b      	adds	r3, r5, #1
 801bb62:	fb02 1204 	mla	r2, r2, r4, r1
 801bb66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801bb6a:	b292      	uxth	r2, r2
 801bb6c:	b280      	uxth	r0, r0
 801bb6e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801bb72:	1c57      	adds	r7, r2, #1
 801bb74:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801bb78:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bb7c:	433d      	orrs	r5, r7
 801bb7e:	1c47      	adds	r7, r0, #1
 801bb80:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801bb84:	097f      	lsrs	r7, r7, #5
 801bb86:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801bb8a:	433d      	orrs	r5, r7
 801bb8c:	f8ae 5000 	strh.w	r5, [lr]
 801bb90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb92:	f10e 0e02 	add.w	lr, lr, #2
 801bb96:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801bb98:	4413      	add	r3, r2
 801bb9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bb9c:	9321      	str	r3, [sp, #132]	; 0x84
 801bb9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bba0:	441a      	add	r2, r3
 801bba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bba4:	3b01      	subs	r3, #1
 801bba6:	9222      	str	r2, [sp, #136]	; 0x88
 801bba8:	9313      	str	r3, [sp, #76]	; 0x4c
 801bbaa:	e61c      	b.n	801b7e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801bbac:	fb08 f000 	mul.w	r0, r8, r0
 801bbb0:	fb09 0303 	mla	r3, r9, r3, r0
 801bbb4:	e6dc      	b.n	801b970 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801bbb6:	46b9      	mov	r9, r7
 801bbb8:	e704      	b.n	801b9c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801bbba:	f1c2 0110 	rsb	r1, r2, #16
 801bbbe:	437a      	muls	r2, r7
 801bbc0:	fb09 2901 	mla	r9, r9, r1, r2
 801bbc4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801bbc8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801bbcc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801bbd0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bbd4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bbd8:	4302      	orrs	r2, r0
 801bbda:	e795      	b.n	801bb08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801bbdc:	f8ae 2000 	strh.w	r2, [lr]
 801bbe0:	e7d6      	b.n	801bb90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801bbe2:	b017      	add	sp, #92	; 0x5c
 801bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbec:	b085      	sub	sp, #20
 801bbee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801bbf2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801bbf6:	2800      	cmp	r0, #0
 801bbf8:	9103      	str	r1, [sp, #12]
 801bbfa:	fb00 7406 	mla	r4, r0, r6, r7
 801bbfe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801bc02:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801bc06:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801bc0a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801bc0e:	eb02 0904 	add.w	r9, r2, r4
 801bc12:	9501      	str	r5, [sp, #4]
 801bc14:	f2c0 8141 	blt.w	801be9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801bc18:	4583      	cmp	fp, r0
 801bc1a:	f340 813e 	ble.w	801be9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801bc1e:	2f00      	cmp	r7, #0
 801bc20:	f2c0 8137 	blt.w	801be92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801bc24:	42be      	cmp	r6, r7
 801bc26:	f340 8134 	ble.w	801be92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801bc2a:	f812 c004 	ldrb.w	ip, [r2, r4]
 801bc2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801bc32:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801bc36:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801bc3a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801bc3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bc42:	4355      	muls	r5, r2
 801bc44:	fb0c f203 	mul.w	r2, ip, r3
 801bc48:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801bc4c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801bc50:	441d      	add	r5, r3
 801bc52:	f102 0320 	add.w	r3, r2, #32
 801bc56:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bc5a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801bc5e:	0a1b      	lsrs	r3, r3, #8
 801bc60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bc64:	431c      	orrs	r4, r3
 801bc66:	1c7b      	adds	r3, r7, #1
 801bc68:	f100 811c 	bmi.w	801bea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801bc6c:	429e      	cmp	r6, r3
 801bc6e:	f340 8119 	ble.w	801bea4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801bc72:	2900      	cmp	r1, #0
 801bc74:	f000 8119 	beq.w	801beaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801bc78:	9a01      	ldr	r2, [sp, #4]
 801bc7a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801bc7e:	8855      	ldrh	r5, [r2, #2]
 801bc80:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801bc84:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801bc88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bc8c:	fb08 f802 	mul.w	r8, r8, r2
 801bc90:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801bc94:	435d      	muls	r5, r3
 801bc96:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801bc9a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bc9e:	44d0      	add	r8, sl
 801bca0:	f105 0a20 	add.w	sl, r5, #32
 801bca4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801bca8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801bcac:	0a2d      	lsrs	r5, r5, #8
 801bcae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bcb2:	432a      	orrs	r2, r5
 801bcb4:	3001      	adds	r0, #1
 801bcb6:	f100 80fe 	bmi.w	801beb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801bcba:	4583      	cmp	fp, r0
 801bcbc:	f340 80fb 	ble.w	801beb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801bcc0:	f1be 0f00 	cmp.w	lr, #0
 801bcc4:	f000 80fc 	beq.w	801bec0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801bcc8:	2f00      	cmp	r7, #0
 801bcca:	f2c0 80f1 	blt.w	801beb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801bcce:	42be      	cmp	r6, r7
 801bcd0:	f340 80ee 	ble.w	801beb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801bcd4:	9801      	ldr	r0, [sp, #4]
 801bcd6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801bcda:	f819 5006 	ldrb.w	r5, [r9, r6]
 801bcde:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801bce2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bce6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801bcea:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bcee:	fb0a fa00 	mul.w	sl, sl, r0
 801bcf2:	fb05 f808 	mul.w	r8, r5, r8
 801bcf6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801bcfa:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801bcfe:	4482      	add	sl, r0
 801bd00:	f108 0020 	add.w	r0, r8, #32
 801bd04:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801bd08:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801bd0c:	0a00      	lsrs	r0, r0, #8
 801bd0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bd12:	ea4b 0b00 	orr.w	fp, fp, r0
 801bd16:	3701      	adds	r7, #1
 801bd18:	f100 80d7 	bmi.w	801beca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801bd1c:	42be      	cmp	r6, r7
 801bd1e:	f340 80d4 	ble.w	801beca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801bd22:	2900      	cmp	r1, #0
 801bd24:	f000 80d4 	beq.w	801bed0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801bd28:	3601      	adds	r6, #1
 801bd2a:	9801      	ldr	r0, [sp, #4]
 801bd2c:	f819 7006 	ldrb.w	r7, [r9, r6]
 801bd30:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801bd34:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801bd38:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801bd3c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bd40:	fb09 f906 	mul.w	r9, r9, r6
 801bd44:	fb07 f800 	mul.w	r8, r7, r0
 801bd48:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801bd4c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801bd50:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801bd54:	44d1      	add	r9, sl
 801bd56:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801bd5a:	f108 0020 	add.w	r0, r8, #32
 801bd5e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801bd62:	0a00      	lsrs	r0, r0, #8
 801bd64:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bd68:	4330      	orrs	r0, r6
 801bd6a:	b28e      	uxth	r6, r1
 801bd6c:	fa1f f98e 	uxth.w	r9, lr
 801bd70:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801bd74:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801bd78:	fb06 f809 	mul.w	r8, r6, r9
 801bd7c:	0136      	lsls	r6, r6, #4
 801bd7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bd82:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801bd86:	9601      	str	r6, [sp, #4]
 801bd88:	ea4a 0404 	orr.w	r4, sl, r4
 801bd8c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801bd90:	fa1f f689 	uxth.w	r6, r9
 801bd94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bd98:	fb11 f90e 	smulbb	r9, r1, lr
 801bd9c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bda0:	9602      	str	r6, [sp, #8]
 801bda2:	4626      	mov	r6, r4
 801bda4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801bda8:	f1ce 0410 	rsb	r4, lr, #16
 801bdac:	ea4a 0202 	orr.w	r2, sl, r2
 801bdb0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801bdb4:	1a64      	subs	r4, r4, r1
 801bdb6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801bdba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bdbe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bdc2:	434a      	muls	r2, r1
 801bdc4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801bdc8:	ea4a 0000 	orr.w	r0, sl, r0
 801bdcc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801bdd0:	fb04 2406 	mla	r4, r4, r6, r2
 801bdd4:	9903      	ldr	r1, [sp, #12]
 801bdd6:	fb09 4200 	mla	r2, r9, r0, r4
 801bdda:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801bdde:	9801      	ldr	r0, [sp, #4]
 801bde0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801bde4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801bde8:	8809      	ldrh	r1, [r1, #0]
 801bdea:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801bdee:	ea44 0b0b 	orr.w	fp, r4, fp
 801bdf2:	9c02      	ldr	r4, [sp, #8]
 801bdf4:	1b00      	subs	r0, r0, r4
 801bdf6:	9c01      	ldr	r4, [sp, #4]
 801bdf8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801bdfc:	eba4 0608 	sub.w	r6, r4, r8
 801be00:	b280      	uxth	r0, r0
 801be02:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801be06:	b2b6      	uxth	r6, r6
 801be08:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801be0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801be10:	4373      	muls	r3, r6
 801be12:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801be16:	fb0c 3300 	mla	r3, ip, r0, r3
 801be1a:	9802      	ldr	r0, [sp, #8]
 801be1c:	ea42 0e0e 	orr.w	lr, r2, lr
 801be20:	fb00 3505 	mla	r5, r0, r5, r3
 801be24:	120b      	asrs	r3, r1, #8
 801be26:	10c8      	asrs	r0, r1, #3
 801be28:	fb08 5707 	mla	r7, r8, r7, r5
 801be2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801be30:	00c9      	lsls	r1, r1, #3
 801be32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801be36:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801be3a:	fa1f f28e 	uxth.w	r2, lr
 801be3e:	b2c9      	uxtb	r1, r1
 801be40:	b2ff      	uxtb	r7, r7
 801be42:	437b      	muls	r3, r7
 801be44:	4378      	muls	r0, r7
 801be46:	434f      	muls	r7, r1
 801be48:	1c59      	adds	r1, r3, #1
 801be4a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801be4e:	1213      	asrs	r3, r2, #8
 801be50:	f023 0307 	bic.w	r3, r3, #7
 801be54:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801be58:	1c41      	adds	r1, r0, #1
 801be5a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801be5e:	10d1      	asrs	r1, r2, #3
 801be60:	021b      	lsls	r3, r3, #8
 801be62:	f021 0103 	bic.w	r1, r1, #3
 801be66:	00d2      	lsls	r2, r2, #3
 801be68:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801be6c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801be70:	00c9      	lsls	r1, r1, #3
 801be72:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801be76:	430b      	orrs	r3, r1
 801be78:	1c79      	adds	r1, r7, #1
 801be7a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801be7e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801be82:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801be86:	431a      	orrs	r2, r3
 801be88:	9b03      	ldr	r3, [sp, #12]
 801be8a:	801a      	strh	r2, [r3, #0]
 801be8c:	b005      	add	sp, #20
 801be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be92:	f04f 0c00 	mov.w	ip, #0
 801be96:	4664      	mov	r4, ip
 801be98:	e6e5      	b.n	801bc66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801be9a:	2300      	movs	r3, #0
 801be9c:	469c      	mov	ip, r3
 801be9e:	461a      	mov	r2, r3
 801bea0:	461c      	mov	r4, r3
 801bea2:	e707      	b.n	801bcb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801bea4:	2300      	movs	r3, #0
 801bea6:	461a      	mov	r2, r3
 801bea8:	e704      	b.n	801bcb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801beaa:	460b      	mov	r3, r1
 801beac:	460a      	mov	r2, r1
 801beae:	e701      	b.n	801bcb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801beb0:	2500      	movs	r5, #0
 801beb2:	46ab      	mov	fp, r5
 801beb4:	e72f      	b.n	801bd16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801beb6:	2700      	movs	r7, #0
 801beb8:	463d      	mov	r5, r7
 801beba:	4638      	mov	r0, r7
 801bebc:	46bb      	mov	fp, r7
 801bebe:	e754      	b.n	801bd6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801bec0:	4677      	mov	r7, lr
 801bec2:	4675      	mov	r5, lr
 801bec4:	4670      	mov	r0, lr
 801bec6:	46f3      	mov	fp, lr
 801bec8:	e74f      	b.n	801bd6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801beca:	2700      	movs	r7, #0
 801becc:	4638      	mov	r0, r7
 801bece:	e74c      	b.n	801bd6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801bed0:	460f      	mov	r7, r1
 801bed2:	4608      	mov	r0, r1
 801bed4:	e749      	b.n	801bd6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801bed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bedc:	b093      	sub	sp, #76	; 0x4c
 801bede:	9210      	str	r2, [sp, #64]	; 0x40
 801bee0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bee2:	9011      	str	r0, [sp, #68]	; 0x44
 801bee4:	910e      	str	r1, [sp, #56]	; 0x38
 801bee6:	6850      	ldr	r0, [r2, #4]
 801bee8:	9306      	str	r3, [sp, #24]
 801beea:	6812      	ldr	r2, [r2, #0]
 801beec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801bef0:	fb00 1303 	mla	r3, r0, r3, r1
 801bef4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bef8:	9307      	str	r3, [sp, #28]
 801befa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	9308      	str	r3, [sp, #32]
 801bf00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf02:	685b      	ldr	r3, [r3, #4]
 801bf04:	9309      	str	r3, [sp, #36]	; 0x24
 801bf06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	dc03      	bgt.n	801bf14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bf0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	f340 83b6 	ble.w	801c680 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801bf14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bf1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bf1e:	1e48      	subs	r0, r1, #1
 801bf20:	1e55      	subs	r5, r2, #1
 801bf22:	9b06      	ldr	r3, [sp, #24]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f340 8165 	ble.w	801c1f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bf2a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801bf2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf2e:	1436      	asrs	r6, r6, #16
 801bf30:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bf34:	d406      	bmi.n	801bf44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf36:	4286      	cmp	r6, r0
 801bf38:	da04      	bge.n	801bf44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	db02      	blt.n	801bf44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bf3e:	42ab      	cmp	r3, r5
 801bf40:	f2c0 8159 	blt.w	801c1f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bf44:	3601      	adds	r6, #1
 801bf46:	f100 8146 	bmi.w	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bf4a:	42b1      	cmp	r1, r6
 801bf4c:	f2c0 8143 	blt.w	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bf50:	3301      	adds	r3, #1
 801bf52:	f100 8140 	bmi.w	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bf56:	429a      	cmp	r2, r3
 801bf58:	f2c0 813d 	blt.w	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bf5c:	9b06      	ldr	r3, [sp, #24]
 801bf5e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801bf62:	9f07      	ldr	r7, [sp, #28]
 801bf64:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	f340 8166 	ble.w	801c23a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801bf6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf70:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801bf72:	1418      	asrs	r0, r3, #16
 801bf74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bf76:	142d      	asrs	r5, r5, #16
 801bf78:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801bf7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf7e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801bf82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bf88:	f100 81f0 	bmi.w	801c36c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bf8c:	f102 3eff 	add.w	lr, r2, #4294967295
 801bf90:	4575      	cmp	r5, lr
 801bf92:	f280 81eb 	bge.w	801c36c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bf96:	2800      	cmp	r0, #0
 801bf98:	f2c0 81e8 	blt.w	801c36c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bf9c:	f103 3eff 	add.w	lr, r3, #4294967295
 801bfa0:	4570      	cmp	r0, lr
 801bfa2:	f280 81e3 	bge.w	801c36c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801bfa6:	b212      	sxth	r2, r2
 801bfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfaa:	fa1f fe81 	uxth.w	lr, r1
 801bfae:	fb00 5002 	mla	r0, r0, r2, r5
 801bfb2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801bfb6:	eb03 0a00 	add.w	sl, r3, r0
 801bfba:	f813 9000 	ldrb.w	r9, [r3, r0]
 801bfbe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801bfc2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801bfc6:	b29b      	uxth	r3, r3
 801bfc8:	f1bc 0f00 	cmp.w	ip, #0
 801bfcc:	f000 817b 	beq.w	801c2c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801bfd0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801bfd4:	eb0a 0b02 	add.w	fp, sl, r2
 801bfd8:	fa1f fa8c 	uxth.w	sl, ip
 801bfdc:	940a      	str	r4, [sp, #40]	; 0x28
 801bfde:	fb0a fe0e 	mul.w	lr, sl, lr
 801bfe2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801bfe6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801bfea:	eba5 050e 	sub.w	r5, r5, lr
 801bfee:	940b      	str	r4, [sp, #44]	; 0x2c
 801bff0:	fa1f fa8a 	uxth.w	sl, sl
 801bff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bff6:	b2ad      	uxth	r5, r5
 801bff8:	eba3 030a 	sub.w	r3, r3, sl
 801bffc:	fb08 f505 	mul.w	r5, r8, r5
 801c000:	b29b      	uxth	r3, r3
 801c002:	fb09 5303 	mla	r3, r9, r3, r5
 801c006:	fb0a 3304 	mla	r3, sl, r4, r3
 801c00a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c00c:	fb0e 3304 	mla	r3, lr, r4, r3
 801c010:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c014:	2b00      	cmp	r3, #0
 801c016:	f000 80d1 	beq.w	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c01a:	9c08      	ldr	r4, [sp, #32]
 801c01c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c020:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801c024:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801c028:	f000 8152 	beq.w	801c2d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801c02c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801c030:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801c034:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c038:	fb0a fe0e 	mul.w	lr, sl, lr
 801c03c:	fb09 f000 	mul.w	r0, r9, r0
 801c040:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801c044:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801c048:	f100 0b20 	add.w	fp, r0, #32
 801c04c:	44ce      	add	lr, r9
 801c04e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801c052:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801c056:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c05a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c05e:	ea4e 0909 	orr.w	r9, lr, r9
 801c062:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c066:	8868      	ldrh	r0, [r5, #2]
 801c068:	d019      	beq.n	801c09e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c06a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801c06e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801c072:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c076:	fb0a fe0e 	mul.w	lr, sl, lr
 801c07a:	fb08 f800 	mul.w	r8, r8, r0
 801c07e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801c082:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801c086:	f108 0b20 	add.w	fp, r8, #32
 801c08a:	4486      	add	lr, r0
 801c08c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801c090:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801c094:	0a00      	lsrs	r0, r0, #8
 801c096:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c09a:	ea4e 0000 	orr.w	r0, lr, r0
 801c09e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801c0a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c0a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801c0aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c0ae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c0b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c0b6:	ea4e 0909 	orr.w	r9, lr, r9
 801c0ba:	ea4a 0000 	orr.w	r0, sl, r0
 801c0be:	f1bc 0f00 	cmp.w	ip, #0
 801c0c2:	f000 8107 	beq.w	801c2d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801c0c6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801c0ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c0cc:	3a01      	subs	r2, #1
 801c0ce:	2cff      	cmp	r4, #255	; 0xff
 801c0d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c0d4:	f102 0202 	add.w	r2, r2, #2
 801c0d8:	eb05 0e02 	add.w	lr, r5, r2
 801c0dc:	5aaa      	ldrh	r2, [r5, r2]
 801c0de:	d018      	beq.n	801c112 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c0e0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801c0e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c0e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801c0ec:	fb04 fa02 	mul.w	sl, r4, r2
 801c0f0:	fb08 f805 	mul.w	r8, r8, r5
 801c0f4:	f10a 0520 	add.w	r5, sl, #32
 801c0f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801c0fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801c100:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801c104:	4442      	add	r2, r8
 801c106:	0a2d      	lsrs	r5, r5, #8
 801c108:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801c10c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c110:	432a      	orrs	r2, r5
 801c112:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c114:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801c118:	2cff      	cmp	r4, #255	; 0xff
 801c11a:	d01a      	beq.n	801c152 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c11c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801c120:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c124:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801c128:	fb04 fa05 	mul.w	sl, r4, r5
 801c12c:	fb08 f80e 	mul.w	r8, r8, lr
 801c130:	f10a 0e20 	add.w	lr, sl, #32
 801c134:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801c138:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801c13c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801c140:	4445      	add	r5, r8
 801c142:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c146:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801c14a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801c14e:	ea45 050e 	orr.w	r5, r5, lr
 801c152:	fb1c fe01 	smulbb	lr, ip, r1
 801c156:	f1cc 0810 	rsb	r8, ip, #16
 801c15a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801c15e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c162:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801c166:	eba8 0801 	sub.w	r8, r8, r1
 801c16a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801c16e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c172:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801c176:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c17a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801c17e:	ea4a 0202 	orr.w	r2, sl, r2
 801c182:	4341      	muls	r1, r0
 801c184:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801c188:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c18c:	fb09 1108 	mla	r1, r9, r8, r1
 801c190:	ea4b 0505 	orr.w	r5, fp, r5
 801c194:	fb0c 1102 	mla	r1, ip, r2, r1
 801c198:	fb0e 1e05 	mla	lr, lr, r5, r1
 801c19c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801c1a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801c1a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c1a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c1ac:	ea42 0e0e 	orr.w	lr, r2, lr
 801c1b0:	fa1f f28e 	uxth.w	r2, lr
 801c1b4:	2bff      	cmp	r3, #255	; 0xff
 801c1b6:	f040 80a1 	bne.w	801c2fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801c1ba:	803a      	strh	r2, [r7, #0]
 801c1bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c1be:	3702      	adds	r7, #2
 801c1c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c1c2:	4413      	add	r3, r2
 801c1c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c1c6:	931d      	str	r3, [sp, #116]	; 0x74
 801c1c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c1ca:	441a      	add	r2, r3
 801c1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1ce:	3b01      	subs	r3, #1
 801c1d0:	921e      	str	r2, [sp, #120]	; 0x78
 801c1d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1d4:	e6c7      	b.n	801bf66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c1d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c1d8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801c1da:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c1dc:	4433      	add	r3, r6
 801c1de:	931d      	str	r3, [sp, #116]	; 0x74
 801c1e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c1e2:	441c      	add	r4, r3
 801c1e4:	9b06      	ldr	r3, [sp, #24]
 801c1e6:	3b01      	subs	r3, #1
 801c1e8:	941e      	str	r4, [sp, #120]	; 0x78
 801c1ea:	9306      	str	r3, [sp, #24]
 801c1ec:	9b07      	ldr	r3, [sp, #28]
 801c1ee:	3302      	adds	r3, #2
 801c1f0:	9307      	str	r3, [sp, #28]
 801c1f2:	e696      	b.n	801bf22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c1f4:	d028      	beq.n	801c248 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801c1f6:	9b06      	ldr	r3, [sp, #24]
 801c1f8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c1fa:	3b01      	subs	r3, #1
 801c1fc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801c1fe:	fb00 5003 	mla	r0, r0, r3, r5
 801c202:	1400      	asrs	r0, r0, #16
 801c204:	f53f aeaa 	bmi.w	801bf5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c208:	3901      	subs	r1, #1
 801c20a:	4288      	cmp	r0, r1
 801c20c:	f6bf aea6 	bge.w	801bf5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c210:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c212:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c214:	fb01 0303 	mla	r3, r1, r3, r0
 801c218:	141b      	asrs	r3, r3, #16
 801c21a:	f53f ae9f 	bmi.w	801bf5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c21e:	3a01      	subs	r2, #1
 801c220:	4293      	cmp	r3, r2
 801c222:	f6bf ae9b 	bge.w	801bf5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c226:	9b06      	ldr	r3, [sp, #24]
 801c228:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801c22c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801c230:	930f      	str	r3, [sp, #60]	; 0x3c
 801c232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c234:	2b00      	cmp	r3, #0
 801c236:	f300 80b6 	bgt.w	801c3a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801c23a:	9b06      	ldr	r3, [sp, #24]
 801c23c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c240:	9b07      	ldr	r3, [sp, #28]
 801c242:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c246:	9307      	str	r3, [sp, #28]
 801c248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	f340 8218 	ble.w	801c680 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801c250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c256:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c25a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c25e:	eef0 6a62 	vmov.f32	s13, s5
 801c262:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c266:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c26a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c26e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801c272:	eef0 6a43 	vmov.f32	s13, s6
 801c276:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c27a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801c27e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c282:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c286:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c28a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c28e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c292:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c296:	ee12 2a90 	vmov	r2, s5
 801c29a:	eef0 2a47 	vmov.f32	s5, s14
 801c29e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2a2:	ee13 2a10 	vmov	r2, s6
 801c2a6:	931f      	str	r3, [sp, #124]	; 0x7c
 801c2a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c2aa:	eeb0 3a67 	vmov.f32	s6, s15
 801c2ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2b2:	9320      	str	r3, [sp, #128]	; 0x80
 801c2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	930e      	str	r3, [sp, #56]	; 0x38
 801c2bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c2be:	bf08      	it	eq
 801c2c0:	4613      	moveq	r3, r2
 801c2c2:	9306      	str	r3, [sp, #24]
 801c2c4:	e61f      	b.n	801bf06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c2c6:	fb08 f505 	mul.w	r5, r8, r5
 801c2ca:	fb09 5303 	mla	r3, r9, r3, r5
 801c2ce:	e69f      	b.n	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c2d0:	4681      	mov	r9, r0
 801c2d2:	e6c6      	b.n	801c062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c2d4:	f1c1 0210 	rsb	r2, r1, #16
 801c2d8:	4341      	muls	r1, r0
 801c2da:	fb09 1902 	mla	r9, r9, r2, r1
 801c2de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c2e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801c2e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c2ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c2ee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c2f2:	ea42 0909 	orr.w	r9, r2, r9
 801c2f6:	fa1f f289 	uxth.w	r2, r9
 801c2fa:	e75b      	b.n	801c1b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 801c2fc:	f8b7 c000 	ldrh.w	ip, [r7]
 801c300:	43db      	mvns	r3, r3
 801c302:	ea4f 202c 	mov.w	r0, ip, asr #8
 801c306:	fa5f fe83 	uxtb.w	lr, r3
 801c30a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c30e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c312:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801c316:	fb00 f00e 	mul.w	r0, r0, lr
 801c31a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c31e:	b2db      	uxtb	r3, r3
 801c320:	1c41      	adds	r1, r0, #1
 801c322:	fb05 f50e 	mul.w	r5, r5, lr
 801c326:	fb03 f30e 	mul.w	r3, r3, lr
 801c32a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801c32e:	1211      	asrs	r1, r2, #8
 801c330:	f021 0107 	bic.w	r1, r1, #7
 801c334:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801c338:	48d3      	ldr	r0, [pc, #844]	; (801c688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801c33a:	b2c9      	uxtb	r1, r1
 801c33c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801c340:	1c69      	adds	r1, r5, #1
 801c342:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801c346:	10d1      	asrs	r1, r2, #3
 801c348:	00d2      	lsls	r2, r2, #3
 801c34a:	f021 0103 	bic.w	r1, r1, #3
 801c34e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801c352:	00c9      	lsls	r1, r1, #3
 801c354:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c358:	4301      	orrs	r1, r0
 801c35a:	1c58      	adds	r0, r3, #1
 801c35c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c360:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c364:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c368:	430a      	orrs	r2, r1
 801c36a:	e726      	b.n	801c1ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801c36c:	f115 0e01 	adds.w	lr, r5, #1
 801c370:	f53f af24 	bmi.w	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c374:	4572      	cmp	r2, lr
 801c376:	f6ff af21 	blt.w	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c37a:	f110 0e01 	adds.w	lr, r0, #1
 801c37e:	f53f af1d 	bmi.w	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c382:	4573      	cmp	r3, lr
 801c384:	f6ff af1a 	blt.w	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c388:	b21b      	sxth	r3, r3
 801c38a:	b212      	sxth	r2, r2
 801c38c:	9301      	str	r3, [sp, #4]
 801c38e:	9200      	str	r2, [sp, #0]
 801c390:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801c394:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801c398:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801c39c:	4639      	mov	r1, r7
 801c39e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c3a0:	f7ff fc22 	bl	801bbe8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c3a4:	e70a      	b.n	801c1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801c3a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c3a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c3ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c3ae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801c3b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c3b4:	fa1f fc82 	uxth.w	ip, r2
 801c3b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c3be:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801c3c2:	141f      	asrs	r7, r3, #16
 801c3c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c3c6:	141b      	asrs	r3, r3, #16
 801c3c8:	fb01 3707 	mla	r7, r1, r7, r3
 801c3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3ce:	eb03 0a07 	add.w	sl, r3, r7
 801c3d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 801c3d6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801c3da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	2d00      	cmp	r5, #0
 801c3e2:	f000 80fe 	beq.w	801c5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801c3e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801c3ea:	eb0a 0b01 	add.w	fp, sl, r1
 801c3ee:	fa1f fa85 	uxth.w	sl, r5
 801c3f2:	940c      	str	r4, [sp, #48]	; 0x30
 801c3f4:	fb0a fc0c 	mul.w	ip, sl, ip
 801c3f8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801c3fc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801c400:	eba0 000c 	sub.w	r0, r0, ip
 801c404:	940d      	str	r4, [sp, #52]	; 0x34
 801c406:	fa1f fa8a 	uxth.w	sl, sl
 801c40a:	b280      	uxth	r0, r0
 801c40c:	eba3 030a 	sub.w	r3, r3, sl
 801c410:	fb08 f000 	mul.w	r0, r8, r0
 801c414:	b29b      	uxth	r3, r3
 801c416:	fb09 0303 	mla	r3, r9, r3, r0
 801c41a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c41c:	fb0a 3300 	mla	r3, sl, r0, r3
 801c420:	fb0c 3304 	mla	r3, ip, r4, r3
 801c424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c428:	2b00      	cmp	r3, #0
 801c42a:	f000 80cc 	beq.w	801c5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801c42e:	9808      	ldr	r0, [sp, #32]
 801c430:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c434:	9c08      	ldr	r4, [sp, #32]
 801c436:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801c43a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801c43e:	f000 80d5 	beq.w	801c5ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801c442:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801c446:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801c44a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c44e:	fb0a fc0c 	mul.w	ip, sl, ip
 801c452:	fb09 f707 	mul.w	r7, r9, r7
 801c456:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801c45a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801c45e:	f107 0b20 	add.w	fp, r7, #32
 801c462:	44cc      	add	ip, r9
 801c464:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801c468:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801c46c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c470:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c474:	ea4c 0909 	orr.w	r9, ip, r9
 801c478:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c47c:	8847      	ldrh	r7, [r0, #2]
 801c47e:	d019      	beq.n	801c4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 801c480:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801c484:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801c488:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c48c:	fb0a fc0c 	mul.w	ip, sl, ip
 801c490:	fb08 f807 	mul.w	r8, r8, r7
 801c494:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801c498:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801c49c:	f108 0b20 	add.w	fp, r8, #32
 801c4a0:	44bc      	add	ip, r7
 801c4a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801c4a6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801c4aa:	0a3f      	lsrs	r7, r7, #8
 801c4ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c4b0:	ea4c 0707 	orr.w	r7, ip, r7
 801c4b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801c4b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c4bc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801c4c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c4c4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c4c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c4cc:	ea4c 0909 	orr.w	r9, ip, r9
 801c4d0:	ea4a 0707 	orr.w	r7, sl, r7
 801c4d4:	2d00      	cmp	r5, #0
 801c4d6:	f000 808b 	beq.w	801c5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801c4da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801c4de:	3901      	subs	r1, #1
 801c4e0:	0049      	lsls	r1, r1, #1
 801c4e2:	3102      	adds	r1, #2
 801c4e4:	eb00 0c01 	add.w	ip, r0, r1
 801c4e8:	5a41      	ldrh	r1, [r0, r1]
 801c4ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c4ec:	28ff      	cmp	r0, #255	; 0xff
 801c4ee:	d019      	beq.n	801c524 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801c4f0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801c4f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c4f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c4fa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801c4fe:	fb04 fa01 	mul.w	sl, r4, r1
 801c502:	fb08 f800 	mul.w	r8, r8, r0
 801c506:	f10a 0020 	add.w	r0, sl, #32
 801c50a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801c50e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801c512:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801c516:	4441      	add	r1, r8
 801c518:	0a00      	lsrs	r0, r0, #8
 801c51a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801c51e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c522:	4301      	orrs	r1, r0
 801c524:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c526:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801c52a:	2cff      	cmp	r4, #255	; 0xff
 801c52c:	d01a      	beq.n	801c564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 801c52e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801c532:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c536:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801c53a:	fb04 fa00 	mul.w	sl, r4, r0
 801c53e:	fb08 f80c 	mul.w	r8, r8, ip
 801c542:	f10a 0c20 	add.w	ip, sl, #32
 801c546:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801c54a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801c54e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801c552:	4440      	add	r0, r8
 801c554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c558:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801c55c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801c560:	ea40 000c 	orr.w	r0, r0, ip
 801c564:	fb15 fc02 	smulbb	ip, r5, r2
 801c568:	f1c5 0810 	rsb	r8, r5, #16
 801c56c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801c570:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c574:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801c578:	eba8 0802 	sub.w	r8, r8, r2
 801c57c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801c580:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c584:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801c588:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c58c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801c590:	ea4a 0101 	orr.w	r1, sl, r1
 801c594:	437a      	muls	r2, r7
 801c596:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801c59a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c59e:	fb09 2208 	mla	r2, r9, r8, r2
 801c5a2:	ea4b 0000 	orr.w	r0, fp, r0
 801c5a6:	fb05 2201 	mla	r2, r5, r1, r2
 801c5aa:	fb0c 2200 	mla	r2, ip, r0, r2
 801c5ae:	0d57      	lsrs	r7, r2, #21
 801c5b0:	0952      	lsrs	r2, r2, #5
 801c5b2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c5b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c5ba:	433a      	orrs	r2, r7
 801c5bc:	2bff      	cmp	r3, #255	; 0xff
 801c5be:	b292      	uxth	r2, r2
 801c5c0:	d127      	bne.n	801c612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 801c5c2:	f8ae 2000 	strh.w	r2, [lr]
 801c5c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5c8:	f10e 0e02 	add.w	lr, lr, #2
 801c5cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c5ce:	4413      	add	r3, r2
 801c5d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c5d2:	931d      	str	r3, [sp, #116]	; 0x74
 801c5d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c5d6:	441a      	add	r2, r3
 801c5d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	921e      	str	r2, [sp, #120]	; 0x78
 801c5de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5e0:	e627      	b.n	801c232 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801c5e2:	fb08 f000 	mul.w	r0, r8, r0
 801c5e6:	fb09 0303 	mla	r3, r9, r3, r0
 801c5ea:	e71b      	b.n	801c424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 801c5ec:	46b9      	mov	r9, r7
 801c5ee:	e743      	b.n	801c478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 801c5f0:	f1c2 0110 	rsb	r1, r2, #16
 801c5f4:	437a      	muls	r2, r7
 801c5f6:	fb09 2901 	mla	r9, r9, r1, r2
 801c5fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c5fe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801c602:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801c606:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c60a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c60e:	4302      	orrs	r2, r0
 801c610:	e7d4      	b.n	801c5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 801c612:	f8be 7000 	ldrh.w	r7, [lr]
 801c616:	43db      	mvns	r3, r3
 801c618:	4c1b      	ldr	r4, [pc, #108]	; (801c688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801c61a:	1238      	asrs	r0, r7, #8
 801c61c:	fa5f fc83 	uxtb.w	ip, r3
 801c620:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c624:	10fd      	asrs	r5, r7, #3
 801c626:	00fb      	lsls	r3, r7, #3
 801c628:	fb00 f00c 	mul.w	r0, r0, ip
 801c62c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c630:	b2db      	uxtb	r3, r3
 801c632:	fb05 f10c 	mul.w	r1, r5, ip
 801c636:	1c45      	adds	r5, r0, #1
 801c638:	fb03 f30c 	mul.w	r3, r3, ip
 801c63c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c640:	1215      	asrs	r5, r2, #8
 801c642:	f025 0507 	bic.w	r5, r5, #7
 801c646:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c64a:	1c4d      	adds	r5, r1, #1
 801c64c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801c650:	10d1      	asrs	r1, r2, #3
 801c652:	b2c0      	uxtb	r0, r0
 801c654:	f021 0103 	bic.w	r1, r1, #3
 801c658:	00d2      	lsls	r2, r2, #3
 801c65a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801c65e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801c662:	00c9      	lsls	r1, r1, #3
 801c664:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c668:	4308      	orrs	r0, r1
 801c66a:	1c59      	adds	r1, r3, #1
 801c66c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c670:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c674:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801c678:	4318      	orrs	r0, r3
 801c67a:	f8ae 0000 	strh.w	r0, [lr]
 801c67e:	e7a2      	b.n	801c5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801c680:	b013      	add	sp, #76	; 0x4c
 801c682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c686:	bf00      	nop
 801c688:	fffff800 	.word	0xfffff800

0801c68c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c690:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801c694:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801c698:	fb05 4c03 	mla	ip, r5, r3, r4
 801c69c:	2d00      	cmp	r5, #0
 801c69e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801c6a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801c6a6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801c6aa:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801c6ae:	8808      	ldrh	r0, [r1, #0]
 801c6b0:	f2c0 80a7 	blt.w	801c802 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801c6b4:	45aa      	cmp	sl, r5
 801c6b6:	f340 80a4 	ble.w	801c802 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801c6ba:	2c00      	cmp	r4, #0
 801c6bc:	f2c0 809f 	blt.w	801c7fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801c6c0:	42a3      	cmp	r3, r4
 801c6c2:	f340 809c 	ble.w	801c7fe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801c6c6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801c6ca:	1c62      	adds	r2, r4, #1
 801c6cc:	f100 809c 	bmi.w	801c808 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801c6d0:	4293      	cmp	r3, r2
 801c6d2:	f340 8099 	ble.w	801c808 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801c6d6:	f1b9 0f00 	cmp.w	r9, #0
 801c6da:	f000 8095 	beq.w	801c808 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801c6de:	f8be c002 	ldrh.w	ip, [lr, #2]
 801c6e2:	3501      	adds	r5, #1
 801c6e4:	f100 8094 	bmi.w	801c810 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801c6e8:	45aa      	cmp	sl, r5
 801c6ea:	f340 8091 	ble.w	801c810 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801c6ee:	2f00      	cmp	r7, #0
 801c6f0:	f000 808e 	beq.w	801c810 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801c6f4:	2c00      	cmp	r4, #0
 801c6f6:	f2c0 8089 	blt.w	801c80c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801c6fa:	42a3      	cmp	r3, r4
 801c6fc:	f340 8086 	ble.w	801c80c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801c700:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801c704:	3401      	adds	r4, #1
 801c706:	f100 8086 	bmi.w	801c816 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801c70a:	42a3      	cmp	r3, r4
 801c70c:	f340 8083 	ble.w	801c816 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801c710:	f1b9 0f00 	cmp.w	r9, #0
 801c714:	d07f      	beq.n	801c816 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801c716:	3301      	adds	r3, #1
 801c718:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801c71c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c720:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c724:	fb19 fe07 	smulbb	lr, r9, r7
 801c728:	f1c7 0210 	rsb	r2, r7, #16
 801c72c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c730:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c734:	eba2 0209 	sub.w	r2, r2, r9
 801c738:	ea44 0808 	orr.w	r8, r4, r8
 801c73c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c740:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c744:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c748:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c74c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c750:	ea44 0c0c 	orr.w	ip, r4, ip
 801c754:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c758:	fb04 f40c 	mul.w	r4, r4, ip
 801c75c:	fb02 4808 	mla	r8, r2, r8, r4
 801c760:	041a      	lsls	r2, r3, #16
 801c762:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c766:	b2b4      	uxth	r4, r6
 801c768:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c76c:	43f6      	mvns	r6, r6
 801c76e:	4313      	orrs	r3, r2
 801c770:	042a      	lsls	r2, r5, #16
 801c772:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c776:	b2f6      	uxtb	r6, r6
 801c778:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c77c:	fb0e 8303 	mla	r3, lr, r3, r8
 801c780:	432a      	orrs	r2, r5
 801c782:	fb07 3202 	mla	r2, r7, r2, r3
 801c786:	10c7      	asrs	r7, r0, #3
 801c788:	0d53      	lsrs	r3, r2, #21
 801c78a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c78e:	0952      	lsrs	r2, r2, #5
 801c790:	fb17 f706 	smulbb	r7, r7, r6
 801c794:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c798:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c79c:	431a      	orrs	r2, r3
 801c79e:	b293      	uxth	r3, r2
 801c7a0:	1202      	asrs	r2, r0, #8
 801c7a2:	121d      	asrs	r5, r3, #8
 801c7a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c7a8:	00c0      	lsls	r0, r0, #3
 801c7aa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c7ae:	fb12 f206 	smulbb	r2, r2, r6
 801c7b2:	b2c0      	uxtb	r0, r0
 801c7b4:	fb05 2504 	mla	r5, r5, r4, r2
 801c7b8:	10da      	asrs	r2, r3, #3
 801c7ba:	fb10 f006 	smulbb	r0, r0, r6
 801c7be:	00db      	lsls	r3, r3, #3
 801c7c0:	b2ad      	uxth	r5, r5
 801c7c2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	fb02 7204 	mla	r2, r2, r4, r7
 801c7cc:	fb03 0004 	mla	r0, r3, r4, r0
 801c7d0:	1c6b      	adds	r3, r5, #1
 801c7d2:	b292      	uxth	r2, r2
 801c7d4:	b280      	uxth	r0, r0
 801c7d6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c7da:	1c43      	adds	r3, r0, #1
 801c7dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c7e0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c7e4:	1c50      	adds	r0, r2, #1
 801c7e6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c7ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c7ee:	0952      	lsrs	r2, r2, #5
 801c7f0:	432b      	orrs	r3, r5
 801c7f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c7f6:	4313      	orrs	r3, r2
 801c7f8:	800b      	strh	r3, [r1, #0]
 801c7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7fe:	4680      	mov	r8, r0
 801c800:	e763      	b.n	801c6ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801c802:	4684      	mov	ip, r0
 801c804:	4680      	mov	r8, r0
 801c806:	e76c      	b.n	801c6e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801c808:	4684      	mov	ip, r0
 801c80a:	e76a      	b.n	801c6e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801c80c:	4605      	mov	r5, r0
 801c80e:	e779      	b.n	801c704 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801c810:	4603      	mov	r3, r0
 801c812:	4605      	mov	r5, r0
 801c814:	e782      	b.n	801c71c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801c816:	4603      	mov	r3, r0
 801c818:	e780      	b.n	801c71c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801c81a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c81a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c81e:	b093      	sub	sp, #76	; 0x4c
 801c820:	461d      	mov	r5, r3
 801c822:	9210      	str	r2, [sp, #64]	; 0x40
 801c824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c826:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801c82a:	910a      	str	r1, [sp, #40]	; 0x28
 801c82c:	920b      	str	r2, [sp, #44]	; 0x2c
 801c82e:	6859      	ldr	r1, [r3, #4]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	9011      	str	r0, [sp, #68]	; 0x44
 801c834:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801c838:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801c83c:	fb01 2707 	mla	r7, r1, r7, r2
 801c840:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801c844:	9307      	str	r3, [sp, #28]
 801c846:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	9309      	str	r3, [sp, #36]	; 0x24
 801c84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c84e:	43db      	mvns	r3, r3
 801c850:	b2db      	uxtb	r3, r3
 801c852:	9308      	str	r3, [sp, #32]
 801c854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c856:	2b00      	cmp	r3, #0
 801c858:	dc03      	bgt.n	801c862 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c85a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	f340 8205 	ble.w	801cc6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c862:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c864:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c868:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c86c:	1e48      	subs	r0, r1, #1
 801c86e:	f102 3cff 	add.w	ip, r2, #4294967295
 801c872:	2d00      	cmp	r5, #0
 801c874:	f340 80da 	ble.w	801ca2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c878:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c87c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c880:	d406      	bmi.n	801c890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c882:	4586      	cmp	lr, r0
 801c884:	da04      	bge.n	801c890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c886:	2b00      	cmp	r3, #0
 801c888:	db02      	blt.n	801c890 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c88a:	4563      	cmp	r3, ip
 801c88c:	f2c0 80cf 	blt.w	801ca2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c890:	f11e 0e01 	adds.w	lr, lr, #1
 801c894:	f100 80c1 	bmi.w	801ca1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c898:	4571      	cmp	r1, lr
 801c89a:	f2c0 80be 	blt.w	801ca1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c89e:	3301      	adds	r3, #1
 801c8a0:	f100 80bb 	bmi.w	801ca1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	f2c0 80b8 	blt.w	801ca1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c8aa:	46a9      	mov	r9, r5
 801c8ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c8b0:	f1b9 0f00 	cmp.w	r9, #0
 801c8b4:	f340 80d8 	ble.w	801ca68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801c8b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8ba:	1421      	asrs	r1, r4, #16
 801c8bc:	ea4f 4026 	mov.w	r0, r6, asr #16
 801c8c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c8c4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801c8c8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801c8cc:	f100 8112 	bmi.w	801caf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c8d0:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c8d4:	4551      	cmp	r1, sl
 801c8d6:	f280 810d 	bge.w	801caf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c8da:	2800      	cmp	r0, #0
 801c8dc:	f2c0 810a 	blt.w	801caf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c8e0:	f103 3aff 	add.w	sl, r3, #4294967295
 801c8e4:	4550      	cmp	r0, sl
 801c8e6:	f280 8105 	bge.w	801caf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801c8ea:	fa0f f38e 	sxth.w	r3, lr
 801c8ee:	fb00 1103 	mla	r1, r0, r3, r1
 801c8f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c8f4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801c8f8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801c8fc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801c900:	f1bc 0f00 	cmp.w	ip, #0
 801c904:	d007      	beq.n	801c916 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801c906:	005b      	lsls	r3, r3, #1
 801c908:	eb0a 0003 	add.w	r0, sl, r3
 801c90c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801c910:	930c      	str	r3, [sp, #48]	; 0x30
 801c912:	8843      	ldrh	r3, [r0, #2]
 801c914:	930d      	str	r3, [sp, #52]	; 0x34
 801c916:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801c91a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c91e:	fb12 f30c 	smulbb	r3, r2, ip
 801c922:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801c926:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c92a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c92e:	10db      	asrs	r3, r3, #3
 801c930:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c934:	ea40 000e 	orr.w	r0, r0, lr
 801c938:	f1cc 0e10 	rsb	lr, ip, #16
 801c93c:	ea4a 0101 	orr.w	r1, sl, r1
 801c940:	9f08      	ldr	r7, [sp, #32]
 801c942:	ebae 0e02 	sub.w	lr, lr, r2
 801c946:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801c94a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801c94e:	4351      	muls	r1, r2
 801c950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c952:	fb0e 1e00 	mla	lr, lr, r0, r1
 801c956:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c958:	0410      	lsls	r0, r2, #16
 801c95a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c95e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c962:	4310      	orrs	r0, r2
 801c964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c966:	0412      	lsls	r2, r2, #16
 801c968:	fb03 e000 	mla	r0, r3, r0, lr
 801c96c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801c970:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801c974:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c978:	ea42 020e 	orr.w	r2, r2, lr
 801c97c:	fb03 0302 	mla	r3, r3, r2, r0
 801c980:	f8b8 0000 	ldrh.w	r0, [r8]
 801c984:	0d5a      	lsrs	r2, r3, #21
 801c986:	095b      	lsrs	r3, r3, #5
 801c988:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c98c:	1201      	asrs	r1, r0, #8
 801c98e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c992:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c996:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c99a:	00c0      	lsls	r0, r0, #3
 801c99c:	4313      	orrs	r3, r2
 801c99e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c9a2:	fb11 f107 	smulbb	r1, r1, r7
 801c9a6:	b2c0      	uxtb	r0, r0
 801c9a8:	b29b      	uxth	r3, r3
 801c9aa:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c9ae:	fb10 f007 	smulbb	r0, r0, r7
 801c9b2:	fb1e fe07 	smulbb	lr, lr, r7
 801c9b6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c9ba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c9be:	fb0c 1c02 	mla	ip, ip, r2, r1
 801c9c2:	10d9      	asrs	r1, r3, #3
 801c9c4:	00db      	lsls	r3, r3, #3
 801c9c6:	fa1f fc8c 	uxth.w	ip, ip
 801c9ca:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	fb01 e102 	mla	r1, r1, r2, lr
 801c9d4:	fb03 0302 	mla	r3, r3, r2, r0
 801c9d8:	b289      	uxth	r1, r1
 801c9da:	b29a      	uxth	r2, r3
 801c9dc:	f10c 0301 	add.w	r3, ip, #1
 801c9e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c9e4:	1c53      	adds	r3, r2, #1
 801c9e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c9ea:	1c4a      	adds	r2, r1, #1
 801c9ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c9f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c9f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c9f8:	0949      	lsrs	r1, r1, #5
 801c9fa:	ea43 030c 	orr.w	r3, r3, ip
 801c9fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ca02:	430b      	orrs	r3, r1
 801ca04:	f8a8 3000 	strh.w	r3, [r8]
 801ca08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ca0a:	f108 0802 	add.w	r8, r8, #2
 801ca0e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca12:	441c      	add	r4, r3
 801ca14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ca16:	441e      	add	r6, r3
 801ca18:	e74a      	b.n	801c8b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ca1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ca1c:	3d01      	subs	r5, #1
 801ca1e:	441c      	add	r4, r3
 801ca20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ca22:	441e      	add	r6, r3
 801ca24:	9b07      	ldr	r3, [sp, #28]
 801ca26:	3302      	adds	r3, #2
 801ca28:	9307      	str	r3, [sp, #28]
 801ca2a:	e722      	b.n	801c872 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ca2c:	d022      	beq.n	801ca74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ca2e:	1e6b      	subs	r3, r5, #1
 801ca30:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ca32:	fb00 4003 	mla	r0, r0, r3, r4
 801ca36:	1400      	asrs	r0, r0, #16
 801ca38:	f53f af37 	bmi.w	801c8aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca3c:	3901      	subs	r1, #1
 801ca3e:	4288      	cmp	r0, r1
 801ca40:	f6bf af33 	bge.w	801c8aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca44:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ca46:	fb01 6303 	mla	r3, r1, r3, r6
 801ca4a:	141b      	asrs	r3, r3, #16
 801ca4c:	f53f af2d 	bmi.w	801c8aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca50:	3a01      	subs	r2, #1
 801ca52:	4293      	cmp	r3, r2
 801ca54:	f6bf af29 	bge.w	801c8aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca58:	46a8      	mov	r8, r5
 801ca5a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801ca5e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801ca62:	f1b8 0f00 	cmp.w	r8, #0
 801ca66:	dc60      	bgt.n	801cb2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801ca68:	9b07      	ldr	r3, [sp, #28]
 801ca6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801ca6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801ca72:	9307      	str	r3, [sp, #28]
 801ca74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	f340 80f8 	ble.w	801cc6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801ca7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca8a:	eef0 6a62 	vmov.f32	s13, s5
 801ca8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ca92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca9a:	ee16 4a90 	vmov	r4, s13
 801ca9e:	eef0 6a43 	vmov.f32	s13, s6
 801caa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801caa6:	ee16 6a90 	vmov	r6, s13
 801caaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801caae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cab2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cab6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801caba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cabe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cac2:	ee12 2a90 	vmov	r2, s5
 801cac6:	eef0 2a47 	vmov.f32	s5, s14
 801caca:	fb92 f3f3 	sdiv	r3, r2, r3
 801cace:	ee13 2a10 	vmov	r2, s6
 801cad2:	931f      	str	r3, [sp, #124]	; 0x7c
 801cad4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cad6:	eeb0 3a67 	vmov.f32	s6, s15
 801cada:	fb92 f3f3 	sdiv	r3, r2, r3
 801cade:	9320      	str	r3, [sp, #128]	; 0x80
 801cae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cae4:	3b01      	subs	r3, #1
 801cae6:	930a      	str	r3, [sp, #40]	; 0x28
 801cae8:	bf08      	it	eq
 801caea:	4615      	moveq	r5, r2
 801caec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801caee:	bf18      	it	ne
 801caf0:	461d      	movne	r5, r3
 801caf2:	e6af      	b.n	801c854 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801caf4:	f111 0a01 	adds.w	sl, r1, #1
 801caf8:	d486      	bmi.n	801ca08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cafa:	45d6      	cmp	lr, sl
 801cafc:	db84      	blt.n	801ca08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cafe:	f110 0a01 	adds.w	sl, r0, #1
 801cb02:	d481      	bmi.n	801ca08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cb04:	4553      	cmp	r3, sl
 801cb06:	f6ff af7f 	blt.w	801ca08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cb0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cb0c:	b21b      	sxth	r3, r3
 801cb0e:	9101      	str	r1, [sp, #4]
 801cb10:	4641      	mov	r1, r8
 801cb12:	9300      	str	r3, [sp, #0]
 801cb14:	fa0f f38e 	sxth.w	r3, lr
 801cb18:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801cb1c:	e9cd c704 	strd	ip, r7, [sp, #16]
 801cb20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb22:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cb24:	f7ff fdb2 	bl	801c68c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801cb28:	e76e      	b.n	801ca08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cb2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb2c:	1430      	asrs	r0, r6, #16
 801cb2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cb30:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801cb34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb38:	1423      	asrs	r3, r4, #16
 801cb3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801cb3e:	fb01 3000 	mla	r0, r1, r0, r3
 801cb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb44:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801cb48:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801cb4c:	8858      	ldrh	r0, [r3, #2]
 801cb4e:	f1be 0f00 	cmp.w	lr, #0
 801cb52:	d00b      	beq.n	801cb6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801cb54:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801cb58:	3901      	subs	r1, #1
 801cb5a:	0049      	lsls	r1, r1, #1
 801cb5c:	3102      	adds	r1, #2
 801cb5e:	eb03 0b01 	add.w	fp, r3, r1
 801cb62:	5a5b      	ldrh	r3, [r3, r1]
 801cb64:	930e      	str	r3, [sp, #56]	; 0x38
 801cb66:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cb6a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cb6c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801cb70:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cb74:	fb12 f30e 	smulbb	r3, r2, lr
 801cb78:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801cb7c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801cb80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cb84:	10db      	asrs	r3, r3, #3
 801cb86:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cb8a:	ea41 010c 	orr.w	r1, r1, ip
 801cb8e:	f1ce 0c10 	rsb	ip, lr, #16
 801cb92:	ea4b 0000 	orr.w	r0, fp, r0
 801cb96:	9f08      	ldr	r7, [sp, #32]
 801cb98:	ebac 0c02 	sub.w	ip, ip, r2
 801cb9c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801cba0:	f108 38ff 	add.w	r8, r8, #4294967295
 801cba4:	4350      	muls	r0, r2
 801cba6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801cbaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cbac:	fb0c 0c01 	mla	ip, ip, r1, r0
 801cbb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801cbb2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801cbb6:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801cbba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cbbc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cbc0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cbc4:	0412      	lsls	r2, r2, #16
 801cbc6:	ea4b 0101 	orr.w	r1, fp, r1
 801cbca:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801cbce:	fb03 c101 	mla	r1, r3, r1, ip
 801cbd2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801cbd6:	4302      	orrs	r2, r0
 801cbd8:	fb03 1202 	mla	r2, r3, r2, r1
 801cbdc:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801cbe0:	0952      	lsrs	r2, r2, #5
 801cbe2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801cbe6:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801cbea:	f8b9 2000 	ldrh.w	r2, [r9]
 801cbee:	ea4b 0303 	orr.w	r3, fp, r3
 801cbf2:	1211      	asrs	r1, r2, #8
 801cbf4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801cbf8:	b29b      	uxth	r3, r3
 801cbfa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cbfe:	00d2      	lsls	r2, r2, #3
 801cc00:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cc04:	fb11 f107 	smulbb	r1, r1, r7
 801cc08:	1218      	asrs	r0, r3, #8
 801cc0a:	fb1c fc07 	smulbb	ip, ip, r7
 801cc0e:	b2d2      	uxtb	r2, r2
 801cc10:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cc14:	fb12 f207 	smulbb	r2, r2, r7
 801cc18:	fb00 100a 	mla	r0, r0, sl, r1
 801cc1c:	10d9      	asrs	r1, r3, #3
 801cc1e:	00db      	lsls	r3, r3, #3
 801cc20:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cc24:	b280      	uxth	r0, r0
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	fb01 c10a 	mla	r1, r1, sl, ip
 801cc2c:	fb03 230a 	mla	r3, r3, sl, r2
 801cc30:	1c42      	adds	r2, r0, #1
 801cc32:	b289      	uxth	r1, r1
 801cc34:	b29b      	uxth	r3, r3
 801cc36:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cc3a:	f101 0c01 	add.w	ip, r1, #1
 801cc3e:	1c5a      	adds	r2, r3, #1
 801cc40:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801cc44:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cc48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cc4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cc4e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cc52:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cc56:	441c      	add	r4, r3
 801cc58:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cc5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cc5e:	4310      	orrs	r0, r2
 801cc60:	441e      	add	r6, r3
 801cc62:	ea40 000c 	orr.w	r0, r0, ip
 801cc66:	f829 0b02 	strh.w	r0, [r9], #2
 801cc6a:	e6fa      	b.n	801ca62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc6c:	b013      	add	sp, #76	; 0x4c
 801cc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801cc72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc76:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801cc7a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801cc7e:	fb0e 4703 	mla	r7, lr, r3, r4
 801cc82:	f1be 0f00 	cmp.w	lr, #0
 801cc86:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801cc8a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801cc8e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801cc92:	8808      	ldrh	r0, [r1, #0]
 801cc94:	db60      	blt.n	801cd58 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801cc96:	45f1      	cmp	r9, lr
 801cc98:	dd5e      	ble.n	801cd58 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801cc9a:	2c00      	cmp	r4, #0
 801cc9c:	db5a      	blt.n	801cd54 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801cc9e:	42a3      	cmp	r3, r4
 801cca0:	dd58      	ble.n	801cd54 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801cca2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801cca6:	1c62      	adds	r2, r4, #1
 801cca8:	d459      	bmi.n	801cd5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801ccaa:	4293      	cmp	r3, r2
 801ccac:	dd57      	ble.n	801cd5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801ccae:	2d00      	cmp	r5, #0
 801ccb0:	d055      	beq.n	801cd5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801ccb2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801ccb6:	f11e 0e01 	adds.w	lr, lr, #1
 801ccba:	d454      	bmi.n	801cd66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801ccbc:	45f1      	cmp	r9, lr
 801ccbe:	dd52      	ble.n	801cd66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801ccc0:	2e00      	cmp	r6, #0
 801ccc2:	d050      	beq.n	801cd66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801ccc4:	2c00      	cmp	r4, #0
 801ccc6:	db4c      	blt.n	801cd62 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801ccc8:	42a3      	cmp	r3, r4
 801ccca:	dd4a      	ble.n	801cd62 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801cccc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801ccd0:	3401      	adds	r4, #1
 801ccd2:	d405      	bmi.n	801cce0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801ccd4:	42a3      	cmp	r3, r4
 801ccd6:	dd03      	ble.n	801cce0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801ccd8:	b115      	cbz	r5, 801cce0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801ccda:	3301      	adds	r3, #1
 801ccdc:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801cce0:	fb15 f406 	smulbb	r4, r5, r6
 801cce4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801cce8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801ccec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ccf0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ccf4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801ccf8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ccfc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cd00:	ea43 0c0c 	orr.w	ip, r3, ip
 801cd04:	f1c6 0310 	rsb	r3, r6, #16
 801cd08:	ea4e 0707 	orr.w	r7, lr, r7
 801cd0c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801cd10:	1b5b      	subs	r3, r3, r5
 801cd12:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801cd16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd1a:	437d      	muls	r5, r7
 801cd1c:	fb03 5c0c 	mla	ip, r3, ip, r5
 801cd20:	0403      	lsls	r3, r0, #16
 801cd22:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cd26:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cd2a:	4318      	orrs	r0, r3
 801cd2c:	0413      	lsls	r3, r2, #16
 801cd2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cd32:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cd36:	fb04 c000 	mla	r0, r4, r0, ip
 801cd3a:	4313      	orrs	r3, r2
 801cd3c:	fb06 0003 	mla	r0, r6, r3, r0
 801cd40:	0d43      	lsrs	r3, r0, #21
 801cd42:	0940      	lsrs	r0, r0, #5
 801cd44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd48:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cd4c:	4318      	orrs	r0, r3
 801cd4e:	8008      	strh	r0, [r1, #0]
 801cd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd54:	4684      	mov	ip, r0
 801cd56:	e7a6      	b.n	801cca6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801cd58:	4607      	mov	r7, r0
 801cd5a:	4684      	mov	ip, r0
 801cd5c:	e7ab      	b.n	801ccb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801cd5e:	4607      	mov	r7, r0
 801cd60:	e7a9      	b.n	801ccb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801cd62:	4602      	mov	r2, r0
 801cd64:	e7b4      	b.n	801ccd0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801cd66:	4602      	mov	r2, r0
 801cd68:	e7ba      	b.n	801cce0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801cd6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd6e:	b08f      	sub	sp, #60	; 0x3c
 801cd70:	461d      	mov	r5, r3
 801cd72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cd74:	9107      	str	r1, [sp, #28]
 801cd76:	920c      	str	r2, [sp, #48]	; 0x30
 801cd78:	6859      	ldr	r1, [r3, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	900d      	str	r0, [sp, #52]	; 0x34
 801cd7e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801cd82:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801cd86:	fb01 2707 	mla	r7, r1, r7, r2
 801cd8a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801cd8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd90:	f8d3 8000 	ldr.w	r8, [r3]
 801cd94:	9b07      	ldr	r3, [sp, #28]
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	dc03      	bgt.n	801cda2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cd9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	f340 8182 	ble.w	801d0a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801cda2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cda4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cda8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cdac:	1e48      	subs	r0, r1, #1
 801cdae:	f102 3cff 	add.w	ip, r2, #4294967295
 801cdb2:	2d00      	cmp	r5, #0
 801cdb4:	f340 809b 	ble.w	801ceee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801cdb8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cdbc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cdc0:	d406      	bmi.n	801cdd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cdc2:	4586      	cmp	lr, r0
 801cdc4:	da04      	bge.n	801cdd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	db02      	blt.n	801cdd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cdca:	4563      	cmp	r3, ip
 801cdcc:	f2c0 8090 	blt.w	801cef0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cdd0:	f11e 0e01 	adds.w	lr, lr, #1
 801cdd4:	f100 8084 	bmi.w	801cee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801cdd8:	4571      	cmp	r1, lr
 801cdda:	f2c0 8081 	blt.w	801cee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801cdde:	3301      	adds	r3, #1
 801cde0:	d47e      	bmi.n	801cee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801cde2:	429a      	cmp	r2, r3
 801cde4:	db7c      	blt.n	801cee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801cde6:	46aa      	mov	sl, r5
 801cde8:	46b9      	mov	r9, r7
 801cdea:	f1ba 0f00 	cmp.w	sl, #0
 801cdee:	f340 8099 	ble.w	801cf24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801cdf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cdf4:	1421      	asrs	r1, r4, #16
 801cdf6:	ea4f 4026 	mov.w	r0, r6, asr #16
 801cdfa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801cdfe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ce02:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ce06:	f100 80d1 	bmi.w	801cfac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ce0a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801ce0e:	4559      	cmp	r1, fp
 801ce10:	f280 80cc 	bge.w	801cfac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	f2c0 80c9 	blt.w	801cfac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ce1a:	f103 3bff 	add.w	fp, r3, #4294967295
 801ce1e:	4558      	cmp	r0, fp
 801ce20:	f280 80c4 	bge.w	801cfac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ce24:	fa0f fe8e 	sxth.w	lr, lr
 801ce28:	fb00 110e 	mla	r1, r0, lr, r1
 801ce2c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801ce30:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801ce34:	8841      	ldrh	r1, [r0, #2]
 801ce36:	f1bc 0f00 	cmp.w	ip, #0
 801ce3a:	d00b      	beq.n	801ce54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801ce3c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801ce40:	3b01      	subs	r3, #1
 801ce42:	005b      	lsls	r3, r3, #1
 801ce44:	3302      	adds	r3, #2
 801ce46:	eb00 0e03 	add.w	lr, r0, r3
 801ce4a:	5ac3      	ldrh	r3, [r0, r3]
 801ce4c:	9308      	str	r3, [sp, #32]
 801ce4e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801ce52:	9309      	str	r3, [sp, #36]	; 0x24
 801ce54:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801ce58:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ce5c:	fb12 f30c 	smulbb	r3, r2, ip
 801ce60:	f1cc 0e10 	rsb	lr, ip, #16
 801ce64:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ce68:	10db      	asrs	r3, r3, #3
 801ce6a:	ebae 0e02 	sub.w	lr, lr, r2
 801ce6e:	ea40 000b 	orr.w	r0, r0, fp
 801ce72:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ce76:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ce7a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ce7e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ce82:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801ce86:	ea4b 0101 	orr.w	r1, fp, r1
 801ce8a:	4351      	muls	r1, r2
 801ce8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce8e:	fb0e 1e00 	mla	lr, lr, r0, r1
 801ce92:	0410      	lsls	r0, r2, #16
 801ce94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ce98:	9908      	ldr	r1, [sp, #32]
 801ce9a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ce9e:	4310      	orrs	r0, r2
 801cea0:	9a08      	ldr	r2, [sp, #32]
 801cea2:	0412      	lsls	r2, r2, #16
 801cea4:	fb03 e000 	mla	r0, r3, r0, lr
 801cea8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801ceac:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ceb0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ceb4:	ea42 020e 	orr.w	r2, r2, lr
 801ceb8:	fb03 0302 	mla	r3, r3, r2, r0
 801cebc:	0d5a      	lsrs	r2, r3, #21
 801cebe:	095b      	lsrs	r3, r3, #5
 801cec0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cec4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cec8:	4313      	orrs	r3, r2
 801ceca:	f8a9 3000 	strh.w	r3, [r9]
 801cece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ced0:	f109 0902 	add.w	r9, r9, #2
 801ced4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ced8:	441c      	add	r4, r3
 801ceda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cedc:	441e      	add	r6, r3
 801cede:	e784      	b.n	801cdea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cee0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cee2:	3d01      	subs	r5, #1
 801cee4:	3702      	adds	r7, #2
 801cee6:	441c      	add	r4, r3
 801cee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ceea:	441e      	add	r6, r3
 801ceec:	e761      	b.n	801cdb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ceee:	d01d      	beq.n	801cf2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801cef0:	1e6b      	subs	r3, r5, #1
 801cef2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801cef4:	fb00 4003 	mla	r0, r0, r3, r4
 801cef8:	1400      	asrs	r0, r0, #16
 801cefa:	f53f af74 	bmi.w	801cde6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cefe:	3901      	subs	r1, #1
 801cf00:	4288      	cmp	r0, r1
 801cf02:	f6bf af70 	bge.w	801cde6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cf06:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cf08:	fb01 6303 	mla	r3, r1, r3, r6
 801cf0c:	141b      	asrs	r3, r3, #16
 801cf0e:	f53f af6a 	bmi.w	801cde6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cf12:	3a01      	subs	r2, #1
 801cf14:	4293      	cmp	r3, r2
 801cf16:	f6bf af66 	bge.w	801cde6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cf1a:	46a9      	mov	r9, r5
 801cf1c:	46ba      	mov	sl, r7
 801cf1e:	f1b9 0f00 	cmp.w	r9, #0
 801cf22:	dc5b      	bgt.n	801cfdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801cf24:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801cf28:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801cf2c:	9b07      	ldr	r3, [sp, #28]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	f340 80b9 	ble.w	801d0a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801cf34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cf38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cf3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf42:	eef0 6a62 	vmov.f32	s13, s5
 801cf46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cf4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf52:	ee16 4a90 	vmov	r4, s13
 801cf56:	eef0 6a43 	vmov.f32	s13, s6
 801cf5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf5e:	ee16 6a90 	vmov	r6, s13
 801cf62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf7a:	ee12 2a90 	vmov	r2, s5
 801cf7e:	eef0 2a47 	vmov.f32	s5, s14
 801cf82:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf86:	ee13 2a10 	vmov	r2, s6
 801cf8a:	931b      	str	r3, [sp, #108]	; 0x6c
 801cf8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cf8e:	eeb0 3a67 	vmov.f32	s6, s15
 801cf92:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf96:	931c      	str	r3, [sp, #112]	; 0x70
 801cf98:	9b07      	ldr	r3, [sp, #28]
 801cf9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf9c:	3b01      	subs	r3, #1
 801cf9e:	9307      	str	r3, [sp, #28]
 801cfa0:	bf08      	it	eq
 801cfa2:	4615      	moveq	r5, r2
 801cfa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cfa6:	bf18      	it	ne
 801cfa8:	461d      	movne	r5, r3
 801cfaa:	e6f3      	b.n	801cd94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801cfac:	f111 0b01 	adds.w	fp, r1, #1
 801cfb0:	d48d      	bmi.n	801cece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfb2:	45de      	cmp	lr, fp
 801cfb4:	db8b      	blt.n	801cece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfb6:	f110 0b01 	adds.w	fp, r0, #1
 801cfba:	d488      	bmi.n	801cece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfbc:	455b      	cmp	r3, fp
 801cfbe:	db86      	blt.n	801cece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfc0:	b21b      	sxth	r3, r3
 801cfc2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801cfc6:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801cfca:	9300      	str	r3, [sp, #0]
 801cfcc:	4642      	mov	r2, r8
 801cfce:	fa0f f38e 	sxth.w	r3, lr
 801cfd2:	4649      	mov	r1, r9
 801cfd4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cfd6:	f7ff fe4c 	bl	801cc72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801cfda:	e778      	b.n	801cece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cfde:	1420      	asrs	r0, r4, #16
 801cfe0:	1431      	asrs	r1, r6, #16
 801cfe2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801cfe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cfea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801cfee:	fb03 0101 	mla	r1, r3, r1, r0
 801cff2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801cff6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801cffa:	8841      	ldrh	r1, [r0, #2]
 801cffc:	f1be 0f00 	cmp.w	lr, #0
 801d000:	d00b      	beq.n	801d01a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d002:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d006:	3b01      	subs	r3, #1
 801d008:	005b      	lsls	r3, r3, #1
 801d00a:	3302      	adds	r3, #2
 801d00c:	eb00 0b03 	add.w	fp, r0, r3
 801d010:	5ac3      	ldrh	r3, [r0, r3]
 801d012:	930a      	str	r3, [sp, #40]	; 0x28
 801d014:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801d018:	930b      	str	r3, [sp, #44]	; 0x2c
 801d01a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801d01e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d022:	fb12 f30e 	smulbb	r3, r2, lr
 801d026:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801d02a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d02e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d032:	10db      	asrs	r3, r3, #3
 801d034:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d038:	ea40 000c 	orr.w	r0, r0, ip
 801d03c:	f1ce 0c10 	rsb	ip, lr, #16
 801d040:	ea4b 0101 	orr.w	r1, fp, r1
 801d044:	f109 39ff 	add.w	r9, r9, #4294967295
 801d048:	ebac 0c02 	sub.w	ip, ip, r2
 801d04c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801d050:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801d054:	4351      	muls	r1, r2
 801d056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d058:	fb0c 1c00 	mla	ip, ip, r0, r1
 801d05c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d05e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801d062:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801d066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d068:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d06c:	0412      	lsls	r2, r2, #16
 801d06e:	ea4b 0000 	orr.w	r0, fp, r0
 801d072:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801d076:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d07a:	fb03 c000 	mla	r0, r3, r0, ip
 801d07e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801d082:	ea42 0b0b 	orr.w	fp, r2, fp
 801d086:	fb03 000b 	mla	r0, r3, fp, r0
 801d08a:	0d43      	lsrs	r3, r0, #21
 801d08c:	0940      	lsrs	r0, r0, #5
 801d08e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d092:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d096:	4318      	orrs	r0, r3
 801d098:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d09a:	441c      	add	r4, r3
 801d09c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d09e:	f82a 0b02 	strh.w	r0, [sl], #2
 801d0a2:	441e      	add	r6, r3
 801d0a4:	e73b      	b.n	801cf1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d0a6:	b00f      	add	sp, #60	; 0x3c
 801d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b0:	b085      	sub	sp, #20
 801d0b2:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801d0b6:	9102      	str	r1, [sp, #8]
 801d0b8:	2c00      	cmp	r4, #0
 801d0ba:	fb04 7103 	mla	r1, r4, r3, r7
 801d0be:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801d0c2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801d0c6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801d0ca:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801d0ce:	f2c0 811b 	blt.w	801d308 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801d0d2:	45a6      	cmp	lr, r4
 801d0d4:	f340 8118 	ble.w	801d308 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801d0d8:	2f00      	cmp	r7, #0
 801d0da:	f2c0 8113 	blt.w	801d304 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801d0de:	42bb      	cmp	r3, r7
 801d0e0:	f340 8110 	ble.w	801d304 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801d0e4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801d0e8:	1c7a      	adds	r2, r7, #1
 801d0ea:	f100 8110 	bmi.w	801d30e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	f340 810d 	ble.w	801d30e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801d0f4:	2e00      	cmp	r6, #0
 801d0f6:	f000 810c 	beq.w	801d312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801d0fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801d0fe:	3401      	adds	r4, #1
 801d100:	f100 810b 	bmi.w	801d31a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801d104:	45a6      	cmp	lr, r4
 801d106:	f340 8108 	ble.w	801d31a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801d10a:	2800      	cmp	r0, #0
 801d10c:	f000 8108 	beq.w	801d320 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801d110:	2f00      	cmp	r7, #0
 801d112:	f2c0 8100 	blt.w	801d316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801d116:	42bb      	cmp	r3, r7
 801d118:	f340 80fd 	ble.w	801d316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801d11c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801d120:	3701      	adds	r7, #1
 801d122:	f100 8100 	bmi.w	801d326 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801d126:	42bb      	cmp	r3, r7
 801d128:	f340 80fd 	ble.w	801d326 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801d12c:	2e00      	cmp	r6, #0
 801d12e:	f000 80fc 	beq.w	801d32a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801d132:	3301      	adds	r3, #1
 801d134:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d138:	b2b6      	uxth	r6, r6
 801d13a:	b280      	uxth	r0, r0
 801d13c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801d140:	fb00 fe06 	mul.w	lr, r0, r6
 801d144:	0136      	lsls	r6, r6, #4
 801d146:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801d14a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801d14e:	eba6 070e 	sub.w	r7, r6, lr
 801d152:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801d156:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d15a:	b280      	uxth	r0, r0
 801d15c:	b2bf      	uxth	r7, r7
 801d15e:	1a1b      	subs	r3, r3, r0
 801d160:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d164:	fb0a f607 	mul.w	r6, sl, r7
 801d168:	b29b      	uxth	r3, r3
 801d16a:	fb0b 6603 	mla	r6, fp, r3, r6
 801d16e:	fb00 6609 	mla	r6, r0, r9, r6
 801d172:	fb0e 6608 	mla	r6, lr, r8, r6
 801d176:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d17a:	9600      	str	r6, [sp, #0]
 801d17c:	2e00      	cmp	r6, #0
 801d17e:	f000 80be 	beq.w	801d2fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801d182:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d186:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d18a:	9e02      	ldr	r6, [sp, #8]
 801d18c:	fb0b fc0c 	mul.w	ip, fp, ip
 801d190:	fb0b f505 	mul.w	r5, fp, r5
 801d194:	8836      	ldrh	r6, [r6, #0]
 801d196:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d19a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d19e:	9501      	str	r5, [sp, #4]
 801d1a0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d1a4:	44dc      	add	ip, fp
 801d1a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1aa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d1ae:	9503      	str	r5, [sp, #12]
 801d1b0:	9d01      	ldr	r5, [sp, #4]
 801d1b2:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801d1b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d1ba:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801d1be:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d1c2:	fb0a fc0c 	mul.w	ip, sl, ip
 801d1c6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801d1ca:	fb0a fa01 	mul.w	sl, sl, r1
 801d1ce:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801d1d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d1d6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801d1da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d1de:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801d1e2:	4465      	add	r5, ip
 801d1e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d1e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d1ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d1f0:	fb09 fc0c 	mul.w	ip, r9, ip
 801d1f4:	0a2d      	lsrs	r5, r5, #8
 801d1f6:	fb09 f904 	mul.w	r9, r9, r4
 801d1fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d1fe:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801d202:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d206:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801d20a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d20e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d212:	437d      	muls	r5, r7
 801d214:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d218:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801d21c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d220:	4461      	add	r1, ip
 801d222:	fb08 f404 	mul.w	r4, r8, r4
 801d226:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d22a:	fb08 f802 	mul.w	r8, r8, r2
 801d22e:	0a09      	lsrs	r1, r1, #8
 801d230:	0a22      	lsrs	r2, r4, #8
 801d232:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801d236:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d23a:	fb07 f70a 	mul.w	r7, r7, sl
 801d23e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d242:	4414      	add	r4, r2
 801d244:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d248:	0a24      	lsrs	r4, r4, #8
 801d24a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d24e:	9a03      	ldr	r2, [sp, #12]
 801d250:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d254:	fb02 5503 	mla	r5, r2, r3, r5
 801d258:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d25c:	9a00      	ldr	r2, [sp, #0]
 801d25e:	fb04 540e 	mla	r4, r4, lr, r5
 801d262:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d266:	1235      	asrs	r5, r6, #8
 801d268:	fb01 4100 	mla	r1, r1, r0, r4
 801d26c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d270:	0a09      	lsrs	r1, r1, #8
 801d272:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801d276:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801d27a:	fb03 7101 	mla	r1, r3, r1, r7
 801d27e:	fb0e 1e08 	mla	lr, lr, r8, r1
 801d282:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801d286:	fb00 e101 	mla	r1, r0, r1, lr
 801d28a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801d28e:	b287      	uxth	r7, r0
 801d290:	0a09      	lsrs	r1, r1, #8
 801d292:	437a      	muls	r2, r7
 801d294:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d298:	1c53      	adds	r3, r2, #1
 801d29a:	4321      	orrs	r1, r4
 801d29c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d2a0:	0c0a      	lsrs	r2, r1, #16
 801d2a2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801d2a6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d2aa:	b2c8      	uxtb	r0, r1
 801d2ac:	fb12 f207 	smulbb	r2, r2, r7
 801d2b0:	fb14 f407 	smulbb	r4, r4, r7
 801d2b4:	b2db      	uxtb	r3, r3
 801d2b6:	fb10 f007 	smulbb	r0, r0, r7
 801d2ba:	fb05 2503 	mla	r5, r5, r3, r2
 801d2be:	10f2      	asrs	r2, r6, #3
 801d2c0:	00f6      	lsls	r6, r6, #3
 801d2c2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d2c6:	b2ad      	uxth	r5, r5
 801d2c8:	b2f6      	uxtb	r6, r6
 801d2ca:	fb02 4203 	mla	r2, r2, r3, r4
 801d2ce:	fb06 0303 	mla	r3, r6, r3, r0
 801d2d2:	b294      	uxth	r4, r2
 801d2d4:	b299      	uxth	r1, r3
 801d2d6:	1c6b      	adds	r3, r5, #1
 801d2d8:	1c62      	adds	r2, r4, #1
 801d2da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d2de:	1c4b      	adds	r3, r1, #1
 801d2e0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d2e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d2e8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d2ec:	0952      	lsrs	r2, r2, #5
 801d2ee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d2f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d2f6:	432b      	orrs	r3, r5
 801d2f8:	4313      	orrs	r3, r2
 801d2fa:	9a02      	ldr	r2, [sp, #8]
 801d2fc:	8013      	strh	r3, [r2, #0]
 801d2fe:	b005      	add	sp, #20
 801d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d304:	2500      	movs	r5, #0
 801d306:	e6ef      	b.n	801d0e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801d308:	2100      	movs	r1, #0
 801d30a:	460d      	mov	r5, r1
 801d30c:	e6f7      	b.n	801d0fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801d30e:	2100      	movs	r1, #0
 801d310:	e6f5      	b.n	801d0fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801d312:	4631      	mov	r1, r6
 801d314:	e6f3      	b.n	801d0fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801d316:	2400      	movs	r4, #0
 801d318:	e702      	b.n	801d120 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801d31a:	2200      	movs	r2, #0
 801d31c:	4614      	mov	r4, r2
 801d31e:	e70b      	b.n	801d138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801d320:	4602      	mov	r2, r0
 801d322:	4604      	mov	r4, r0
 801d324:	e708      	b.n	801d138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801d326:	2200      	movs	r2, #0
 801d328:	e706      	b.n	801d138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801d32a:	4632      	mov	r2, r6
 801d32c:	e704      	b.n	801d138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801d32e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d32e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d332:	b09d      	sub	sp, #116	; 0x74
 801d334:	9219      	str	r2, [sp, #100]	; 0x64
 801d336:	9307      	str	r3, [sp, #28]
 801d338:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d33a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801d33e:	901b      	str	r0, [sp, #108]	; 0x6c
 801d340:	931a      	str	r3, [sp, #104]	; 0x68
 801d342:	6850      	ldr	r0, [r2, #4]
 801d344:	9117      	str	r1, [sp, #92]	; 0x5c
 801d346:	6812      	ldr	r2, [r2, #0]
 801d348:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d34c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801d350:	fb00 1303 	mla	r3, r0, r3, r1
 801d354:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d358:	930a      	str	r3, [sp, #40]	; 0x28
 801d35a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	9310      	str	r3, [sp, #64]	; 0x40
 801d360:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801d364:	930b      	str	r3, [sp, #44]	; 0x2c
 801d366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d368:	2b00      	cmp	r3, #0
 801d36a:	dc03      	bgt.n	801d374 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d36e:	2b00      	cmp	r3, #0
 801d370:	f340 8375 	ble.w	801da5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801d374:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d376:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d37a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d37e:	1e48      	subs	r0, r1, #1
 801d380:	1e57      	subs	r7, r2, #1
 801d382:	9b07      	ldr	r3, [sp, #28]
 801d384:	2b00      	cmp	r3, #0
 801d386:	f340 818e 	ble.w	801d6a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d38a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d38e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d392:	d406      	bmi.n	801d3a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d394:	4584      	cmp	ip, r0
 801d396:	da04      	bge.n	801d3a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d398:	2b00      	cmp	r3, #0
 801d39a:	db02      	blt.n	801d3a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d39c:	42bb      	cmp	r3, r7
 801d39e:	f2c0 8183 	blt.w	801d6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801d3a2:	f11c 0c01 	adds.w	ip, ip, #1
 801d3a6:	f100 8173 	bmi.w	801d690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801d3aa:	4561      	cmp	r1, ip
 801d3ac:	f2c0 8170 	blt.w	801d690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801d3b0:	3301      	adds	r3, #1
 801d3b2:	f100 816d 	bmi.w	801d690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801d3b6:	429a      	cmp	r2, r3
 801d3b8:	f2c0 816a 	blt.w	801d690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801d3bc:	9b07      	ldr	r3, [sp, #28]
 801d3be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d3c0:	9318      	str	r3, [sp, #96]	; 0x60
 801d3c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	f340 818c 	ble.w	801d6e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801d3ca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d3cc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d3d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d3d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801d3d6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d3da:	1422      	asrs	r2, r4, #16
 801d3dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d3e0:	689b      	ldr	r3, [r3, #8]
 801d3e2:	f100 81cd 	bmi.w	801d780 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d3e6:	f103 38ff 	add.w	r8, r3, #4294967295
 801d3ea:	4542      	cmp	r2, r8
 801d3ec:	f280 81c8 	bge.w	801d780 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d3f0:	f1bc 0f00 	cmp.w	ip, #0
 801d3f4:	f2c0 81c4 	blt.w	801d780 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d3f8:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d3fc:	45c4      	cmp	ip, r8
 801d3fe:	f280 81bf 	bge.w	801d780 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d402:	b21b      	sxth	r3, r3
 801d404:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d406:	fb0c 2203 	mla	r2, ip, r3, r2
 801d40a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801d40e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d412:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d416:	2800      	cmp	r0, #0
 801d418:	f000 81a9 	beq.w	801d76e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801d41c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d420:	950c      	str	r5, [sp, #48]	; 0x30
 801d422:	0e2d      	lsrs	r5, r5, #24
 801d424:	9513      	str	r5, [sp, #76]	; 0x4c
 801d426:	b181      	cbz	r1, 801d44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d42c:	3b01      	subs	r3, #1
 801d42e:	009b      	lsls	r3, r3, #2
 801d430:	3304      	adds	r3, #4
 801d432:	eb08 0c03 	add.w	ip, r8, r3
 801d436:	f858 3003 	ldr.w	r3, [r8, r3]
 801d43a:	9308      	str	r3, [sp, #32]
 801d43c:	0e1b      	lsrs	r3, r3, #24
 801d43e:	9311      	str	r3, [sp, #68]	; 0x44
 801d440:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d444:	930d      	str	r3, [sp, #52]	; 0x34
 801d446:	0e1b      	lsrs	r3, r3, #24
 801d448:	9314      	str	r3, [sp, #80]	; 0x50
 801d44a:	b280      	uxth	r0, r0
 801d44c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d44e:	b289      	uxth	r1, r1
 801d450:	fb00 f901 	mul.w	r9, r0, r1
 801d454:	0100      	lsls	r0, r0, #4
 801d456:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d45a:	eba0 0809 	sub.w	r8, r0, r9
 801d45e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801d462:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d464:	b289      	uxth	r1, r1
 801d466:	fa1f f888 	uxth.w	r8, r8
 801d46a:	1a5b      	subs	r3, r3, r1
 801d46c:	fb08 f000 	mul.w	r0, r8, r0
 801d470:	b29b      	uxth	r3, r3
 801d472:	fb03 000e 	mla	r0, r3, lr, r0
 801d476:	fb01 0005 	mla	r0, r1, r5, r0
 801d47a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d47c:	fb09 0005 	mla	r0, r9, r5, r0
 801d480:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d484:	2800      	cmp	r0, #0
 801d486:	f000 80fa 	beq.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d48a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d48e:	d01b      	beq.n	801d4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d490:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801d494:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d498:	fb0e fa0a 	mul.w	sl, lr, sl
 801d49c:	fb0e fe02 	mul.w	lr, lr, r2
 801d4a0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801d4a4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d4a8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d4ac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d4b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d4b4:	4452      	add	r2, sl
 801d4b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4ba:	0a12      	lsrs	r2, r2, #8
 801d4bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d4c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d4c4:	ea42 020c 	orr.w	r2, r2, ip
 801d4c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d4ca:	2dff      	cmp	r5, #255	; 0xff
 801d4cc:	d021      	beq.n	801d512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801d4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d4d0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d4d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d4d6:	fb05 fb0b 	mul.w	fp, r5, fp
 801d4da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d4dc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d4e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d4e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d4e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d4ea:	fb05 fa0a 	mul.w	sl, r5, sl
 801d4ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d4f6:	44de      	add	lr, fp
 801d4f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d4fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d500:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d504:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d508:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d50c:	ea4e 050a 	orr.w	r5, lr, sl
 801d510:	950c      	str	r5, [sp, #48]	; 0x30
 801d512:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d514:	2dff      	cmp	r5, #255	; 0xff
 801d516:	d021      	beq.n	801d55c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801d518:	9d08      	ldr	r5, [sp, #32]
 801d51a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d51e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d520:	fb05 fb0b 	mul.w	fp, r5, fp
 801d524:	9d08      	ldr	r5, [sp, #32]
 801d526:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d52a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d52c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d530:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d534:	fb05 fa0a 	mul.w	sl, r5, sl
 801d538:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d53c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d540:	44de      	add	lr, fp
 801d542:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d546:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d54a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d54e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d552:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d556:	ea4e 050a 	orr.w	r5, lr, sl
 801d55a:	9508      	str	r5, [sp, #32]
 801d55c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d55e:	2dff      	cmp	r5, #255	; 0xff
 801d560:	d021      	beq.n	801d5a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d562:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d564:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d568:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d56a:	fb05 fb0b 	mul.w	fp, r5, fp
 801d56e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d570:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d574:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d576:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d57a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d57e:	fb05 fa0a 	mul.w	sl, r5, sl
 801d582:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d586:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d58a:	44de      	add	lr, fp
 801d58c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d590:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d594:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d598:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d59c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d5a0:	ea4e 050a 	orr.w	r5, lr, sl
 801d5a4:	950d      	str	r5, [sp, #52]	; 0x34
 801d5a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d5a8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801d5ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d5b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d5b4:	9d08      	ldr	r5, [sp, #32]
 801d5b6:	fb08 fc0c 	mul.w	ip, r8, ip
 801d5ba:	fb03 cc0e 	mla	ip, r3, lr, ip
 801d5be:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801d5c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d5c4:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d5c8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801d5cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d5ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d5d2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801d5d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d5d8:	fb08 f80e 	mul.w	r8, r8, lr
 801d5dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5e0:	fb03 8202 	mla	r2, r3, r2, r8
 801d5e4:	9b08      	ldr	r3, [sp, #32]
 801d5e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5ea:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801d5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5f0:	fb01 220a 	mla	r2, r1, sl, r2
 801d5f4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801d5f8:	883b      	ldrh	r3, [r7, #0]
 801d5fa:	fb09 2901 	mla	r9, r9, r1, r2
 801d5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d600:	1219      	asrs	r1, r3, #8
 801d602:	4342      	muls	r2, r0
 801d604:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d608:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d60c:	1c50      	adds	r0, r2, #1
 801d60e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d612:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d616:	ea4c 0c09 	orr.w	ip, ip, r9
 801d61a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d61e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d622:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d626:	fa5f fc8c 	uxtb.w	ip, ip
 801d62a:	fb12 f205 	smulbb	r2, r2, r5
 801d62e:	b2c0      	uxtb	r0, r0
 801d630:	fb1c fc05 	smulbb	ip, ip, r5
 801d634:	fb01 2100 	mla	r1, r1, r0, r2
 801d638:	10da      	asrs	r2, r3, #3
 801d63a:	fb1e fe05 	smulbb	lr, lr, r5
 801d63e:	00db      	lsls	r3, r3, #3
 801d640:	b289      	uxth	r1, r1
 801d642:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d646:	b2db      	uxtb	r3, r3
 801d648:	fb02 e200 	mla	r2, r2, r0, lr
 801d64c:	fb03 c300 	mla	r3, r3, r0, ip
 801d650:	b292      	uxth	r2, r2
 801d652:	fa1f fc83 	uxth.w	ip, r3
 801d656:	1c4b      	adds	r3, r1, #1
 801d658:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d65c:	f10c 0301 	add.w	r3, ip, #1
 801d660:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d664:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d668:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d66c:	430b      	orrs	r3, r1
 801d66e:	1c51      	adds	r1, r2, #1
 801d670:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d674:	0952      	lsrs	r2, r2, #5
 801d676:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d67a:	4313      	orrs	r3, r2
 801d67c:	803b      	strh	r3, [r7, #0]
 801d67e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d680:	3702      	adds	r7, #2
 801d682:	441c      	add	r4, r3
 801d684:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d686:	441e      	add	r6, r3
 801d688:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d68a:	3b01      	subs	r3, #1
 801d68c:	9318      	str	r3, [sp, #96]	; 0x60
 801d68e:	e698      	b.n	801d3c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d690:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d692:	441c      	add	r4, r3
 801d694:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d696:	441e      	add	r6, r3
 801d698:	9b07      	ldr	r3, [sp, #28]
 801d69a:	3b01      	subs	r3, #1
 801d69c:	9307      	str	r3, [sp, #28]
 801d69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6a0:	3302      	adds	r3, #2
 801d6a2:	930a      	str	r3, [sp, #40]	; 0x28
 801d6a4:	e66d      	b.n	801d382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d6a6:	d023      	beq.n	801d6f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801d6a8:	9b07      	ldr	r3, [sp, #28]
 801d6aa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801d6ac:	3b01      	subs	r3, #1
 801d6ae:	fb00 4003 	mla	r0, r0, r3, r4
 801d6b2:	1400      	asrs	r0, r0, #16
 801d6b4:	f53f ae82 	bmi.w	801d3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6b8:	3901      	subs	r1, #1
 801d6ba:	4288      	cmp	r0, r1
 801d6bc:	f6bf ae7e 	bge.w	801d3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6c0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d6c2:	fb01 6303 	mla	r3, r1, r3, r6
 801d6c6:	141b      	asrs	r3, r3, #16
 801d6c8:	f53f ae78 	bmi.w	801d3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6cc:	3a01      	subs	r2, #1
 801d6ce:	4293      	cmp	r3, r2
 801d6d0:	f6bf ae74 	bge.w	801d3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d6d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801d6dc:	f1bb 0f00 	cmp.w	fp, #0
 801d6e0:	dc6c      	bgt.n	801d7bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801d6e2:	9b07      	ldr	r3, [sp, #28]
 801d6e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801d6ee:	930a      	str	r3, [sp, #40]	; 0x28
 801d6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	f340 81b3 	ble.w	801da5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801d6f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d6fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d702:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d706:	eef0 6a62 	vmov.f32	s13, s5
 801d70a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d70e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d712:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d716:	ee16 4a90 	vmov	r4, s13
 801d71a:	eef0 6a43 	vmov.f32	s13, s6
 801d71e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d722:	ee16 6a90 	vmov	r6, s13
 801d726:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d72a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d72e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d732:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d736:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d73a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d73e:	ee12 2a90 	vmov	r2, s5
 801d742:	eef0 2a47 	vmov.f32	s5, s14
 801d746:	fb92 f3f3 	sdiv	r3, r2, r3
 801d74a:	ee13 2a10 	vmov	r2, s6
 801d74e:	9329      	str	r3, [sp, #164]	; 0xa4
 801d750:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d752:	eeb0 3a67 	vmov.f32	s6, s15
 801d756:	fb92 f3f3 	sdiv	r3, r2, r3
 801d75a:	932a      	str	r3, [sp, #168]	; 0xa8
 801d75c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d75e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d760:	3b01      	subs	r3, #1
 801d762:	9317      	str	r3, [sp, #92]	; 0x5c
 801d764:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d766:	bf08      	it	eq
 801d768:	4613      	moveq	r3, r2
 801d76a:	9307      	str	r3, [sp, #28]
 801d76c:	e5fb      	b.n	801d366 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d76e:	2900      	cmp	r1, #0
 801d770:	f43f ae6b 	beq.w	801d44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d774:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d778:	9308      	str	r3, [sp, #32]
 801d77a:	0e1b      	lsrs	r3, r3, #24
 801d77c:	9311      	str	r3, [sp, #68]	; 0x44
 801d77e:	e664      	b.n	801d44a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d780:	f112 0801 	adds.w	r8, r2, #1
 801d784:	f53f af7b 	bmi.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d788:	4543      	cmp	r3, r8
 801d78a:	f6ff af78 	blt.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d78e:	f11c 0801 	adds.w	r8, ip, #1
 801d792:	f53f af74 	bmi.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d796:	45c6      	cmp	lr, r8
 801d798:	f6ff af71 	blt.w	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d79c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d79e:	b21b      	sxth	r3, r3
 801d7a0:	9201      	str	r2, [sp, #4]
 801d7a2:	fa0f f28e 	sxth.w	r2, lr
 801d7a6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801d7aa:	e9cd c002 	strd	ip, r0, [sp, #8]
 801d7ae:	9200      	str	r2, [sp, #0]
 801d7b0:	4639      	mov	r1, r7
 801d7b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801d7b6:	f7ff fc79 	bl	801d0ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801d7ba:	e760      	b.n	801d67e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801d7bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d7be:	1427      	asrs	r7, r4, #16
 801d7c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d7c2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801d7c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d7ca:	1433      	asrs	r3, r6, #16
 801d7cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d7d0:	fb01 7303 	mla	r3, r1, r3, r7
 801d7d4:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801d7d8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d7dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d7e0:	2a00      	cmp	r2, #0
 801d7e2:	f000 8133 	beq.w	801da4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801d7e6:	687d      	ldr	r5, [r7, #4]
 801d7e8:	950e      	str	r5, [sp, #56]	; 0x38
 801d7ea:	0e2d      	lsrs	r5, r5, #24
 801d7ec:	9515      	str	r5, [sp, #84]	; 0x54
 801d7ee:	b178      	cbz	r0, 801d810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801d7f0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801d7f4:	3901      	subs	r1, #1
 801d7f6:	0089      	lsls	r1, r1, #2
 801d7f8:	3104      	adds	r1, #4
 801d7fa:	eb07 0e01 	add.w	lr, r7, r1
 801d7fe:	5879      	ldr	r1, [r7, r1]
 801d800:	9109      	str	r1, [sp, #36]	; 0x24
 801d802:	0e09      	lsrs	r1, r1, #24
 801d804:	9112      	str	r1, [sp, #72]	; 0x48
 801d806:	f8de 1004 	ldr.w	r1, [lr, #4]
 801d80a:	910f      	str	r1, [sp, #60]	; 0x3c
 801d80c:	0e09      	lsrs	r1, r1, #24
 801d80e:	9116      	str	r1, [sp, #88]	; 0x58
 801d810:	b292      	uxth	r2, r2
 801d812:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d814:	b280      	uxth	r0, r0
 801d816:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d818:	fb02 f800 	mul.w	r8, r2, r0
 801d81c:	0112      	lsls	r2, r2, #4
 801d81e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d822:	eba2 0e08 	sub.w	lr, r2, r8
 801d826:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d82a:	b280      	uxth	r0, r0
 801d82c:	fa1f fe8e 	uxth.w	lr, lr
 801d830:	1a12      	subs	r2, r2, r0
 801d832:	fb0e f101 	mul.w	r1, lr, r1
 801d836:	b292      	uxth	r2, r2
 801d838:	fb02 110c 	mla	r1, r2, ip, r1
 801d83c:	fb00 1105 	mla	r1, r0, r5, r1
 801d840:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d842:	fb08 1105 	mla	r1, r8, r5, r1
 801d846:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d84a:	2900      	cmp	r1, #0
 801d84c:	f000 80f5 	beq.w	801da3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801d850:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d854:	d019      	beq.n	801d88a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801d856:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d85a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d85e:	fb0c fa0a 	mul.w	sl, ip, sl
 801d862:	fb0c fc03 	mul.w	ip, ip, r3
 801d866:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d86a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d86e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d872:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d876:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d87a:	4453      	add	r3, sl
 801d87c:	0a3f      	lsrs	r7, r7, #8
 801d87e:	0a1b      	lsrs	r3, r3, #8
 801d880:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d884:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d888:	433b      	orrs	r3, r7
 801d88a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d88c:	2dff      	cmp	r5, #255	; 0xff
 801d88e:	d020      	beq.n	801d8d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801d890:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d892:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d896:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d898:	436f      	muls	r7, r5
 801d89a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d89c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d8a0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d8a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d8a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d8aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d8ae:	fb05 fa0a 	mul.w	sl, r5, sl
 801d8b2:	44bc      	add	ip, r7
 801d8b4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d8b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d8c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d8c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d8cc:	ea4c 050a 	orr.w	r5, ip, sl
 801d8d0:	950e      	str	r5, [sp, #56]	; 0x38
 801d8d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d8d4:	2dff      	cmp	r5, #255	; 0xff
 801d8d6:	d020      	beq.n	801d91a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801d8d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d8da:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d8de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d8e0:	436f      	muls	r7, r5
 801d8e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d8e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d8e8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d8ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d8ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d8f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d8f6:	fb05 fa0a 	mul.w	sl, r5, sl
 801d8fa:	44bc      	add	ip, r7
 801d8fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d900:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d904:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d908:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d90c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d910:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d914:	ea4c 050a 	orr.w	r5, ip, sl
 801d918:	9509      	str	r5, [sp, #36]	; 0x24
 801d91a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d91c:	2dff      	cmp	r5, #255	; 0xff
 801d91e:	d020      	beq.n	801d962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801d920:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d922:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d926:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d928:	436f      	muls	r7, r5
 801d92a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d92c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d930:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d934:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d936:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d93a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d93e:	fb05 fa0a 	mul.w	sl, r5, sl
 801d942:	44bc      	add	ip, r7
 801d944:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d948:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d94c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d950:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d954:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d958:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d95c:	ea4c 050a 	orr.w	r5, ip, sl
 801d960:	950f      	str	r5, [sp, #60]	; 0x3c
 801d962:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d964:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d96c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d970:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d972:	fb0e f707 	mul.w	r7, lr, r7
 801d976:	fb02 770c 	mla	r7, r2, ip, r7
 801d97a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d97e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d980:	fb00 770c 	mla	r7, r0, ip, r7
 801d984:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d988:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d98a:	fb08 770c 	mla	r7, r8, ip, r7
 801d98e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801d992:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d994:	fb0e fe0c 	mul.w	lr, lr, ip
 801d998:	0a3f      	lsrs	r7, r7, #8
 801d99a:	fb02 e303 	mla	r3, r2, r3, lr
 801d99e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d9a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d9aa:	fb00 330a 	mla	r3, r0, sl, r3
 801d9ae:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d9b2:	f8b9 0000 	ldrh.w	r0, [r9]
 801d9b6:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9bc:	1202      	asrs	r2, r0, #8
 801d9be:	4359      	muls	r1, r3
 801d9c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d9c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d9cc:	1c4b      	adds	r3, r1, #1
 801d9ce:	ea47 070c 	orr.w	r7, r7, ip
 801d9d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d9d6:	0c3b      	lsrs	r3, r7, #16
 801d9d8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d9dc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d9e0:	b2ff      	uxtb	r7, r7
 801d9e2:	fb13 f305 	smulbb	r3, r3, r5
 801d9e6:	b2c9      	uxtb	r1, r1
 801d9e8:	fb17 f705 	smulbb	r7, r7, r5
 801d9ec:	fb02 3201 	mla	r2, r2, r1, r3
 801d9f0:	10c3      	asrs	r3, r0, #3
 801d9f2:	fb1c fc05 	smulbb	ip, ip, r5
 801d9f6:	00c0      	lsls	r0, r0, #3
 801d9f8:	b292      	uxth	r2, r2
 801d9fa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d9fe:	b2c0      	uxtb	r0, r0
 801da00:	fb03 c301 	mla	r3, r3, r1, ip
 801da04:	fb00 7001 	mla	r0, r0, r1, r7
 801da08:	1c51      	adds	r1, r2, #1
 801da0a:	b29b      	uxth	r3, r3
 801da0c:	b280      	uxth	r0, r0
 801da0e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801da12:	f100 0c01 	add.w	ip, r0, #1
 801da16:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801da1a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801da1e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801da22:	ea4c 0202 	orr.w	r2, ip, r2
 801da26:	f103 0c01 	add.w	ip, r3, #1
 801da2a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801da2e:	095b      	lsrs	r3, r3, #5
 801da30:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801da34:	431a      	orrs	r2, r3
 801da36:	f8a9 2000 	strh.w	r2, [r9]
 801da3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801da3c:	f109 0902 	add.w	r9, r9, #2
 801da40:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da44:	441c      	add	r4, r3
 801da46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801da48:	441e      	add	r6, r3
 801da4a:	e647      	b.n	801d6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801da4c:	2800      	cmp	r0, #0
 801da4e:	f43f aedf 	beq.w	801d810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801da52:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801da56:	9109      	str	r1, [sp, #36]	; 0x24
 801da58:	0e09      	lsrs	r1, r1, #24
 801da5a:	9112      	str	r1, [sp, #72]	; 0x48
 801da5c:	e6d8      	b.n	801d810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801da5e:	b01d      	add	sp, #116	; 0x74
 801da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da68:	b085      	sub	sp, #20
 801da6a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801da6e:	9102      	str	r1, [sp, #8]
 801da70:	2c00      	cmp	r4, #0
 801da72:	fb04 7103 	mla	r1, r4, r3, r7
 801da76:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801da7a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801da7e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801da82:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801da86:	f2c0 810c 	blt.w	801dca2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801da8a:	45a6      	cmp	lr, r4
 801da8c:	f340 8109 	ble.w	801dca2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801da90:	2f00      	cmp	r7, #0
 801da92:	f2c0 8104 	blt.w	801dc9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801da96:	42bb      	cmp	r3, r7
 801da98:	f340 8101 	ble.w	801dc9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801da9c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801daa0:	1c7a      	adds	r2, r7, #1
 801daa2:	f100 8101 	bmi.w	801dca8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801daa6:	4293      	cmp	r3, r2
 801daa8:	f340 80fe 	ble.w	801dca8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801daac:	2e00      	cmp	r6, #0
 801daae:	f000 80fd 	beq.w	801dcac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 801dab2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801dab6:	3401      	adds	r4, #1
 801dab8:	f100 80fc 	bmi.w	801dcb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801dabc:	45a6      	cmp	lr, r4
 801dabe:	f340 80f9 	ble.w	801dcb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801dac2:	2800      	cmp	r0, #0
 801dac4:	f000 80f9 	beq.w	801dcba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 801dac8:	2f00      	cmp	r7, #0
 801daca:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 801dace:	f2c0 80ef 	blt.w	801dcb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801dad2:	42bb      	cmp	r3, r7
 801dad4:	f340 80ec 	ble.w	801dcb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801dad8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801dadc:	3701      	adds	r7, #1
 801dade:	f100 80ef 	bmi.w	801dcc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801dae2:	42bb      	cmp	r3, r7
 801dae4:	f340 80ec 	ble.w	801dcc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801dae8:	2e00      	cmp	r6, #0
 801daea:	f000 80eb 	beq.w	801dcc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 801daee:	6852      	ldr	r2, [r2, #4]
 801daf0:	b2b6      	uxth	r6, r6
 801daf2:	b280      	uxth	r0, r0
 801daf4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801daf8:	fb00 fe06 	mul.w	lr, r0, r6
 801dafc:	0136      	lsls	r6, r6, #4
 801dafe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801db02:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801db06:	eba6 070e 	sub.w	r7, r6, lr
 801db0a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801db0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801db12:	b280      	uxth	r0, r0
 801db14:	b2bf      	uxth	r7, r7
 801db16:	1a1b      	subs	r3, r3, r0
 801db18:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801db1c:	fb07 f60a 	mul.w	r6, r7, sl
 801db20:	b29b      	uxth	r3, r3
 801db22:	fb0b 6603 	mla	r6, fp, r3, r6
 801db26:	fb00 6609 	mla	r6, r0, r9, r6
 801db2a:	fb0e 6608 	mla	r6, lr, r8, r6
 801db2e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801db32:	9600      	str	r6, [sp, #0]
 801db34:	2e00      	cmp	r6, #0
 801db36:	f000 80af 	beq.w	801dc98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 801db3a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801db3e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801db42:	9e02      	ldr	r6, [sp, #8]
 801db44:	fb0b fc0c 	mul.w	ip, fp, ip
 801db48:	fb0b f505 	mul.w	r5, fp, r5
 801db4c:	8836      	ldrh	r6, [r6, #0]
 801db4e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801db52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801db56:	9501      	str	r5, [sp, #4]
 801db58:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801db5c:	44dc      	add	ip, fp
 801db5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db62:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801db66:	9503      	str	r5, [sp, #12]
 801db68:	9d01      	ldr	r5, [sp, #4]
 801db6a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801db6e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801db72:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801db76:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801db7a:	fb0a fc0c 	mul.w	ip, sl, ip
 801db7e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801db82:	fb0a fa01 	mul.w	sl, sl, r1
 801db86:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801db8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801db8e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801db92:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801db96:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801db9a:	4465      	add	r5, ip
 801db9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dba0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dba4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dba8:	fb09 fc0c 	mul.w	ip, r9, ip
 801dbac:	0a2d      	lsrs	r5, r5, #8
 801dbae:	fb09 f904 	mul.w	r9, r9, r4
 801dbb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dbb6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801dbba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dbbe:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801dbc2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dbc6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801dbca:	437d      	muls	r5, r7
 801dbcc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801dbd0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801dbd4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dbd8:	4461      	add	r1, ip
 801dbda:	fb08 f404 	mul.w	r4, r8, r4
 801dbde:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dbe2:	fb08 f802 	mul.w	r8, r8, r2
 801dbe6:	0a09      	lsrs	r1, r1, #8
 801dbe8:	0a22      	lsrs	r2, r4, #8
 801dbea:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801dbee:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801dbf2:	fb07 f70a 	mul.w	r7, r7, sl
 801dbf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dbfa:	4414      	add	r4, r2
 801dbfc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801dc00:	0a24      	lsrs	r4, r4, #8
 801dc02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dc06:	9a03      	ldr	r2, [sp, #12]
 801dc08:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dc0c:	fb02 5503 	mla	r5, r2, r3, r5
 801dc10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dc14:	fb04 540e 	mla	r4, r4, lr, r5
 801dc18:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dc1c:	fb01 4100 	mla	r1, r1, r0, r4
 801dc20:	0a09      	lsrs	r1, r1, #8
 801dc22:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801dc26:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801dc2a:	fb03 7101 	mla	r1, r3, r1, r7
 801dc2e:	9b00      	ldr	r3, [sp, #0]
 801dc30:	fb0e 1e08 	mla	lr, lr, r8, r1
 801dc34:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801dc38:	43da      	mvns	r2, r3
 801dc3a:	1233      	asrs	r3, r6, #8
 801dc3c:	fb00 e101 	mla	r1, r0, r1, lr
 801dc40:	10f0      	asrs	r0, r6, #3
 801dc42:	b2d2      	uxtb	r2, r2
 801dc44:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801dc48:	0a09      	lsrs	r1, r1, #8
 801dc4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dc4e:	00f6      	lsls	r6, r6, #3
 801dc50:	4353      	muls	r3, r2
 801dc52:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dc56:	4350      	muls	r0, r2
 801dc58:	b2f6      	uxtb	r6, r6
 801dc5a:	4321      	orrs	r1, r4
 801dc5c:	4356      	muls	r6, r2
 801dc5e:	1c5a      	adds	r2, r3, #1
 801dc60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc64:	0c0b      	lsrs	r3, r1, #16
 801dc66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dc6a:	1c42      	adds	r2, r0, #1
 801dc6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801dc70:	0a0a      	lsrs	r2, r1, #8
 801dc72:	021b      	lsls	r3, r3, #8
 801dc74:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801dc78:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801dc7c:	00d2      	lsls	r2, r2, #3
 801dc7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dc82:	4313      	orrs	r3, r2
 801dc84:	1c72      	adds	r2, r6, #1
 801dc86:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801dc8a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 801dc8e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801dc92:	4319      	orrs	r1, r3
 801dc94:	9b02      	ldr	r3, [sp, #8]
 801dc96:	8019      	strh	r1, [r3, #0]
 801dc98:	b005      	add	sp, #20
 801dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc9e:	2500      	movs	r5, #0
 801dca0:	e6fe      	b.n	801daa0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 801dca2:	2100      	movs	r1, #0
 801dca4:	460d      	mov	r5, r1
 801dca6:	e706      	b.n	801dab6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801dca8:	2100      	movs	r1, #0
 801dcaa:	e704      	b.n	801dab6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801dcac:	4631      	mov	r1, r6
 801dcae:	e702      	b.n	801dab6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801dcb0:	2400      	movs	r4, #0
 801dcb2:	e713      	b.n	801dadc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 801dcb4:	2200      	movs	r2, #0
 801dcb6:	4614      	mov	r4, r2
 801dcb8:	e71a      	b.n	801daf0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801dcba:	4602      	mov	r2, r0
 801dcbc:	4604      	mov	r4, r0
 801dcbe:	e717      	b.n	801daf0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	e715      	b.n	801daf0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801dcc4:	4632      	mov	r2, r6
 801dcc6:	e713      	b.n	801daf0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

0801dcc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dccc:	b09b      	sub	sp, #108	; 0x6c
 801dcce:	9218      	str	r2, [sp, #96]	; 0x60
 801dcd0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dcd2:	9019      	str	r0, [sp, #100]	; 0x64
 801dcd4:	9116      	str	r1, [sp, #88]	; 0x58
 801dcd6:	6850      	ldr	r0, [r2, #4]
 801dcd8:	9307      	str	r3, [sp, #28]
 801dcda:	6812      	ldr	r2, [r2, #0]
 801dcdc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801dce0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801dce4:	fb00 1303 	mla	r3, r0, r3, r1
 801dce8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dcec:	930a      	str	r3, [sp, #40]	; 0x28
 801dcee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	dc03      	bgt.n	801dd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801dcfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	f340 8387 	ble.w	801e410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801dd02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dd04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dd08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dd0c:	1e48      	subs	r0, r1, #1
 801dd0e:	1e57      	subs	r7, r2, #1
 801dd10:	9b07      	ldr	r3, [sp, #28]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	f340 8166 	ble.w	801dfe4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801dd18:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dd1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dd20:	d406      	bmi.n	801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dd22:	4584      	cmp	ip, r0
 801dd24:	da04      	bge.n	801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	db02      	blt.n	801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dd2a:	42bb      	cmp	r3, r7
 801dd2c:	f2c0 815b 	blt.w	801dfe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dd30:	f11c 0c01 	adds.w	ip, ip, #1
 801dd34:	f100 814b 	bmi.w	801dfce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801dd38:	4561      	cmp	r1, ip
 801dd3a:	f2c0 8148 	blt.w	801dfce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801dd3e:	3301      	adds	r3, #1
 801dd40:	f100 8145 	bmi.w	801dfce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801dd44:	429a      	cmp	r2, r3
 801dd46:	f2c0 8142 	blt.w	801dfce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801dd4a:	9b07      	ldr	r3, [sp, #28]
 801dd4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dd4e:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	f340 8165 	ble.w	801e022 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801dd58:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801dd5a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801dd5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dd60:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801dd64:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dd68:	1422      	asrs	r2, r4, #16
 801dd6a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801dd6e:	689b      	ldr	r3, [r3, #8]
 801dd70:	f100 81d5 	bmi.w	801e11e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801dd74:	f103 38ff 	add.w	r8, r3, #4294967295
 801dd78:	4542      	cmp	r2, r8
 801dd7a:	f280 81d0 	bge.w	801e11e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801dd7e:	f1bc 0f00 	cmp.w	ip, #0
 801dd82:	f2c0 81cc 	blt.w	801e11e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801dd86:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dd8a:	45c4      	cmp	ip, r8
 801dd8c:	f280 81c7 	bge.w	801e11e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801dd90:	b21b      	sxth	r3, r3
 801dd92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dd94:	fb0c 2203 	mla	r2, ip, r3, r2
 801dd98:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801dd9c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dda0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801dda4:	2900      	cmp	r1, #0
 801dda6:	f000 8182 	beq.w	801e0ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801ddaa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ddae:	950b      	str	r5, [sp, #44]	; 0x2c
 801ddb0:	0e2d      	lsrs	r5, r5, #24
 801ddb2:	9512      	str	r5, [sp, #72]	; 0x48
 801ddb4:	b180      	cbz	r0, 801ddd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801ddb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ddba:	3b01      	subs	r3, #1
 801ddbc:	009b      	lsls	r3, r3, #2
 801ddbe:	3304      	adds	r3, #4
 801ddc0:	eb08 0c03 	add.w	ip, r8, r3
 801ddc4:	f858 3003 	ldr.w	r3, [r8, r3]
 801ddc8:	9308      	str	r3, [sp, #32]
 801ddca:	0e1b      	lsrs	r3, r3, #24
 801ddcc:	9310      	str	r3, [sp, #64]	; 0x40
 801ddce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ddd2:	930c      	str	r3, [sp, #48]	; 0x30
 801ddd4:	0e1b      	lsrs	r3, r3, #24
 801ddd6:	9313      	str	r3, [sp, #76]	; 0x4c
 801ddd8:	b289      	uxth	r1, r1
 801ddda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dddc:	b280      	uxth	r0, r0
 801ddde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801dde0:	fb01 f900 	mul.w	r9, r1, r0
 801dde4:	0109      	lsls	r1, r1, #4
 801dde6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ddea:	eba1 0809 	sub.w	r8, r1, r9
 801ddee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801ddf2:	b280      	uxth	r0, r0
 801ddf4:	fa1f f888 	uxth.w	r8, r8
 801ddf8:	1a09      	subs	r1, r1, r0
 801ddfa:	fb08 f303 	mul.w	r3, r8, r3
 801ddfe:	b289      	uxth	r1, r1
 801de00:	fb01 330e 	mla	r3, r1, lr, r3
 801de04:	fb00 3305 	mla	r3, r0, r5, r3
 801de08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801de0a:	fb09 3305 	mla	r3, r9, r5, r3
 801de0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801de12:	2b00      	cmp	r3, #0
 801de14:	f000 80d2 	beq.w	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801de18:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801de1c:	d01b      	beq.n	801de56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 801de1e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801de22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801de26:	fb0e fa0a 	mul.w	sl, lr, sl
 801de2a:	fb0e fe02 	mul.w	lr, lr, r2
 801de2e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801de32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801de36:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801de3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801de3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801de42:	4452      	add	r2, sl
 801de44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de48:	0a12      	lsrs	r2, r2, #8
 801de4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801de4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801de52:	ea42 020c 	orr.w	r2, r2, ip
 801de56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801de58:	2dff      	cmp	r5, #255	; 0xff
 801de5a:	d021      	beq.n	801dea0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801de5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801de5e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801de62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801de64:	fb05 fb0b 	mul.w	fp, r5, fp
 801de68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801de6a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801de6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801de70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801de74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801de78:	fb05 fa0a 	mul.w	sl, r5, sl
 801de7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801de84:	44de      	add	lr, fp
 801de86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801de8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801de8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de9a:	ea4e 050a 	orr.w	r5, lr, sl
 801de9e:	950b      	str	r5, [sp, #44]	; 0x2c
 801dea0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801dea2:	2dff      	cmp	r5, #255	; 0xff
 801dea4:	d021      	beq.n	801deea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801dea6:	9d08      	ldr	r5, [sp, #32]
 801dea8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801deac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801deae:	fb05 fb0b 	mul.w	fp, r5, fp
 801deb2:	9d08      	ldr	r5, [sp, #32]
 801deb4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801deb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801deba:	fb05 fa0e 	mul.w	sl, r5, lr
 801debe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dec2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dec6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801deca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dece:	44de      	add	lr, fp
 801ded0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ded4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ded8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dedc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dee0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dee4:	ea4e 050a 	orr.w	r5, lr, sl
 801dee8:	9508      	str	r5, [sp, #32]
 801deea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801deec:	2dff      	cmp	r5, #255	; 0xff
 801deee:	d021      	beq.n	801df34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801def0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801def2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801def6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801def8:	fb05 fb0b 	mul.w	fp, r5, fp
 801defc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801defe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801df02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801df04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801df08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801df0c:	fb05 fa0a 	mul.w	sl, r5, sl
 801df10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801df14:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801df18:	44de      	add	lr, fp
 801df1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801df1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801df22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801df2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801df2e:	ea4e 050a 	orr.w	r5, lr, sl
 801df32:	950c      	str	r5, [sp, #48]	; 0x30
 801df34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801df36:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801df3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801df3e:	2bff      	cmp	r3, #255	; 0xff
 801df40:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801df44:	9d08      	ldr	r5, [sp, #32]
 801df46:	fb08 fc0c 	mul.w	ip, r8, ip
 801df4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801df4e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801df52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df54:	fb00 cc0e 	mla	ip, r0, lr, ip
 801df58:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801df5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801df5e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801df62:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801df66:	fb08 f80e 	mul.w	r8, r8, lr
 801df6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df6e:	fb01 8202 	mla	r2, r1, r2, r8
 801df72:	9908      	ldr	r1, [sp, #32]
 801df74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df78:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801df7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801df7e:	fb00 220a 	mla	r2, r0, sl, r2
 801df82:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801df86:	fb09 2900 	mla	r9, r9, r0, r2
 801df8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801df8e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801df92:	ea4c 0c09 	orr.w	ip, ip, r9
 801df96:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801df9a:	f040 8091 	bne.w	801e0c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801df9e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801dfa2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801dfa6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dfaa:	f022 0207 	bic.w	r2, r2, #7
 801dfae:	431a      	orrs	r2, r3
 801dfb0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801dfb4:	ea4c 0c02 	orr.w	ip, ip, r2
 801dfb8:	f8a7 c000 	strh.w	ip, [r7]
 801dfbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dfbe:	3702      	adds	r7, #2
 801dfc0:	441c      	add	r4, r3
 801dfc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dfc4:	441e      	add	r6, r3
 801dfc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dfc8:	3b01      	subs	r3, #1
 801dfca:	9317      	str	r3, [sp, #92]	; 0x5c
 801dfcc:	e6c0      	b.n	801dd50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801dfce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dfd0:	441c      	add	r4, r3
 801dfd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dfd4:	441e      	add	r6, r3
 801dfd6:	9b07      	ldr	r3, [sp, #28]
 801dfd8:	3b01      	subs	r3, #1
 801dfda:	9307      	str	r3, [sp, #28]
 801dfdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfde:	3302      	adds	r3, #2
 801dfe0:	930a      	str	r3, [sp, #40]	; 0x28
 801dfe2:	e695      	b.n	801dd10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dfe4:	d024      	beq.n	801e030 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801dfe6:	9b07      	ldr	r3, [sp, #28]
 801dfe8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801dfea:	3b01      	subs	r3, #1
 801dfec:	fb00 4003 	mla	r0, r0, r3, r4
 801dff0:	1400      	asrs	r0, r0, #16
 801dff2:	f53f aeaa 	bmi.w	801dd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dff6:	3901      	subs	r1, #1
 801dff8:	4288      	cmp	r0, r1
 801dffa:	f6bf aea6 	bge.w	801dd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dffe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e000:	fb01 6303 	mla	r3, r1, r3, r6
 801e004:	141b      	asrs	r3, r3, #16
 801e006:	f53f aea0 	bmi.w	801dd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e00a:	3a01      	subs	r2, #1
 801e00c:	4293      	cmp	r3, r2
 801e00e:	f6bf ae9c 	bge.w	801dd4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e012:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e016:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801e01a:	f1bb 0f00 	cmp.w	fp, #0
 801e01e:	f300 809a 	bgt.w	801e156 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801e022:	9b07      	ldr	r3, [sp, #28]
 801e024:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e02a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801e02e:	930a      	str	r3, [sp, #40]	; 0x28
 801e030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e032:	2b00      	cmp	r3, #0
 801e034:	f340 81ec 	ble.w	801e410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801e038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e03c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e03e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e042:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e046:	eef0 6a62 	vmov.f32	s13, s5
 801e04a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e04e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e052:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e056:	ee16 4a90 	vmov	r4, s13
 801e05a:	eef0 6a43 	vmov.f32	s13, s6
 801e05e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e062:	ee16 6a90 	vmov	r6, s13
 801e066:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e06a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e06e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e072:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e076:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e07a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e07e:	ee12 2a90 	vmov	r2, s5
 801e082:	eef0 2a47 	vmov.f32	s5, s14
 801e086:	fb92 f3f3 	sdiv	r3, r2, r3
 801e08a:	ee13 2a10 	vmov	r2, s6
 801e08e:	9327      	str	r3, [sp, #156]	; 0x9c
 801e090:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e092:	eeb0 3a67 	vmov.f32	s6, s15
 801e096:	fb92 f3f3 	sdiv	r3, r2, r3
 801e09a:	9328      	str	r3, [sp, #160]	; 0xa0
 801e09c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e09e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e0a0:	3b01      	subs	r3, #1
 801e0a2:	9316      	str	r3, [sp, #88]	; 0x58
 801e0a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0a6:	bf08      	it	eq
 801e0a8:	4613      	moveq	r3, r2
 801e0aa:	9307      	str	r3, [sp, #28]
 801e0ac:	e622      	b.n	801dcf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801e0ae:	2800      	cmp	r0, #0
 801e0b0:	f43f ae92 	beq.w	801ddd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801e0b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e0b8:	9308      	str	r3, [sp, #32]
 801e0ba:	0e1b      	lsrs	r3, r3, #24
 801e0bc:	9310      	str	r3, [sp, #64]	; 0x40
 801e0be:	e68b      	b.n	801ddd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801e0c0:	8839      	ldrh	r1, [r7, #0]
 801e0c2:	43db      	mvns	r3, r3
 801e0c4:	4dd4      	ldr	r5, [pc, #848]	; (801e418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801e0c6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801e0ca:	fa5f f883 	uxtb.w	r8, r3
 801e0ce:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e0d2:	10c8      	asrs	r0, r1, #3
 801e0d4:	00cb      	lsls	r3, r1, #3
 801e0d6:	fb0e fe08 	mul.w	lr, lr, r8
 801e0da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e0de:	b2db      	uxtb	r3, r3
 801e0e0:	f10e 0101 	add.w	r1, lr, #1
 801e0e4:	fb00 f008 	mul.w	r0, r0, r8
 801e0e8:	fb03 f308 	mul.w	r3, r3, r8
 801e0ec:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801e0f0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801e0f4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801e0f8:	f100 0e01 	add.w	lr, r0, #1
 801e0fc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801e100:	b2c9      	uxtb	r1, r1
 801e102:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e106:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 801e10a:	00d2      	lsls	r2, r2, #3
 801e10c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e110:	430a      	orrs	r2, r1
 801e112:	1c59      	adds	r1, r3, #1
 801e114:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e118:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e11c:	e748      	b.n	801dfb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801e11e:	f112 0801 	adds.w	r8, r2, #1
 801e122:	f53f af4b 	bmi.w	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e126:	4543      	cmp	r3, r8
 801e128:	f6ff af48 	blt.w	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e12c:	f11c 0801 	adds.w	r8, ip, #1
 801e130:	f53f af44 	bmi.w	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e134:	45c6      	cmp	lr, r8
 801e136:	f6ff af41 	blt.w	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e13a:	b21b      	sxth	r3, r3
 801e13c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801e140:	fa0f f28e 	sxth.w	r2, lr
 801e144:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801e148:	9200      	str	r2, [sp, #0]
 801e14a:	4639      	mov	r1, r7
 801e14c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e14e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e150:	f7ff fc88 	bl	801da64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801e154:	e732      	b.n	801dfbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e156:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e158:	1421      	asrs	r1, r4, #16
 801e15a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e15c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e160:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801e164:	1433      	asrs	r3, r6, #16
 801e166:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e16a:	fb07 1303 	mla	r3, r7, r3, r1
 801e16e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e170:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e174:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e178:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e17c:	2a00      	cmp	r2, #0
 801e17e:	f000 8108 	beq.w	801e392 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 801e182:	684d      	ldr	r5, [r1, #4]
 801e184:	950d      	str	r5, [sp, #52]	; 0x34
 801e186:	0e2d      	lsrs	r5, r5, #24
 801e188:	9514      	str	r5, [sp, #80]	; 0x50
 801e18a:	b178      	cbz	r0, 801e1ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801e18c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801e190:	3f01      	subs	r7, #1
 801e192:	00bf      	lsls	r7, r7, #2
 801e194:	3704      	adds	r7, #4
 801e196:	eb01 0e07 	add.w	lr, r1, r7
 801e19a:	59c9      	ldr	r1, [r1, r7]
 801e19c:	9109      	str	r1, [sp, #36]	; 0x24
 801e19e:	0e09      	lsrs	r1, r1, #24
 801e1a0:	9111      	str	r1, [sp, #68]	; 0x44
 801e1a2:	f8de 1004 	ldr.w	r1, [lr, #4]
 801e1a6:	910e      	str	r1, [sp, #56]	; 0x38
 801e1a8:	0e09      	lsrs	r1, r1, #24
 801e1aa:	9115      	str	r1, [sp, #84]	; 0x54
 801e1ac:	b292      	uxth	r2, r2
 801e1ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e1b0:	b280      	uxth	r0, r0
 801e1b2:	fb02 f900 	mul.w	r9, r2, r0
 801e1b6:	0112      	lsls	r2, r2, #4
 801e1b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e1bc:	eba2 0e09 	sub.w	lr, r2, r9
 801e1c0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e1c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e1c6:	b280      	uxth	r0, r0
 801e1c8:	fa1f fe8e 	uxth.w	lr, lr
 801e1cc:	1a09      	subs	r1, r1, r0
 801e1ce:	fb0e f202 	mul.w	r2, lr, r2
 801e1d2:	b289      	uxth	r1, r1
 801e1d4:	fb01 220c 	mla	r2, r1, ip, r2
 801e1d8:	fb00 2205 	mla	r2, r0, r5, r2
 801e1dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e1de:	fb09 2205 	mla	r2, r9, r5, r2
 801e1e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e1e6:	2a00      	cmp	r2, #0
 801e1e8:	f000 80ca 	beq.w	801e380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e1ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e1f0:	d019      	beq.n	801e226 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 801e1f2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e1f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e1fa:	fb0c fa0a 	mul.w	sl, ip, sl
 801e1fe:	fb0c fc03 	mul.w	ip, ip, r3
 801e202:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e206:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e20a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e20e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e212:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e216:	4453      	add	r3, sl
 801e218:	0a3f      	lsrs	r7, r7, #8
 801e21a:	0a1b      	lsrs	r3, r3, #8
 801e21c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e220:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e224:	433b      	orrs	r3, r7
 801e226:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e228:	2dff      	cmp	r5, #255	; 0xff
 801e22a:	d020      	beq.n	801e26e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 801e22c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e22e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801e232:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e234:	436f      	muls	r7, r5
 801e236:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e238:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e23c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801e240:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e242:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e246:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e24a:	fb05 fa0a 	mul.w	sl, r5, sl
 801e24e:	44bc      	add	ip, r7
 801e250:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e258:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e25c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e260:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e264:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e268:	ea4c 050a 	orr.w	r5, ip, sl
 801e26c:	950d      	str	r5, [sp, #52]	; 0x34
 801e26e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e270:	2dff      	cmp	r5, #255	; 0xff
 801e272:	d020      	beq.n	801e2b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 801e274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e276:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801e27a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e27c:	436f      	muls	r7, r5
 801e27e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e280:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801e284:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e286:	fb05 fa0c 	mul.w	sl, r5, ip
 801e28a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e28e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e292:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e296:	44bc      	add	ip, r7
 801e298:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e29c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e2a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2b0:	ea4c 050a 	orr.w	r5, ip, sl
 801e2b4:	9509      	str	r5, [sp, #36]	; 0x24
 801e2b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e2b8:	2dff      	cmp	r5, #255	; 0xff
 801e2ba:	d020      	beq.n	801e2fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 801e2bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e2be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801e2c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e2c4:	436f      	muls	r7, r5
 801e2c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e2c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e2cc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801e2d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e2d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e2d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2da:	fb05 fa0a 	mul.w	sl, r5, sl
 801e2de:	44bc      	add	ip, r7
 801e2e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e2e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e2ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2f8:	ea4c 050a 	orr.w	r5, ip, sl
 801e2fc:	950e      	str	r5, [sp, #56]	; 0x38
 801e2fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e300:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e308:	2aff      	cmp	r2, #255	; 0xff
 801e30a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801e30e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e310:	fb0e f707 	mul.w	r7, lr, r7
 801e314:	fb01 770c 	mla	r7, r1, ip, r7
 801e318:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801e31c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e31e:	fb00 770c 	mla	r7, r0, ip, r7
 801e322:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801e326:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e328:	fb09 770c 	mla	r7, r9, ip, r7
 801e32c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801e330:	fb0e fe0c 	mul.w	lr, lr, ip
 801e334:	ea4f 2717 	mov.w	r7, r7, lsr #8
 801e338:	fb01 e303 	mla	r3, r1, r3, lr
 801e33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e33e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e342:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e346:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e348:	fb00 330a 	mla	r3, r0, sl, r3
 801e34c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e350:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e354:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e358:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e35c:	ea47 070c 	orr.w	r7, r7, ip
 801e360:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801e364:	d11e      	bne.n	801e3a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801e366:	097a      	lsrs	r2, r7, #5
 801e368:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801e36c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801e370:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e374:	f023 0307 	bic.w	r3, r3, #7
 801e378:	4313      	orrs	r3, r2
 801e37a:	431f      	orrs	r7, r3
 801e37c:	f8a8 7000 	strh.w	r7, [r8]
 801e380:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e382:	f108 0802 	add.w	r8, r8, #2
 801e386:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e38a:	441c      	add	r4, r3
 801e38c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e38e:	441e      	add	r6, r3
 801e390:	e643      	b.n	801e01a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801e392:	2800      	cmp	r0, #0
 801e394:	f43f af0a 	beq.w	801e1ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801e398:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801e39c:	9109      	str	r1, [sp, #36]	; 0x24
 801e39e:	0e09      	lsrs	r1, r1, #24
 801e3a0:	9111      	str	r1, [sp, #68]	; 0x44
 801e3a2:	e703      	b.n	801e1ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801e3a4:	f8b8 1000 	ldrh.w	r1, [r8]
 801e3a8:	43d2      	mvns	r2, r2
 801e3aa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801e3ae:	fa5f fe82 	uxtb.w	lr, r2
 801e3b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e3b6:	10c8      	asrs	r0, r1, #3
 801e3b8:	00ca      	lsls	r2, r1, #3
 801e3ba:	fb0c fc0e 	mul.w	ip, ip, lr
 801e3be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e3c2:	b2d2      	uxtb	r2, r2
 801e3c4:	f10c 0101 	add.w	r1, ip, #1
 801e3c8:	fb00 f00e 	mul.w	r0, r0, lr
 801e3cc:	fb02 f20e 	mul.w	r2, r2, lr
 801e3d0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801e3d4:	0c39      	lsrs	r1, r7, #16
 801e3d6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801e3da:	490f      	ldr	r1, [pc, #60]	; (801e418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801e3dc:	fa5f fc8c 	uxtb.w	ip, ip
 801e3e0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801e3e4:	1c41      	adds	r1, r0, #1
 801e3e6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801e3ea:	1c51      	adds	r1, r2, #1
 801e3ec:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e3f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e3f4:	00c0      	lsls	r0, r0, #3
 801e3f6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e3fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e3fe:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801e402:	ea4c 0c00 	orr.w	ip, ip, r0
 801e406:	ea47 0c0c 	orr.w	ip, r7, ip
 801e40a:	f8a8 c000 	strh.w	ip, [r8]
 801e40e:	e7b7      	b.n	801e380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e410:	b01b      	add	sp, #108	; 0x6c
 801e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e416:	bf00      	nop
 801e418:	fffff800 	.word	0xfffff800

0801e41c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801e41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e420:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 801e424:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801e428:	2d00      	cmp	r5, #0
 801e42a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e42e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801e432:	fb05 0e03 	mla	lr, r5, r3, r0
 801e436:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e43a:	f2c0 808c 	blt.w	801e556 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801e43e:	45a9      	cmp	r9, r5
 801e440:	f340 8089 	ble.w	801e556 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801e444:	2800      	cmp	r0, #0
 801e446:	f2c0 8084 	blt.w	801e552 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801e44a:	4580      	cmp	r8, r0
 801e44c:	f340 8081 	ble.w	801e552 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801e450:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801e454:	f01e 0f01 	tst.w	lr, #1
 801e458:	5d16      	ldrb	r6, [r2, r4]
 801e45a:	bf0c      	ite	eq
 801e45c:	f006 060f 	andeq.w	r6, r6, #15
 801e460:	1136      	asrne	r6, r6, #4
 801e462:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e466:	b2f6      	uxtb	r6, r6
 801e468:	1c44      	adds	r4, r0, #1
 801e46a:	d477      	bmi.n	801e55c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801e46c:	45a0      	cmp	r8, r4
 801e46e:	dd75      	ble.n	801e55c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801e470:	2f00      	cmp	r7, #0
 801e472:	d075      	beq.n	801e560 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 801e474:	f10e 0a01 	add.w	sl, lr, #1
 801e478:	ea4f 045a 	mov.w	r4, sl, lsr #1
 801e47c:	f01a 0f01 	tst.w	sl, #1
 801e480:	5d14      	ldrb	r4, [r2, r4]
 801e482:	bf0c      	ite	eq
 801e484:	f004 040f 	andeq.w	r4, r4, #15
 801e488:	1124      	asrne	r4, r4, #4
 801e48a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e48e:	b2e4      	uxtb	r4, r4
 801e490:	3501      	adds	r5, #1
 801e492:	d469      	bmi.n	801e568 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801e494:	45a9      	cmp	r9, r5
 801e496:	dd67      	ble.n	801e568 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801e498:	f1bc 0f00 	cmp.w	ip, #0
 801e49c:	d067      	beq.n	801e56e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 801e49e:	2800      	cmp	r0, #0
 801e4a0:	db60      	blt.n	801e564 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801e4a2:	4580      	cmp	r8, r0
 801e4a4:	dd5e      	ble.n	801e564 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801e4a6:	eb03 090e 	add.w	r9, r3, lr
 801e4aa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 801e4ae:	f019 0f01 	tst.w	r9, #1
 801e4b2:	5d55      	ldrb	r5, [r2, r5]
 801e4b4:	bf0c      	ite	eq
 801e4b6:	f005 050f 	andeq.w	r5, r5, #15
 801e4ba:	112d      	asrne	r5, r5, #4
 801e4bc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e4c0:	b2ed      	uxtb	r5, r5
 801e4c2:	3001      	adds	r0, #1
 801e4c4:	d456      	bmi.n	801e574 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801e4c6:	4580      	cmp	r8, r0
 801e4c8:	dd54      	ble.n	801e574 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801e4ca:	2f00      	cmp	r7, #0
 801e4cc:	d054      	beq.n	801e578 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 801e4ce:	3301      	adds	r3, #1
 801e4d0:	449e      	add	lr, r3
 801e4d2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e4d6:	f01e 0f01 	tst.w	lr, #1
 801e4da:	5cd0      	ldrb	r0, [r2, r3]
 801e4dc:	bf0c      	ite	eq
 801e4de:	f000 000f 	andeq.w	r0, r0, #15
 801e4e2:	1100      	asrne	r0, r0, #4
 801e4e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e4e8:	b2c3      	uxtb	r3, r0
 801e4ea:	b2ba      	uxth	r2, r7
 801e4ec:	fa1f fc8c 	uxth.w	ip, ip
 801e4f0:	fb02 f00c 	mul.w	r0, r2, ip
 801e4f4:	0112      	lsls	r2, r2, #4
 801e4f6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801e4fa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801e4fe:	1a12      	subs	r2, r2, r0
 801e500:	fa1f fc8c 	uxth.w	ip, ip
 801e504:	b292      	uxth	r2, r2
 801e506:	eba7 070c 	sub.w	r7, r7, ip
 801e50a:	4362      	muls	r2, r4
 801e50c:	b2bf      	uxth	r7, r7
 801e50e:	fb06 2207 	mla	r2, r6, r7, r2
 801e512:	fb0c 2505 	mla	r5, ip, r5, r2
 801e516:	fb00 5303 	mla	r3, r0, r3, r5
 801e51a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e51e:	b1b3      	cbz	r3, 801e54e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801e520:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801e524:	435a      	muls	r2, r3
 801e526:	1c53      	adds	r3, r2, #1
 801e528:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e52c:	4a2d      	ldr	r2, [pc, #180]	; (801e5e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801e52e:	121b      	asrs	r3, r3, #8
 801e530:	6812      	ldr	r2, [r2, #0]
 801e532:	2bff      	cmp	r3, #255	; 0xff
 801e534:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e538:	d120      	bne.n	801e57c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 801e53a:	0950      	lsrs	r0, r2, #5
 801e53c:	4b2a      	ldr	r3, [pc, #168]	; (801e5e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801e53e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e542:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e546:	4033      	ands	r3, r6
 801e548:	4318      	orrs	r0, r3
 801e54a:	4302      	orrs	r2, r0
 801e54c:	800a      	strh	r2, [r1, #0]
 801e54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e552:	2600      	movs	r6, #0
 801e554:	e788      	b.n	801e468 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 801e556:	2400      	movs	r4, #0
 801e558:	4626      	mov	r6, r4
 801e55a:	e799      	b.n	801e490 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801e55c:	2400      	movs	r4, #0
 801e55e:	e797      	b.n	801e490 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801e560:	463c      	mov	r4, r7
 801e562:	e795      	b.n	801e490 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801e564:	2500      	movs	r5, #0
 801e566:	e7ac      	b.n	801e4c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 801e568:	2300      	movs	r3, #0
 801e56a:	461d      	mov	r5, r3
 801e56c:	e7bd      	b.n	801e4ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801e56e:	4663      	mov	r3, ip
 801e570:	4665      	mov	r5, ip
 801e572:	e7ba      	b.n	801e4ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801e574:	2300      	movs	r3, #0
 801e576:	e7b8      	b.n	801e4ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801e578:	463b      	mov	r3, r7
 801e57a:	e7b6      	b.n	801e4ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801e57c:	880d      	ldrh	r5, [r1, #0]
 801e57e:	b29f      	uxth	r7, r3
 801e580:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801e584:	43db      	mvns	r3, r3
 801e586:	122c      	asrs	r4, r5, #8
 801e588:	fb10 f007 	smulbb	r0, r0, r7
 801e58c:	b2db      	uxtb	r3, r3
 801e58e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e592:	b2f6      	uxtb	r6, r6
 801e594:	b2d2      	uxtb	r2, r2
 801e596:	fb04 0403 	mla	r4, r4, r3, r0
 801e59a:	10e8      	asrs	r0, r5, #3
 801e59c:	fb12 f207 	smulbb	r2, r2, r7
 801e5a0:	00ed      	lsls	r5, r5, #3
 801e5a2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e5a6:	b2a4      	uxth	r4, r4
 801e5a8:	fb16 f607 	smulbb	r6, r6, r7
 801e5ac:	b2ed      	uxtb	r5, r5
 801e5ae:	fb00 6603 	mla	r6, r0, r3, r6
 801e5b2:	fb05 2303 	mla	r3, r5, r3, r2
 801e5b6:	b2b0      	uxth	r0, r6
 801e5b8:	b29a      	uxth	r2, r3
 801e5ba:	1c63      	adds	r3, r4, #1
 801e5bc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e5c0:	1c53      	adds	r3, r2, #1
 801e5c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e5c6:	1c42      	adds	r2, r0, #1
 801e5c8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e5cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e5d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e5d4:	0940      	lsrs	r0, r0, #5
 801e5d6:	4323      	orrs	r3, r4
 801e5d8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e5dc:	4303      	orrs	r3, r0
 801e5de:	800b      	strh	r3, [r1, #0]
 801e5e0:	e7b5      	b.n	801e54e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801e5e2:	bf00      	nop
 801e5e4:	2002491c 	.word	0x2002491c
 801e5e8:	00fff800 	.word	0x00fff800

0801e5ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f0:	b097      	sub	sp, #92	; 0x5c
 801e5f2:	9214      	str	r2, [sp, #80]	; 0x50
 801e5f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e5f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e5f8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e5fc:	9015      	str	r0, [sp, #84]	; 0x54
 801e5fe:	910d      	str	r1, [sp, #52]	; 0x34
 801e600:	6850      	ldr	r0, [r2, #4]
 801e602:	930f      	str	r3, [sp, #60]	; 0x3c
 801e604:	6812      	ldr	r2, [r2, #0]
 801e606:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801e60a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 801e60e:	fb00 1303 	mla	r3, r0, r3, r1
 801e612:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e616:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e618:	689b      	ldr	r3, [r3, #8]
 801e61a:	3301      	adds	r3, #1
 801e61c:	f023 0301 	bic.w	r3, r3, #1
 801e620:	930a      	str	r3, [sp, #40]	; 0x28
 801e622:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e624:	681f      	ldr	r7, [r3, #0]
 801e626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e628:	2b00      	cmp	r3, #0
 801e62a:	dc03      	bgt.n	801e634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e62c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e62e:	2b00      	cmp	r3, #0
 801e630:	f340 8289 	ble.w	801eb46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 801e634:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e636:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e63a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e63e:	1e48      	subs	r0, r1, #1
 801e640:	f102 3cff 	add.w	ip, r2, #4294967295
 801e644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e646:	2b00      	cmp	r3, #0
 801e648:	f340 80c5 	ble.w	801e7d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e64c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e650:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e654:	d406      	bmi.n	801e664 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e656:	4586      	cmp	lr, r0
 801e658:	da04      	bge.n	801e664 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	db02      	blt.n	801e664 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e65e:	4563      	cmp	r3, ip
 801e660:	f2c0 80ba 	blt.w	801e7d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e664:	f11e 0e01 	adds.w	lr, lr, #1
 801e668:	f100 80ab 	bmi.w	801e7c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e66c:	4571      	cmp	r1, lr
 801e66e:	f2c0 80a8 	blt.w	801e7c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e672:	3301      	adds	r3, #1
 801e674:	f100 80a5 	bmi.w	801e7c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e678:	429a      	cmp	r2, r3
 801e67a:	f2c0 80a2 	blt.w	801e7c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e680:	46c8      	mov	r8, r9
 801e682:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 801e686:	930e      	str	r3, [sp, #56]	; 0x38
 801e688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	f340 80c4 	ble.w	801e818 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801e690:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e692:	1430      	asrs	r0, r6, #16
 801e694:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e698:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e69c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e6a0:	1423      	asrs	r3, r4, #16
 801e6a2:	f100 814f 	bmi.w	801e944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e6a6:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e6aa:	455b      	cmp	r3, fp
 801e6ac:	f280 814a 	bge.w	801e944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e6b0:	2800      	cmp	r0, #0
 801e6b2:	f2c0 8147 	blt.w	801e944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e6b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e6ba:	4558      	cmp	r0, fp
 801e6bc:	f280 8142 	bge.w	801e944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e6c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e6c2:	fb00 3305 	mla	r3, r0, r5, r3
 801e6c6:	0858      	lsrs	r0, r3, #1
 801e6c8:	07dd      	lsls	r5, r3, #31
 801e6ca:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e6ce:	bf54      	ite	pl
 801e6d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e6d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e6d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e6dc:	fa5f fc8c 	uxtb.w	ip, ip
 801e6e0:	2a00      	cmp	r2, #0
 801e6e2:	f000 80dd 	beq.w	801e8a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801e6e6:	1c58      	adds	r0, r3, #1
 801e6e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e6ec:	07c0      	lsls	r0, r0, #31
 801e6ee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e6f2:	bf54      	ite	pl
 801e6f4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e6f8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e6fc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e700:	fa5f f08e 	uxtb.w	r0, lr
 801e704:	9010      	str	r0, [sp, #64]	; 0x40
 801e706:	b1d9      	cbz	r1, 801e740 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e708:	4453      	add	r3, sl
 801e70a:	0858      	lsrs	r0, r3, #1
 801e70c:	07dd      	lsls	r5, r3, #31
 801e70e:	f103 0301 	add.w	r3, r3, #1
 801e712:	5c38      	ldrb	r0, [r7, r0]
 801e714:	bf54      	ite	pl
 801e716:	f000 000f 	andpl.w	r0, r0, #15
 801e71a:	1100      	asrmi	r0, r0, #4
 801e71c:	07dd      	lsls	r5, r3, #31
 801e71e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e722:	b2c0      	uxtb	r0, r0
 801e724:	900b      	str	r0, [sp, #44]	; 0x2c
 801e726:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e72a:	f817 e000 	ldrb.w	lr, [r7, r0]
 801e72e:	bf54      	ite	pl
 801e730:	f00e 030f 	andpl.w	r3, lr, #15
 801e734:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801e738:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e73c:	b2db      	uxtb	r3, r3
 801e73e:	9311      	str	r3, [sp, #68]	; 0x44
 801e740:	b292      	uxth	r2, r2
 801e742:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e744:	b289      	uxth	r1, r1
 801e746:	fb02 f301 	mul.w	r3, r2, r1
 801e74a:	0112      	lsls	r2, r2, #4
 801e74c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e750:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801e754:	1ad2      	subs	r2, r2, r3
 801e756:	b289      	uxth	r1, r1
 801e758:	b292      	uxth	r2, r2
 801e75a:	1a40      	subs	r0, r0, r1
 801e75c:	436a      	muls	r2, r5
 801e75e:	b280      	uxth	r0, r0
 801e760:	fb0c 2c00 	mla	ip, ip, r0, r2
 801e764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e766:	fb01 c102 	mla	r1, r1, r2, ip
 801e76a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e76c:	fb03 1302 	mla	r3, r3, r2, r1
 801e770:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e774:	b1db      	cbz	r3, 801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e778:	4353      	muls	r3, r2
 801e77a:	1c5a      	adds	r2, r3, #1
 801e77c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e780:	4ac6      	ldr	r2, [pc, #792]	; (801ea9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e782:	121b      	asrs	r3, r3, #8
 801e784:	6812      	ldr	r2, [r2, #0]
 801e786:	2bff      	cmp	r3, #255	; 0xff
 801e788:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801e78c:	f040 8099 	bne.w	801e8c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e790:	0953      	lsrs	r3, r2, #5
 801e792:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801e796:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e79a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e79e:	f02c 0c07 	bic.w	ip, ip, #7
 801e7a2:	ea43 0c0c 	orr.w	ip, r3, ip
 801e7a6:	ea4c 0202 	orr.w	r2, ip, r2
 801e7aa:	f8a8 2000 	strh.w	r2, [r8]
 801e7ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e7b0:	f108 0802 	add.w	r8, r8, #2
 801e7b4:	441c      	add	r4, r3
 801e7b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e7b8:	441e      	add	r6, r3
 801e7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7bc:	3b01      	subs	r3, #1
 801e7be:	930e      	str	r3, [sp, #56]	; 0x38
 801e7c0:	e762      	b.n	801e688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e7c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e7c4:	f109 0902 	add.w	r9, r9, #2
 801e7c8:	441c      	add	r4, r3
 801e7ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e7cc:	441e      	add	r6, r3
 801e7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7d0:	3b01      	subs	r3, #1
 801e7d2:	9309      	str	r3, [sp, #36]	; 0x24
 801e7d4:	e736      	b.n	801e644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e7d6:	d024      	beq.n	801e822 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7da:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e7dc:	3b01      	subs	r3, #1
 801e7de:	fb00 4003 	mla	r0, r0, r3, r4
 801e7e2:	1400      	asrs	r0, r0, #16
 801e7e4:	f53f af4b 	bmi.w	801e67e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7e8:	3901      	subs	r1, #1
 801e7ea:	4288      	cmp	r0, r1
 801e7ec:	f6bf af47 	bge.w	801e67e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e7f2:	fb01 6303 	mla	r3, r1, r3, r6
 801e7f6:	141b      	asrs	r3, r3, #16
 801e7f8:	f53f af41 	bmi.w	801e67e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7fc:	3a01      	subs	r2, #1
 801e7fe:	4293      	cmp	r3, r2
 801e800:	f6bf af3d 	bge.w	801e67e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e804:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e808:	46c8      	mov	r8, r9
 801e80a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e80e:	930e      	str	r3, [sp, #56]	; 0x38
 801e810:	f1bb 0f00 	cmp.w	fp, #0
 801e814:	f300 80b7 	bgt.w	801e986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e81a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e81e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801e822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e824:	2b00      	cmp	r3, #0
 801e826:	f340 818e 	ble.w	801eb46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 801e82a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e82e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e830:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e834:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e838:	eef0 6a62 	vmov.f32	s13, s5
 801e83c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e840:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e844:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e848:	ee16 4a90 	vmov	r4, s13
 801e84c:	eef0 6a43 	vmov.f32	s13, s6
 801e850:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e854:	ee16 6a90 	vmov	r6, s13
 801e858:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e85c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e860:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e864:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e868:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e86c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e870:	ee12 2a90 	vmov	r2, s5
 801e874:	eef0 2a47 	vmov.f32	s5, s14
 801e878:	fb92 f3f3 	sdiv	r3, r2, r3
 801e87c:	ee13 2a10 	vmov	r2, s6
 801e880:	9323      	str	r3, [sp, #140]	; 0x8c
 801e882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e884:	eeb0 3a67 	vmov.f32	s6, s15
 801e888:	fb92 f3f3 	sdiv	r3, r2, r3
 801e88c:	9324      	str	r3, [sp, #144]	; 0x90
 801e88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e892:	3b01      	subs	r3, #1
 801e894:	930d      	str	r3, [sp, #52]	; 0x34
 801e896:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e898:	bf08      	it	eq
 801e89a:	4613      	moveq	r3, r2
 801e89c:	9309      	str	r3, [sp, #36]	; 0x24
 801e89e:	e6c2      	b.n	801e626 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e8a0:	2900      	cmp	r1, #0
 801e8a2:	f43f af4d 	beq.w	801e740 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e8a6:	eb0a 0003 	add.w	r0, sl, r3
 801e8aa:	0843      	lsrs	r3, r0, #1
 801e8ac:	07c0      	lsls	r0, r0, #31
 801e8ae:	5cfb      	ldrb	r3, [r7, r3]
 801e8b0:	bf54      	ite	pl
 801e8b2:	f003 030f 	andpl.w	r3, r3, #15
 801e8b6:	111b      	asrmi	r3, r3, #4
 801e8b8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e8bc:	b2db      	uxtb	r3, r3
 801e8be:	930b      	str	r3, [sp, #44]	; 0x2c
 801e8c0:	e73e      	b.n	801e740 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e8c2:	f8b8 e000 	ldrh.w	lr, [r8]
 801e8c6:	fa1f fb83 	uxth.w	fp, r3
 801e8ca:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e8ce:	43db      	mvns	r3, r3
 801e8d0:	ea4f 202e 	mov.w	r0, lr, asr #8
 801e8d4:	fb11 f10b 	smulbb	r1, r1, fp
 801e8d8:	b2db      	uxtb	r3, r3
 801e8da:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e8de:	fa5f fc8c 	uxtb.w	ip, ip
 801e8e2:	b2d2      	uxtb	r2, r2
 801e8e4:	fb00 1003 	mla	r0, r0, r3, r1
 801e8e8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801e8ec:	fb1c fc0b 	smulbb	ip, ip, fp
 801e8f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e8f4:	b280      	uxth	r0, r0
 801e8f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e8fa:	fb12 fb0b 	smulbb	fp, r2, fp
 801e8fe:	fa5f fe8e 	uxtb.w	lr, lr
 801e902:	fb01 cc03 	mla	ip, r1, r3, ip
 801e906:	fb0e bb03 	mla	fp, lr, r3, fp
 801e90a:	1c43      	adds	r3, r0, #1
 801e90c:	fa1f fc8c 	uxth.w	ip, ip
 801e910:	fa1f fb8b 	uxth.w	fp, fp
 801e914:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e918:	f10c 0101 	add.w	r1, ip, #1
 801e91c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 801e920:	f10b 0001 	add.w	r0, fp, #1
 801e924:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801e928:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801e92c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e930:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e934:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e938:	4318      	orrs	r0, r3
 801e93a:	ea40 000c 	orr.w	r0, r0, ip
 801e93e:	f8a8 0000 	strh.w	r0, [r8]
 801e942:	e734      	b.n	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e944:	f113 0b01 	adds.w	fp, r3, #1
 801e948:	f53f af31 	bmi.w	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e94c:	45dc      	cmp	ip, fp
 801e94e:	f6ff af2e 	blt.w	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e952:	f110 0b01 	adds.w	fp, r0, #1
 801e956:	f53f af2a 	bmi.w	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e95a:	45de      	cmp	lr, fp
 801e95c:	f6ff af27 	blt.w	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e960:	9302      	str	r3, [sp, #8]
 801e962:	fa0f f38e 	sxth.w	r3, lr
 801e966:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e968:	9301      	str	r3, [sp, #4]
 801e96a:	fa0f f38c 	sxth.w	r3, ip
 801e96e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e972:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e976:	9300      	str	r3, [sp, #0]
 801e978:	463a      	mov	r2, r7
 801e97a:	4653      	mov	r3, sl
 801e97c:	4641      	mov	r1, r8
 801e97e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e980:	f7ff fd4c 	bl	801e41c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801e984:	e713      	b.n	801e7ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801e986:	1422      	asrs	r2, r4, #16
 801e988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e98a:	1433      	asrs	r3, r6, #16
 801e98c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e990:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e994:	fb05 2303 	mla	r3, r5, r3, r2
 801e998:	085a      	lsrs	r2, r3, #1
 801e99a:	07dd      	lsls	r5, r3, #31
 801e99c:	5cba      	ldrb	r2, [r7, r2]
 801e99e:	bf54      	ite	pl
 801e9a0:	f002 020f 	andpl.w	r2, r2, #15
 801e9a4:	1112      	asrmi	r2, r2, #4
 801e9a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e9aa:	b2d2      	uxtb	r2, r2
 801e9ac:	2900      	cmp	r1, #0
 801e9ae:	d077      	beq.n	801eaa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e9b0:	f103 0e01 	add.w	lr, r3, #1
 801e9b4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801e9b8:	f01e 0f01 	tst.w	lr, #1
 801e9bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e9c0:	bf0c      	ite	eq
 801e9c2:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e9c6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e9ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e9ce:	fa5f f58c 	uxtb.w	r5, ip
 801e9d2:	9512      	str	r5, [sp, #72]	; 0x48
 801e9d4:	b308      	cbz	r0, 801ea1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801e9d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e9d8:	442b      	add	r3, r5
 801e9da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e9de:	07dd      	lsls	r5, r3, #31
 801e9e0:	f103 0301 	add.w	r3, r3, #1
 801e9e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e9e8:	bf54      	ite	pl
 801e9ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e9ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e9f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e9f6:	fa5f f58c 	uxtb.w	r5, ip
 801e9fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e9fe:	950c      	str	r5, [sp, #48]	; 0x30
 801ea00:	07dd      	lsls	r5, r3, #31
 801ea02:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ea06:	bf54      	ite	pl
 801ea08:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ea0c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ea10:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ea14:	fa5f f38c 	uxtb.w	r3, ip
 801ea18:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea1a:	b289      	uxth	r1, r1
 801ea1c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ea1e:	b280      	uxth	r0, r0
 801ea20:	fb01 f300 	mul.w	r3, r1, r0
 801ea24:	0109      	lsls	r1, r1, #4
 801ea26:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801ea2a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801ea2e:	1ac9      	subs	r1, r1, r3
 801ea30:	b280      	uxth	r0, r0
 801ea32:	b289      	uxth	r1, r1
 801ea34:	ebac 0c00 	sub.w	ip, ip, r0
 801ea38:	4369      	muls	r1, r5
 801ea3a:	fa1f fc8c 	uxth.w	ip, ip
 801ea3e:	fb02 120c 	mla	r2, r2, ip, r1
 801ea42:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ea44:	fb00 2001 	mla	r0, r0, r1, r2
 801ea48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea4a:	fb03 0302 	mla	r3, r3, r2, r0
 801ea4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea52:	b1d3      	cbz	r3, 801ea8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ea54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea56:	4353      	muls	r3, r2
 801ea58:	1c5a      	adds	r2, r3, #1
 801ea5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ea5e:	4a0f      	ldr	r2, [pc, #60]	; (801ea9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801ea60:	121b      	asrs	r3, r3, #8
 801ea62:	6812      	ldr	r2, [r2, #0]
 801ea64:	2bff      	cmp	r3, #255	; 0xff
 801ea66:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801ea6a:	d12d      	bne.n	801eac8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ea6c:	0953      	lsrs	r3, r2, #5
 801ea6e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801ea72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ea76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ea7a:	f02c 0c07 	bic.w	ip, ip, #7
 801ea7e:	ea43 0c0c 	orr.w	ip, r3, ip
 801ea82:	ea4c 0202 	orr.w	r2, ip, r2
 801ea86:	f8a8 2000 	strh.w	r2, [r8]
 801ea8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea8c:	f108 0802 	add.w	r8, r8, #2
 801ea90:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea94:	441c      	add	r4, r3
 801ea96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea98:	441e      	add	r6, r3
 801ea9a:	e6b9      	b.n	801e810 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ea9c:	2002491c 	.word	0x2002491c
 801eaa0:	2800      	cmp	r0, #0
 801eaa2:	d0ba      	beq.n	801ea1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801eaa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801eaa6:	442b      	add	r3, r5
 801eaa8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801eaac:	07db      	lsls	r3, r3, #31
 801eaae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801eab2:	bf54      	ite	pl
 801eab4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801eab8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801eabc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801eac0:	fa5f f38c 	uxtb.w	r3, ip
 801eac4:	930c      	str	r3, [sp, #48]	; 0x30
 801eac6:	e7a8      	b.n	801ea1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801eac8:	f8b8 e000 	ldrh.w	lr, [r8]
 801eacc:	fa1f fa83 	uxth.w	sl, r3
 801ead0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801ead4:	43db      	mvns	r3, r3
 801ead6:	ea4f 202e 	mov.w	r0, lr, asr #8
 801eada:	fb11 f10a 	smulbb	r1, r1, sl
 801eade:	b2db      	uxtb	r3, r3
 801eae0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eae4:	b2d2      	uxtb	r2, r2
 801eae6:	fa5f fc8c 	uxtb.w	ip, ip
 801eaea:	fb00 1003 	mla	r0, r0, r3, r1
 801eaee:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801eaf2:	fb12 f20a 	smulbb	r2, r2, sl
 801eaf6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eafa:	b280      	uxth	r0, r0
 801eafc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eb00:	fb1c fc0a 	smulbb	ip, ip, sl
 801eb04:	fa5f fe8e 	uxtb.w	lr, lr
 801eb08:	fb0e 2203 	mla	r2, lr, r3, r2
 801eb0c:	fb01 cc03 	mla	ip, r1, r3, ip
 801eb10:	1c43      	adds	r3, r0, #1
 801eb12:	b292      	uxth	r2, r2
 801eb14:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801eb18:	1c51      	adds	r1, r2, #1
 801eb1a:	fa1f fc8c 	uxth.w	ip, ip
 801eb1e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801eb22:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801eb26:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801eb2a:	4308      	orrs	r0, r1
 801eb2c:	f10c 0101 	add.w	r1, ip, #1
 801eb30:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801eb34:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801eb38:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801eb3c:	ea40 000c 	orr.w	r0, r0, ip
 801eb40:	f8a8 0000 	strh.w	r0, [r8]
 801eb44:	e7a1      	b.n	801ea8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801eb46:	b017      	add	sp, #92	; 0x5c
 801eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb4c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801eb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb50:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 801eb54:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801eb58:	2d00      	cmp	r5, #0
 801eb5a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801eb5e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801eb62:	fb05 0e03 	mla	lr, r5, r3, r0
 801eb66:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801eb6a:	f2c0 80b0 	blt.w	801ecce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 801eb6e:	45a9      	cmp	r9, r5
 801eb70:	f340 80ad 	ble.w	801ecce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 801eb74:	2800      	cmp	r0, #0
 801eb76:	f2c0 80a8 	blt.w	801ecca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 801eb7a:	4580      	cmp	r8, r0
 801eb7c:	f340 80a5 	ble.w	801ecca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 801eb80:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801eb84:	f01e 0f01 	tst.w	lr, #1
 801eb88:	5d16      	ldrb	r6, [r2, r4]
 801eb8a:	bf0c      	ite	eq
 801eb8c:	f006 060f 	andeq.w	r6, r6, #15
 801eb90:	1136      	asrne	r6, r6, #4
 801eb92:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801eb96:	b2f6      	uxtb	r6, r6
 801eb98:	1c44      	adds	r4, r0, #1
 801eb9a:	f100 809b 	bmi.w	801ecd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 801eb9e:	45a0      	cmp	r8, r4
 801eba0:	f340 8098 	ble.w	801ecd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 801eba4:	2f00      	cmp	r7, #0
 801eba6:	f000 8097 	beq.w	801ecd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 801ebaa:	f10e 0a01 	add.w	sl, lr, #1
 801ebae:	ea4f 045a 	mov.w	r4, sl, lsr #1
 801ebb2:	f01a 0f01 	tst.w	sl, #1
 801ebb6:	5d14      	ldrb	r4, [r2, r4]
 801ebb8:	bf0c      	ite	eq
 801ebba:	f004 040f 	andeq.w	r4, r4, #15
 801ebbe:	1124      	asrne	r4, r4, #4
 801ebc0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ebc4:	b2e4      	uxtb	r4, r4
 801ebc6:	3501      	adds	r5, #1
 801ebc8:	f100 808a 	bmi.w	801ece0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 801ebcc:	45a9      	cmp	r9, r5
 801ebce:	f340 8087 	ble.w	801ece0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 801ebd2:	f1bc 0f00 	cmp.w	ip, #0
 801ebd6:	f000 8086 	beq.w	801ece6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 801ebda:	2800      	cmp	r0, #0
 801ebdc:	db7e      	blt.n	801ecdc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 801ebde:	4580      	cmp	r8, r0
 801ebe0:	dd7c      	ble.n	801ecdc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 801ebe2:	eb03 090e 	add.w	r9, r3, lr
 801ebe6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 801ebea:	f019 0f01 	tst.w	r9, #1
 801ebee:	5d55      	ldrb	r5, [r2, r5]
 801ebf0:	bf0c      	ite	eq
 801ebf2:	f005 050f 	andeq.w	r5, r5, #15
 801ebf6:	112d      	asrne	r5, r5, #4
 801ebf8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801ebfc:	b2ed      	uxtb	r5, r5
 801ebfe:	3001      	adds	r0, #1
 801ec00:	d474      	bmi.n	801ecec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 801ec02:	4580      	cmp	r8, r0
 801ec04:	dd72      	ble.n	801ecec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 801ec06:	2f00      	cmp	r7, #0
 801ec08:	d072      	beq.n	801ecf0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	449e      	add	lr, r3
 801ec0e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ec12:	f01e 0f01 	tst.w	lr, #1
 801ec16:	5cd0      	ldrb	r0, [r2, r3]
 801ec18:	bf0c      	ite	eq
 801ec1a:	f000 000f 	andeq.w	r0, r0, #15
 801ec1e:	1100      	asrne	r0, r0, #4
 801ec20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ec24:	b2c3      	uxtb	r3, r0
 801ec26:	b2ba      	uxth	r2, r7
 801ec28:	fa1f fc8c 	uxth.w	ip, ip
 801ec2c:	fb02 f00c 	mul.w	r0, r2, ip
 801ec30:	0112      	lsls	r2, r2, #4
 801ec32:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801ec36:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801ec3a:	1a12      	subs	r2, r2, r0
 801ec3c:	fa1f fc8c 	uxth.w	ip, ip
 801ec40:	b292      	uxth	r2, r2
 801ec42:	eba7 070c 	sub.w	r7, r7, ip
 801ec46:	4362      	muls	r2, r4
 801ec48:	b2bf      	uxth	r7, r7
 801ec4a:	fb06 2207 	mla	r2, r6, r7, r2
 801ec4e:	fb0c 2505 	mla	r5, ip, r5, r2
 801ec52:	fb00 5303 	mla	r3, r0, r3, r5
 801ec56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ec5a:	b3a3      	cbz	r3, 801ecc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 801ec5c:	4a25      	ldr	r2, [pc, #148]	; (801ecf4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 801ec5e:	880e      	ldrh	r6, [r1, #0]
 801ec60:	6815      	ldr	r5, [r2, #0]
 801ec62:	b29a      	uxth	r2, r3
 801ec64:	1234      	asrs	r4, r6, #8
 801ec66:	43db      	mvns	r3, r3
 801ec68:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801ec6c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801ec70:	b2db      	uxtb	r3, r3
 801ec72:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801ec76:	fb10 f002 	smulbb	r0, r0, r2
 801ec7a:	b2ed      	uxtb	r5, r5
 801ec7c:	fb17 f702 	smulbb	r7, r7, r2
 801ec80:	fb04 0403 	mla	r4, r4, r3, r0
 801ec84:	10f0      	asrs	r0, r6, #3
 801ec86:	fb15 f202 	smulbb	r2, r5, r2
 801ec8a:	00f6      	lsls	r6, r6, #3
 801ec8c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ec90:	b2a4      	uxth	r4, r4
 801ec92:	b2f6      	uxtb	r6, r6
 801ec94:	fb00 7003 	mla	r0, r0, r3, r7
 801ec98:	fb06 2303 	mla	r3, r6, r3, r2
 801ec9c:	b280      	uxth	r0, r0
 801ec9e:	b29a      	uxth	r2, r3
 801eca0:	1c63      	adds	r3, r4, #1
 801eca2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801eca6:	1c53      	adds	r3, r2, #1
 801eca8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ecac:	1c42      	adds	r2, r0, #1
 801ecae:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ecb2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ecb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ecba:	0940      	lsrs	r0, r0, #5
 801ecbc:	4323      	orrs	r3, r4
 801ecbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ecc2:	4303      	orrs	r3, r0
 801ecc4:	800b      	strh	r3, [r1, #0]
 801ecc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ecca:	2600      	movs	r6, #0
 801eccc:	e764      	b.n	801eb98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 801ecce:	2400      	movs	r4, #0
 801ecd0:	4626      	mov	r6, r4
 801ecd2:	e778      	b.n	801ebc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801ecd4:	2400      	movs	r4, #0
 801ecd6:	e776      	b.n	801ebc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801ecd8:	463c      	mov	r4, r7
 801ecda:	e774      	b.n	801ebc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801ecdc:	2500      	movs	r5, #0
 801ecde:	e78e      	b.n	801ebfe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 801ece0:	2300      	movs	r3, #0
 801ece2:	461d      	mov	r5, r3
 801ece4:	e79f      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801ece6:	4663      	mov	r3, ip
 801ece8:	4665      	mov	r5, ip
 801ecea:	e79c      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801ecec:	2300      	movs	r3, #0
 801ecee:	e79a      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801ecf0:	463b      	mov	r3, r7
 801ecf2:	e798      	b.n	801ec26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801ecf4:	2002491c 	.word	0x2002491c

0801ecf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecfc:	b093      	sub	sp, #76	; 0x4c
 801ecfe:	461d      	mov	r5, r3
 801ed00:	920c      	str	r2, [sp, #48]	; 0x30
 801ed02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ed04:	9011      	str	r0, [sp, #68]	; 0x44
 801ed06:	9107      	str	r1, [sp, #28]
 801ed08:	6850      	ldr	r0, [r2, #4]
 801ed0a:	6812      	ldr	r2, [r2, #0]
 801ed0c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ed10:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801ed14:	fb00 1303 	mla	r3, r0, r3, r1
 801ed18:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ed1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed1e:	689b      	ldr	r3, [r3, #8]
 801ed20:	3301      	adds	r3, #1
 801ed22:	f023 0301 	bic.w	r3, r3, #1
 801ed26:	9306      	str	r3, [sp, #24]
 801ed28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed2a:	681f      	ldr	r7, [r3, #0]
 801ed2c:	9b07      	ldr	r3, [sp, #28]
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	dc03      	bgt.n	801ed3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ed32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	f340 8267 	ble.w	801f208 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ed3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ed44:	1e48      	subs	r0, r1, #1
 801ed46:	f102 3cff 	add.w	ip, r2, #4294967295
 801ed4a:	2d00      	cmp	r5, #0
 801ed4c:	f340 80b7 	ble.w	801eebe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ed50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ed54:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ed58:	d406      	bmi.n	801ed68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed5a:	4586      	cmp	lr, r0
 801ed5c:	da04      	bge.n	801ed68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	db02      	blt.n	801ed68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed62:	4563      	cmp	r3, ip
 801ed64:	f2c0 80ac 	blt.w	801eec0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ed68:	f11e 0e01 	adds.w	lr, lr, #1
 801ed6c:	f100 809f 	bmi.w	801eeae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed70:	4571      	cmp	r1, lr
 801ed72:	f2c0 809c 	blt.w	801eeae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed76:	3301      	adds	r3, #1
 801ed78:	f100 8099 	bmi.w	801eeae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed7c:	429a      	cmp	r2, r3
 801ed7e:	f2c0 8096 	blt.w	801eeae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed82:	46c8      	mov	r8, r9
 801ed84:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801ed88:	9509      	str	r5, [sp, #36]	; 0x24
 801ed8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	f340 80b5 	ble.w	801eefc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ed92:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ed96:	1430      	asrs	r0, r6, #16
 801ed98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ed9c:	9308      	str	r3, [sp, #32]
 801ed9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eda0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801eda4:	1423      	asrs	r3, r4, #16
 801eda6:	f100 813f 	bmi.w	801f028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801edaa:	f10c 3bff 	add.w	fp, ip, #4294967295
 801edae:	455b      	cmp	r3, fp
 801edb0:	f280 813a 	bge.w	801f028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801edb4:	2800      	cmp	r0, #0
 801edb6:	f2c0 8137 	blt.w	801f028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801edba:	f10e 3bff 	add.w	fp, lr, #4294967295
 801edbe:	4558      	cmp	r0, fp
 801edc0:	f280 8132 	bge.w	801f028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801edc4:	9a06      	ldr	r2, [sp, #24]
 801edc6:	fb00 3302 	mla	r3, r0, r2, r3
 801edca:	0858      	lsrs	r0, r3, #1
 801edcc:	07da      	lsls	r2, r3, #31
 801edce:	9a08      	ldr	r2, [sp, #32]
 801edd0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801edd4:	bf54      	ite	pl
 801edd6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801edda:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801edde:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ede2:	fa5f fc8c 	uxtb.w	ip, ip
 801ede6:	2a00      	cmp	r2, #0
 801ede8:	f000 80cc 	beq.w	801ef84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801edec:	1c58      	adds	r0, r3, #1
 801edee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801edf2:	07c0      	lsls	r0, r0, #31
 801edf4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801edf8:	bf54      	ite	pl
 801edfa:	f00e 0e0f 	andpl.w	lr, lr, #15
 801edfe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ee02:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ee06:	fa5f fe8e 	uxtb.w	lr, lr
 801ee0a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801ee0e:	b1b9      	cbz	r1, 801ee40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ee10:	4453      	add	r3, sl
 801ee12:	0858      	lsrs	r0, r3, #1
 801ee14:	07da      	lsls	r2, r3, #31
 801ee16:	5c38      	ldrb	r0, [r7, r0]
 801ee18:	bf54      	ite	pl
 801ee1a:	f000 000f 	andpl.w	r0, r0, #15
 801ee1e:	1100      	asrmi	r0, r0, #4
 801ee20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ee24:	b2c0      	uxtb	r0, r0
 801ee26:	900a      	str	r0, [sp, #40]	; 0x28
 801ee28:	1c58      	adds	r0, r3, #1
 801ee2a:	0843      	lsrs	r3, r0, #1
 801ee2c:	07c2      	lsls	r2, r0, #31
 801ee2e:	5cfb      	ldrb	r3, [r7, r3]
 801ee30:	bf54      	ite	pl
 801ee32:	f003 030f 	andpl.w	r3, r3, #15
 801ee36:	111b      	asrmi	r3, r3, #4
 801ee38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ee3c:	b2db      	uxtb	r3, r3
 801ee3e:	930e      	str	r3, [sp, #56]	; 0x38
 801ee40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ee44:	b289      	uxth	r1, r1
 801ee46:	fb02 f301 	mul.w	r3, r2, r1
 801ee4a:	0112      	lsls	r2, r2, #4
 801ee4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ee50:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801ee54:	1ad2      	subs	r2, r2, r3
 801ee56:	b289      	uxth	r1, r1
 801ee58:	b292      	uxth	r2, r2
 801ee5a:	1a40      	subs	r0, r0, r1
 801ee5c:	fa1f fe80 	uxth.w	lr, r0
 801ee60:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ee62:	4342      	muls	r2, r0
 801ee64:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ee68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee6a:	fb01 c102 	mla	r1, r1, r2, ip
 801ee6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee70:	fb03 1302 	mla	r3, r3, r2, r1
 801ee74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ee78:	2bff      	cmp	r3, #255	; 0xff
 801ee7a:	f040 8094 	bne.w	801efa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801ee7e:	4bbf      	ldr	r3, [pc, #764]	; (801f17c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801ee80:	681a      	ldr	r2, [r3, #0]
 801ee82:	4bbf      	ldr	r3, [pc, #764]	; (801f180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 801ee84:	0951      	lsrs	r1, r2, #5
 801ee86:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801ee8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ee8e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ee92:	430b      	orrs	r3, r1
 801ee94:	4313      	orrs	r3, r2
 801ee96:	f8a8 3000 	strh.w	r3, [r8]
 801ee9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee9c:	f108 0802 	add.w	r8, r8, #2
 801eea0:	441c      	add	r4, r3
 801eea2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eea4:	441e      	add	r6, r3
 801eea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eea8:	3b01      	subs	r3, #1
 801eeaa:	9309      	str	r3, [sp, #36]	; 0x24
 801eeac:	e76d      	b.n	801ed8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801eeae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eeb0:	3d01      	subs	r5, #1
 801eeb2:	f109 0902 	add.w	r9, r9, #2
 801eeb6:	441c      	add	r4, r3
 801eeb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eeba:	441e      	add	r6, r3
 801eebc:	e745      	b.n	801ed4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eebe:	d021      	beq.n	801ef04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801eec0:	1e6b      	subs	r3, r5, #1
 801eec2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801eec4:	fb00 4003 	mla	r0, r0, r3, r4
 801eec8:	1400      	asrs	r0, r0, #16
 801eeca:	f53f af5a 	bmi.w	801ed82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eece:	3901      	subs	r1, #1
 801eed0:	4288      	cmp	r0, r1
 801eed2:	f6bf af56 	bge.w	801ed82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eed6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801eed8:	fb01 6303 	mla	r3, r1, r3, r6
 801eedc:	141b      	asrs	r3, r3, #16
 801eede:	f53f af50 	bmi.w	801ed82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eee2:	3a01      	subs	r2, #1
 801eee4:	4293      	cmp	r3, r2
 801eee6:	f6bf af4c 	bge.w	801ed82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eeea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801eeee:	46a8      	mov	r8, r5
 801eef0:	46ce      	mov	lr, r9
 801eef2:	9308      	str	r3, [sp, #32]
 801eef4:	f1b8 0f00 	cmp.w	r8, #0
 801eef8:	f300 80b6 	bgt.w	801f068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eefc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801ef00:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ef04:	9b07      	ldr	r3, [sp, #28]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	f340 817e 	ble.w	801f208 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801ef0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ef10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ef12:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef1a:	eef0 6a62 	vmov.f32	s13, s5
 801ef1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef2a:	ee16 4a90 	vmov	r4, s13
 801ef2e:	eef0 6a43 	vmov.f32	s13, s6
 801ef32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef36:	ee16 6a90 	vmov	r6, s13
 801ef3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef52:	ee12 2a90 	vmov	r2, s5
 801ef56:	eef0 2a47 	vmov.f32	s5, s14
 801ef5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef5e:	ee13 2a10 	vmov	r2, s6
 801ef62:	931f      	str	r3, [sp, #124]	; 0x7c
 801ef64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ef66:	eeb0 3a67 	vmov.f32	s6, s15
 801ef6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef6e:	9320      	str	r3, [sp, #128]	; 0x80
 801ef70:	9b07      	ldr	r3, [sp, #28]
 801ef72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef74:	3b01      	subs	r3, #1
 801ef76:	9307      	str	r3, [sp, #28]
 801ef78:	bf08      	it	eq
 801ef7a:	4615      	moveq	r5, r2
 801ef7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ef7e:	bf18      	it	ne
 801ef80:	461d      	movne	r5, r3
 801ef82:	e6d3      	b.n	801ed2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ef84:	2900      	cmp	r1, #0
 801ef86:	f43f af5b 	beq.w	801ee40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ef8a:	eb0a 0003 	add.w	r0, sl, r3
 801ef8e:	0843      	lsrs	r3, r0, #1
 801ef90:	07c0      	lsls	r0, r0, #31
 801ef92:	5cfb      	ldrb	r3, [r7, r3]
 801ef94:	bf54      	ite	pl
 801ef96:	f003 030f 	andpl.w	r3, r3, #15
 801ef9a:	111b      	asrmi	r3, r3, #4
 801ef9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801efa0:	b2db      	uxtb	r3, r3
 801efa2:	930a      	str	r3, [sp, #40]	; 0x28
 801efa4:	e74c      	b.n	801ee40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	f43f af77 	beq.w	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801efac:	4a73      	ldr	r2, [pc, #460]	; (801f17c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801efae:	fa1f fe83 	uxth.w	lr, r3
 801efb2:	f8b8 c000 	ldrh.w	ip, [r8]
 801efb6:	43db      	mvns	r3, r3
 801efb8:	6810      	ldr	r0, [r2, #0]
 801efba:	ea4f 212c 	mov.w	r1, ip, asr #8
 801efbe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801efc2:	b2db      	uxtb	r3, r3
 801efc4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801efc8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801efcc:	fb12 f20e 	smulbb	r2, r2, lr
 801efd0:	b2c0      	uxtb	r0, r0
 801efd2:	fb1b fb0e 	smulbb	fp, fp, lr
 801efd6:	fb01 2103 	mla	r1, r1, r3, r2
 801efda:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801efde:	fb10 fe0e 	smulbb	lr, r0, lr
 801efe2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801efe6:	b289      	uxth	r1, r1
 801efe8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801efec:	fa5f fc8c 	uxtb.w	ip, ip
 801eff0:	fb02 b203 	mla	r2, r2, r3, fp
 801eff4:	1c48      	adds	r0, r1, #1
 801eff6:	fb0c e303 	mla	r3, ip, r3, lr
 801effa:	b292      	uxth	r2, r2
 801effc:	b29b      	uxth	r3, r3
 801effe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f002:	f102 0b01 	add.w	fp, r2, #1
 801f006:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801f00a:	1c59      	adds	r1, r3, #1
 801f00c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f010:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f014:	0952      	lsrs	r2, r2, #5
 801f016:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801f01a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f01e:	4301      	orrs	r1, r0
 801f020:	4311      	orrs	r1, r2
 801f022:	f8a8 1000 	strh.w	r1, [r8]
 801f026:	e738      	b.n	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f028:	f113 0b01 	adds.w	fp, r3, #1
 801f02c:	f53f af35 	bmi.w	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f030:	45dc      	cmp	ip, fp
 801f032:	f6ff af32 	blt.w	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f036:	f110 0b01 	adds.w	fp, r0, #1
 801f03a:	f53f af2e 	bmi.w	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f03e:	45de      	cmp	lr, fp
 801f040:	f6ff af2b 	blt.w	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f044:	9302      	str	r3, [sp, #8]
 801f046:	fa0f f38e 	sxth.w	r3, lr
 801f04a:	9a08      	ldr	r2, [sp, #32]
 801f04c:	9301      	str	r3, [sp, #4]
 801f04e:	fa0f f38c 	sxth.w	r3, ip
 801f052:	9105      	str	r1, [sp, #20]
 801f054:	4641      	mov	r1, r8
 801f056:	9300      	str	r3, [sp, #0]
 801f058:	4653      	mov	r3, sl
 801f05a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801f05e:	463a      	mov	r2, r7
 801f060:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f062:	f7ff fd73 	bl	801eb4c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801f066:	e718      	b.n	801ee9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f068:	1422      	asrs	r2, r4, #16
 801f06a:	9906      	ldr	r1, [sp, #24]
 801f06c:	1433      	asrs	r3, r6, #16
 801f06e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f072:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f076:	fb01 2303 	mla	r3, r1, r3, r2
 801f07a:	085a      	lsrs	r2, r3, #1
 801f07c:	07d9      	lsls	r1, r3, #31
 801f07e:	5cba      	ldrb	r2, [r7, r2]
 801f080:	bf54      	ite	pl
 801f082:	f002 020f 	andpl.w	r2, r2, #15
 801f086:	1112      	asrmi	r2, r2, #4
 801f088:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f08c:	b2d2      	uxtb	r2, r2
 801f08e:	2800      	cmp	r0, #0
 801f090:	d063      	beq.n	801f15a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801f092:	f103 0a01 	add.w	sl, r3, #1
 801f096:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801f09a:	f01a 0f01 	tst.w	sl, #1
 801f09e:	5c79      	ldrb	r1, [r7, r1]
 801f0a0:	bf0c      	ite	eq
 801f0a2:	f001 010f 	andeq.w	r1, r1, #15
 801f0a6:	1109      	asrne	r1, r1, #4
 801f0a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801f0ac:	b2c9      	uxtb	r1, r1
 801f0ae:	910f      	str	r1, [sp, #60]	; 0x3c
 801f0b0:	f1bc 0f00 	cmp.w	ip, #0
 801f0b4:	d01a      	beq.n	801f0ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801f0b6:	9908      	ldr	r1, [sp, #32]
 801f0b8:	440b      	add	r3, r1
 801f0ba:	0859      	lsrs	r1, r3, #1
 801f0bc:	f013 0f01 	tst.w	r3, #1
 801f0c0:	f103 0301 	add.w	r3, r3, #1
 801f0c4:	5c79      	ldrb	r1, [r7, r1]
 801f0c6:	bf0c      	ite	eq
 801f0c8:	f001 010f 	andeq.w	r1, r1, #15
 801f0cc:	1109      	asrne	r1, r1, #4
 801f0ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801f0d2:	b2c9      	uxtb	r1, r1
 801f0d4:	910b      	str	r1, [sp, #44]	; 0x2c
 801f0d6:	0859      	lsrs	r1, r3, #1
 801f0d8:	07db      	lsls	r3, r3, #31
 801f0da:	5c79      	ldrb	r1, [r7, r1]
 801f0dc:	bf54      	ite	pl
 801f0de:	f001 010f 	andpl.w	r1, r1, #15
 801f0e2:	1109      	asrmi	r1, r1, #4
 801f0e4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801f0e8:	b2c9      	uxtb	r1, r1
 801f0ea:	9110      	str	r1, [sp, #64]	; 0x40
 801f0ec:	b280      	uxth	r0, r0
 801f0ee:	fa1f fc8c 	uxth.w	ip, ip
 801f0f2:	fb00 f30c 	mul.w	r3, r0, ip
 801f0f6:	0100      	lsls	r0, r0, #4
 801f0f8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801f0fc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801f100:	1ac0      	subs	r0, r0, r3
 801f102:	fa1f fc8c 	uxth.w	ip, ip
 801f106:	b280      	uxth	r0, r0
 801f108:	eba1 010c 	sub.w	r1, r1, ip
 801f10c:	fa1f fa81 	uxth.w	sl, r1
 801f110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f112:	4348      	muls	r0, r1
 801f114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f116:	fb02 020a 	mla	r2, r2, sl, r0
 801f11a:	fb0c 2c01 	mla	ip, ip, r1, r2
 801f11e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f120:	fb03 c302 	mla	r3, r3, r2, ip
 801f124:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f128:	2bff      	cmp	r3, #255	; 0xff
 801f12a:	d12b      	bne.n	801f184 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801f12c:	4b13      	ldr	r3, [pc, #76]	; (801f17c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801f12e:	681a      	ldr	r2, [r3, #0]
 801f130:	4b13      	ldr	r3, [pc, #76]	; (801f180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 801f132:	0951      	lsrs	r1, r2, #5
 801f134:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801f138:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f13c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f140:	430b      	orrs	r3, r1
 801f142:	4313      	orrs	r3, r2
 801f144:	f8ae 3000 	strh.w	r3, [lr]
 801f148:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f14a:	f10e 0e02 	add.w	lr, lr, #2
 801f14e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f152:	441c      	add	r4, r3
 801f154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f156:	441e      	add	r6, r3
 801f158:	e6cc      	b.n	801eef4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f15a:	f1bc 0f00 	cmp.w	ip, #0
 801f15e:	d0c5      	beq.n	801f0ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801f160:	9908      	ldr	r1, [sp, #32]
 801f162:	440b      	add	r3, r1
 801f164:	0859      	lsrs	r1, r3, #1
 801f166:	07db      	lsls	r3, r3, #31
 801f168:	5c79      	ldrb	r1, [r7, r1]
 801f16a:	bf54      	ite	pl
 801f16c:	f001 010f 	andpl.w	r1, r1, #15
 801f170:	1109      	asrmi	r1, r1, #4
 801f172:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801f176:	b2c9      	uxtb	r1, r1
 801f178:	910b      	str	r1, [sp, #44]	; 0x2c
 801f17a:	e7b7      	b.n	801f0ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801f17c:	2002491c 	.word	0x2002491c
 801f180:	fffff800 	.word	0xfffff800
 801f184:	2b00      	cmp	r3, #0
 801f186:	d0df      	beq.n	801f148 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 801f188:	4a21      	ldr	r2, [pc, #132]	; (801f210 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 801f18a:	fa1f fa83 	uxth.w	sl, r3
 801f18e:	f8be c000 	ldrh.w	ip, [lr]
 801f192:	43db      	mvns	r3, r3
 801f194:	6810      	ldr	r0, [r2, #0]
 801f196:	ea4f 212c 	mov.w	r1, ip, asr #8
 801f19a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801f19e:	b2db      	uxtb	r3, r3
 801f1a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f1a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801f1a8:	fb12 f20a 	smulbb	r2, r2, sl
 801f1ac:	b2c0      	uxtb	r0, r0
 801f1ae:	fb1b fb0a 	smulbb	fp, fp, sl
 801f1b2:	fb01 2103 	mla	r1, r1, r3, r2
 801f1b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f1ba:	fb10 f00a 	smulbb	r0, r0, sl
 801f1be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f1c2:	b289      	uxth	r1, r1
 801f1c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f1c8:	fa5f fc8c 	uxtb.w	ip, ip
 801f1cc:	fb02 b203 	mla	r2, r2, r3, fp
 801f1d0:	fb0c 0003 	mla	r0, ip, r3, r0
 801f1d4:	1c4b      	adds	r3, r1, #1
 801f1d6:	b292      	uxth	r2, r2
 801f1d8:	b280      	uxth	r0, r0
 801f1da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f1de:	f100 0b01 	add.w	fp, r0, #1
 801f1e2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801f1e6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801f1ea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801f1ee:	ea4b 0101 	orr.w	r1, fp, r1
 801f1f2:	f102 0b01 	add.w	fp, r2, #1
 801f1f6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f1fa:	0952      	lsrs	r2, r2, #5
 801f1fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f200:	4311      	orrs	r1, r2
 801f202:	f8ae 1000 	strh.w	r1, [lr]
 801f206:	e79f      	b.n	801f148 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 801f208:	b013      	add	sp, #76	; 0x4c
 801f20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f20e:	bf00      	nop
 801f210:	2002491c 	.word	0x2002491c

0801f214 <CRC_Lock>:
 801f214:	4a20      	ldr	r2, [pc, #128]	; (801f298 <CRC_Lock+0x84>)
 801f216:	b530      	push	{r4, r5, lr}
 801f218:	6813      	ldr	r3, [r2, #0]
 801f21a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801f21e:	f24c 2540 	movw	r5, #49728	; 0xc240
 801f222:	f023 0301 	bic.w	r3, r3, #1
 801f226:	6013      	str	r3, [r2, #0]
 801f228:	4b1c      	ldr	r3, [pc, #112]	; (801f29c <CRC_Lock+0x88>)
 801f22a:	681a      	ldr	r2, [r3, #0]
 801f22c:	4022      	ands	r2, r4
 801f22e:	42aa      	cmp	r2, r5
 801f230:	d005      	beq.n	801f23e <CRC_Lock+0x2a>
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	f24c 2270 	movw	r2, #49776	; 0xc270
 801f238:	4023      	ands	r3, r4
 801f23a:	4293      	cmp	r3, r2
 801f23c:	d124      	bne.n	801f288 <CRC_Lock+0x74>
 801f23e:	4b18      	ldr	r3, [pc, #96]	; (801f2a0 <CRC_Lock+0x8c>)
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	bb0b      	cbnz	r3, 801f288 <CRC_Lock+0x74>
 801f244:	4b17      	ldr	r3, [pc, #92]	; (801f2a4 <CRC_Lock+0x90>)
 801f246:	681a      	ldr	r2, [r3, #0]
 801f248:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f24c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801f250:	d00d      	beq.n	801f26e <CRC_Lock+0x5a>
 801f252:	681a      	ldr	r2, [r3, #0]
 801f254:	f240 4483 	movw	r4, #1155	; 0x483
 801f258:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f25c:	42a2      	cmp	r2, r4
 801f25e:	d006      	beq.n	801f26e <CRC_Lock+0x5a>
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	f240 4285 	movw	r2, #1157	; 0x485
 801f266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f26a:	4293      	cmp	r3, r2
 801f26c:	d10c      	bne.n	801f288 <CRC_Lock+0x74>
 801f26e:	4b0e      	ldr	r3, [pc, #56]	; (801f2a8 <CRC_Lock+0x94>)
 801f270:	2201      	movs	r2, #1
 801f272:	601a      	str	r2, [r3, #0]
 801f274:	681a      	ldr	r2, [r3, #0]
 801f276:	2a00      	cmp	r2, #0
 801f278:	d1fc      	bne.n	801f274 <CRC_Lock+0x60>
 801f27a:	4b0c      	ldr	r3, [pc, #48]	; (801f2ac <CRC_Lock+0x98>)
 801f27c:	6018      	str	r0, [r3, #0]
 801f27e:	6818      	ldr	r0, [r3, #0]
 801f280:	1a43      	subs	r3, r0, r1
 801f282:	4258      	negs	r0, r3
 801f284:	4158      	adcs	r0, r3
 801f286:	bd30      	pop	{r4, r5, pc}
 801f288:	4b09      	ldr	r3, [pc, #36]	; (801f2b0 <CRC_Lock+0x9c>)
 801f28a:	2201      	movs	r2, #1
 801f28c:	601a      	str	r2, [r3, #0]
 801f28e:	681a      	ldr	r2, [r3, #0]
 801f290:	2a00      	cmp	r2, #0
 801f292:	d1fc      	bne.n	801f28e <CRC_Lock+0x7a>
 801f294:	4b07      	ldr	r3, [pc, #28]	; (801f2b4 <CRC_Lock+0xa0>)
 801f296:	e7f1      	b.n	801f27c <CRC_Lock+0x68>
 801f298:	e0002000 	.word	0xe0002000
 801f29c:	e000ed00 	.word	0xe000ed00
 801f2a0:	e0042000 	.word	0xe0042000
 801f2a4:	5c001000 	.word	0x5c001000
 801f2a8:	58024c08 	.word	0x58024c08
 801f2ac:	58024c00 	.word	0x58024c00
 801f2b0:	40023008 	.word	0x40023008
 801f2b4:	40023000 	.word	0x40023000

0801f2b8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f2b8:	6101      	str	r1, [r0, #16]
 801f2ba:	4770      	bx	lr

0801f2bc <_ZN8touchgfx8Gestures4tickEv>:
 801f2bc:	7b83      	ldrb	r3, [r0, #14]
 801f2be:	b14b      	cbz	r3, 801f2d4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f2c0:	8903      	ldrh	r3, [r0, #8]
 801f2c2:	3301      	adds	r3, #1
 801f2c4:	b29b      	uxth	r3, r3
 801f2c6:	2b07      	cmp	r3, #7
 801f2c8:	8103      	strh	r3, [r0, #8]
 801f2ca:	bf81      	itttt	hi
 801f2cc:	2300      	movhi	r3, #0
 801f2ce:	8143      	strhhi	r3, [r0, #10]
 801f2d0:	8183      	strhhi	r3, [r0, #12]
 801f2d2:	7383      	strbhi	r3, [r0, #14]
 801f2d4:	4770      	bx	lr
	...

0801f2d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f2d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f2dc:	4698      	mov	r8, r3
 801f2de:	8883      	ldrh	r3, [r0, #4]
 801f2e0:	4604      	mov	r4, r0
 801f2e2:	4617      	mov	r7, r2
 801f2e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f2e8:	eba8 0303 	sub.w	r3, r8, r3
 801f2ec:	4a19      	ldr	r2, [pc, #100]	; (801f354 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801f2ee:	460e      	mov	r6, r1
 801f2f0:	b21b      	sxth	r3, r3
 801f2f2:	88c1      	ldrh	r1, [r0, #6]
 801f2f4:	9200      	str	r2, [sp, #0]
 801f2f6:	2000      	movs	r0, #0
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	8aa2      	ldrh	r2, [r4, #20]
 801f2fc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801f300:	bfb8      	it	lt
 801f302:	425b      	neglt	r3, r3
 801f304:	f88d 0004 	strb.w	r0, [sp, #4]
 801f308:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f30c:	b21b      	sxth	r3, r3
 801f30e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f312:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f316:	4293      	cmp	r3, r2
 801f318:	dc07      	bgt.n	801f32a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801f31a:	1a69      	subs	r1, r5, r1
 801f31c:	b209      	sxth	r1, r1
 801f31e:	2900      	cmp	r1, #0
 801f320:	bfb8      	it	lt
 801f322:	4249      	neglt	r1, r1
 801f324:	b209      	sxth	r1, r1
 801f326:	428a      	cmp	r2, r1
 801f328:	da10      	bge.n	801f34c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801f32a:	6920      	ldr	r0, [r4, #16]
 801f32c:	4669      	mov	r1, sp
 801f32e:	eba8 0606 	sub.w	r6, r8, r6
 801f332:	1bef      	subs	r7, r5, r7
 801f334:	6803      	ldr	r3, [r0, #0]
 801f336:	685b      	ldr	r3, [r3, #4]
 801f338:	4798      	blx	r3
 801f33a:	2300      	movs	r3, #0
 801f33c:	2001      	movs	r0, #1
 801f33e:	8166      	strh	r6, [r4, #10]
 801f340:	8123      	strh	r3, [r4, #8]
 801f342:	81a7      	strh	r7, [r4, #12]
 801f344:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f348:	80e5      	strh	r5, [r4, #6]
 801f34a:	73a0      	strb	r0, [r4, #14]
 801f34c:	b004      	add	sp, #16
 801f34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f352:	bf00      	nop
 801f354:	08023e44 	.word	0x08023e44

0801f358 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f35a:	461e      	mov	r6, r3
 801f35c:	1e4b      	subs	r3, r1, #1
 801f35e:	b085      	sub	sp, #20
 801f360:	4604      	mov	r4, r0
 801f362:	2b01      	cmp	r3, #1
 801f364:	460d      	mov	r5, r1
 801f366:	4617      	mov	r7, r2
 801f368:	d84b      	bhi.n	801f402 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801f36a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f36e:	1cd3      	adds	r3, r2, #3
 801f370:	b29b      	uxth	r3, r3
 801f372:	2b06      	cmp	r3, #6
 801f374:	d916      	bls.n	801f3a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801f376:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801f418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f37a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f37e:	f8cd c004 	str.w	ip, [sp, #4]
 801f382:	f04f 0c00 	mov.w	ip, #0
 801f386:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f38a:	6900      	ldr	r0, [r0, #16]
 801f38c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f390:	a901      	add	r1, sp, #4
 801f392:	f88d c008 	strb.w	ip, [sp, #8]
 801f396:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f39a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f39e:	6803      	ldr	r3, [r0, #0]
 801f3a0:	689b      	ldr	r3, [r3, #8]
 801f3a2:	4798      	blx	r3
 801f3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f3a8:	1cd3      	adds	r3, r2, #3
 801f3aa:	b29b      	uxth	r3, r3
 801f3ac:	2b06      	cmp	r3, #6
 801f3ae:	d916      	bls.n	801f3de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f3b0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801f418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f3b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f3b8:	f8cd c004 	str.w	ip, [sp, #4]
 801f3bc:	f04f 0c01 	mov.w	ip, #1
 801f3c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f3c4:	6920      	ldr	r0, [r4, #16]
 801f3c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f3ca:	a901      	add	r1, sp, #4
 801f3cc:	f88d c008 	strb.w	ip, [sp, #8]
 801f3d0:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f3d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f3d8:	6803      	ldr	r3, [r0, #0]
 801f3da:	689b      	ldr	r3, [r3, #8]
 801f3dc:	4798      	blx	r3
 801f3de:	4b0d      	ldr	r3, [pc, #52]	; (801f414 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801f3e0:	a901      	add	r1, sp, #4
 801f3e2:	6920      	ldr	r0, [r4, #16]
 801f3e4:	9301      	str	r3, [sp, #4]
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	f88d 5008 	strb.w	r5, [sp, #8]
 801f3ec:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f3f0:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f3f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f3f8:	6803      	ldr	r3, [r0, #0]
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	4798      	blx	r3
 801f3fe:	b005      	add	sp, #20
 801f400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f402:	2900      	cmp	r1, #0
 801f404:	d1eb      	bne.n	801f3de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f406:	80a2      	strh	r2, [r4, #4]
 801f408:	80c6      	strh	r6, [r0, #6]
 801f40a:	60a1      	str	r1, [r4, #8]
 801f40c:	81a1      	strh	r1, [r4, #12]
 801f40e:	73a1      	strb	r1, [r4, #14]
 801f410:	e7e5      	b.n	801f3de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f412:	bf00      	nop
 801f414:	08023e30 	.word	0x08023e30
 801f418:	08023e58 	.word	0x08023e58

0801f41c <__aeabi_atexit>:
 801f41c:	460b      	mov	r3, r1
 801f41e:	4601      	mov	r1, r0
 801f420:	4618      	mov	r0, r3
 801f422:	f000 b853 	b.w	801f4cc <__cxa_atexit>

0801f426 <_ZdlPvj>:
 801f426:	f000 b812 	b.w	801f44e <_ZdlPv>

0801f42a <__cxa_guard_acquire>:
 801f42a:	6803      	ldr	r3, [r0, #0]
 801f42c:	07db      	lsls	r3, r3, #31
 801f42e:	d406      	bmi.n	801f43e <__cxa_guard_acquire+0x14>
 801f430:	7843      	ldrb	r3, [r0, #1]
 801f432:	b103      	cbz	r3, 801f436 <__cxa_guard_acquire+0xc>
 801f434:	deff      	udf	#255	; 0xff
 801f436:	2301      	movs	r3, #1
 801f438:	7043      	strb	r3, [r0, #1]
 801f43a:	4618      	mov	r0, r3
 801f43c:	4770      	bx	lr
 801f43e:	2000      	movs	r0, #0
 801f440:	4770      	bx	lr

0801f442 <__cxa_guard_release>:
 801f442:	2301      	movs	r3, #1
 801f444:	6003      	str	r3, [r0, #0]
 801f446:	4770      	bx	lr

0801f448 <__cxa_pure_virtual>:
 801f448:	b508      	push	{r3, lr}
 801f44a:	f000 f80f 	bl	801f46c <_ZSt9terminatev>

0801f44e <_ZdlPv>:
 801f44e:	f000 b893 	b.w	801f578 <free>

0801f452 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f452:	b508      	push	{r3, lr}
 801f454:	4780      	blx	r0
 801f456:	f000 f80e 	bl	801f476 <abort>
	...

0801f45c <_ZSt13get_terminatev>:
 801f45c:	4b02      	ldr	r3, [pc, #8]	; (801f468 <_ZSt13get_terminatev+0xc>)
 801f45e:	6818      	ldr	r0, [r3, #0]
 801f460:	f3bf 8f5b 	dmb	ish
 801f464:	4770      	bx	lr
 801f466:	bf00      	nop
 801f468:	200000e4 	.word	0x200000e4

0801f46c <_ZSt9terminatev>:
 801f46c:	b508      	push	{r3, lr}
 801f46e:	f7ff fff5 	bl	801f45c <_ZSt13get_terminatev>
 801f472:	f7ff ffee 	bl	801f452 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f476 <abort>:
 801f476:	b508      	push	{r3, lr}
 801f478:	2006      	movs	r0, #6
 801f47a:	f000 fca1 	bl	801fdc0 <raise>
 801f47e:	2001      	movs	r0, #1
 801f480:	f7e4 fe38 	bl	80040f4 <_exit>

0801f484 <__assert_func>:
 801f484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f486:	4614      	mov	r4, r2
 801f488:	461a      	mov	r2, r3
 801f48a:	4b09      	ldr	r3, [pc, #36]	; (801f4b0 <__assert_func+0x2c>)
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	4605      	mov	r5, r0
 801f490:	68d8      	ldr	r0, [r3, #12]
 801f492:	b14c      	cbz	r4, 801f4a8 <__assert_func+0x24>
 801f494:	4b07      	ldr	r3, [pc, #28]	; (801f4b4 <__assert_func+0x30>)
 801f496:	9100      	str	r1, [sp, #0]
 801f498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f49c:	4906      	ldr	r1, [pc, #24]	; (801f4b8 <__assert_func+0x34>)
 801f49e:	462b      	mov	r3, r5
 801f4a0:	f000 f828 	bl	801f4f4 <fiprintf>
 801f4a4:	f7ff ffe7 	bl	801f476 <abort>
 801f4a8:	4b04      	ldr	r3, [pc, #16]	; (801f4bc <__assert_func+0x38>)
 801f4aa:	461c      	mov	r4, r3
 801f4ac:	e7f3      	b.n	801f496 <__assert_func+0x12>
 801f4ae:	bf00      	nop
 801f4b0:	200000e8 	.word	0x200000e8
 801f4b4:	08024120 	.word	0x08024120
 801f4b8:	0802412d 	.word	0x0802412d
 801f4bc:	0802415b 	.word	0x0802415b

0801f4c0 <atexit>:
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	4601      	mov	r1, r0
 801f4c4:	461a      	mov	r2, r3
 801f4c6:	4618      	mov	r0, r3
 801f4c8:	f000 bd6a 	b.w	801ffa0 <__register_exitproc>

0801f4cc <__cxa_atexit>:
 801f4cc:	b510      	push	{r4, lr}
 801f4ce:	4c05      	ldr	r4, [pc, #20]	; (801f4e4 <__cxa_atexit+0x18>)
 801f4d0:	4613      	mov	r3, r2
 801f4d2:	b12c      	cbz	r4, 801f4e0 <__cxa_atexit+0x14>
 801f4d4:	460a      	mov	r2, r1
 801f4d6:	4601      	mov	r1, r0
 801f4d8:	2002      	movs	r0, #2
 801f4da:	f000 fd61 	bl	801ffa0 <__register_exitproc>
 801f4de:	bd10      	pop	{r4, pc}
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	e7fc      	b.n	801f4de <__cxa_atexit+0x12>
 801f4e4:	0801ffa1 	.word	0x0801ffa1

0801f4e8 <__errno>:
 801f4e8:	4b01      	ldr	r3, [pc, #4]	; (801f4f0 <__errno+0x8>)
 801f4ea:	6818      	ldr	r0, [r3, #0]
 801f4ec:	4770      	bx	lr
 801f4ee:	bf00      	nop
 801f4f0:	200000e8 	.word	0x200000e8

0801f4f4 <fiprintf>:
 801f4f4:	b40e      	push	{r1, r2, r3}
 801f4f6:	b503      	push	{r0, r1, lr}
 801f4f8:	4601      	mov	r1, r0
 801f4fa:	ab03      	add	r3, sp, #12
 801f4fc:	4805      	ldr	r0, [pc, #20]	; (801f514 <fiprintf+0x20>)
 801f4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801f502:	6800      	ldr	r0, [r0, #0]
 801f504:	9301      	str	r3, [sp, #4]
 801f506:	f000 f95f 	bl	801f7c8 <_vfiprintf_r>
 801f50a:	b002      	add	sp, #8
 801f50c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f510:	b003      	add	sp, #12
 801f512:	4770      	bx	lr
 801f514:	200000e8 	.word	0x200000e8

0801f518 <__libc_init_array>:
 801f518:	b570      	push	{r4, r5, r6, lr}
 801f51a:	4d0d      	ldr	r5, [pc, #52]	; (801f550 <__libc_init_array+0x38>)
 801f51c:	4c0d      	ldr	r4, [pc, #52]	; (801f554 <__libc_init_array+0x3c>)
 801f51e:	1b64      	subs	r4, r4, r5
 801f520:	10a4      	asrs	r4, r4, #2
 801f522:	2600      	movs	r6, #0
 801f524:	42a6      	cmp	r6, r4
 801f526:	d109      	bne.n	801f53c <__libc_init_array+0x24>
 801f528:	4d0b      	ldr	r5, [pc, #44]	; (801f558 <__libc_init_array+0x40>)
 801f52a:	4c0c      	ldr	r4, [pc, #48]	; (801f55c <__libc_init_array+0x44>)
 801f52c:	f001 f86e 	bl	802060c <_init>
 801f530:	1b64      	subs	r4, r4, r5
 801f532:	10a4      	asrs	r4, r4, #2
 801f534:	2600      	movs	r6, #0
 801f536:	42a6      	cmp	r6, r4
 801f538:	d105      	bne.n	801f546 <__libc_init_array+0x2e>
 801f53a:	bd70      	pop	{r4, r5, r6, pc}
 801f53c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f540:	4798      	blx	r3
 801f542:	3601      	adds	r6, #1
 801f544:	e7ee      	b.n	801f524 <__libc_init_array+0xc>
 801f546:	f855 3b04 	ldr.w	r3, [r5], #4
 801f54a:	4798      	blx	r3
 801f54c:	3601      	adds	r6, #1
 801f54e:	e7f2      	b.n	801f536 <__libc_init_array+0x1e>
 801f550:	08024220 	.word	0x08024220
 801f554:	08024220 	.word	0x08024220
 801f558:	08024220 	.word	0x08024220
 801f55c:	0802423c 	.word	0x0802423c

0801f560 <__retarget_lock_init_recursive>:
 801f560:	4770      	bx	lr

0801f562 <__retarget_lock_acquire_recursive>:
 801f562:	4770      	bx	lr

0801f564 <__retarget_lock_release>:
 801f564:	4770      	bx	lr

0801f566 <__retarget_lock_release_recursive>:
 801f566:	4770      	bx	lr

0801f568 <malloc>:
 801f568:	4b02      	ldr	r3, [pc, #8]	; (801f574 <malloc+0xc>)
 801f56a:	4601      	mov	r1, r0
 801f56c:	6818      	ldr	r0, [r3, #0]
 801f56e:	f000 b88d 	b.w	801f68c <_malloc_r>
 801f572:	bf00      	nop
 801f574:	200000e8 	.word	0x200000e8

0801f578 <free>:
 801f578:	4b02      	ldr	r3, [pc, #8]	; (801f584 <free+0xc>)
 801f57a:	4601      	mov	r1, r0
 801f57c:	6818      	ldr	r0, [r3, #0]
 801f57e:	f000 b819 	b.w	801f5b4 <_free_r>
 801f582:	bf00      	nop
 801f584:	200000e8 	.word	0x200000e8

0801f588 <memcpy>:
 801f588:	440a      	add	r2, r1
 801f58a:	4291      	cmp	r1, r2
 801f58c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f590:	d100      	bne.n	801f594 <memcpy+0xc>
 801f592:	4770      	bx	lr
 801f594:	b510      	push	{r4, lr}
 801f596:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f59e:	4291      	cmp	r1, r2
 801f5a0:	d1f9      	bne.n	801f596 <memcpy+0xe>
 801f5a2:	bd10      	pop	{r4, pc}

0801f5a4 <memset>:
 801f5a4:	4402      	add	r2, r0
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	4293      	cmp	r3, r2
 801f5aa:	d100      	bne.n	801f5ae <memset+0xa>
 801f5ac:	4770      	bx	lr
 801f5ae:	f803 1b01 	strb.w	r1, [r3], #1
 801f5b2:	e7f9      	b.n	801f5a8 <memset+0x4>

0801f5b4 <_free_r>:
 801f5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f5b6:	2900      	cmp	r1, #0
 801f5b8:	d044      	beq.n	801f644 <_free_r+0x90>
 801f5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f5be:	9001      	str	r0, [sp, #4]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	f1a1 0404 	sub.w	r4, r1, #4
 801f5c6:	bfb8      	it	lt
 801f5c8:	18e4      	addlt	r4, r4, r3
 801f5ca:	f000 ff67 	bl	802049c <__malloc_lock>
 801f5ce:	4a1e      	ldr	r2, [pc, #120]	; (801f648 <_free_r+0x94>)
 801f5d0:	9801      	ldr	r0, [sp, #4]
 801f5d2:	6813      	ldr	r3, [r2, #0]
 801f5d4:	b933      	cbnz	r3, 801f5e4 <_free_r+0x30>
 801f5d6:	6063      	str	r3, [r4, #4]
 801f5d8:	6014      	str	r4, [r2, #0]
 801f5da:	b003      	add	sp, #12
 801f5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f5e0:	f000 bf62 	b.w	80204a8 <__malloc_unlock>
 801f5e4:	42a3      	cmp	r3, r4
 801f5e6:	d908      	bls.n	801f5fa <_free_r+0x46>
 801f5e8:	6825      	ldr	r5, [r4, #0]
 801f5ea:	1961      	adds	r1, r4, r5
 801f5ec:	428b      	cmp	r3, r1
 801f5ee:	bf01      	itttt	eq
 801f5f0:	6819      	ldreq	r1, [r3, #0]
 801f5f2:	685b      	ldreq	r3, [r3, #4]
 801f5f4:	1949      	addeq	r1, r1, r5
 801f5f6:	6021      	streq	r1, [r4, #0]
 801f5f8:	e7ed      	b.n	801f5d6 <_free_r+0x22>
 801f5fa:	461a      	mov	r2, r3
 801f5fc:	685b      	ldr	r3, [r3, #4]
 801f5fe:	b10b      	cbz	r3, 801f604 <_free_r+0x50>
 801f600:	42a3      	cmp	r3, r4
 801f602:	d9fa      	bls.n	801f5fa <_free_r+0x46>
 801f604:	6811      	ldr	r1, [r2, #0]
 801f606:	1855      	adds	r5, r2, r1
 801f608:	42a5      	cmp	r5, r4
 801f60a:	d10b      	bne.n	801f624 <_free_r+0x70>
 801f60c:	6824      	ldr	r4, [r4, #0]
 801f60e:	4421      	add	r1, r4
 801f610:	1854      	adds	r4, r2, r1
 801f612:	42a3      	cmp	r3, r4
 801f614:	6011      	str	r1, [r2, #0]
 801f616:	d1e0      	bne.n	801f5da <_free_r+0x26>
 801f618:	681c      	ldr	r4, [r3, #0]
 801f61a:	685b      	ldr	r3, [r3, #4]
 801f61c:	6053      	str	r3, [r2, #4]
 801f61e:	4421      	add	r1, r4
 801f620:	6011      	str	r1, [r2, #0]
 801f622:	e7da      	b.n	801f5da <_free_r+0x26>
 801f624:	d902      	bls.n	801f62c <_free_r+0x78>
 801f626:	230c      	movs	r3, #12
 801f628:	6003      	str	r3, [r0, #0]
 801f62a:	e7d6      	b.n	801f5da <_free_r+0x26>
 801f62c:	6825      	ldr	r5, [r4, #0]
 801f62e:	1961      	adds	r1, r4, r5
 801f630:	428b      	cmp	r3, r1
 801f632:	bf04      	itt	eq
 801f634:	6819      	ldreq	r1, [r3, #0]
 801f636:	685b      	ldreq	r3, [r3, #4]
 801f638:	6063      	str	r3, [r4, #4]
 801f63a:	bf04      	itt	eq
 801f63c:	1949      	addeq	r1, r1, r5
 801f63e:	6021      	streq	r1, [r4, #0]
 801f640:	6054      	str	r4, [r2, #4]
 801f642:	e7ca      	b.n	801f5da <_free_r+0x26>
 801f644:	b003      	add	sp, #12
 801f646:	bd30      	pop	{r4, r5, pc}
 801f648:	20024a14 	.word	0x20024a14

0801f64c <sbrk_aligned>:
 801f64c:	b570      	push	{r4, r5, r6, lr}
 801f64e:	4e0e      	ldr	r6, [pc, #56]	; (801f688 <sbrk_aligned+0x3c>)
 801f650:	460c      	mov	r4, r1
 801f652:	6831      	ldr	r1, [r6, #0]
 801f654:	4605      	mov	r5, r0
 801f656:	b911      	cbnz	r1, 801f65e <sbrk_aligned+0x12>
 801f658:	f000 fb7a 	bl	801fd50 <_sbrk_r>
 801f65c:	6030      	str	r0, [r6, #0]
 801f65e:	4621      	mov	r1, r4
 801f660:	4628      	mov	r0, r5
 801f662:	f000 fb75 	bl	801fd50 <_sbrk_r>
 801f666:	1c43      	adds	r3, r0, #1
 801f668:	d00a      	beq.n	801f680 <sbrk_aligned+0x34>
 801f66a:	1cc4      	adds	r4, r0, #3
 801f66c:	f024 0403 	bic.w	r4, r4, #3
 801f670:	42a0      	cmp	r0, r4
 801f672:	d007      	beq.n	801f684 <sbrk_aligned+0x38>
 801f674:	1a21      	subs	r1, r4, r0
 801f676:	4628      	mov	r0, r5
 801f678:	f000 fb6a 	bl	801fd50 <_sbrk_r>
 801f67c:	3001      	adds	r0, #1
 801f67e:	d101      	bne.n	801f684 <sbrk_aligned+0x38>
 801f680:	f04f 34ff 	mov.w	r4, #4294967295
 801f684:	4620      	mov	r0, r4
 801f686:	bd70      	pop	{r4, r5, r6, pc}
 801f688:	20024a18 	.word	0x20024a18

0801f68c <_malloc_r>:
 801f68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f690:	1ccd      	adds	r5, r1, #3
 801f692:	f025 0503 	bic.w	r5, r5, #3
 801f696:	3508      	adds	r5, #8
 801f698:	2d0c      	cmp	r5, #12
 801f69a:	bf38      	it	cc
 801f69c:	250c      	movcc	r5, #12
 801f69e:	2d00      	cmp	r5, #0
 801f6a0:	4607      	mov	r7, r0
 801f6a2:	db01      	blt.n	801f6a8 <_malloc_r+0x1c>
 801f6a4:	42a9      	cmp	r1, r5
 801f6a6:	d905      	bls.n	801f6b4 <_malloc_r+0x28>
 801f6a8:	230c      	movs	r3, #12
 801f6aa:	603b      	str	r3, [r7, #0]
 801f6ac:	2600      	movs	r6, #0
 801f6ae:	4630      	mov	r0, r6
 801f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6b4:	4e2e      	ldr	r6, [pc, #184]	; (801f770 <_malloc_r+0xe4>)
 801f6b6:	f000 fef1 	bl	802049c <__malloc_lock>
 801f6ba:	6833      	ldr	r3, [r6, #0]
 801f6bc:	461c      	mov	r4, r3
 801f6be:	bb34      	cbnz	r4, 801f70e <_malloc_r+0x82>
 801f6c0:	4629      	mov	r1, r5
 801f6c2:	4638      	mov	r0, r7
 801f6c4:	f7ff ffc2 	bl	801f64c <sbrk_aligned>
 801f6c8:	1c43      	adds	r3, r0, #1
 801f6ca:	4604      	mov	r4, r0
 801f6cc:	d14d      	bne.n	801f76a <_malloc_r+0xde>
 801f6ce:	6834      	ldr	r4, [r6, #0]
 801f6d0:	4626      	mov	r6, r4
 801f6d2:	2e00      	cmp	r6, #0
 801f6d4:	d140      	bne.n	801f758 <_malloc_r+0xcc>
 801f6d6:	6823      	ldr	r3, [r4, #0]
 801f6d8:	4631      	mov	r1, r6
 801f6da:	4638      	mov	r0, r7
 801f6dc:	eb04 0803 	add.w	r8, r4, r3
 801f6e0:	f000 fb36 	bl	801fd50 <_sbrk_r>
 801f6e4:	4580      	cmp	r8, r0
 801f6e6:	d13a      	bne.n	801f75e <_malloc_r+0xd2>
 801f6e8:	6821      	ldr	r1, [r4, #0]
 801f6ea:	3503      	adds	r5, #3
 801f6ec:	1a6d      	subs	r5, r5, r1
 801f6ee:	f025 0503 	bic.w	r5, r5, #3
 801f6f2:	3508      	adds	r5, #8
 801f6f4:	2d0c      	cmp	r5, #12
 801f6f6:	bf38      	it	cc
 801f6f8:	250c      	movcc	r5, #12
 801f6fa:	4629      	mov	r1, r5
 801f6fc:	4638      	mov	r0, r7
 801f6fe:	f7ff ffa5 	bl	801f64c <sbrk_aligned>
 801f702:	3001      	adds	r0, #1
 801f704:	d02b      	beq.n	801f75e <_malloc_r+0xd2>
 801f706:	6823      	ldr	r3, [r4, #0]
 801f708:	442b      	add	r3, r5
 801f70a:	6023      	str	r3, [r4, #0]
 801f70c:	e00e      	b.n	801f72c <_malloc_r+0xa0>
 801f70e:	6822      	ldr	r2, [r4, #0]
 801f710:	1b52      	subs	r2, r2, r5
 801f712:	d41e      	bmi.n	801f752 <_malloc_r+0xc6>
 801f714:	2a0b      	cmp	r2, #11
 801f716:	d916      	bls.n	801f746 <_malloc_r+0xba>
 801f718:	1961      	adds	r1, r4, r5
 801f71a:	42a3      	cmp	r3, r4
 801f71c:	6025      	str	r5, [r4, #0]
 801f71e:	bf18      	it	ne
 801f720:	6059      	strne	r1, [r3, #4]
 801f722:	6863      	ldr	r3, [r4, #4]
 801f724:	bf08      	it	eq
 801f726:	6031      	streq	r1, [r6, #0]
 801f728:	5162      	str	r2, [r4, r5]
 801f72a:	604b      	str	r3, [r1, #4]
 801f72c:	4638      	mov	r0, r7
 801f72e:	f104 060b 	add.w	r6, r4, #11
 801f732:	f000 feb9 	bl	80204a8 <__malloc_unlock>
 801f736:	f026 0607 	bic.w	r6, r6, #7
 801f73a:	1d23      	adds	r3, r4, #4
 801f73c:	1af2      	subs	r2, r6, r3
 801f73e:	d0b6      	beq.n	801f6ae <_malloc_r+0x22>
 801f740:	1b9b      	subs	r3, r3, r6
 801f742:	50a3      	str	r3, [r4, r2]
 801f744:	e7b3      	b.n	801f6ae <_malloc_r+0x22>
 801f746:	6862      	ldr	r2, [r4, #4]
 801f748:	42a3      	cmp	r3, r4
 801f74a:	bf0c      	ite	eq
 801f74c:	6032      	streq	r2, [r6, #0]
 801f74e:	605a      	strne	r2, [r3, #4]
 801f750:	e7ec      	b.n	801f72c <_malloc_r+0xa0>
 801f752:	4623      	mov	r3, r4
 801f754:	6864      	ldr	r4, [r4, #4]
 801f756:	e7b2      	b.n	801f6be <_malloc_r+0x32>
 801f758:	4634      	mov	r4, r6
 801f75a:	6876      	ldr	r6, [r6, #4]
 801f75c:	e7b9      	b.n	801f6d2 <_malloc_r+0x46>
 801f75e:	230c      	movs	r3, #12
 801f760:	603b      	str	r3, [r7, #0]
 801f762:	4638      	mov	r0, r7
 801f764:	f000 fea0 	bl	80204a8 <__malloc_unlock>
 801f768:	e7a1      	b.n	801f6ae <_malloc_r+0x22>
 801f76a:	6025      	str	r5, [r4, #0]
 801f76c:	e7de      	b.n	801f72c <_malloc_r+0xa0>
 801f76e:	bf00      	nop
 801f770:	20024a14 	.word	0x20024a14

0801f774 <__sfputc_r>:
 801f774:	6893      	ldr	r3, [r2, #8]
 801f776:	3b01      	subs	r3, #1
 801f778:	2b00      	cmp	r3, #0
 801f77a:	b410      	push	{r4}
 801f77c:	6093      	str	r3, [r2, #8]
 801f77e:	da08      	bge.n	801f792 <__sfputc_r+0x1e>
 801f780:	6994      	ldr	r4, [r2, #24]
 801f782:	42a3      	cmp	r3, r4
 801f784:	db01      	blt.n	801f78a <__sfputc_r+0x16>
 801f786:	290a      	cmp	r1, #10
 801f788:	d103      	bne.n	801f792 <__sfputc_r+0x1e>
 801f78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f78e:	f000 bb47 	b.w	801fe20 <__swbuf_r>
 801f792:	6813      	ldr	r3, [r2, #0]
 801f794:	1c58      	adds	r0, r3, #1
 801f796:	6010      	str	r0, [r2, #0]
 801f798:	7019      	strb	r1, [r3, #0]
 801f79a:	4608      	mov	r0, r1
 801f79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f7a0:	4770      	bx	lr

0801f7a2 <__sfputs_r>:
 801f7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7a4:	4606      	mov	r6, r0
 801f7a6:	460f      	mov	r7, r1
 801f7a8:	4614      	mov	r4, r2
 801f7aa:	18d5      	adds	r5, r2, r3
 801f7ac:	42ac      	cmp	r4, r5
 801f7ae:	d101      	bne.n	801f7b4 <__sfputs_r+0x12>
 801f7b0:	2000      	movs	r0, #0
 801f7b2:	e007      	b.n	801f7c4 <__sfputs_r+0x22>
 801f7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7b8:	463a      	mov	r2, r7
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	f7ff ffda 	bl	801f774 <__sfputc_r>
 801f7c0:	1c43      	adds	r3, r0, #1
 801f7c2:	d1f3      	bne.n	801f7ac <__sfputs_r+0xa>
 801f7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f7c8 <_vfiprintf_r>:
 801f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7cc:	460d      	mov	r5, r1
 801f7ce:	b09d      	sub	sp, #116	; 0x74
 801f7d0:	4614      	mov	r4, r2
 801f7d2:	4698      	mov	r8, r3
 801f7d4:	4606      	mov	r6, r0
 801f7d6:	b118      	cbz	r0, 801f7e0 <_vfiprintf_r+0x18>
 801f7d8:	6983      	ldr	r3, [r0, #24]
 801f7da:	b90b      	cbnz	r3, 801f7e0 <_vfiprintf_r+0x18>
 801f7dc:	f000 fd5c 	bl	8020298 <__sinit>
 801f7e0:	4b89      	ldr	r3, [pc, #548]	; (801fa08 <_vfiprintf_r+0x240>)
 801f7e2:	429d      	cmp	r5, r3
 801f7e4:	d11b      	bne.n	801f81e <_vfiprintf_r+0x56>
 801f7e6:	6875      	ldr	r5, [r6, #4]
 801f7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7ea:	07d9      	lsls	r1, r3, #31
 801f7ec:	d405      	bmi.n	801f7fa <_vfiprintf_r+0x32>
 801f7ee:	89ab      	ldrh	r3, [r5, #12]
 801f7f0:	059a      	lsls	r2, r3, #22
 801f7f2:	d402      	bmi.n	801f7fa <_vfiprintf_r+0x32>
 801f7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7f6:	f7ff feb4 	bl	801f562 <__retarget_lock_acquire_recursive>
 801f7fa:	89ab      	ldrh	r3, [r5, #12]
 801f7fc:	071b      	lsls	r3, r3, #28
 801f7fe:	d501      	bpl.n	801f804 <_vfiprintf_r+0x3c>
 801f800:	692b      	ldr	r3, [r5, #16]
 801f802:	b9eb      	cbnz	r3, 801f840 <_vfiprintf_r+0x78>
 801f804:	4629      	mov	r1, r5
 801f806:	4630      	mov	r0, r6
 801f808:	f000 fb5c 	bl	801fec4 <__swsetup_r>
 801f80c:	b1c0      	cbz	r0, 801f840 <_vfiprintf_r+0x78>
 801f80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f810:	07dc      	lsls	r4, r3, #31
 801f812:	d50e      	bpl.n	801f832 <_vfiprintf_r+0x6a>
 801f814:	f04f 30ff 	mov.w	r0, #4294967295
 801f818:	b01d      	add	sp, #116	; 0x74
 801f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f81e:	4b7b      	ldr	r3, [pc, #492]	; (801fa0c <_vfiprintf_r+0x244>)
 801f820:	429d      	cmp	r5, r3
 801f822:	d101      	bne.n	801f828 <_vfiprintf_r+0x60>
 801f824:	68b5      	ldr	r5, [r6, #8]
 801f826:	e7df      	b.n	801f7e8 <_vfiprintf_r+0x20>
 801f828:	4b79      	ldr	r3, [pc, #484]	; (801fa10 <_vfiprintf_r+0x248>)
 801f82a:	429d      	cmp	r5, r3
 801f82c:	bf08      	it	eq
 801f82e:	68f5      	ldreq	r5, [r6, #12]
 801f830:	e7da      	b.n	801f7e8 <_vfiprintf_r+0x20>
 801f832:	89ab      	ldrh	r3, [r5, #12]
 801f834:	0598      	lsls	r0, r3, #22
 801f836:	d4ed      	bmi.n	801f814 <_vfiprintf_r+0x4c>
 801f838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f83a:	f7ff fe94 	bl	801f566 <__retarget_lock_release_recursive>
 801f83e:	e7e9      	b.n	801f814 <_vfiprintf_r+0x4c>
 801f840:	2300      	movs	r3, #0
 801f842:	9309      	str	r3, [sp, #36]	; 0x24
 801f844:	2320      	movs	r3, #32
 801f846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f84a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f84e:	2330      	movs	r3, #48	; 0x30
 801f850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fa14 <_vfiprintf_r+0x24c>
 801f854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f858:	f04f 0901 	mov.w	r9, #1
 801f85c:	4623      	mov	r3, r4
 801f85e:	469a      	mov	sl, r3
 801f860:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f864:	b10a      	cbz	r2, 801f86a <_vfiprintf_r+0xa2>
 801f866:	2a25      	cmp	r2, #37	; 0x25
 801f868:	d1f9      	bne.n	801f85e <_vfiprintf_r+0x96>
 801f86a:	ebba 0b04 	subs.w	fp, sl, r4
 801f86e:	d00b      	beq.n	801f888 <_vfiprintf_r+0xc0>
 801f870:	465b      	mov	r3, fp
 801f872:	4622      	mov	r2, r4
 801f874:	4629      	mov	r1, r5
 801f876:	4630      	mov	r0, r6
 801f878:	f7ff ff93 	bl	801f7a2 <__sfputs_r>
 801f87c:	3001      	adds	r0, #1
 801f87e:	f000 80aa 	beq.w	801f9d6 <_vfiprintf_r+0x20e>
 801f882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f884:	445a      	add	r2, fp
 801f886:	9209      	str	r2, [sp, #36]	; 0x24
 801f888:	f89a 3000 	ldrb.w	r3, [sl]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	f000 80a2 	beq.w	801f9d6 <_vfiprintf_r+0x20e>
 801f892:	2300      	movs	r3, #0
 801f894:	f04f 32ff 	mov.w	r2, #4294967295
 801f898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f89c:	f10a 0a01 	add.w	sl, sl, #1
 801f8a0:	9304      	str	r3, [sp, #16]
 801f8a2:	9307      	str	r3, [sp, #28]
 801f8a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f8a8:	931a      	str	r3, [sp, #104]	; 0x68
 801f8aa:	4654      	mov	r4, sl
 801f8ac:	2205      	movs	r2, #5
 801f8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f8b2:	4858      	ldr	r0, [pc, #352]	; (801fa14 <_vfiprintf_r+0x24c>)
 801f8b4:	f7e0 fcc4 	bl	8000240 <memchr>
 801f8b8:	9a04      	ldr	r2, [sp, #16]
 801f8ba:	b9d8      	cbnz	r0, 801f8f4 <_vfiprintf_r+0x12c>
 801f8bc:	06d1      	lsls	r1, r2, #27
 801f8be:	bf44      	itt	mi
 801f8c0:	2320      	movmi	r3, #32
 801f8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8c6:	0713      	lsls	r3, r2, #28
 801f8c8:	bf44      	itt	mi
 801f8ca:	232b      	movmi	r3, #43	; 0x2b
 801f8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f8d0:	f89a 3000 	ldrb.w	r3, [sl]
 801f8d4:	2b2a      	cmp	r3, #42	; 0x2a
 801f8d6:	d015      	beq.n	801f904 <_vfiprintf_r+0x13c>
 801f8d8:	9a07      	ldr	r2, [sp, #28]
 801f8da:	4654      	mov	r4, sl
 801f8dc:	2000      	movs	r0, #0
 801f8de:	f04f 0c0a 	mov.w	ip, #10
 801f8e2:	4621      	mov	r1, r4
 801f8e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8e8:	3b30      	subs	r3, #48	; 0x30
 801f8ea:	2b09      	cmp	r3, #9
 801f8ec:	d94e      	bls.n	801f98c <_vfiprintf_r+0x1c4>
 801f8ee:	b1b0      	cbz	r0, 801f91e <_vfiprintf_r+0x156>
 801f8f0:	9207      	str	r2, [sp, #28]
 801f8f2:	e014      	b.n	801f91e <_vfiprintf_r+0x156>
 801f8f4:	eba0 0308 	sub.w	r3, r0, r8
 801f8f8:	fa09 f303 	lsl.w	r3, r9, r3
 801f8fc:	4313      	orrs	r3, r2
 801f8fe:	9304      	str	r3, [sp, #16]
 801f900:	46a2      	mov	sl, r4
 801f902:	e7d2      	b.n	801f8aa <_vfiprintf_r+0xe2>
 801f904:	9b03      	ldr	r3, [sp, #12]
 801f906:	1d19      	adds	r1, r3, #4
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	9103      	str	r1, [sp, #12]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	bfbb      	ittet	lt
 801f910:	425b      	neglt	r3, r3
 801f912:	f042 0202 	orrlt.w	r2, r2, #2
 801f916:	9307      	strge	r3, [sp, #28]
 801f918:	9307      	strlt	r3, [sp, #28]
 801f91a:	bfb8      	it	lt
 801f91c:	9204      	strlt	r2, [sp, #16]
 801f91e:	7823      	ldrb	r3, [r4, #0]
 801f920:	2b2e      	cmp	r3, #46	; 0x2e
 801f922:	d10c      	bne.n	801f93e <_vfiprintf_r+0x176>
 801f924:	7863      	ldrb	r3, [r4, #1]
 801f926:	2b2a      	cmp	r3, #42	; 0x2a
 801f928:	d135      	bne.n	801f996 <_vfiprintf_r+0x1ce>
 801f92a:	9b03      	ldr	r3, [sp, #12]
 801f92c:	1d1a      	adds	r2, r3, #4
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	9203      	str	r2, [sp, #12]
 801f932:	2b00      	cmp	r3, #0
 801f934:	bfb8      	it	lt
 801f936:	f04f 33ff 	movlt.w	r3, #4294967295
 801f93a:	3402      	adds	r4, #2
 801f93c:	9305      	str	r3, [sp, #20]
 801f93e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fa24 <_vfiprintf_r+0x25c>
 801f942:	7821      	ldrb	r1, [r4, #0]
 801f944:	2203      	movs	r2, #3
 801f946:	4650      	mov	r0, sl
 801f948:	f7e0 fc7a 	bl	8000240 <memchr>
 801f94c:	b140      	cbz	r0, 801f960 <_vfiprintf_r+0x198>
 801f94e:	2340      	movs	r3, #64	; 0x40
 801f950:	eba0 000a 	sub.w	r0, r0, sl
 801f954:	fa03 f000 	lsl.w	r0, r3, r0
 801f958:	9b04      	ldr	r3, [sp, #16]
 801f95a:	4303      	orrs	r3, r0
 801f95c:	3401      	adds	r4, #1
 801f95e:	9304      	str	r3, [sp, #16]
 801f960:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f964:	482c      	ldr	r0, [pc, #176]	; (801fa18 <_vfiprintf_r+0x250>)
 801f966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f96a:	2206      	movs	r2, #6
 801f96c:	f7e0 fc68 	bl	8000240 <memchr>
 801f970:	2800      	cmp	r0, #0
 801f972:	d03f      	beq.n	801f9f4 <_vfiprintf_r+0x22c>
 801f974:	4b29      	ldr	r3, [pc, #164]	; (801fa1c <_vfiprintf_r+0x254>)
 801f976:	bb1b      	cbnz	r3, 801f9c0 <_vfiprintf_r+0x1f8>
 801f978:	9b03      	ldr	r3, [sp, #12]
 801f97a:	3307      	adds	r3, #7
 801f97c:	f023 0307 	bic.w	r3, r3, #7
 801f980:	3308      	adds	r3, #8
 801f982:	9303      	str	r3, [sp, #12]
 801f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f986:	443b      	add	r3, r7
 801f988:	9309      	str	r3, [sp, #36]	; 0x24
 801f98a:	e767      	b.n	801f85c <_vfiprintf_r+0x94>
 801f98c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f990:	460c      	mov	r4, r1
 801f992:	2001      	movs	r0, #1
 801f994:	e7a5      	b.n	801f8e2 <_vfiprintf_r+0x11a>
 801f996:	2300      	movs	r3, #0
 801f998:	3401      	adds	r4, #1
 801f99a:	9305      	str	r3, [sp, #20]
 801f99c:	4619      	mov	r1, r3
 801f99e:	f04f 0c0a 	mov.w	ip, #10
 801f9a2:	4620      	mov	r0, r4
 801f9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f9a8:	3a30      	subs	r2, #48	; 0x30
 801f9aa:	2a09      	cmp	r2, #9
 801f9ac:	d903      	bls.n	801f9b6 <_vfiprintf_r+0x1ee>
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d0c5      	beq.n	801f93e <_vfiprintf_r+0x176>
 801f9b2:	9105      	str	r1, [sp, #20]
 801f9b4:	e7c3      	b.n	801f93e <_vfiprintf_r+0x176>
 801f9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f9ba:	4604      	mov	r4, r0
 801f9bc:	2301      	movs	r3, #1
 801f9be:	e7f0      	b.n	801f9a2 <_vfiprintf_r+0x1da>
 801f9c0:	ab03      	add	r3, sp, #12
 801f9c2:	9300      	str	r3, [sp, #0]
 801f9c4:	462a      	mov	r2, r5
 801f9c6:	4b16      	ldr	r3, [pc, #88]	; (801fa20 <_vfiprintf_r+0x258>)
 801f9c8:	a904      	add	r1, sp, #16
 801f9ca:	4630      	mov	r0, r6
 801f9cc:	f3af 8000 	nop.w
 801f9d0:	4607      	mov	r7, r0
 801f9d2:	1c78      	adds	r0, r7, #1
 801f9d4:	d1d6      	bne.n	801f984 <_vfiprintf_r+0x1bc>
 801f9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9d8:	07d9      	lsls	r1, r3, #31
 801f9da:	d405      	bmi.n	801f9e8 <_vfiprintf_r+0x220>
 801f9dc:	89ab      	ldrh	r3, [r5, #12]
 801f9de:	059a      	lsls	r2, r3, #22
 801f9e0:	d402      	bmi.n	801f9e8 <_vfiprintf_r+0x220>
 801f9e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9e4:	f7ff fdbf 	bl	801f566 <__retarget_lock_release_recursive>
 801f9e8:	89ab      	ldrh	r3, [r5, #12]
 801f9ea:	065b      	lsls	r3, r3, #25
 801f9ec:	f53f af12 	bmi.w	801f814 <_vfiprintf_r+0x4c>
 801f9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9f2:	e711      	b.n	801f818 <_vfiprintf_r+0x50>
 801f9f4:	ab03      	add	r3, sp, #12
 801f9f6:	9300      	str	r3, [sp, #0]
 801f9f8:	462a      	mov	r2, r5
 801f9fa:	4b09      	ldr	r3, [pc, #36]	; (801fa20 <_vfiprintf_r+0x258>)
 801f9fc:	a904      	add	r1, sp, #16
 801f9fe:	4630      	mov	r0, r6
 801fa00:	f000 f880 	bl	801fb04 <_printf_i>
 801fa04:	e7e4      	b.n	801f9d0 <_vfiprintf_r+0x208>
 801fa06:	bf00      	nop
 801fa08:	080241b8 	.word	0x080241b8
 801fa0c:	080241d8 	.word	0x080241d8
 801fa10:	08024198 	.word	0x08024198
 801fa14:	08024160 	.word	0x08024160
 801fa18:	0802416a 	.word	0x0802416a
 801fa1c:	00000000 	.word	0x00000000
 801fa20:	0801f7a3 	.word	0x0801f7a3
 801fa24:	08024166 	.word	0x08024166

0801fa28 <_printf_common>:
 801fa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa2c:	4616      	mov	r6, r2
 801fa2e:	4699      	mov	r9, r3
 801fa30:	688a      	ldr	r2, [r1, #8]
 801fa32:	690b      	ldr	r3, [r1, #16]
 801fa34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	bfb8      	it	lt
 801fa3c:	4613      	movlt	r3, r2
 801fa3e:	6033      	str	r3, [r6, #0]
 801fa40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fa44:	4607      	mov	r7, r0
 801fa46:	460c      	mov	r4, r1
 801fa48:	b10a      	cbz	r2, 801fa4e <_printf_common+0x26>
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	6033      	str	r3, [r6, #0]
 801fa4e:	6823      	ldr	r3, [r4, #0]
 801fa50:	0699      	lsls	r1, r3, #26
 801fa52:	bf42      	ittt	mi
 801fa54:	6833      	ldrmi	r3, [r6, #0]
 801fa56:	3302      	addmi	r3, #2
 801fa58:	6033      	strmi	r3, [r6, #0]
 801fa5a:	6825      	ldr	r5, [r4, #0]
 801fa5c:	f015 0506 	ands.w	r5, r5, #6
 801fa60:	d106      	bne.n	801fa70 <_printf_common+0x48>
 801fa62:	f104 0a19 	add.w	sl, r4, #25
 801fa66:	68e3      	ldr	r3, [r4, #12]
 801fa68:	6832      	ldr	r2, [r6, #0]
 801fa6a:	1a9b      	subs	r3, r3, r2
 801fa6c:	42ab      	cmp	r3, r5
 801fa6e:	dc26      	bgt.n	801fabe <_printf_common+0x96>
 801fa70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fa74:	1e13      	subs	r3, r2, #0
 801fa76:	6822      	ldr	r2, [r4, #0]
 801fa78:	bf18      	it	ne
 801fa7a:	2301      	movne	r3, #1
 801fa7c:	0692      	lsls	r2, r2, #26
 801fa7e:	d42b      	bmi.n	801fad8 <_printf_common+0xb0>
 801fa80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fa84:	4649      	mov	r1, r9
 801fa86:	4638      	mov	r0, r7
 801fa88:	47c0      	blx	r8
 801fa8a:	3001      	adds	r0, #1
 801fa8c:	d01e      	beq.n	801facc <_printf_common+0xa4>
 801fa8e:	6823      	ldr	r3, [r4, #0]
 801fa90:	68e5      	ldr	r5, [r4, #12]
 801fa92:	6832      	ldr	r2, [r6, #0]
 801fa94:	f003 0306 	and.w	r3, r3, #6
 801fa98:	2b04      	cmp	r3, #4
 801fa9a:	bf08      	it	eq
 801fa9c:	1aad      	subeq	r5, r5, r2
 801fa9e:	68a3      	ldr	r3, [r4, #8]
 801faa0:	6922      	ldr	r2, [r4, #16]
 801faa2:	bf0c      	ite	eq
 801faa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801faa8:	2500      	movne	r5, #0
 801faaa:	4293      	cmp	r3, r2
 801faac:	bfc4      	itt	gt
 801faae:	1a9b      	subgt	r3, r3, r2
 801fab0:	18ed      	addgt	r5, r5, r3
 801fab2:	2600      	movs	r6, #0
 801fab4:	341a      	adds	r4, #26
 801fab6:	42b5      	cmp	r5, r6
 801fab8:	d11a      	bne.n	801faf0 <_printf_common+0xc8>
 801faba:	2000      	movs	r0, #0
 801fabc:	e008      	b.n	801fad0 <_printf_common+0xa8>
 801fabe:	2301      	movs	r3, #1
 801fac0:	4652      	mov	r2, sl
 801fac2:	4649      	mov	r1, r9
 801fac4:	4638      	mov	r0, r7
 801fac6:	47c0      	blx	r8
 801fac8:	3001      	adds	r0, #1
 801faca:	d103      	bne.n	801fad4 <_printf_common+0xac>
 801facc:	f04f 30ff 	mov.w	r0, #4294967295
 801fad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fad4:	3501      	adds	r5, #1
 801fad6:	e7c6      	b.n	801fa66 <_printf_common+0x3e>
 801fad8:	18e1      	adds	r1, r4, r3
 801fada:	1c5a      	adds	r2, r3, #1
 801fadc:	2030      	movs	r0, #48	; 0x30
 801fade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fae2:	4422      	add	r2, r4
 801fae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801faec:	3302      	adds	r3, #2
 801faee:	e7c7      	b.n	801fa80 <_printf_common+0x58>
 801faf0:	2301      	movs	r3, #1
 801faf2:	4622      	mov	r2, r4
 801faf4:	4649      	mov	r1, r9
 801faf6:	4638      	mov	r0, r7
 801faf8:	47c0      	blx	r8
 801fafa:	3001      	adds	r0, #1
 801fafc:	d0e6      	beq.n	801facc <_printf_common+0xa4>
 801fafe:	3601      	adds	r6, #1
 801fb00:	e7d9      	b.n	801fab6 <_printf_common+0x8e>
	...

0801fb04 <_printf_i>:
 801fb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fb08:	7e0f      	ldrb	r7, [r1, #24]
 801fb0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb0c:	2f78      	cmp	r7, #120	; 0x78
 801fb0e:	4691      	mov	r9, r2
 801fb10:	4680      	mov	r8, r0
 801fb12:	460c      	mov	r4, r1
 801fb14:	469a      	mov	sl, r3
 801fb16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fb1a:	d807      	bhi.n	801fb2c <_printf_i+0x28>
 801fb1c:	2f62      	cmp	r7, #98	; 0x62
 801fb1e:	d80a      	bhi.n	801fb36 <_printf_i+0x32>
 801fb20:	2f00      	cmp	r7, #0
 801fb22:	f000 80d8 	beq.w	801fcd6 <_printf_i+0x1d2>
 801fb26:	2f58      	cmp	r7, #88	; 0x58
 801fb28:	f000 80a3 	beq.w	801fc72 <_printf_i+0x16e>
 801fb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fb30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fb34:	e03a      	b.n	801fbac <_printf_i+0xa8>
 801fb36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fb3a:	2b15      	cmp	r3, #21
 801fb3c:	d8f6      	bhi.n	801fb2c <_printf_i+0x28>
 801fb3e:	a101      	add	r1, pc, #4	; (adr r1, 801fb44 <_printf_i+0x40>)
 801fb40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fb44:	0801fb9d 	.word	0x0801fb9d
 801fb48:	0801fbb1 	.word	0x0801fbb1
 801fb4c:	0801fb2d 	.word	0x0801fb2d
 801fb50:	0801fb2d 	.word	0x0801fb2d
 801fb54:	0801fb2d 	.word	0x0801fb2d
 801fb58:	0801fb2d 	.word	0x0801fb2d
 801fb5c:	0801fbb1 	.word	0x0801fbb1
 801fb60:	0801fb2d 	.word	0x0801fb2d
 801fb64:	0801fb2d 	.word	0x0801fb2d
 801fb68:	0801fb2d 	.word	0x0801fb2d
 801fb6c:	0801fb2d 	.word	0x0801fb2d
 801fb70:	0801fcbd 	.word	0x0801fcbd
 801fb74:	0801fbe1 	.word	0x0801fbe1
 801fb78:	0801fc9f 	.word	0x0801fc9f
 801fb7c:	0801fb2d 	.word	0x0801fb2d
 801fb80:	0801fb2d 	.word	0x0801fb2d
 801fb84:	0801fcdf 	.word	0x0801fcdf
 801fb88:	0801fb2d 	.word	0x0801fb2d
 801fb8c:	0801fbe1 	.word	0x0801fbe1
 801fb90:	0801fb2d 	.word	0x0801fb2d
 801fb94:	0801fb2d 	.word	0x0801fb2d
 801fb98:	0801fca7 	.word	0x0801fca7
 801fb9c:	682b      	ldr	r3, [r5, #0]
 801fb9e:	1d1a      	adds	r2, r3, #4
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	602a      	str	r2, [r5, #0]
 801fba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fbac:	2301      	movs	r3, #1
 801fbae:	e0a3      	b.n	801fcf8 <_printf_i+0x1f4>
 801fbb0:	6820      	ldr	r0, [r4, #0]
 801fbb2:	6829      	ldr	r1, [r5, #0]
 801fbb4:	0606      	lsls	r6, r0, #24
 801fbb6:	f101 0304 	add.w	r3, r1, #4
 801fbba:	d50a      	bpl.n	801fbd2 <_printf_i+0xce>
 801fbbc:	680e      	ldr	r6, [r1, #0]
 801fbbe:	602b      	str	r3, [r5, #0]
 801fbc0:	2e00      	cmp	r6, #0
 801fbc2:	da03      	bge.n	801fbcc <_printf_i+0xc8>
 801fbc4:	232d      	movs	r3, #45	; 0x2d
 801fbc6:	4276      	negs	r6, r6
 801fbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fbcc:	485e      	ldr	r0, [pc, #376]	; (801fd48 <_printf_i+0x244>)
 801fbce:	230a      	movs	r3, #10
 801fbd0:	e019      	b.n	801fc06 <_printf_i+0x102>
 801fbd2:	680e      	ldr	r6, [r1, #0]
 801fbd4:	602b      	str	r3, [r5, #0]
 801fbd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fbda:	bf18      	it	ne
 801fbdc:	b236      	sxthne	r6, r6
 801fbde:	e7ef      	b.n	801fbc0 <_printf_i+0xbc>
 801fbe0:	682b      	ldr	r3, [r5, #0]
 801fbe2:	6820      	ldr	r0, [r4, #0]
 801fbe4:	1d19      	adds	r1, r3, #4
 801fbe6:	6029      	str	r1, [r5, #0]
 801fbe8:	0601      	lsls	r1, r0, #24
 801fbea:	d501      	bpl.n	801fbf0 <_printf_i+0xec>
 801fbec:	681e      	ldr	r6, [r3, #0]
 801fbee:	e002      	b.n	801fbf6 <_printf_i+0xf2>
 801fbf0:	0646      	lsls	r6, r0, #25
 801fbf2:	d5fb      	bpl.n	801fbec <_printf_i+0xe8>
 801fbf4:	881e      	ldrh	r6, [r3, #0]
 801fbf6:	4854      	ldr	r0, [pc, #336]	; (801fd48 <_printf_i+0x244>)
 801fbf8:	2f6f      	cmp	r7, #111	; 0x6f
 801fbfa:	bf0c      	ite	eq
 801fbfc:	2308      	moveq	r3, #8
 801fbfe:	230a      	movne	r3, #10
 801fc00:	2100      	movs	r1, #0
 801fc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fc06:	6865      	ldr	r5, [r4, #4]
 801fc08:	60a5      	str	r5, [r4, #8]
 801fc0a:	2d00      	cmp	r5, #0
 801fc0c:	bfa2      	ittt	ge
 801fc0e:	6821      	ldrge	r1, [r4, #0]
 801fc10:	f021 0104 	bicge.w	r1, r1, #4
 801fc14:	6021      	strge	r1, [r4, #0]
 801fc16:	b90e      	cbnz	r6, 801fc1c <_printf_i+0x118>
 801fc18:	2d00      	cmp	r5, #0
 801fc1a:	d04d      	beq.n	801fcb8 <_printf_i+0x1b4>
 801fc1c:	4615      	mov	r5, r2
 801fc1e:	fbb6 f1f3 	udiv	r1, r6, r3
 801fc22:	fb03 6711 	mls	r7, r3, r1, r6
 801fc26:	5dc7      	ldrb	r7, [r0, r7]
 801fc28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fc2c:	4637      	mov	r7, r6
 801fc2e:	42bb      	cmp	r3, r7
 801fc30:	460e      	mov	r6, r1
 801fc32:	d9f4      	bls.n	801fc1e <_printf_i+0x11a>
 801fc34:	2b08      	cmp	r3, #8
 801fc36:	d10b      	bne.n	801fc50 <_printf_i+0x14c>
 801fc38:	6823      	ldr	r3, [r4, #0]
 801fc3a:	07de      	lsls	r6, r3, #31
 801fc3c:	d508      	bpl.n	801fc50 <_printf_i+0x14c>
 801fc3e:	6923      	ldr	r3, [r4, #16]
 801fc40:	6861      	ldr	r1, [r4, #4]
 801fc42:	4299      	cmp	r1, r3
 801fc44:	bfde      	ittt	le
 801fc46:	2330      	movle	r3, #48	; 0x30
 801fc48:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fc4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fc50:	1b52      	subs	r2, r2, r5
 801fc52:	6122      	str	r2, [r4, #16]
 801fc54:	f8cd a000 	str.w	sl, [sp]
 801fc58:	464b      	mov	r3, r9
 801fc5a:	aa03      	add	r2, sp, #12
 801fc5c:	4621      	mov	r1, r4
 801fc5e:	4640      	mov	r0, r8
 801fc60:	f7ff fee2 	bl	801fa28 <_printf_common>
 801fc64:	3001      	adds	r0, #1
 801fc66:	d14c      	bne.n	801fd02 <_printf_i+0x1fe>
 801fc68:	f04f 30ff 	mov.w	r0, #4294967295
 801fc6c:	b004      	add	sp, #16
 801fc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc72:	4835      	ldr	r0, [pc, #212]	; (801fd48 <_printf_i+0x244>)
 801fc74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801fc78:	6829      	ldr	r1, [r5, #0]
 801fc7a:	6823      	ldr	r3, [r4, #0]
 801fc7c:	f851 6b04 	ldr.w	r6, [r1], #4
 801fc80:	6029      	str	r1, [r5, #0]
 801fc82:	061d      	lsls	r5, r3, #24
 801fc84:	d514      	bpl.n	801fcb0 <_printf_i+0x1ac>
 801fc86:	07df      	lsls	r7, r3, #31
 801fc88:	bf44      	itt	mi
 801fc8a:	f043 0320 	orrmi.w	r3, r3, #32
 801fc8e:	6023      	strmi	r3, [r4, #0]
 801fc90:	b91e      	cbnz	r6, 801fc9a <_printf_i+0x196>
 801fc92:	6823      	ldr	r3, [r4, #0]
 801fc94:	f023 0320 	bic.w	r3, r3, #32
 801fc98:	6023      	str	r3, [r4, #0]
 801fc9a:	2310      	movs	r3, #16
 801fc9c:	e7b0      	b.n	801fc00 <_printf_i+0xfc>
 801fc9e:	6823      	ldr	r3, [r4, #0]
 801fca0:	f043 0320 	orr.w	r3, r3, #32
 801fca4:	6023      	str	r3, [r4, #0]
 801fca6:	2378      	movs	r3, #120	; 0x78
 801fca8:	4828      	ldr	r0, [pc, #160]	; (801fd4c <_printf_i+0x248>)
 801fcaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fcae:	e7e3      	b.n	801fc78 <_printf_i+0x174>
 801fcb0:	0659      	lsls	r1, r3, #25
 801fcb2:	bf48      	it	mi
 801fcb4:	b2b6      	uxthmi	r6, r6
 801fcb6:	e7e6      	b.n	801fc86 <_printf_i+0x182>
 801fcb8:	4615      	mov	r5, r2
 801fcba:	e7bb      	b.n	801fc34 <_printf_i+0x130>
 801fcbc:	682b      	ldr	r3, [r5, #0]
 801fcbe:	6826      	ldr	r6, [r4, #0]
 801fcc0:	6961      	ldr	r1, [r4, #20]
 801fcc2:	1d18      	adds	r0, r3, #4
 801fcc4:	6028      	str	r0, [r5, #0]
 801fcc6:	0635      	lsls	r5, r6, #24
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	d501      	bpl.n	801fcd0 <_printf_i+0x1cc>
 801fccc:	6019      	str	r1, [r3, #0]
 801fcce:	e002      	b.n	801fcd6 <_printf_i+0x1d2>
 801fcd0:	0670      	lsls	r0, r6, #25
 801fcd2:	d5fb      	bpl.n	801fccc <_printf_i+0x1c8>
 801fcd4:	8019      	strh	r1, [r3, #0]
 801fcd6:	2300      	movs	r3, #0
 801fcd8:	6123      	str	r3, [r4, #16]
 801fcda:	4615      	mov	r5, r2
 801fcdc:	e7ba      	b.n	801fc54 <_printf_i+0x150>
 801fcde:	682b      	ldr	r3, [r5, #0]
 801fce0:	1d1a      	adds	r2, r3, #4
 801fce2:	602a      	str	r2, [r5, #0]
 801fce4:	681d      	ldr	r5, [r3, #0]
 801fce6:	6862      	ldr	r2, [r4, #4]
 801fce8:	2100      	movs	r1, #0
 801fcea:	4628      	mov	r0, r5
 801fcec:	f7e0 faa8 	bl	8000240 <memchr>
 801fcf0:	b108      	cbz	r0, 801fcf6 <_printf_i+0x1f2>
 801fcf2:	1b40      	subs	r0, r0, r5
 801fcf4:	6060      	str	r0, [r4, #4]
 801fcf6:	6863      	ldr	r3, [r4, #4]
 801fcf8:	6123      	str	r3, [r4, #16]
 801fcfa:	2300      	movs	r3, #0
 801fcfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd00:	e7a8      	b.n	801fc54 <_printf_i+0x150>
 801fd02:	6923      	ldr	r3, [r4, #16]
 801fd04:	462a      	mov	r2, r5
 801fd06:	4649      	mov	r1, r9
 801fd08:	4640      	mov	r0, r8
 801fd0a:	47d0      	blx	sl
 801fd0c:	3001      	adds	r0, #1
 801fd0e:	d0ab      	beq.n	801fc68 <_printf_i+0x164>
 801fd10:	6823      	ldr	r3, [r4, #0]
 801fd12:	079b      	lsls	r3, r3, #30
 801fd14:	d413      	bmi.n	801fd3e <_printf_i+0x23a>
 801fd16:	68e0      	ldr	r0, [r4, #12]
 801fd18:	9b03      	ldr	r3, [sp, #12]
 801fd1a:	4298      	cmp	r0, r3
 801fd1c:	bfb8      	it	lt
 801fd1e:	4618      	movlt	r0, r3
 801fd20:	e7a4      	b.n	801fc6c <_printf_i+0x168>
 801fd22:	2301      	movs	r3, #1
 801fd24:	4632      	mov	r2, r6
 801fd26:	4649      	mov	r1, r9
 801fd28:	4640      	mov	r0, r8
 801fd2a:	47d0      	blx	sl
 801fd2c:	3001      	adds	r0, #1
 801fd2e:	d09b      	beq.n	801fc68 <_printf_i+0x164>
 801fd30:	3501      	adds	r5, #1
 801fd32:	68e3      	ldr	r3, [r4, #12]
 801fd34:	9903      	ldr	r1, [sp, #12]
 801fd36:	1a5b      	subs	r3, r3, r1
 801fd38:	42ab      	cmp	r3, r5
 801fd3a:	dcf2      	bgt.n	801fd22 <_printf_i+0x21e>
 801fd3c:	e7eb      	b.n	801fd16 <_printf_i+0x212>
 801fd3e:	2500      	movs	r5, #0
 801fd40:	f104 0619 	add.w	r6, r4, #25
 801fd44:	e7f5      	b.n	801fd32 <_printf_i+0x22e>
 801fd46:	bf00      	nop
 801fd48:	08024171 	.word	0x08024171
 801fd4c:	08024182 	.word	0x08024182

0801fd50 <_sbrk_r>:
 801fd50:	b538      	push	{r3, r4, r5, lr}
 801fd52:	4d06      	ldr	r5, [pc, #24]	; (801fd6c <_sbrk_r+0x1c>)
 801fd54:	2300      	movs	r3, #0
 801fd56:	4604      	mov	r4, r0
 801fd58:	4608      	mov	r0, r1
 801fd5a:	602b      	str	r3, [r5, #0]
 801fd5c:	f7e4 f9f8 	bl	8004150 <_sbrk>
 801fd60:	1c43      	adds	r3, r0, #1
 801fd62:	d102      	bne.n	801fd6a <_sbrk_r+0x1a>
 801fd64:	682b      	ldr	r3, [r5, #0]
 801fd66:	b103      	cbz	r3, 801fd6a <_sbrk_r+0x1a>
 801fd68:	6023      	str	r3, [r4, #0]
 801fd6a:	bd38      	pop	{r3, r4, r5, pc}
 801fd6c:	20024bb4 	.word	0x20024bb4

0801fd70 <_raise_r>:
 801fd70:	291f      	cmp	r1, #31
 801fd72:	b538      	push	{r3, r4, r5, lr}
 801fd74:	4604      	mov	r4, r0
 801fd76:	460d      	mov	r5, r1
 801fd78:	d904      	bls.n	801fd84 <_raise_r+0x14>
 801fd7a:	2316      	movs	r3, #22
 801fd7c:	6003      	str	r3, [r0, #0]
 801fd7e:	f04f 30ff 	mov.w	r0, #4294967295
 801fd82:	bd38      	pop	{r3, r4, r5, pc}
 801fd84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fd86:	b112      	cbz	r2, 801fd8e <_raise_r+0x1e>
 801fd88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fd8c:	b94b      	cbnz	r3, 801fda2 <_raise_r+0x32>
 801fd8e:	4620      	mov	r0, r4
 801fd90:	f000 f830 	bl	801fdf4 <_getpid_r>
 801fd94:	462a      	mov	r2, r5
 801fd96:	4601      	mov	r1, r0
 801fd98:	4620      	mov	r0, r4
 801fd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd9e:	f000 b817 	b.w	801fdd0 <_kill_r>
 801fda2:	2b01      	cmp	r3, #1
 801fda4:	d00a      	beq.n	801fdbc <_raise_r+0x4c>
 801fda6:	1c59      	adds	r1, r3, #1
 801fda8:	d103      	bne.n	801fdb2 <_raise_r+0x42>
 801fdaa:	2316      	movs	r3, #22
 801fdac:	6003      	str	r3, [r0, #0]
 801fdae:	2001      	movs	r0, #1
 801fdb0:	e7e7      	b.n	801fd82 <_raise_r+0x12>
 801fdb2:	2400      	movs	r4, #0
 801fdb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fdb8:	4628      	mov	r0, r5
 801fdba:	4798      	blx	r3
 801fdbc:	2000      	movs	r0, #0
 801fdbe:	e7e0      	b.n	801fd82 <_raise_r+0x12>

0801fdc0 <raise>:
 801fdc0:	4b02      	ldr	r3, [pc, #8]	; (801fdcc <raise+0xc>)
 801fdc2:	4601      	mov	r1, r0
 801fdc4:	6818      	ldr	r0, [r3, #0]
 801fdc6:	f7ff bfd3 	b.w	801fd70 <_raise_r>
 801fdca:	bf00      	nop
 801fdcc:	200000e8 	.word	0x200000e8

0801fdd0 <_kill_r>:
 801fdd0:	b538      	push	{r3, r4, r5, lr}
 801fdd2:	4d07      	ldr	r5, [pc, #28]	; (801fdf0 <_kill_r+0x20>)
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	4604      	mov	r4, r0
 801fdd8:	4608      	mov	r0, r1
 801fdda:	4611      	mov	r1, r2
 801fddc:	602b      	str	r3, [r5, #0]
 801fdde:	f7e4 f981 	bl	80040e4 <_kill>
 801fde2:	1c43      	adds	r3, r0, #1
 801fde4:	d102      	bne.n	801fdec <_kill_r+0x1c>
 801fde6:	682b      	ldr	r3, [r5, #0]
 801fde8:	b103      	cbz	r3, 801fdec <_kill_r+0x1c>
 801fdea:	6023      	str	r3, [r4, #0]
 801fdec:	bd38      	pop	{r3, r4, r5, pc}
 801fdee:	bf00      	nop
 801fdf0:	20024bb4 	.word	0x20024bb4

0801fdf4 <_getpid_r>:
 801fdf4:	f7e4 b974 	b.w	80040e0 <_getpid>

0801fdf8 <strncmp>:
 801fdf8:	b510      	push	{r4, lr}
 801fdfa:	b17a      	cbz	r2, 801fe1c <strncmp+0x24>
 801fdfc:	4603      	mov	r3, r0
 801fdfe:	3901      	subs	r1, #1
 801fe00:	1884      	adds	r4, r0, r2
 801fe02:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fe06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fe0a:	4290      	cmp	r0, r2
 801fe0c:	d101      	bne.n	801fe12 <strncmp+0x1a>
 801fe0e:	42a3      	cmp	r3, r4
 801fe10:	d101      	bne.n	801fe16 <strncmp+0x1e>
 801fe12:	1a80      	subs	r0, r0, r2
 801fe14:	bd10      	pop	{r4, pc}
 801fe16:	2800      	cmp	r0, #0
 801fe18:	d1f3      	bne.n	801fe02 <strncmp+0xa>
 801fe1a:	e7fa      	b.n	801fe12 <strncmp+0x1a>
 801fe1c:	4610      	mov	r0, r2
 801fe1e:	e7f9      	b.n	801fe14 <strncmp+0x1c>

0801fe20 <__swbuf_r>:
 801fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe22:	460e      	mov	r6, r1
 801fe24:	4614      	mov	r4, r2
 801fe26:	4605      	mov	r5, r0
 801fe28:	b118      	cbz	r0, 801fe32 <__swbuf_r+0x12>
 801fe2a:	6983      	ldr	r3, [r0, #24]
 801fe2c:	b90b      	cbnz	r3, 801fe32 <__swbuf_r+0x12>
 801fe2e:	f000 fa33 	bl	8020298 <__sinit>
 801fe32:	4b21      	ldr	r3, [pc, #132]	; (801feb8 <__swbuf_r+0x98>)
 801fe34:	429c      	cmp	r4, r3
 801fe36:	d12b      	bne.n	801fe90 <__swbuf_r+0x70>
 801fe38:	686c      	ldr	r4, [r5, #4]
 801fe3a:	69a3      	ldr	r3, [r4, #24]
 801fe3c:	60a3      	str	r3, [r4, #8]
 801fe3e:	89a3      	ldrh	r3, [r4, #12]
 801fe40:	071a      	lsls	r2, r3, #28
 801fe42:	d52f      	bpl.n	801fea4 <__swbuf_r+0x84>
 801fe44:	6923      	ldr	r3, [r4, #16]
 801fe46:	b36b      	cbz	r3, 801fea4 <__swbuf_r+0x84>
 801fe48:	6923      	ldr	r3, [r4, #16]
 801fe4a:	6820      	ldr	r0, [r4, #0]
 801fe4c:	1ac0      	subs	r0, r0, r3
 801fe4e:	6963      	ldr	r3, [r4, #20]
 801fe50:	b2f6      	uxtb	r6, r6
 801fe52:	4283      	cmp	r3, r0
 801fe54:	4637      	mov	r7, r6
 801fe56:	dc04      	bgt.n	801fe62 <__swbuf_r+0x42>
 801fe58:	4621      	mov	r1, r4
 801fe5a:	4628      	mov	r0, r5
 801fe5c:	f000 f988 	bl	8020170 <_fflush_r>
 801fe60:	bb30      	cbnz	r0, 801feb0 <__swbuf_r+0x90>
 801fe62:	68a3      	ldr	r3, [r4, #8]
 801fe64:	3b01      	subs	r3, #1
 801fe66:	60a3      	str	r3, [r4, #8]
 801fe68:	6823      	ldr	r3, [r4, #0]
 801fe6a:	1c5a      	adds	r2, r3, #1
 801fe6c:	6022      	str	r2, [r4, #0]
 801fe6e:	701e      	strb	r6, [r3, #0]
 801fe70:	6963      	ldr	r3, [r4, #20]
 801fe72:	3001      	adds	r0, #1
 801fe74:	4283      	cmp	r3, r0
 801fe76:	d004      	beq.n	801fe82 <__swbuf_r+0x62>
 801fe78:	89a3      	ldrh	r3, [r4, #12]
 801fe7a:	07db      	lsls	r3, r3, #31
 801fe7c:	d506      	bpl.n	801fe8c <__swbuf_r+0x6c>
 801fe7e:	2e0a      	cmp	r6, #10
 801fe80:	d104      	bne.n	801fe8c <__swbuf_r+0x6c>
 801fe82:	4621      	mov	r1, r4
 801fe84:	4628      	mov	r0, r5
 801fe86:	f000 f973 	bl	8020170 <_fflush_r>
 801fe8a:	b988      	cbnz	r0, 801feb0 <__swbuf_r+0x90>
 801fe8c:	4638      	mov	r0, r7
 801fe8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe90:	4b0a      	ldr	r3, [pc, #40]	; (801febc <__swbuf_r+0x9c>)
 801fe92:	429c      	cmp	r4, r3
 801fe94:	d101      	bne.n	801fe9a <__swbuf_r+0x7a>
 801fe96:	68ac      	ldr	r4, [r5, #8]
 801fe98:	e7cf      	b.n	801fe3a <__swbuf_r+0x1a>
 801fe9a:	4b09      	ldr	r3, [pc, #36]	; (801fec0 <__swbuf_r+0xa0>)
 801fe9c:	429c      	cmp	r4, r3
 801fe9e:	bf08      	it	eq
 801fea0:	68ec      	ldreq	r4, [r5, #12]
 801fea2:	e7ca      	b.n	801fe3a <__swbuf_r+0x1a>
 801fea4:	4621      	mov	r1, r4
 801fea6:	4628      	mov	r0, r5
 801fea8:	f000 f80c 	bl	801fec4 <__swsetup_r>
 801feac:	2800      	cmp	r0, #0
 801feae:	d0cb      	beq.n	801fe48 <__swbuf_r+0x28>
 801feb0:	f04f 37ff 	mov.w	r7, #4294967295
 801feb4:	e7ea      	b.n	801fe8c <__swbuf_r+0x6c>
 801feb6:	bf00      	nop
 801feb8:	080241b8 	.word	0x080241b8
 801febc:	080241d8 	.word	0x080241d8
 801fec0:	08024198 	.word	0x08024198

0801fec4 <__swsetup_r>:
 801fec4:	4b32      	ldr	r3, [pc, #200]	; (801ff90 <__swsetup_r+0xcc>)
 801fec6:	b570      	push	{r4, r5, r6, lr}
 801fec8:	681d      	ldr	r5, [r3, #0]
 801feca:	4606      	mov	r6, r0
 801fecc:	460c      	mov	r4, r1
 801fece:	b125      	cbz	r5, 801feda <__swsetup_r+0x16>
 801fed0:	69ab      	ldr	r3, [r5, #24]
 801fed2:	b913      	cbnz	r3, 801feda <__swsetup_r+0x16>
 801fed4:	4628      	mov	r0, r5
 801fed6:	f000 f9df 	bl	8020298 <__sinit>
 801feda:	4b2e      	ldr	r3, [pc, #184]	; (801ff94 <__swsetup_r+0xd0>)
 801fedc:	429c      	cmp	r4, r3
 801fede:	d10f      	bne.n	801ff00 <__swsetup_r+0x3c>
 801fee0:	686c      	ldr	r4, [r5, #4]
 801fee2:	89a3      	ldrh	r3, [r4, #12]
 801fee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fee8:	0719      	lsls	r1, r3, #28
 801feea:	d42c      	bmi.n	801ff46 <__swsetup_r+0x82>
 801feec:	06dd      	lsls	r5, r3, #27
 801feee:	d411      	bmi.n	801ff14 <__swsetup_r+0x50>
 801fef0:	2309      	movs	r3, #9
 801fef2:	6033      	str	r3, [r6, #0]
 801fef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fef8:	81a3      	strh	r3, [r4, #12]
 801fefa:	f04f 30ff 	mov.w	r0, #4294967295
 801fefe:	e03e      	b.n	801ff7e <__swsetup_r+0xba>
 801ff00:	4b25      	ldr	r3, [pc, #148]	; (801ff98 <__swsetup_r+0xd4>)
 801ff02:	429c      	cmp	r4, r3
 801ff04:	d101      	bne.n	801ff0a <__swsetup_r+0x46>
 801ff06:	68ac      	ldr	r4, [r5, #8]
 801ff08:	e7eb      	b.n	801fee2 <__swsetup_r+0x1e>
 801ff0a:	4b24      	ldr	r3, [pc, #144]	; (801ff9c <__swsetup_r+0xd8>)
 801ff0c:	429c      	cmp	r4, r3
 801ff0e:	bf08      	it	eq
 801ff10:	68ec      	ldreq	r4, [r5, #12]
 801ff12:	e7e6      	b.n	801fee2 <__swsetup_r+0x1e>
 801ff14:	0758      	lsls	r0, r3, #29
 801ff16:	d512      	bpl.n	801ff3e <__swsetup_r+0x7a>
 801ff18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff1a:	b141      	cbz	r1, 801ff2e <__swsetup_r+0x6a>
 801ff1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff20:	4299      	cmp	r1, r3
 801ff22:	d002      	beq.n	801ff2a <__swsetup_r+0x66>
 801ff24:	4630      	mov	r0, r6
 801ff26:	f7ff fb45 	bl	801f5b4 <_free_r>
 801ff2a:	2300      	movs	r3, #0
 801ff2c:	6363      	str	r3, [r4, #52]	; 0x34
 801ff2e:	89a3      	ldrh	r3, [r4, #12]
 801ff30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ff34:	81a3      	strh	r3, [r4, #12]
 801ff36:	2300      	movs	r3, #0
 801ff38:	6063      	str	r3, [r4, #4]
 801ff3a:	6923      	ldr	r3, [r4, #16]
 801ff3c:	6023      	str	r3, [r4, #0]
 801ff3e:	89a3      	ldrh	r3, [r4, #12]
 801ff40:	f043 0308 	orr.w	r3, r3, #8
 801ff44:	81a3      	strh	r3, [r4, #12]
 801ff46:	6923      	ldr	r3, [r4, #16]
 801ff48:	b94b      	cbnz	r3, 801ff5e <__swsetup_r+0x9a>
 801ff4a:	89a3      	ldrh	r3, [r4, #12]
 801ff4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ff50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ff54:	d003      	beq.n	801ff5e <__swsetup_r+0x9a>
 801ff56:	4621      	mov	r1, r4
 801ff58:	4630      	mov	r0, r6
 801ff5a:	f000 fa5f 	bl	802041c <__smakebuf_r>
 801ff5e:	89a0      	ldrh	r0, [r4, #12]
 801ff60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ff64:	f010 0301 	ands.w	r3, r0, #1
 801ff68:	d00a      	beq.n	801ff80 <__swsetup_r+0xbc>
 801ff6a:	2300      	movs	r3, #0
 801ff6c:	60a3      	str	r3, [r4, #8]
 801ff6e:	6963      	ldr	r3, [r4, #20]
 801ff70:	425b      	negs	r3, r3
 801ff72:	61a3      	str	r3, [r4, #24]
 801ff74:	6923      	ldr	r3, [r4, #16]
 801ff76:	b943      	cbnz	r3, 801ff8a <__swsetup_r+0xc6>
 801ff78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ff7c:	d1ba      	bne.n	801fef4 <__swsetup_r+0x30>
 801ff7e:	bd70      	pop	{r4, r5, r6, pc}
 801ff80:	0781      	lsls	r1, r0, #30
 801ff82:	bf58      	it	pl
 801ff84:	6963      	ldrpl	r3, [r4, #20]
 801ff86:	60a3      	str	r3, [r4, #8]
 801ff88:	e7f4      	b.n	801ff74 <__swsetup_r+0xb0>
 801ff8a:	2000      	movs	r0, #0
 801ff8c:	e7f7      	b.n	801ff7e <__swsetup_r+0xba>
 801ff8e:	bf00      	nop
 801ff90:	200000e8 	.word	0x200000e8
 801ff94:	080241b8 	.word	0x080241b8
 801ff98:	080241d8 	.word	0x080241d8
 801ff9c:	08024198 	.word	0x08024198

0801ffa0 <__register_exitproc>:
 801ffa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffa4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8020060 <__register_exitproc+0xc0>
 801ffa8:	4606      	mov	r6, r0
 801ffaa:	f8d8 0000 	ldr.w	r0, [r8]
 801ffae:	461f      	mov	r7, r3
 801ffb0:	460d      	mov	r5, r1
 801ffb2:	4691      	mov	r9, r2
 801ffb4:	f7ff fad5 	bl	801f562 <__retarget_lock_acquire_recursive>
 801ffb8:	4b25      	ldr	r3, [pc, #148]	; (8020050 <__register_exitproc+0xb0>)
 801ffba:	681c      	ldr	r4, [r3, #0]
 801ffbc:	b934      	cbnz	r4, 801ffcc <__register_exitproc+0x2c>
 801ffbe:	4c25      	ldr	r4, [pc, #148]	; (8020054 <__register_exitproc+0xb4>)
 801ffc0:	601c      	str	r4, [r3, #0]
 801ffc2:	4b25      	ldr	r3, [pc, #148]	; (8020058 <__register_exitproc+0xb8>)
 801ffc4:	b113      	cbz	r3, 801ffcc <__register_exitproc+0x2c>
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ffcc:	6863      	ldr	r3, [r4, #4]
 801ffce:	2b1f      	cmp	r3, #31
 801ffd0:	dd07      	ble.n	801ffe2 <__register_exitproc+0x42>
 801ffd2:	f8d8 0000 	ldr.w	r0, [r8]
 801ffd6:	f7ff fac6 	bl	801f566 <__retarget_lock_release_recursive>
 801ffda:	f04f 30ff 	mov.w	r0, #4294967295
 801ffde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ffe2:	b34e      	cbz	r6, 8020038 <__register_exitproc+0x98>
 801ffe4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ffe8:	b988      	cbnz	r0, 802000e <__register_exitproc+0x6e>
 801ffea:	4b1c      	ldr	r3, [pc, #112]	; (802005c <__register_exitproc+0xbc>)
 801ffec:	b923      	cbnz	r3, 801fff8 <__register_exitproc+0x58>
 801ffee:	f8d8 0000 	ldr.w	r0, [r8]
 801fff2:	f7ff fab7 	bl	801f564 <__retarget_lock_release>
 801fff6:	e7f0      	b.n	801ffda <__register_exitproc+0x3a>
 801fff8:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fffc:	f7ff fab4 	bl	801f568 <malloc>
 8020000:	2800      	cmp	r0, #0
 8020002:	d0f4      	beq.n	801ffee <__register_exitproc+0x4e>
 8020004:	2300      	movs	r3, #0
 8020006:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802000a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802000e:	6863      	ldr	r3, [r4, #4]
 8020010:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020014:	2201      	movs	r2, #1
 8020016:	409a      	lsls	r2, r3
 8020018:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802001c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8020020:	4313      	orrs	r3, r2
 8020022:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8020026:	2e02      	cmp	r6, #2
 8020028:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802002c:	bf02      	ittt	eq
 802002e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8020032:	4313      	orreq	r3, r2
 8020034:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8020038:	6863      	ldr	r3, [r4, #4]
 802003a:	f8d8 0000 	ldr.w	r0, [r8]
 802003e:	1c5a      	adds	r2, r3, #1
 8020040:	3302      	adds	r3, #2
 8020042:	6062      	str	r2, [r4, #4]
 8020044:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8020048:	f7ff fa8d 	bl	801f566 <__retarget_lock_release_recursive>
 802004c:	2000      	movs	r0, #0
 802004e:	e7c6      	b.n	801ffde <__register_exitproc+0x3e>
 8020050:	20024bb0 	.word	0x20024bb0
 8020054:	20024b24 	.word	0x20024b24
 8020058:	08024194 	.word	0x08024194
 802005c:	0801f569 	.word	0x0801f569
 8020060:	2000014c 	.word	0x2000014c

08020064 <__sflush_r>:
 8020064:	898a      	ldrh	r2, [r1, #12]
 8020066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802006a:	4605      	mov	r5, r0
 802006c:	0710      	lsls	r0, r2, #28
 802006e:	460c      	mov	r4, r1
 8020070:	d458      	bmi.n	8020124 <__sflush_r+0xc0>
 8020072:	684b      	ldr	r3, [r1, #4]
 8020074:	2b00      	cmp	r3, #0
 8020076:	dc05      	bgt.n	8020084 <__sflush_r+0x20>
 8020078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802007a:	2b00      	cmp	r3, #0
 802007c:	dc02      	bgt.n	8020084 <__sflush_r+0x20>
 802007e:	2000      	movs	r0, #0
 8020080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020086:	2e00      	cmp	r6, #0
 8020088:	d0f9      	beq.n	802007e <__sflush_r+0x1a>
 802008a:	2300      	movs	r3, #0
 802008c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020090:	682f      	ldr	r7, [r5, #0]
 8020092:	602b      	str	r3, [r5, #0]
 8020094:	d032      	beq.n	80200fc <__sflush_r+0x98>
 8020096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020098:	89a3      	ldrh	r3, [r4, #12]
 802009a:	075a      	lsls	r2, r3, #29
 802009c:	d505      	bpl.n	80200aa <__sflush_r+0x46>
 802009e:	6863      	ldr	r3, [r4, #4]
 80200a0:	1ac0      	subs	r0, r0, r3
 80200a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80200a4:	b10b      	cbz	r3, 80200aa <__sflush_r+0x46>
 80200a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80200a8:	1ac0      	subs	r0, r0, r3
 80200aa:	2300      	movs	r3, #0
 80200ac:	4602      	mov	r2, r0
 80200ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80200b0:	6a21      	ldr	r1, [r4, #32]
 80200b2:	4628      	mov	r0, r5
 80200b4:	47b0      	blx	r6
 80200b6:	1c43      	adds	r3, r0, #1
 80200b8:	89a3      	ldrh	r3, [r4, #12]
 80200ba:	d106      	bne.n	80200ca <__sflush_r+0x66>
 80200bc:	6829      	ldr	r1, [r5, #0]
 80200be:	291d      	cmp	r1, #29
 80200c0:	d82c      	bhi.n	802011c <__sflush_r+0xb8>
 80200c2:	4a2a      	ldr	r2, [pc, #168]	; (802016c <__sflush_r+0x108>)
 80200c4:	40ca      	lsrs	r2, r1
 80200c6:	07d6      	lsls	r6, r2, #31
 80200c8:	d528      	bpl.n	802011c <__sflush_r+0xb8>
 80200ca:	2200      	movs	r2, #0
 80200cc:	6062      	str	r2, [r4, #4]
 80200ce:	04d9      	lsls	r1, r3, #19
 80200d0:	6922      	ldr	r2, [r4, #16]
 80200d2:	6022      	str	r2, [r4, #0]
 80200d4:	d504      	bpl.n	80200e0 <__sflush_r+0x7c>
 80200d6:	1c42      	adds	r2, r0, #1
 80200d8:	d101      	bne.n	80200de <__sflush_r+0x7a>
 80200da:	682b      	ldr	r3, [r5, #0]
 80200dc:	b903      	cbnz	r3, 80200e0 <__sflush_r+0x7c>
 80200de:	6560      	str	r0, [r4, #84]	; 0x54
 80200e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80200e2:	602f      	str	r7, [r5, #0]
 80200e4:	2900      	cmp	r1, #0
 80200e6:	d0ca      	beq.n	802007e <__sflush_r+0x1a>
 80200e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80200ec:	4299      	cmp	r1, r3
 80200ee:	d002      	beq.n	80200f6 <__sflush_r+0x92>
 80200f0:	4628      	mov	r0, r5
 80200f2:	f7ff fa5f 	bl	801f5b4 <_free_r>
 80200f6:	2000      	movs	r0, #0
 80200f8:	6360      	str	r0, [r4, #52]	; 0x34
 80200fa:	e7c1      	b.n	8020080 <__sflush_r+0x1c>
 80200fc:	6a21      	ldr	r1, [r4, #32]
 80200fe:	2301      	movs	r3, #1
 8020100:	4628      	mov	r0, r5
 8020102:	47b0      	blx	r6
 8020104:	1c41      	adds	r1, r0, #1
 8020106:	d1c7      	bne.n	8020098 <__sflush_r+0x34>
 8020108:	682b      	ldr	r3, [r5, #0]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d0c4      	beq.n	8020098 <__sflush_r+0x34>
 802010e:	2b1d      	cmp	r3, #29
 8020110:	d001      	beq.n	8020116 <__sflush_r+0xb2>
 8020112:	2b16      	cmp	r3, #22
 8020114:	d101      	bne.n	802011a <__sflush_r+0xb6>
 8020116:	602f      	str	r7, [r5, #0]
 8020118:	e7b1      	b.n	802007e <__sflush_r+0x1a>
 802011a:	89a3      	ldrh	r3, [r4, #12]
 802011c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020120:	81a3      	strh	r3, [r4, #12]
 8020122:	e7ad      	b.n	8020080 <__sflush_r+0x1c>
 8020124:	690f      	ldr	r7, [r1, #16]
 8020126:	2f00      	cmp	r7, #0
 8020128:	d0a9      	beq.n	802007e <__sflush_r+0x1a>
 802012a:	0793      	lsls	r3, r2, #30
 802012c:	680e      	ldr	r6, [r1, #0]
 802012e:	bf08      	it	eq
 8020130:	694b      	ldreq	r3, [r1, #20]
 8020132:	600f      	str	r7, [r1, #0]
 8020134:	bf18      	it	ne
 8020136:	2300      	movne	r3, #0
 8020138:	eba6 0807 	sub.w	r8, r6, r7
 802013c:	608b      	str	r3, [r1, #8]
 802013e:	f1b8 0f00 	cmp.w	r8, #0
 8020142:	dd9c      	ble.n	802007e <__sflush_r+0x1a>
 8020144:	6a21      	ldr	r1, [r4, #32]
 8020146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020148:	4643      	mov	r3, r8
 802014a:	463a      	mov	r2, r7
 802014c:	4628      	mov	r0, r5
 802014e:	47b0      	blx	r6
 8020150:	2800      	cmp	r0, #0
 8020152:	dc06      	bgt.n	8020162 <__sflush_r+0xfe>
 8020154:	89a3      	ldrh	r3, [r4, #12]
 8020156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802015a:	81a3      	strh	r3, [r4, #12]
 802015c:	f04f 30ff 	mov.w	r0, #4294967295
 8020160:	e78e      	b.n	8020080 <__sflush_r+0x1c>
 8020162:	4407      	add	r7, r0
 8020164:	eba8 0800 	sub.w	r8, r8, r0
 8020168:	e7e9      	b.n	802013e <__sflush_r+0xda>
 802016a:	bf00      	nop
 802016c:	20400001 	.word	0x20400001

08020170 <_fflush_r>:
 8020170:	b538      	push	{r3, r4, r5, lr}
 8020172:	690b      	ldr	r3, [r1, #16]
 8020174:	4605      	mov	r5, r0
 8020176:	460c      	mov	r4, r1
 8020178:	b913      	cbnz	r3, 8020180 <_fflush_r+0x10>
 802017a:	2500      	movs	r5, #0
 802017c:	4628      	mov	r0, r5
 802017e:	bd38      	pop	{r3, r4, r5, pc}
 8020180:	b118      	cbz	r0, 802018a <_fflush_r+0x1a>
 8020182:	6983      	ldr	r3, [r0, #24]
 8020184:	b90b      	cbnz	r3, 802018a <_fflush_r+0x1a>
 8020186:	f000 f887 	bl	8020298 <__sinit>
 802018a:	4b14      	ldr	r3, [pc, #80]	; (80201dc <_fflush_r+0x6c>)
 802018c:	429c      	cmp	r4, r3
 802018e:	d11b      	bne.n	80201c8 <_fflush_r+0x58>
 8020190:	686c      	ldr	r4, [r5, #4]
 8020192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d0ef      	beq.n	802017a <_fflush_r+0xa>
 802019a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802019c:	07d0      	lsls	r0, r2, #31
 802019e:	d404      	bmi.n	80201aa <_fflush_r+0x3a>
 80201a0:	0599      	lsls	r1, r3, #22
 80201a2:	d402      	bmi.n	80201aa <_fflush_r+0x3a>
 80201a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201a6:	f7ff f9dc 	bl	801f562 <__retarget_lock_acquire_recursive>
 80201aa:	4628      	mov	r0, r5
 80201ac:	4621      	mov	r1, r4
 80201ae:	f7ff ff59 	bl	8020064 <__sflush_r>
 80201b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201b4:	07da      	lsls	r2, r3, #31
 80201b6:	4605      	mov	r5, r0
 80201b8:	d4e0      	bmi.n	802017c <_fflush_r+0xc>
 80201ba:	89a3      	ldrh	r3, [r4, #12]
 80201bc:	059b      	lsls	r3, r3, #22
 80201be:	d4dd      	bmi.n	802017c <_fflush_r+0xc>
 80201c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201c2:	f7ff f9d0 	bl	801f566 <__retarget_lock_release_recursive>
 80201c6:	e7d9      	b.n	802017c <_fflush_r+0xc>
 80201c8:	4b05      	ldr	r3, [pc, #20]	; (80201e0 <_fflush_r+0x70>)
 80201ca:	429c      	cmp	r4, r3
 80201cc:	d101      	bne.n	80201d2 <_fflush_r+0x62>
 80201ce:	68ac      	ldr	r4, [r5, #8]
 80201d0:	e7df      	b.n	8020192 <_fflush_r+0x22>
 80201d2:	4b04      	ldr	r3, [pc, #16]	; (80201e4 <_fflush_r+0x74>)
 80201d4:	429c      	cmp	r4, r3
 80201d6:	bf08      	it	eq
 80201d8:	68ec      	ldreq	r4, [r5, #12]
 80201da:	e7da      	b.n	8020192 <_fflush_r+0x22>
 80201dc:	080241b8 	.word	0x080241b8
 80201e0:	080241d8 	.word	0x080241d8
 80201e4:	08024198 	.word	0x08024198

080201e8 <std>:
 80201e8:	2300      	movs	r3, #0
 80201ea:	b510      	push	{r4, lr}
 80201ec:	4604      	mov	r4, r0
 80201ee:	e9c0 3300 	strd	r3, r3, [r0]
 80201f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80201f6:	6083      	str	r3, [r0, #8]
 80201f8:	8181      	strh	r1, [r0, #12]
 80201fa:	6643      	str	r3, [r0, #100]	; 0x64
 80201fc:	81c2      	strh	r2, [r0, #14]
 80201fe:	6183      	str	r3, [r0, #24]
 8020200:	4619      	mov	r1, r3
 8020202:	2208      	movs	r2, #8
 8020204:	305c      	adds	r0, #92	; 0x5c
 8020206:	f7ff f9cd 	bl	801f5a4 <memset>
 802020a:	4b05      	ldr	r3, [pc, #20]	; (8020220 <std+0x38>)
 802020c:	6263      	str	r3, [r4, #36]	; 0x24
 802020e:	4b05      	ldr	r3, [pc, #20]	; (8020224 <std+0x3c>)
 8020210:	62a3      	str	r3, [r4, #40]	; 0x28
 8020212:	4b05      	ldr	r3, [pc, #20]	; (8020228 <std+0x40>)
 8020214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020216:	4b05      	ldr	r3, [pc, #20]	; (802022c <std+0x44>)
 8020218:	6224      	str	r4, [r4, #32]
 802021a:	6323      	str	r3, [r4, #48]	; 0x30
 802021c:	bd10      	pop	{r4, pc}
 802021e:	bf00      	nop
 8020220:	080204b5 	.word	0x080204b5
 8020224:	080204d7 	.word	0x080204d7
 8020228:	0802050f 	.word	0x0802050f
 802022c:	08020533 	.word	0x08020533

08020230 <_cleanup_r>:
 8020230:	4901      	ldr	r1, [pc, #4]	; (8020238 <_cleanup_r+0x8>)
 8020232:	f000 b8af 	b.w	8020394 <_fwalk_reent>
 8020236:	bf00      	nop
 8020238:	08020171 	.word	0x08020171

0802023c <__sfmoreglue>:
 802023c:	b570      	push	{r4, r5, r6, lr}
 802023e:	2268      	movs	r2, #104	; 0x68
 8020240:	1e4d      	subs	r5, r1, #1
 8020242:	4355      	muls	r5, r2
 8020244:	460e      	mov	r6, r1
 8020246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802024a:	f7ff fa1f 	bl	801f68c <_malloc_r>
 802024e:	4604      	mov	r4, r0
 8020250:	b140      	cbz	r0, 8020264 <__sfmoreglue+0x28>
 8020252:	2100      	movs	r1, #0
 8020254:	e9c0 1600 	strd	r1, r6, [r0]
 8020258:	300c      	adds	r0, #12
 802025a:	60a0      	str	r0, [r4, #8]
 802025c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020260:	f7ff f9a0 	bl	801f5a4 <memset>
 8020264:	4620      	mov	r0, r4
 8020266:	bd70      	pop	{r4, r5, r6, pc}

08020268 <__sfp_lock_acquire>:
 8020268:	4801      	ldr	r0, [pc, #4]	; (8020270 <__sfp_lock_acquire+0x8>)
 802026a:	f7ff b97a 	b.w	801f562 <__retarget_lock_acquire_recursive>
 802026e:	bf00      	nop
 8020270:	20024a12 	.word	0x20024a12

08020274 <__sfp_lock_release>:
 8020274:	4801      	ldr	r0, [pc, #4]	; (802027c <__sfp_lock_release+0x8>)
 8020276:	f7ff b976 	b.w	801f566 <__retarget_lock_release_recursive>
 802027a:	bf00      	nop
 802027c:	20024a12 	.word	0x20024a12

08020280 <__sinit_lock_acquire>:
 8020280:	4801      	ldr	r0, [pc, #4]	; (8020288 <__sinit_lock_acquire+0x8>)
 8020282:	f7ff b96e 	b.w	801f562 <__retarget_lock_acquire_recursive>
 8020286:	bf00      	nop
 8020288:	20024a13 	.word	0x20024a13

0802028c <__sinit_lock_release>:
 802028c:	4801      	ldr	r0, [pc, #4]	; (8020294 <__sinit_lock_release+0x8>)
 802028e:	f7ff b96a 	b.w	801f566 <__retarget_lock_release_recursive>
 8020292:	bf00      	nop
 8020294:	20024a13 	.word	0x20024a13

08020298 <__sinit>:
 8020298:	b510      	push	{r4, lr}
 802029a:	4604      	mov	r4, r0
 802029c:	f7ff fff0 	bl	8020280 <__sinit_lock_acquire>
 80202a0:	69a3      	ldr	r3, [r4, #24]
 80202a2:	b11b      	cbz	r3, 80202ac <__sinit+0x14>
 80202a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202a8:	f7ff bff0 	b.w	802028c <__sinit_lock_release>
 80202ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80202b0:	6523      	str	r3, [r4, #80]	; 0x50
 80202b2:	4b13      	ldr	r3, [pc, #76]	; (8020300 <__sinit+0x68>)
 80202b4:	4a13      	ldr	r2, [pc, #76]	; (8020304 <__sinit+0x6c>)
 80202b6:	681b      	ldr	r3, [r3, #0]
 80202b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80202ba:	42a3      	cmp	r3, r4
 80202bc:	bf04      	itt	eq
 80202be:	2301      	moveq	r3, #1
 80202c0:	61a3      	streq	r3, [r4, #24]
 80202c2:	4620      	mov	r0, r4
 80202c4:	f000 f820 	bl	8020308 <__sfp>
 80202c8:	6060      	str	r0, [r4, #4]
 80202ca:	4620      	mov	r0, r4
 80202cc:	f000 f81c 	bl	8020308 <__sfp>
 80202d0:	60a0      	str	r0, [r4, #8]
 80202d2:	4620      	mov	r0, r4
 80202d4:	f000 f818 	bl	8020308 <__sfp>
 80202d8:	2200      	movs	r2, #0
 80202da:	60e0      	str	r0, [r4, #12]
 80202dc:	2104      	movs	r1, #4
 80202de:	6860      	ldr	r0, [r4, #4]
 80202e0:	f7ff ff82 	bl	80201e8 <std>
 80202e4:	68a0      	ldr	r0, [r4, #8]
 80202e6:	2201      	movs	r2, #1
 80202e8:	2109      	movs	r1, #9
 80202ea:	f7ff ff7d 	bl	80201e8 <std>
 80202ee:	68e0      	ldr	r0, [r4, #12]
 80202f0:	2202      	movs	r2, #2
 80202f2:	2112      	movs	r1, #18
 80202f4:	f7ff ff78 	bl	80201e8 <std>
 80202f8:	2301      	movs	r3, #1
 80202fa:	61a3      	str	r3, [r4, #24]
 80202fc:	e7d2      	b.n	80202a4 <__sinit+0xc>
 80202fe:	bf00      	nop
 8020300:	0802415c 	.word	0x0802415c
 8020304:	08020231 	.word	0x08020231

08020308 <__sfp>:
 8020308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802030a:	4607      	mov	r7, r0
 802030c:	f7ff ffac 	bl	8020268 <__sfp_lock_acquire>
 8020310:	4b1e      	ldr	r3, [pc, #120]	; (802038c <__sfp+0x84>)
 8020312:	681e      	ldr	r6, [r3, #0]
 8020314:	69b3      	ldr	r3, [r6, #24]
 8020316:	b913      	cbnz	r3, 802031e <__sfp+0x16>
 8020318:	4630      	mov	r0, r6
 802031a:	f7ff ffbd 	bl	8020298 <__sinit>
 802031e:	3648      	adds	r6, #72	; 0x48
 8020320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020324:	3b01      	subs	r3, #1
 8020326:	d503      	bpl.n	8020330 <__sfp+0x28>
 8020328:	6833      	ldr	r3, [r6, #0]
 802032a:	b30b      	cbz	r3, 8020370 <__sfp+0x68>
 802032c:	6836      	ldr	r6, [r6, #0]
 802032e:	e7f7      	b.n	8020320 <__sfp+0x18>
 8020330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020334:	b9d5      	cbnz	r5, 802036c <__sfp+0x64>
 8020336:	4b16      	ldr	r3, [pc, #88]	; (8020390 <__sfp+0x88>)
 8020338:	60e3      	str	r3, [r4, #12]
 802033a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802033e:	6665      	str	r5, [r4, #100]	; 0x64
 8020340:	f7ff f90e 	bl	801f560 <__retarget_lock_init_recursive>
 8020344:	f7ff ff96 	bl	8020274 <__sfp_lock_release>
 8020348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802034c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020350:	6025      	str	r5, [r4, #0]
 8020352:	61a5      	str	r5, [r4, #24]
 8020354:	2208      	movs	r2, #8
 8020356:	4629      	mov	r1, r5
 8020358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802035c:	f7ff f922 	bl	801f5a4 <memset>
 8020360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020368:	4620      	mov	r0, r4
 802036a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802036c:	3468      	adds	r4, #104	; 0x68
 802036e:	e7d9      	b.n	8020324 <__sfp+0x1c>
 8020370:	2104      	movs	r1, #4
 8020372:	4638      	mov	r0, r7
 8020374:	f7ff ff62 	bl	802023c <__sfmoreglue>
 8020378:	4604      	mov	r4, r0
 802037a:	6030      	str	r0, [r6, #0]
 802037c:	2800      	cmp	r0, #0
 802037e:	d1d5      	bne.n	802032c <__sfp+0x24>
 8020380:	f7ff ff78 	bl	8020274 <__sfp_lock_release>
 8020384:	230c      	movs	r3, #12
 8020386:	603b      	str	r3, [r7, #0]
 8020388:	e7ee      	b.n	8020368 <__sfp+0x60>
 802038a:	bf00      	nop
 802038c:	0802415c 	.word	0x0802415c
 8020390:	ffff0001 	.word	0xffff0001

08020394 <_fwalk_reent>:
 8020394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020398:	4606      	mov	r6, r0
 802039a:	4688      	mov	r8, r1
 802039c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80203a0:	2700      	movs	r7, #0
 80203a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80203a6:	f1b9 0901 	subs.w	r9, r9, #1
 80203aa:	d505      	bpl.n	80203b8 <_fwalk_reent+0x24>
 80203ac:	6824      	ldr	r4, [r4, #0]
 80203ae:	2c00      	cmp	r4, #0
 80203b0:	d1f7      	bne.n	80203a2 <_fwalk_reent+0xe>
 80203b2:	4638      	mov	r0, r7
 80203b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203b8:	89ab      	ldrh	r3, [r5, #12]
 80203ba:	2b01      	cmp	r3, #1
 80203bc:	d907      	bls.n	80203ce <_fwalk_reent+0x3a>
 80203be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80203c2:	3301      	adds	r3, #1
 80203c4:	d003      	beq.n	80203ce <_fwalk_reent+0x3a>
 80203c6:	4629      	mov	r1, r5
 80203c8:	4630      	mov	r0, r6
 80203ca:	47c0      	blx	r8
 80203cc:	4307      	orrs	r7, r0
 80203ce:	3568      	adds	r5, #104	; 0x68
 80203d0:	e7e9      	b.n	80203a6 <_fwalk_reent+0x12>

080203d2 <__swhatbuf_r>:
 80203d2:	b570      	push	{r4, r5, r6, lr}
 80203d4:	460e      	mov	r6, r1
 80203d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203da:	2900      	cmp	r1, #0
 80203dc:	b096      	sub	sp, #88	; 0x58
 80203de:	4614      	mov	r4, r2
 80203e0:	461d      	mov	r5, r3
 80203e2:	da08      	bge.n	80203f6 <__swhatbuf_r+0x24>
 80203e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80203e8:	2200      	movs	r2, #0
 80203ea:	602a      	str	r2, [r5, #0]
 80203ec:	061a      	lsls	r2, r3, #24
 80203ee:	d410      	bmi.n	8020412 <__swhatbuf_r+0x40>
 80203f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80203f4:	e00e      	b.n	8020414 <__swhatbuf_r+0x42>
 80203f6:	466a      	mov	r2, sp
 80203f8:	f000 f8c2 	bl	8020580 <_fstat_r>
 80203fc:	2800      	cmp	r0, #0
 80203fe:	dbf1      	blt.n	80203e4 <__swhatbuf_r+0x12>
 8020400:	9a01      	ldr	r2, [sp, #4]
 8020402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802040a:	425a      	negs	r2, r3
 802040c:	415a      	adcs	r2, r3
 802040e:	602a      	str	r2, [r5, #0]
 8020410:	e7ee      	b.n	80203f0 <__swhatbuf_r+0x1e>
 8020412:	2340      	movs	r3, #64	; 0x40
 8020414:	2000      	movs	r0, #0
 8020416:	6023      	str	r3, [r4, #0]
 8020418:	b016      	add	sp, #88	; 0x58
 802041a:	bd70      	pop	{r4, r5, r6, pc}

0802041c <__smakebuf_r>:
 802041c:	898b      	ldrh	r3, [r1, #12]
 802041e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020420:	079d      	lsls	r5, r3, #30
 8020422:	4606      	mov	r6, r0
 8020424:	460c      	mov	r4, r1
 8020426:	d507      	bpl.n	8020438 <__smakebuf_r+0x1c>
 8020428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802042c:	6023      	str	r3, [r4, #0]
 802042e:	6123      	str	r3, [r4, #16]
 8020430:	2301      	movs	r3, #1
 8020432:	6163      	str	r3, [r4, #20]
 8020434:	b002      	add	sp, #8
 8020436:	bd70      	pop	{r4, r5, r6, pc}
 8020438:	ab01      	add	r3, sp, #4
 802043a:	466a      	mov	r2, sp
 802043c:	f7ff ffc9 	bl	80203d2 <__swhatbuf_r>
 8020440:	9900      	ldr	r1, [sp, #0]
 8020442:	4605      	mov	r5, r0
 8020444:	4630      	mov	r0, r6
 8020446:	f7ff f921 	bl	801f68c <_malloc_r>
 802044a:	b948      	cbnz	r0, 8020460 <__smakebuf_r+0x44>
 802044c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020450:	059a      	lsls	r2, r3, #22
 8020452:	d4ef      	bmi.n	8020434 <__smakebuf_r+0x18>
 8020454:	f023 0303 	bic.w	r3, r3, #3
 8020458:	f043 0302 	orr.w	r3, r3, #2
 802045c:	81a3      	strh	r3, [r4, #12]
 802045e:	e7e3      	b.n	8020428 <__smakebuf_r+0xc>
 8020460:	4b0d      	ldr	r3, [pc, #52]	; (8020498 <__smakebuf_r+0x7c>)
 8020462:	62b3      	str	r3, [r6, #40]	; 0x28
 8020464:	89a3      	ldrh	r3, [r4, #12]
 8020466:	6020      	str	r0, [r4, #0]
 8020468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802046c:	81a3      	strh	r3, [r4, #12]
 802046e:	9b00      	ldr	r3, [sp, #0]
 8020470:	6163      	str	r3, [r4, #20]
 8020472:	9b01      	ldr	r3, [sp, #4]
 8020474:	6120      	str	r0, [r4, #16]
 8020476:	b15b      	cbz	r3, 8020490 <__smakebuf_r+0x74>
 8020478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802047c:	4630      	mov	r0, r6
 802047e:	f000 f891 	bl	80205a4 <_isatty_r>
 8020482:	b128      	cbz	r0, 8020490 <__smakebuf_r+0x74>
 8020484:	89a3      	ldrh	r3, [r4, #12]
 8020486:	f023 0303 	bic.w	r3, r3, #3
 802048a:	f043 0301 	orr.w	r3, r3, #1
 802048e:	81a3      	strh	r3, [r4, #12]
 8020490:	89a0      	ldrh	r0, [r4, #12]
 8020492:	4305      	orrs	r5, r0
 8020494:	81a5      	strh	r5, [r4, #12]
 8020496:	e7cd      	b.n	8020434 <__smakebuf_r+0x18>
 8020498:	08020231 	.word	0x08020231

0802049c <__malloc_lock>:
 802049c:	4801      	ldr	r0, [pc, #4]	; (80204a4 <__malloc_lock+0x8>)
 802049e:	f7ff b860 	b.w	801f562 <__retarget_lock_acquire_recursive>
 80204a2:	bf00      	nop
 80204a4:	20024a11 	.word	0x20024a11

080204a8 <__malloc_unlock>:
 80204a8:	4801      	ldr	r0, [pc, #4]	; (80204b0 <__malloc_unlock+0x8>)
 80204aa:	f7ff b85c 	b.w	801f566 <__retarget_lock_release_recursive>
 80204ae:	bf00      	nop
 80204b0:	20024a11 	.word	0x20024a11

080204b4 <__sread>:
 80204b4:	b510      	push	{r4, lr}
 80204b6:	460c      	mov	r4, r1
 80204b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204bc:	f000 f894 	bl	80205e8 <_read_r>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	bfab      	itete	ge
 80204c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80204c6:	89a3      	ldrhlt	r3, [r4, #12]
 80204c8:	181b      	addge	r3, r3, r0
 80204ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80204ce:	bfac      	ite	ge
 80204d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80204d2:	81a3      	strhlt	r3, [r4, #12]
 80204d4:	bd10      	pop	{r4, pc}

080204d6 <__swrite>:
 80204d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204da:	461f      	mov	r7, r3
 80204dc:	898b      	ldrh	r3, [r1, #12]
 80204de:	05db      	lsls	r3, r3, #23
 80204e0:	4605      	mov	r5, r0
 80204e2:	460c      	mov	r4, r1
 80204e4:	4616      	mov	r6, r2
 80204e6:	d505      	bpl.n	80204f4 <__swrite+0x1e>
 80204e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204ec:	2302      	movs	r3, #2
 80204ee:	2200      	movs	r2, #0
 80204f0:	f000 f868 	bl	80205c4 <_lseek_r>
 80204f4:	89a3      	ldrh	r3, [r4, #12]
 80204f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80204fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80204fe:	81a3      	strh	r3, [r4, #12]
 8020500:	4632      	mov	r2, r6
 8020502:	463b      	mov	r3, r7
 8020504:	4628      	mov	r0, r5
 8020506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802050a:	f000 b817 	b.w	802053c <_write_r>

0802050e <__sseek>:
 802050e:	b510      	push	{r4, lr}
 8020510:	460c      	mov	r4, r1
 8020512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020516:	f000 f855 	bl	80205c4 <_lseek_r>
 802051a:	1c43      	adds	r3, r0, #1
 802051c:	89a3      	ldrh	r3, [r4, #12]
 802051e:	bf15      	itete	ne
 8020520:	6560      	strne	r0, [r4, #84]	; 0x54
 8020522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802052a:	81a3      	strheq	r3, [r4, #12]
 802052c:	bf18      	it	ne
 802052e:	81a3      	strhne	r3, [r4, #12]
 8020530:	bd10      	pop	{r4, pc}

08020532 <__sclose>:
 8020532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020536:	f000 b813 	b.w	8020560 <_close_r>
	...

0802053c <_write_r>:
 802053c:	b538      	push	{r3, r4, r5, lr}
 802053e:	4d07      	ldr	r5, [pc, #28]	; (802055c <_write_r+0x20>)
 8020540:	4604      	mov	r4, r0
 8020542:	4608      	mov	r0, r1
 8020544:	4611      	mov	r1, r2
 8020546:	2200      	movs	r2, #0
 8020548:	602a      	str	r2, [r5, #0]
 802054a:	461a      	mov	r2, r3
 802054c:	f7e3 fde6 	bl	800411c <_write>
 8020550:	1c43      	adds	r3, r0, #1
 8020552:	d102      	bne.n	802055a <_write_r+0x1e>
 8020554:	682b      	ldr	r3, [r5, #0]
 8020556:	b103      	cbz	r3, 802055a <_write_r+0x1e>
 8020558:	6023      	str	r3, [r4, #0]
 802055a:	bd38      	pop	{r3, r4, r5, pc}
 802055c:	20024bb4 	.word	0x20024bb4

08020560 <_close_r>:
 8020560:	b538      	push	{r3, r4, r5, lr}
 8020562:	4d06      	ldr	r5, [pc, #24]	; (802057c <_close_r+0x1c>)
 8020564:	2300      	movs	r3, #0
 8020566:	4604      	mov	r4, r0
 8020568:	4608      	mov	r0, r1
 802056a:	602b      	str	r3, [r5, #0]
 802056c:	f7e3 fde4 	bl	8004138 <_close>
 8020570:	1c43      	adds	r3, r0, #1
 8020572:	d102      	bne.n	802057a <_close_r+0x1a>
 8020574:	682b      	ldr	r3, [r5, #0]
 8020576:	b103      	cbz	r3, 802057a <_close_r+0x1a>
 8020578:	6023      	str	r3, [r4, #0]
 802057a:	bd38      	pop	{r3, r4, r5, pc}
 802057c:	20024bb4 	.word	0x20024bb4

08020580 <_fstat_r>:
 8020580:	b538      	push	{r3, r4, r5, lr}
 8020582:	4d07      	ldr	r5, [pc, #28]	; (80205a0 <_fstat_r+0x20>)
 8020584:	2300      	movs	r3, #0
 8020586:	4604      	mov	r4, r0
 8020588:	4608      	mov	r0, r1
 802058a:	4611      	mov	r1, r2
 802058c:	602b      	str	r3, [r5, #0]
 802058e:	f7e3 fdd6 	bl	800413e <_fstat>
 8020592:	1c43      	adds	r3, r0, #1
 8020594:	d102      	bne.n	802059c <_fstat_r+0x1c>
 8020596:	682b      	ldr	r3, [r5, #0]
 8020598:	b103      	cbz	r3, 802059c <_fstat_r+0x1c>
 802059a:	6023      	str	r3, [r4, #0]
 802059c:	bd38      	pop	{r3, r4, r5, pc}
 802059e:	bf00      	nop
 80205a0:	20024bb4 	.word	0x20024bb4

080205a4 <_isatty_r>:
 80205a4:	b538      	push	{r3, r4, r5, lr}
 80205a6:	4d06      	ldr	r5, [pc, #24]	; (80205c0 <_isatty_r+0x1c>)
 80205a8:	2300      	movs	r3, #0
 80205aa:	4604      	mov	r4, r0
 80205ac:	4608      	mov	r0, r1
 80205ae:	602b      	str	r3, [r5, #0]
 80205b0:	f7e3 fdca 	bl	8004148 <_isatty>
 80205b4:	1c43      	adds	r3, r0, #1
 80205b6:	d102      	bne.n	80205be <_isatty_r+0x1a>
 80205b8:	682b      	ldr	r3, [r5, #0]
 80205ba:	b103      	cbz	r3, 80205be <_isatty_r+0x1a>
 80205bc:	6023      	str	r3, [r4, #0]
 80205be:	bd38      	pop	{r3, r4, r5, pc}
 80205c0:	20024bb4 	.word	0x20024bb4

080205c4 <_lseek_r>:
 80205c4:	b538      	push	{r3, r4, r5, lr}
 80205c6:	4d07      	ldr	r5, [pc, #28]	; (80205e4 <_lseek_r+0x20>)
 80205c8:	4604      	mov	r4, r0
 80205ca:	4608      	mov	r0, r1
 80205cc:	4611      	mov	r1, r2
 80205ce:	2200      	movs	r2, #0
 80205d0:	602a      	str	r2, [r5, #0]
 80205d2:	461a      	mov	r2, r3
 80205d4:	f7e3 fdba 	bl	800414c <_lseek>
 80205d8:	1c43      	adds	r3, r0, #1
 80205da:	d102      	bne.n	80205e2 <_lseek_r+0x1e>
 80205dc:	682b      	ldr	r3, [r5, #0]
 80205de:	b103      	cbz	r3, 80205e2 <_lseek_r+0x1e>
 80205e0:	6023      	str	r3, [r4, #0]
 80205e2:	bd38      	pop	{r3, r4, r5, pc}
 80205e4:	20024bb4 	.word	0x20024bb4

080205e8 <_read_r>:
 80205e8:	b538      	push	{r3, r4, r5, lr}
 80205ea:	4d07      	ldr	r5, [pc, #28]	; (8020608 <_read_r+0x20>)
 80205ec:	4604      	mov	r4, r0
 80205ee:	4608      	mov	r0, r1
 80205f0:	4611      	mov	r1, r2
 80205f2:	2200      	movs	r2, #0
 80205f4:	602a      	str	r2, [r5, #0]
 80205f6:	461a      	mov	r2, r3
 80205f8:	f7e3 fd82 	bl	8004100 <_read>
 80205fc:	1c43      	adds	r3, r0, #1
 80205fe:	d102      	bne.n	8020606 <_read_r+0x1e>
 8020600:	682b      	ldr	r3, [r5, #0]
 8020602:	b103      	cbz	r3, 8020606 <_read_r+0x1e>
 8020604:	6023      	str	r3, [r4, #0]
 8020606:	bd38      	pop	{r3, r4, r5, pc}
 8020608:	20024bb4 	.word	0x20024bb4

0802060c <_init>:
 802060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802060e:	bf00      	nop
 8020610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020612:	bc08      	pop	{r3}
 8020614:	469e      	mov	lr, r3
 8020616:	4770      	bx	lr

08020618 <_fini>:
 8020618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802061a:	bf00      	nop
 802061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802061e:	bc08      	pop	{r3}
 8020620:	469e      	mov	lr, r3
 8020622:	4770      	bx	lr
